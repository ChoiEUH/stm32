
qmc_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005868  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a70  08005a70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a78  08005a78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a7c  08005a7c  00015a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000110  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c060  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a74  00000000  00000000  0002c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000940  00000000  00000000  0002e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226a7  00000000  00000000  0002ee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd54  00000000  00000000  0005152f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2110  00000000  00000000  0005e283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130393  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c4c  00000000  00000000  001303e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005a00 	.word	0x08005a00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005a00 	.word	0x08005a00

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <QMC_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void QMC_init(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af04      	add	r7, sp, #16
	uint8_t reset;

	reset = 0x1D;
 80005aa:	231d      	movs	r3, #29
 80005ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,DEV_ADDR,QMC_CONT,1,&reset,1,1000);
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	2301      	movs	r3, #1
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	2209      	movs	r2, #9
 80005c0:	211a      	movs	r1, #26
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <QMC_init+0x4c>)
 80005c4:	f001 f89c 	bl	8001700 <HAL_I2C_Mem_Write>

	reset = 0x01;
 80005c8:	2301      	movs	r3, #1
 80005ca:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,DEV_ADDR,QMC_SR,1,&reset,1,1000);
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	9302      	str	r3, [sp, #8]
 80005d2:	2301      	movs	r3, #1
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	220b      	movs	r2, #11
 80005de:	211a      	movs	r1, #26
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <QMC_init+0x4c>)
 80005e2:	f001 f88d 	bl	8001700 <HAL_I2C_Mem_Write>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000d0 	.word	0x200000d0

080005f4 <QMC_Read>:

void QMC_Read(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af04      	add	r7, sp, #16
	uint8_t flag;
	HAL_I2C_Mem_Read(&hi2c1,DEV_ADDR,QMC_STA,1,&flag,1,1000);
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	9302      	str	r3, [sp, #8]
 8000600:	2301      	movs	r3, #1
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	1dfb      	adds	r3, r7, #7
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	2206      	movs	r2, #6
 800060c:	211a      	movs	r1, #26
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <QMC_Read+0x48>)
 8000610:	f001 f970 	bl	80018f4 <HAL_I2C_Mem_Read>
	if(flag & 0x01){
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d009      	beq.n	8000632 <QMC_Read+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1,DEV_ADDR,DATA_OUT,1,data,6);
 800061e:	2306      	movs	r3, #6
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <QMC_Read+0x4c>)
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2301      	movs	r3, #1
 8000628:	2200      	movs	r2, #0
 800062a:	211a      	movs	r1, #26
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <QMC_Read+0x48>)
 800062e:	f001 fb87 	bl	8001d40 <HAL_I2C_Mem_Read_IT>
	}
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000d0 	.word	0x200000d0
 8000640:	200000c8 	.word	0x200000c8

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fb77 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f83b 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f90d 	bl	8000870 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000656:	f000 f8e1 	bl	800081c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800065a:	f000 f89f 	bl	800079c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
QMC_init();
 800065e:	f7ff ffa1 	bl	80005a4 <QMC_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
QMC_Read();
 8000662:	f7ff ffc7 	bl	80005f4 <QMC_Read>
HAL_Delay(10);
 8000666:	200a      	movs	r0, #10
 8000668:	f000 fbda 	bl	8000e20 <HAL_Delay>
sprintf(buf,"%d %d %d\r\n",X_OUT,Y_OUT,Z_OUT);
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <main+0x6c>)
 800066e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000672:	461a      	mov	r2, r3
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <main+0x70>)
 8000676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800067a:	4619      	mov	r1, r3
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <main+0x74>)
 800067e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	460b      	mov	r3, r1
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <main+0x78>)
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <main+0x7c>)
 800068a:	f004 fd4b 	bl	8005124 <siprintf>
HAL_UART_Transmit(&huart3,(uint8_t *)buf,strlen(buf),0xFFFF);
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <main+0x7c>)
 8000690:	f7ff fdae 	bl	80001f0 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800069c:	4908      	ldr	r1, [pc, #32]	; (80006c0 <main+0x7c>)
 800069e:	4809      	ldr	r0, [pc, #36]	; (80006c4 <main+0x80>)
 80006a0:	f004 f999 	bl	80049d6 <HAL_UART_Transmit>
HAL_Delay(500);
 80006a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a8:	f000 fbba 	bl	8000e20 <HAL_Delay>
  {
 80006ac:	e7d9      	b.n	8000662 <main+0x1e>
 80006ae:	bf00      	nop
 80006b0:	2000008c 	.word	0x2000008c
 80006b4:	2000008e 	.word	0x2000008e
 80006b8:	20000090 	.word	0x20000090
 80006bc:	08005a18 	.word	0x08005a18
 80006c0:	20000094 	.word	0x20000094
 80006c4:	20000124 	.word	0x20000124

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fd1c 	bl	8005114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000728:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800073c:	23a8      	movs	r3, #168	; 0xa8
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fc5d 	bl	800400c <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f972 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f003 febe 	bl	80044fc <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f95b 	bl	8000a40 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C1_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_I2C1_Init+0x74>)
 80007da:	f000 fe4d 	bl	8001478 <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 f92c 	bl	8000a40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ec:	f003 fb92 	bl	8003f14 <HAL_I2CEx_ConfigAnalogFilter>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007f6:	f000 f923 	bl	8000a40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_I2C1_Init+0x74>)
 80007fe:	f003 fbc5 	bl	8003f8c <HAL_I2CEx_ConfigDigitalFilter>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 f91a 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000d0 	.word	0x200000d0
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_USART3_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000854:	f004 f872 	bl	800493c <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f8ef 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000124 	.word	0x20000124
 800086c:	40004800 	.word	0x40004800

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a4b      	ldr	r2, [pc, #300]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a44      	ldr	r2, [pc, #272]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b42      	ldr	r3, [pc, #264]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a36      	ldr	r2, [pc, #216]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a2f      	ldr	r2, [pc, #188]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a28      	ldr	r2, [pc, #160]	; (80009bc <MX_GPIO_Init+0x14c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f244 0181 	movw	r1, #16513	; 0x4081
 8000934:	4822      	ldr	r0, [pc, #136]	; (80009c0 <MX_GPIO_Init+0x150>)
 8000936:	f000 fd85 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	4821      	ldr	r0, [pc, #132]	; (80009c4 <MX_GPIO_Init+0x154>)
 8000940:	f000 fd80 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <MX_GPIO_Init+0x158>)
 800095c:	f000 fbc6 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000960:	f244 0381 	movw	r3, #16513	; 0x4081
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_GPIO_Init+0x150>)
 800097a:	f000 fbb7 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <MX_GPIO_Init+0x154>)
 8000996:	f000 fba9 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_GPIO_Init+0x154>)
 80009ae:	f000 fb9d 	bl	80010ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40020800 	.word	0x40020800

080009cc <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_I2C_MemRxCpltCallback+0x60>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d120      	bne.n	8000a20 <HAL_I2C_MemRxCpltCallback+0x54>
		 X_OUT = (int16_t)(data[1] << 8)|data[0];
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_I2C_MemRxCpltCallback+0x64>)
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_I2C_MemRxCpltCallback+0x64>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_I2C_MemRxCpltCallback+0x68>)
 80009f2:	801a      	strh	r2, [r3, #0]
	     Y_OUT = (int16_t)(data[3] << 8)|data[2];
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_I2C_MemRxCpltCallback+0x64>)
 80009f6:	78db      	ldrb	r3, [r3, #3]
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	b21a      	sxth	r2, r3
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_I2C_MemRxCpltCallback+0x64>)
 80009fe:	789b      	ldrb	r3, [r3, #2]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8000a08:	801a      	strh	r2, [r3, #0]
	     Z_OUT = (int16_t)(data[5] << 8)|data[4];
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_I2C_MemRxCpltCallback+0x64>)
 8000a0c:	795b      	ldrb	r3, [r3, #5]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_I2C_MemRxCpltCallback+0x64>)
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_I2C_MemRxCpltCallback+0x70>)
 8000a1e:	801a      	strh	r2, [r3, #0]

	}
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	200000c8 	.word	0x200000c8
 8000a34:	2000008c 	.word	0x2000008c
 8000a38:	2000008e 	.word	0x2000008e
 8000a3c:	20000090 	.word	0x20000090

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <HAL_I2C_MspInit+0xa4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d13c      	bne.n	8000b38 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae0:	2312      	movs	r3, #18
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aec:	2304      	movs	r3, #4
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <HAL_I2C_MspInit+0xac>)
 8000af8:	f000 faf8 	bl	80010ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	201f      	movs	r0, #31
 8000b1e:	f000 fa7e 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b22:	201f      	movs	r0, #31
 8000b24:	f000 fa97 	bl	8001056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2020      	movs	r0, #32
 8000b2e:	f000 fa76 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b32:	2020      	movs	r0, #32
 8000b34:	f000 fa8f 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_UART_MspInit+0x8c>)
 8000bc4:	f000 fa92 	bl	80010ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40004800 	.word	0x40004800
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020c00 	.word	0x40020c00

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f8da 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <I2C1_EV_IRQHandler+0x10>)
 8000c36:	f001 f941 	bl	8001ebc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000d0 	.word	0x200000d0

08000c44 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <I2C1_ER_IRQHandler+0x10>)
 8000c4a:	f001 faa8 	bl	800219e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000d0 	.word	0x200000d0

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f004 fa1a 	bl	80050c0 <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20030000 	.word	0x20030000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	20000168 	.word	0x20000168
 8000cc0:	20000180 	.word	0x20000180

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d04:	4c0b      	ldr	r4, [pc, #44]	; (8000d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d12:	f7ff ffd7 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f004 f9d9 	bl	80050cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fc93 	bl	8000644 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d2c:	08005a80 	.word	0x08005a80
  ldr r2, =_sbss
 8000d30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d34:	20000180 	.word	0x20000180

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f94f 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe6c 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f967 	bl	8001072 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f92f 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	2000016c 	.word	0x2000016c

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000016c 	.word	0x2000016c

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d004      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e00c      	b.n	80010c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2205      	movs	r2, #5
 80010ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0201 	bic.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010dc:	b2db      	uxtb	r3, r3
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	e177      	b.n	80013f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8166 	bne.w	80013f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d005      	beq.n	800113e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	2b02      	cmp	r3, #2
 800113c:	d130      	bne.n	80011a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 0201 	and.w	r2, r3, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d017      	beq.n	80011dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d123      	bne.n	8001230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	69b9      	ldr	r1, [r7, #24]
 800122c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80c0 	beq.w	80013f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_GPIO_Init+0x324>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a65      	ldr	r2, [pc, #404]	; (8001410 <HAL_GPIO_Init+0x324>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_GPIO_Init+0x324>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128e:	4a61      	ldr	r2, [pc, #388]	; (8001414 <HAL_GPIO_Init+0x328>)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_GPIO_Init+0x32c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d037      	beq.n	800132a <HAL_GPIO_Init+0x23e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a57      	ldr	r2, [pc, #348]	; (800141c <HAL_GPIO_Init+0x330>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d031      	beq.n	8001326 <HAL_GPIO_Init+0x23a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a56      	ldr	r2, [pc, #344]	; (8001420 <HAL_GPIO_Init+0x334>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d02b      	beq.n	8001322 <HAL_GPIO_Init+0x236>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a55      	ldr	r2, [pc, #340]	; (8001424 <HAL_GPIO_Init+0x338>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d025      	beq.n	800131e <HAL_GPIO_Init+0x232>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a54      	ldr	r2, [pc, #336]	; (8001428 <HAL_GPIO_Init+0x33c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01f      	beq.n	800131a <HAL_GPIO_Init+0x22e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a53      	ldr	r2, [pc, #332]	; (800142c <HAL_GPIO_Init+0x340>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x22a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a52      	ldr	r2, [pc, #328]	; (8001430 <HAL_GPIO_Init+0x344>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x226>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a51      	ldr	r2, [pc, #324]	; (8001434 <HAL_GPIO_Init+0x348>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x222>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a50      	ldr	r2, [pc, #320]	; (8001438 <HAL_GPIO_Init+0x34c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x21e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_GPIO_Init+0x350>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x21a>
 8001302:	2309      	movs	r3, #9
 8001304:	e012      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001306:	230a      	movs	r3, #10
 8001308:	e010      	b.n	800132c <HAL_GPIO_Init+0x240>
 800130a:	2308      	movs	r3, #8
 800130c:	e00e      	b.n	800132c <HAL_GPIO_Init+0x240>
 800130e:	2307      	movs	r3, #7
 8001310:	e00c      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001312:	2306      	movs	r3, #6
 8001314:	e00a      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001316:	2305      	movs	r3, #5
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x240>
 800131a:	2304      	movs	r3, #4
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x240>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x240>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4935      	ldr	r1, [pc, #212]	; (8001414 <HAL_GPIO_Init+0x328>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <HAL_GPIO_Init+0x354>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136e:	4a34      	ldr	r2, [pc, #208]	; (8001440 <HAL_GPIO_Init+0x354>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <HAL_GPIO_Init+0x354>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001398:	4a29      	ldr	r2, [pc, #164]	; (8001440 <HAL_GPIO_Init+0x354>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139e:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_GPIO_Init+0x354>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c2:	4a1f      	ldr	r2, [pc, #124]	; (8001440 <HAL_GPIO_Init+0x354>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_GPIO_Init+0x354>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ec:	4a14      	ldr	r2, [pc, #80]	; (8001440 <HAL_GPIO_Init+0x354>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f ae84 	bls.w	8001108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40021800 	.word	0x40021800
 8001434:	40021c00 	.word	0x40021c00
 8001438:	40022000 	.word	0x40022000
 800143c:	40022400 	.word	0x40022400
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e12b      	b.n	80016e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fafc 	bl	8000a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2224      	movs	r2, #36	; 0x24
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014dc:	f003 fa06 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 80014e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a81      	ldr	r2, [pc, #516]	; (80016ec <HAL_I2C_Init+0x274>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d807      	bhi.n	80014fc <HAL_I2C_Init+0x84>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a80      	ldr	r2, [pc, #512]	; (80016f0 <HAL_I2C_Init+0x278>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	bf94      	ite	ls
 80014f4:	2301      	movls	r3, #1
 80014f6:	2300      	movhi	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	e006      	b.n	800150a <HAL_I2C_Init+0x92>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a7d      	ldr	r2, [pc, #500]	; (80016f4 <HAL_I2C_Init+0x27c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	bf94      	ite	ls
 8001504:	2301      	movls	r3, #1
 8001506:	2300      	movhi	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0e7      	b.n	80016e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4a78      	ldr	r2, [pc, #480]	; (80016f8 <HAL_I2C_Init+0x280>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9b      	lsrs	r3, r3, #18
 800151c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	430a      	orrs	r2, r1
 8001530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a6a      	ldr	r2, [pc, #424]	; (80016ec <HAL_I2C_Init+0x274>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d802      	bhi.n	800154c <HAL_I2C_Init+0xd4>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3301      	adds	r3, #1
 800154a:	e009      	b.n	8001560 <HAL_I2C_Init+0xe8>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a69      	ldr	r2, [pc, #420]	; (80016fc <HAL_I2C_Init+0x284>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	3301      	adds	r3, #1
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	430b      	orrs	r3, r1
 8001566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	495c      	ldr	r1, [pc, #368]	; (80016ec <HAL_I2C_Init+0x274>)
 800157c:	428b      	cmp	r3, r1
 800157e:	d819      	bhi.n	80015b4 <HAL_I2C_Init+0x13c>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e59      	subs	r1, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fbb1 f3f3 	udiv	r3, r1, r3
 800158e:	1c59      	adds	r1, r3, #1
 8001590:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001594:	400b      	ands	r3, r1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00a      	beq.n	80015b0 <HAL_I2C_Init+0x138>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1e59      	subs	r1, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ae:	e051      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e04f      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d111      	bne.n	80015e0 <HAL_I2C_Init+0x168>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	440b      	add	r3, r1
 80015ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	e012      	b.n	8001606 <HAL_I2C_Init+0x18e>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e58      	subs	r0, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	0099      	lsls	r1, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Init+0x196>
 800160a:	2301      	movs	r3, #1
 800160c:	e022      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10e      	bne.n	8001634 <HAL_I2C_Init+0x1bc>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1e58      	subs	r0, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6859      	ldr	r1, [r3, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	440b      	add	r3, r1
 8001624:	fbb0 f3f3 	udiv	r3, r0, r3
 8001628:	3301      	adds	r3, #1
 800162a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001632:	e00f      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	0099      	lsls	r1, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	6809      	ldr	r1, [r1, #0]
 8001658:	4313      	orrs	r3, r2
 800165a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6911      	ldr	r1, [r2, #16]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68d2      	ldr	r2, [r2, #12]
 800168e:	4311      	orrs	r1, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	430b      	orrs	r3, r1
 8001696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2220      	movs	r2, #32
 80016ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	000186a0 	.word	0x000186a0
 80016f0:	001e847f 	.word	0x001e847f
 80016f4:	003d08ff 	.word	0x003d08ff
 80016f8:	431bde83 	.word	0x431bde83
 80016fc:	10624dd3 	.word	0x10624dd3

08001700 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af02      	add	r7, sp, #8
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	4608      	mov	r0, r1
 800170a:	4611      	mov	r1, r2
 800170c:	461a      	mov	r2, r3
 800170e:	4603      	mov	r3, r0
 8001710:	817b      	strh	r3, [r7, #10]
 8001712:	460b      	mov	r3, r1
 8001714:	813b      	strh	r3, [r7, #8]
 8001716:	4613      	mov	r3, r2
 8001718:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800171a:	f7ff fb75 	bl	8000e08 <HAL_GetTick>
 800171e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b20      	cmp	r3, #32
 800172a:	f040 80d9 	bne.w	80018e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2319      	movs	r3, #25
 8001734:	2201      	movs	r2, #1
 8001736:	496d      	ldr	r1, [pc, #436]	; (80018ec <HAL_I2C_Mem_Write+0x1ec>)
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f002 f9c1 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001744:	2302      	movs	r3, #2
 8001746:	e0cc      	b.n	80018e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_I2C_Mem_Write+0x56>
 8001752:	2302      	movs	r3, #2
 8001754:	e0c5      	b.n	80018e2 <HAL_I2C_Mem_Write+0x1e2>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b01      	cmp	r3, #1
 800176a:	d007      	beq.n	800177c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2221      	movs	r2, #33	; 0x21
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2240      	movs	r2, #64	; 0x40
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a3a      	ldr	r2, [r7, #32]
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a4d      	ldr	r2, [pc, #308]	; (80018f0 <HAL_I2C_Mem_Write+0x1f0>)
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017be:	88f8      	ldrh	r0, [r7, #6]
 80017c0:	893a      	ldrh	r2, [r7, #8]
 80017c2:	8979      	ldrh	r1, [r7, #10]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4603      	mov	r3, r0
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f001 ff50 	bl	8003674 <I2C_RequestMemoryWrite>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d052      	beq.n	8001880 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e081      	b.n	80018e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f002 fa42 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00d      	beq.n	800180a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d107      	bne.n	8001806 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001804:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06b      	b.n	80018e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001824:	3b01      	subs	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	3b01      	subs	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b04      	cmp	r3, #4
 8001846:	d11b      	bne.n	8001880 <HAL_I2C_Mem_Write+0x180>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d017      	beq.n	8001880 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001876:	b29b      	uxth	r3, r3
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1aa      	bne.n	80017de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f002 fa2e 	bl	8003cee <I2C_WaitOnBTFFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00d      	beq.n	80018b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	2b04      	cmp	r3, #4
 800189e:	d107      	bne.n	80018b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e016      	b.n	80018e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	e000      	b.n	80018e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018e0:	2302      	movs	r3, #2
  }
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	00100002 	.word	0x00100002
 80018f0:	ffff0000 	.word	0xffff0000

080018f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4603      	mov	r3, r0
 8001904:	817b      	strh	r3, [r7, #10]
 8001906:	460b      	mov	r3, r1
 8001908:	813b      	strh	r3, [r7, #8]
 800190a:	4613      	mov	r3, r2
 800190c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800190e:	f7ff fa7b 	bl	8000e08 <HAL_GetTick>
 8001912:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b20      	cmp	r3, #32
 800191e:	f040 8208 	bne.w	8001d32 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2319      	movs	r3, #25
 8001928:	2201      	movs	r2, #1
 800192a:	497b      	ldr	r1, [pc, #492]	; (8001b18 <HAL_I2C_Mem_Read+0x224>)
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f002 f8c7 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001938:	2302      	movs	r3, #2
 800193a:	e1fb      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_I2C_Mem_Read+0x56>
 8001946:	2302      	movs	r3, #2
 8001948:	e1f4      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d007      	beq.n	8001970 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2222      	movs	r2, #34	; 0x22
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2240      	movs	r2, #64	; 0x40
 800198c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a5b      	ldr	r2, [pc, #364]	; (8001b1c <HAL_I2C_Mem_Read+0x228>)
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019b2:	88f8      	ldrh	r0, [r7, #6]
 80019b4:	893a      	ldrh	r2, [r7, #8]
 80019b6:	8979      	ldrh	r1, [r7, #10]
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4603      	mov	r3, r0
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f001 feec 	bl	80037a0 <I2C_RequestMemoryRead>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e1b0      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d113      	bne.n	8001a02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	623b      	str	r3, [r7, #32]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e184      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d11b      	bne.n	8001a42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e164      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d11b      	bne.n	8001a82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	e144      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a98:	e138      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	f200 80f1 	bhi.w	8001c86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d123      	bne.n	8001af4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f002 f98f 	bl	8003dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e139      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001af2:	e10b      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d14e      	bne.n	8001b9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b02:	2200      	movs	r2, #0
 8001b04:	4906      	ldr	r1, [pc, #24]	; (8001b20 <HAL_I2C_Mem_Read+0x22c>)
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f001 ffda 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e10e      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
 8001b16:	bf00      	nop
 8001b18:	00100002 	.word	0x00100002
 8001b1c:	ffff0000 	.word	0xffff0000
 8001b20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b98:	e0b8      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4966      	ldr	r1, [pc, #408]	; (8001d3c <HAL_I2C_Mem_Read+0x448>)
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f001 ff8b 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0bf      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	494f      	ldr	r1, [pc, #316]	; (8001d3c <HAL_I2C_Mem_Read+0x448>)
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f001 ff5d 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e091      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c84:	e042      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f002 f8a2 	bl	8003dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e04c      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d118      	bne.n	8001d0c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f47f aec2 	bne.w	8001a9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
  }
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	00010004 	.word	0x00010004

08001d40 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	817b      	strh	r3, [r7, #10]
 8001d52:	460b      	mov	r3, r1
 8001d54:	813b      	strh	r3, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	f040 809a 	bne.w	8001ea0 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_I2C_Mem_Read_IT+0x170>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	4a50      	ldr	r2, [pc, #320]	; (8001eb4 <HAL_I2C_Mem_Read_IT+0x174>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0a1a      	lsrs	r2, r3, #8
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	009a      	lsls	r2, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f043 0220 	orr.w	r2, r3, #32
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e070      	b.n	8001ea2 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d0db      	beq.n	8001d86 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_I2C_Mem_Read_IT+0x9c>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e062      	b.n	8001ea2 <HAL_I2C_Mem_Read_IT+0x162>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d007      	beq.n	8001e02 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e10:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2222      	movs	r2, #34	; 0x22
 8001e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2240      	movs	r2, #64	; 0x40
 8001e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a3a      	ldr	r2, [r7, #32]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_I2C_Mem_Read_IT+0x178>)
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001e44:	897a      	ldrh	r2, [r7, #10]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001e4a:	893a      	ldrh	r2, [r7, #8]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001e9a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e000      	b.n	8001ea2 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001ea0:	2302      	movs	r3, #2
  }
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	14f8b589 	.word	0x14f8b589
 8001eb8:	ffff0000 	.word	0xffff0000

08001ebc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001edc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d003      	beq.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x38>
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b40      	cmp	r3, #64	; 0x40
 8001ef0:	f040 80c1 	bne.w	8002076 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_I2C_EV_IRQHandler+0x6e>
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001f14:	d003      	beq.n	8001f1e <HAL_I2C_EV_IRQHandler+0x62>
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_EV_IRQHandler+0x66>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x68>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	f000 8132 	beq.w	800218e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00c      	beq.n	8001f4e <HAL_I2C_EV_IRQHandler+0x92>
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	0a5b      	lsrs	r3, r3, #9
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f001 ffcc 	bl	8003ede <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fd79 	bl	8002a3e <I2C_Master_SB>
 8001f4c:	e092      	b.n	8002074 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_I2C_EV_IRQHandler+0xb2>
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	0a5b      	lsrs	r3, r3, #9
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fdef 	bl	8002b4a <I2C_Master_ADD10>
 8001f6c:	e082      	b.n	8002074 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_I2C_EV_IRQHandler+0xd2>
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	0a5b      	lsrs	r3, r3, #9
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fe09 	bl	8002b9e <I2C_Master_ADDR>
 8001f8c:	e072      	b.n	8002074 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03b      	beq.n	8002012 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fa8:	f000 80f3 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	09db      	lsrs	r3, r3, #7
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00f      	beq.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	0a9b      	lsrs	r3, r3, #10
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d009      	beq.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d103      	bne.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f9e9 	bl	80023a8 <I2C_MasterTransmit_TXE>
 8001fd6:	e04d      	b.n	8002074 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80d6 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	0a5b      	lsrs	r3, r3, #9
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80cf 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ff4:	7bbb      	ldrb	r3, [r7, #14]
 8001ff6:	2b21      	cmp	r3, #33	; 0x21
 8001ff8:	d103      	bne.n	8002002 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fa70 	bl	80024e0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002000:	e0c7      	b.n	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	2b40      	cmp	r3, #64	; 0x40
 8002006:	f040 80c4 	bne.w	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fade 	bl	80025cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002010:	e0bf      	b.n	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002020:	f000 80b7 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	099b      	lsrs	r3, r3, #6
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00f      	beq.n	8002050 <HAL_I2C_EV_IRQHandler+0x194>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	0a9b      	lsrs	r3, r3, #10
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HAL_I2C_EV_IRQHandler+0x194>
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fb53 	bl	80026f4 <I2C_MasterReceive_RXNE>
 800204e:	e011      	b.n	8002074 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 809a 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	0a5b      	lsrs	r3, r3, #9
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8093 	beq.w	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fbfc 	bl	800286a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002072:	e08e      	b.n	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002074:	e08d      	b.n	8002192 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d004      	beq.n	8002088 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e007      	b.n	8002098 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	085b      	lsrs	r3, r3, #1
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d012      	beq.n	80020ca <HAL_I2C_EV_IRQHandler+0x20e>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	0a5b      	lsrs	r3, r3, #9
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00c      	beq.n	80020ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80020c0:	69b9      	ldr	r1, [r7, #24]
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 ffba 	bl	800303c <I2C_Slave_ADDR>
 80020c8:	e066      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_I2C_EV_IRQHandler+0x22e>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	0a5b      	lsrs	r3, r3, #9
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fff4 	bl	80030d0 <I2C_Slave_STOPF>
 80020e8:	e056      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	2b21      	cmp	r3, #33	; 0x21
 80020ee:	d002      	beq.n	80020f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	2b29      	cmp	r3, #41	; 0x29
 80020f4:	d125      	bne.n	8002142 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	09db      	lsrs	r3, r3, #7
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00f      	beq.n	8002122 <HAL_I2C_EV_IRQHandler+0x266>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	0a9b      	lsrs	r3, r3, #10
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <HAL_I2C_EV_IRQHandler+0x266>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fed0 	bl	8002ec0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002120:	e039      	b.n	8002196 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d033      	beq.n	8002196 <HAL_I2C_EV_IRQHandler+0x2da>
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	0a5b      	lsrs	r3, r3, #9
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d02d      	beq.n	8002196 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fefd 	bl	8002f3a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002140:	e029      	b.n	8002196 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00f      	beq.n	800216e <HAL_I2C_EV_IRQHandler+0x2b2>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	0a9b      	lsrs	r3, r3, #10
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_I2C_EV_IRQHandler+0x2b2>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 ff08 	bl	8002f7c <I2C_SlaveReceive_RXNE>
 800216c:	e014      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00e      	beq.n	8002198 <HAL_I2C_EV_IRQHandler+0x2dc>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	0a5b      	lsrs	r3, r3, #9
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 ff36 	bl	8002ff8 <I2C_SlaveReceive_BTF>
 800218c:	e004      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800218e:	bf00      	nop
 8002190:	e002      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002192:	bf00      	nop
 8002194:	e000      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002196:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08a      	sub	sp, #40	; 0x28
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00e      	beq.n	80021ec <HAL_I2C_ER_IRQHandler+0x4e>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d008      	beq.n	80021ec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	0a5b      	lsrs	r3, r3, #9
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00e      	beq.n	8002216 <HAL_I2C_ER_IRQHandler+0x78>
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002214:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	0a9b      	lsrs	r3, r3, #10
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d03f      	beq.n	80022a2 <HAL_I2C_ER_IRQHandler+0x104>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d039      	beq.n	80022a2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800222e:	7efb      	ldrb	r3, [r7, #27]
 8002230:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002248:	7ebb      	ldrb	r3, [r7, #26]
 800224a:	2b20      	cmp	r3, #32
 800224c:	d112      	bne.n	8002274 <HAL_I2C_ER_IRQHandler+0xd6>
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10f      	bne.n	8002274 <HAL_I2C_ER_IRQHandler+0xd6>
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	2b21      	cmp	r3, #33	; 0x21
 8002258:	d008      	beq.n	800226c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	2b29      	cmp	r3, #41	; 0x29
 800225e:	d005      	beq.n	800226c <HAL_I2C_ER_IRQHandler+0xce>
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b28      	cmp	r3, #40	; 0x28
 8002264:	d106      	bne.n	8002274 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b21      	cmp	r3, #33	; 0x21
 800226a:	d103      	bne.n	8002274 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f001 f85f 	bl	8003330 <I2C_Slave_AF>
 8002272:	e016      	b.n	80022a2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800227c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002286:	7efb      	ldrb	r3, [r7, #27]
 8002288:	2b10      	cmp	r3, #16
 800228a:	d002      	beq.n	8002292 <HAL_I2C_ER_IRQHandler+0xf4>
 800228c:	7efb      	ldrb	r3, [r7, #27]
 800228e:	2b40      	cmp	r3, #64	; 0x40
 8002290:	d107      	bne.n	80022a2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	0adb      	lsrs	r3, r3, #11
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00e      	beq.n	80022cc <HAL_I2C_ER_IRQHandler+0x12e>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80022ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f001 f896 	bl	8003410 <I2C_ITError>
  }
}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
 8002348:	4613      	mov	r3, r2
 800234a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d150      	bne.n	8002470 <I2C_MasterTransmit_TXE+0xc8>
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b21      	cmp	r3, #33	; 0x21
 80023d2:	d14d      	bne.n	8002470 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d01d      	beq.n	8002416 <I2C_MasterTransmit_TXE+0x6e>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d01a      	beq.n	8002416 <I2C_MasterTransmit_TXE+0x6e>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023e6:	d016      	beq.n	8002416 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2211      	movs	r2, #17
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff6c 	bl	80022ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002414:	e060      	b.n	80024d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002424:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002434:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d107      	bne.n	8002460 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff87 	bl	800236c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800245e:	e03b      	b.n	80024d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff3f 	bl	80022ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800246e:	e033      	b.n	80024d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b21      	cmp	r3, #33	; 0x21
 8002474:	d005      	beq.n	8002482 <I2C_MasterTransmit_TXE+0xda>
 8002476:	7bbb      	ldrb	r3, [r7, #14]
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d12d      	bne.n	80024d8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b22      	cmp	r3, #34	; 0x22
 8002480:	d12a      	bne.n	80024d8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d108      	bne.n	800249e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800249c:	e01c      	b.n	80024d8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d103      	bne.n	80024b2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f88e 	bl	80025cc <I2C_MemoryTransmit_TXE_BTF>
}
 80024b0:	e012      	b.n	80024d8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024d6:	e7ff      	b.n	80024d8 <I2C_MasterTransmit_TXE+0x130>
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b21      	cmp	r3, #33	; 0x21
 80024f8:	d164      	bne.n	80025c4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002528:	e04c      	b.n	80025c4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d01d      	beq.n	800256c <I2C_MasterTransmit_BTF+0x8c>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b20      	cmp	r3, #32
 8002534:	d01a      	beq.n	800256c <I2C_MasterTransmit_BTF+0x8c>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800253c:	d016      	beq.n	800256c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800254c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2211      	movs	r2, #17
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fec1 	bl	80022ec <HAL_I2C_MasterTxCpltCallback>
}
 800256a:	e02b      	b.n	80025c4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800257a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d107      	bne.n	80025b6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fedc 	bl	800236c <HAL_I2C_MemTxCpltCallback>
}
 80025b4:	e006      	b.n	80025c4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fe94 	bl	80022ec <HAL_I2C_MasterTxCpltCallback>
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11d      	bne.n	8002620 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d10b      	bne.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	1c9a      	adds	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002602:	e073      	b.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002608:	b29b      	uxth	r3, r3
 800260a:	121b      	asrs	r3, r3, #8
 800260c:	b2da      	uxtb	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800261e:	e065      	b.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10b      	bne.n	8002640 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	b2da      	uxtb	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800263e:	e055      	b.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002644:	2b02      	cmp	r3, #2
 8002646:	d151      	bne.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b22      	cmp	r3, #34	; 0x22
 800264c:	d10d      	bne.n	800266a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002668:	e040      	b.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d015      	beq.n	80026a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b21      	cmp	r3, #33	; 0x21
 8002678:	d112      	bne.n	80026a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800269e:	e025      	b.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d120      	bne.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x120>
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b21      	cmp	r3, #33	; 0x21
 80026ae:	d11d      	bne.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026be:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff fe40 	bl	800236c <HAL_I2C_MemTxCpltCallback>
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b22      	cmp	r3, #34	; 0x22
 8002706:	f040 80ac 	bne.w	8002862 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d921      	bls.n	800275c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b03      	cmp	r3, #3
 8002746:	f040 808c 	bne.w	8002862 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002758:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800275a:	e082      	b.n	8002862 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	2b02      	cmp	r3, #2
 8002762:	d075      	beq.n	8002850 <I2C_MasterReceive_RXNE+0x15c>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d002      	beq.n	8002770 <I2C_MasterReceive_RXNE+0x7c>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d16f      	bne.n	8002850 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f001 fafd 	bl	8003d70 <I2C_WaitOnSTOPRequestThroughIT>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d142      	bne.n	8002802 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800279a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d10a      	bne.n	80027ec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe f8f1 	bl	80009cc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027ea:	e03a      	b.n	8002862 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2212      	movs	r2, #18
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fd80 	bl	8002300 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002800:	e02f      	b.n	8002862 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002810:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fd99 	bl	8002380 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800284e:	e008      	b.n	8002862 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285e:	605a      	str	r2, [r3, #4]
}
 8002860:	e7ff      	b.n	8002862 <I2C_MasterReceive_RXNE+0x16e>
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b04      	cmp	r3, #4
 8002880:	d11b      	bne.n	80028ba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002890:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80028b8:	e0bd      	b.n	8002a36 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d129      	bne.n	8002918 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d00a      	beq.n	80028f0 <I2C_MasterReceive_BTF+0x86>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d007      	beq.n	80028f0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002916:	e08e      	b.n	8002a36 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d176      	bne.n	8002a10 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d002      	beq.n	800292e <I2C_MasterReceive_BTF+0xc4>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b10      	cmp	r3, #16
 800292c:	d108      	bne.n	8002940 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e019      	b.n	8002974 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d002      	beq.n	800294c <I2C_MasterReceive_BTF+0xe2>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d108      	bne.n	800295e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e00a      	b.n	8002974 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b10      	cmp	r3, #16
 8002962:	d007      	beq.n	8002974 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d10a      	bne.n	80029fa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fd ffea 	bl	80009cc <HAL_I2C_MemRxCpltCallback>
}
 80029f8:	e01d      	b.n	8002a36 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2212      	movs	r2, #18
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fc79 	bl	8002300 <HAL_I2C_MasterRxCpltCallback>
}
 8002a0e:	e012      	b.n	8002a36 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b40      	cmp	r3, #64	; 0x40
 8002a50:	d117      	bne.n	8002a82 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a6a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002a6c:	e067      	b.n	8002b3e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]
}
 8002a80:	e05d      	b.n	8002b3e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a8a:	d133      	bne.n	8002af4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b21      	cmp	r3, #33	; 0x21
 8002a96:	d109      	bne.n	8002aac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	e008      	b.n	8002abe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <I2C_Master_SB+0x92>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d108      	bne.n	8002ae2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d032      	beq.n	8002b3e <I2C_Master_SB+0x100>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02d      	beq.n	8002b3e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af0:	605a      	str	r2, [r3, #4]
}
 8002af2:	e024      	b.n	8002b3e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10e      	bne.n	8002b1a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	11db      	asrs	r3, r3, #7
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0306 	and.w	r3, r3, #6
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f063 030f 	orn	r3, r3, #15
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]
}
 8002b18:	e011      	b.n	8002b3e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d10d      	bne.n	8002b3e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	11db      	asrs	r3, r3, #7
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f003 0306 	and.w	r3, r3, #6
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f063 030e 	orn	r3, r3, #14
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <I2C_Master_ADD10+0x26>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <I2C_Master_ADD10+0x48>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b90:	605a      	str	r2, [r3, #4]
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b091      	sub	sp, #68	; 0x44
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b22      	cmp	r3, #34	; 0x22
 8002bc6:	f040 8169 	bne.w	8002e9c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <I2C_Master_ADDR+0x54>
 8002bd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d10b      	bne.n	8002bf2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	e160      	b.n	8002eb4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11d      	bne.n	8002c36 <I2C_Master_ADDR+0x98>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c02:	d118      	bne.n	8002c36 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c28:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	651a      	str	r2, [r3, #80]	; 0x50
 8002c34:	e13e      	b.n	8002eb4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d113      	bne.n	8002c68 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c40:	2300      	movs	r3, #0
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e115      	b.n	8002e94 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	f040 808a 	bne.w	8002d88 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c7a:	d137      	bne.n	8002cec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	d113      	bne.n	8002cc4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002caa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	e0e7      	b.n	8002e94 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	623b      	str	r3, [r7, #32]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e0d3      	b.n	8002e94 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d02e      	beq.n	8002d50 <I2C_Master_ADDR+0x1b2>
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d02b      	beq.n	8002d50 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d102      	bne.n	8002d04 <I2C_Master_ADDR+0x166>
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d125      	bne.n	8002d50 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d00e      	beq.n	8002d28 <I2C_Master_ADDR+0x18a>
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d00b      	beq.n	8002d28 <I2C_Master_ADDR+0x18a>
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d008      	beq.n	8002d28 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e007      	b.n	8002d38 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d36:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	e0a1      	b.n	8002e94 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e085      	b.n	8002e94 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d14d      	bne.n	8002e2e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d016      	beq.n	8002dc6 <I2C_Master_ADDR+0x228>
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d013      	beq.n	8002dc6 <I2C_Master_ADDR+0x228>
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d010      	beq.n	8002dc6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e007      	b.n	8002dd6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dd4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de4:	d117      	bne.n	8002e16 <I2C_Master_ADDR+0x278>
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dec:	d00b      	beq.n	8002e06 <I2C_Master_ADDR+0x268>
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d008      	beq.n	8002e06 <I2C_Master_ADDR+0x268>
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d005      	beq.n	8002e06 <I2C_Master_ADDR+0x268>
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d002      	beq.n	8002e06 <I2C_Master_ADDR+0x268>
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d107      	bne.n	8002e16 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	e032      	b.n	8002e94 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e3c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e4c:	d117      	bne.n	8002e7e <I2C_Master_ADDR+0x2e0>
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e54:	d00b      	beq.n	8002e6e <I2C_Master_ADDR+0x2d0>
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d008      	beq.n	8002e6e <I2C_Master_ADDR+0x2d0>
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d005      	beq.n	8002e6e <I2C_Master_ADDR+0x2d0>
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d002      	beq.n	8002e6e <I2C_Master_ADDR+0x2d0>
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d107      	bne.n	8002e7e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002e9a:	e00b      	b.n	8002eb4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
}
 8002eb2:	e7ff      	b.n	8002eb4 <I2C_Master_ADDR+0x316>
 8002eb4:	bf00      	nop
 8002eb6:	3744      	adds	r7, #68	; 0x44
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ece:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d02b      	beq.n	8002f32 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d114      	bne.n	8002f32 <I2C_SlaveTransmit_TXE+0x72>
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b29      	cmp	r3, #41	; 0x29
 8002f0c:	d111      	bne.n	8002f32 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2228      	movs	r2, #40	; 0x28
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff f9f1 	bl	8002314 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d011      	beq.n	8002f70 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d02c      	beq.n	8002ff0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d114      	bne.n	8002ff0 <I2C_SlaveReceive_RXNE+0x74>
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8002fca:	d111      	bne.n	8002ff0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fda:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2222      	movs	r2, #34	; 0x22
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2228      	movs	r2, #40	; 0x28
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff f99c 	bl	8002328 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d012      	beq.n	8003030 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003056:	2b28      	cmp	r3, #40	; 0x28
 8003058:	d127      	bne.n	80030aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003068:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	09db      	lsrs	r3, r3, #7
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	81bb      	strh	r3, [r7, #12]
 800308c:	e002      	b.n	8003094 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800309c:	89ba      	ldrh	r2, [r7, #12]
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff f94a 	bl	800233c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030a8:	e00e      	b.n	80030c8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312c:	d172      	bne.n	8003214 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b22      	cmp	r3, #34	; 0x22
 8003132:	d002      	beq.n	800313a <I2C_Slave_STOPF+0x6a>
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b2a      	cmp	r3, #42	; 0x2a
 8003138:	d135      	bne.n	80031a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	b29a      	uxth	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f043 0204 	orr.w	r2, r3, #4
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd ffab 	bl	80010ce <HAL_DMA_GetState>
 8003178:	4603      	mov	r3, r0
 800317a:	2b01      	cmp	r3, #1
 800317c:	d049      	beq.n	8003212 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	4a69      	ldr	r2, [pc, #420]	; (8003328 <I2C_Slave_STOPF+0x258>)
 8003184:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd ff7d 	bl	800108a <HAL_DMA_Abort_IT>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d03d      	beq.n	8003212 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031a0:	4610      	mov	r0, r2
 80031a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031a4:	e035      	b.n	8003212 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0204 	orr.w	r2, r3, #4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd ff75 	bl	80010ce <HAL_DMA_GetState>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d014      	beq.n	8003214 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ee:	4a4e      	ldr	r2, [pc, #312]	; (8003328 <I2C_Slave_STOPF+0x258>)
 80031f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd ff47 	bl	800108a <HAL_DMA_Abort_IT>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800320c:	4610      	mov	r0, r2
 800320e:	4798      	blx	r3
 8003210:	e000      	b.n	8003214 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003212:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d03e      	beq.n	800329c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d112      	bne.n	8003252 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d112      	bne.n	8003286 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0204 	orr.w	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8b3 	bl	8003410 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80032aa:	e039      	b.n	8003320 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b2a      	cmp	r3, #42	; 0x2a
 80032b0:	d109      	bne.n	80032c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2228      	movs	r2, #40	; 0x28
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff f831 	bl	8002328 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b28      	cmp	r3, #40	; 0x28
 80032d0:	d111      	bne.n	80032f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <I2C_Slave_STOPF+0x25c>)
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff f832 	bl	8002358 <HAL_I2C_ListenCpltCallback>
}
 80032f4:	e014      	b.n	8003320 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	2b22      	cmp	r3, #34	; 0x22
 80032fc:	d002      	beq.n	8003304 <I2C_Slave_STOPF+0x234>
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b22      	cmp	r3, #34	; 0x22
 8003302:	d10d      	bne.n	8003320 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff f804 	bl	8002328 <HAL_I2C_SlaveRxCpltCallback>
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	08003971 	.word	0x08003971
 800332c:	ffff0000 	.word	0xffff0000

08003330 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d002      	beq.n	8003352 <I2C_Slave_AF+0x22>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b20      	cmp	r3, #32
 8003350:	d129      	bne.n	80033a6 <I2C_Slave_AF+0x76>
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b28      	cmp	r3, #40	; 0x28
 8003356:	d126      	bne.n	80033a6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a2c      	ldr	r2, [pc, #176]	; (800340c <I2C_Slave_AF+0xdc>)
 800335c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800336c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003376:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003386:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe ffda 	bl	8002358 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80033a4:	e02e      	b.n	8003404 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b21      	cmp	r3, #33	; 0x21
 80033aa:	d126      	bne.n	80033fa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a17      	ldr	r2, [pc, #92]	; (800340c <I2C_Slave_AF+0xdc>)
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2221      	movs	r2, #33	; 0x21
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033e0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe ff8e 	bl	8002314 <HAL_I2C_SlaveTxCpltCallback>
}
 80033f8:	e004      	b.n	8003404 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003402:	615a      	str	r2, [r3, #20]
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	ffff0000 	.word	0xffff0000

08003410 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003426:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003428:	7bbb      	ldrb	r3, [r7, #14]
 800342a:	2b10      	cmp	r3, #16
 800342c:	d002      	beq.n	8003434 <I2C_ITError+0x24>
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d10a      	bne.n	800344a <I2C_ITError+0x3a>
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b22      	cmp	r3, #34	; 0x22
 8003438:	d107      	bne.n	800344a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003448:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003450:	2b28      	cmp	r3, #40	; 0x28
 8003452:	d107      	bne.n	8003464 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2228      	movs	r2, #40	; 0x28
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003462:	e015      	b.n	8003490 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003472:	d00a      	beq.n	800348a <I2C_ITError+0x7a>
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b60      	cmp	r3, #96	; 0x60
 8003478:	d007      	beq.n	800348a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349e:	d162      	bne.n	8003566 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d020      	beq.n	8003500 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	4a6a      	ldr	r2, [pc, #424]	; (800366c <I2C_ITError+0x25c>)
 80034c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fddd 	bl	800108a <HAL_DMA_Abort_IT>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8089 	beq.w	80035ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034fa:	4610      	mov	r0, r2
 80034fc:	4798      	blx	r3
 80034fe:	e074      	b.n	80035ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	4a59      	ldr	r2, [pc, #356]	; (800366c <I2C_ITError+0x25c>)
 8003506:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd fdbc 	bl	800108a <HAL_DMA_Abort_IT>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d068      	beq.n	80035ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d10b      	bne.n	800353e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003560:	4610      	mov	r0, r2
 8003562:	4798      	blx	r3
 8003564:	e041      	b.n	80035ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b60      	cmp	r3, #96	; 0x60
 8003570:	d125      	bne.n	80035be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d10b      	bne.n	80035a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fe feec 	bl	8002394 <HAL_I2C_AbortCpltCallback>
 80035bc:	e015      	b.n	80035ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d10b      	bne.n	80035e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7fe fecb 	bl	8002380 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10e      	bne.n	8003618 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800360a:	2b00      	cmp	r3, #0
 800360c:	d104      	bne.n	8003618 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d113      	bne.n	8003664 <I2C_ITError+0x254>
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2b28      	cmp	r3, #40	; 0x28
 8003640:	d110      	bne.n	8003664 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <I2C_ITError+0x260>)
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe fe7a 	bl	8002358 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	08003971 	.word	0x08003971
 8003670:	ffff0000 	.word	0xffff0000

08003674 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	4608      	mov	r0, r1
 800367e:	4611      	mov	r1, r2
 8003680:	461a      	mov	r2, r3
 8003682:	4603      	mov	r3, r0
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	460b      	mov	r3, r1
 8003688:	813b      	strh	r3, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fa08 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c4:	d103      	bne.n	80036ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e05f      	b.n	8003792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036d2:	897b      	ldrh	r3, [r7, #10]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	6a3a      	ldr	r2, [r7, #32]
 80036e6:	492d      	ldr	r1, [pc, #180]	; (800379c <I2C_RequestMemoryWrite+0x128>)
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fa40 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e04c      	b.n	8003792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003710:	6a39      	ldr	r1, [r7, #32]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 faaa 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2b04      	cmp	r3, #4
 8003724:	d107      	bne.n	8003736 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e02b      	b.n	8003792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003740:	893b      	ldrh	r3, [r7, #8]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	611a      	str	r2, [r3, #16]
 800374a:	e021      	b.n	8003790 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800374c:	893b      	ldrh	r3, [r7, #8]
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	b29b      	uxth	r3, r3
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	6a39      	ldr	r1, [r7, #32]
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fa84 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b04      	cmp	r3, #4
 8003770:	d107      	bne.n	8003782 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e005      	b.n	8003792 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003786:	893b      	ldrh	r3, [r7, #8]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	00010002 	.word	0x00010002

080037a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	460b      	mov	r3, r1
 80037b4:	813b      	strh	r3, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f96a 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003800:	d103      	bne.n	800380a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e0aa      	b.n	8003964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800381c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	6a3a      	ldr	r2, [r7, #32]
 8003822:	4952      	ldr	r1, [pc, #328]	; (800396c <I2C_RequestMemoryRead+0x1cc>)
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f9a2 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e097      	b.n	8003964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	6a39      	ldr	r1, [r7, #32]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fa0c 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00d      	beq.n	8003876 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2b04      	cmp	r3, #4
 8003860:	d107      	bne.n	8003872 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003870:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e076      	b.n	8003964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800387c:	893b      	ldrh	r3, [r7, #8]
 800387e:	b2da      	uxtb	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	611a      	str	r2, [r3, #16]
 8003886:	e021      	b.n	80038cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003888:	893b      	ldrh	r3, [r7, #8]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	b29b      	uxth	r3, r3
 800388e:	b2da      	uxtb	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003898:	6a39      	ldr	r1, [r7, #32]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f9e6 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00d      	beq.n	80038c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d107      	bne.n	80038be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e050      	b.n	8003964 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c2:	893b      	ldrh	r3, [r7, #8]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	6a39      	ldr	r1, [r7, #32]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f9cb 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d107      	bne.n	80038f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e035      	b.n	8003964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003906:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	2200      	movs	r2, #0
 8003910:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f8d3 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00d      	beq.n	800393c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392e:	d103      	bne.n	8003938 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e013      	b.n	8003964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800393c:	897b      	ldrh	r3, [r7, #10]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	6a3a      	ldr	r2, [r7, #32]
 8003950:	4906      	ldr	r1, [pc, #24]	; (800396c <I2C_RequestMemoryRead+0x1cc>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f90b 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	00010002 	.word	0x00010002

08003970 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800398a:	4b4b      	ldr	r3, [pc, #300]	; (8003ab8 <I2C_DMAAbort+0x148>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	08db      	lsrs	r3, r3, #3
 8003990:	4a4a      	ldr	r2, [pc, #296]	; (8003abc <I2C_DMAAbort+0x14c>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0a1a      	lsrs	r2, r3, #8
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	00da      	lsls	r2, r3, #3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f043 0220 	orr.w	r2, r3, #32
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80039b6:	e00a      	b.n	80039ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039cc:	d0ea      	beq.n	80039a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	2200      	movs	r2, #0
 80039dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	2200      	movs	r2, #0
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	2200      	movs	r2, #0
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	2200      	movs	r2, #0
 8003a22:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b60      	cmp	r3, #96	; 0x60
 8003a3e:	d10e      	bne.n	8003a5e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2200      	movs	r2, #0
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f7fe fc9c 	bl	8002394 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a5c:	e027      	b.n	8003aae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a64:	2b28      	cmp	r3, #40	; 0x28
 8003a66:	d117      	bne.n	8003a98 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2228      	movs	r2, #40	; 0x28
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a96:	e007      	b.n	8003aa8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003aa8:	6978      	ldr	r0, [r7, #20]
 8003aaa:	f7fe fc69 	bl	8002380 <HAL_I2C_ErrorCallback>
}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	14f8b589 	.word	0x14f8b589

08003ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad0:	e025      	b.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d021      	beq.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7fd f995 	bl	8000e08 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d116      	bne.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e023      	b.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10d      	bne.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4013      	ands	r3, r2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	e00c      	b.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bf0c      	ite	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	2300      	movne	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d0b6      	beq.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b7c:	e051      	b.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	d123      	bne.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ba6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e046      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d021      	beq.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fd f913 	bl	8000e08 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d116      	bne.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0220 	orr.w	r2, r3, #32
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e020      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d10c      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	e00b      	b.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4013      	ands	r3, r2
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d18d      	bne.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c78:	e02d      	b.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f900 	bl	8003e80 <I2C_IsAcknowledgeFailed>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e02d      	b.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d021      	beq.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fd f8b9 	bl	8000e08 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d116      	bne.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e007      	b.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d1ca      	bne.n	8003c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cfa:	e02d      	b.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f8bf 	bl	8003e80 <I2C_IsAcknowledgeFailed>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02d      	b.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d021      	beq.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7fd f878 	bl	8000e08 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e007      	b.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d1ca      	bne.n	8003cfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	08db      	lsrs	r3, r3, #3
 8003d82:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	0a1a      	lsrs	r2, r3, #8
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d107      	bne.n	8003dae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e008      	b.n	8003dc0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbc:	d0e9      	beq.n	8003d92 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	14f8b589 	.word	0x14f8b589

08003dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003de0:	e042      	b.n	8003e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d119      	bne.n	8003e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0210 	mvn.w	r2, #16
 8003df8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e029      	b.n	8003e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e24:	f7fc fff0 	bl	8000e08 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d116      	bne.n	8003e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e007      	b.n	8003e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d1b5      	bne.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e96:	d11b      	bne.n	8003ed0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ea0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003eee:	d103      	bne.n	8003ef8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ef6:	e007      	b.n	8003f08 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f00:	d102      	bne.n	8003f08 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2208      	movs	r2, #8
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d129      	bne.n	8003f7e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2224      	movs	r2, #36	; 0x24
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0210 	bic.w	r2, r2, #16
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0201 	orr.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d12a      	bne.n	8003ffc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2224      	movs	r2, #36	; 0x24
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003fc6:	89fb      	ldrh	r3, [r7, #14]
 8003fc8:	f023 030f 	bic.w	r3, r3, #15
 8003fcc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	89fb      	ldrh	r3, [r7, #14]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	89fa      	ldrh	r2, [r7, #14]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e267      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d075      	beq.n	8004116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402a:	4b88      	ldr	r3, [pc, #544]	; (800424c <HAL_RCC_OscConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b04      	cmp	r3, #4
 8004034:	d00c      	beq.n	8004050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004036:	4b85      	ldr	r3, [pc, #532]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800403e:	2b08      	cmp	r3, #8
 8004040:	d112      	bne.n	8004068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004042:	4b82      	ldr	r3, [pc, #520]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404e:	d10b      	bne.n	8004068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	4b7e      	ldr	r3, [pc, #504]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d05b      	beq.n	8004114 <HAL_RCC_OscConfig+0x108>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d157      	bne.n	8004114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e242      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0x74>
 8004072:	4b76      	ldr	r3, [pc, #472]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a75      	ldr	r2, [pc, #468]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e01d      	b.n	80040bc <HAL_RCC_OscConfig+0xb0>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x98>
 800408a:	4b70      	ldr	r3, [pc, #448]	; (800424c <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6f      	ldr	r2, [pc, #444]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b6d      	ldr	r3, [pc, #436]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6c      	ldr	r2, [pc, #432]	; (800424c <HAL_RCC_OscConfig+0x240>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e00b      	b.n	80040bc <HAL_RCC_OscConfig+0xb0>
 80040a4:	4b69      	ldr	r3, [pc, #420]	; (800424c <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a68      	ldr	r2, [pc, #416]	; (800424c <HAL_RCC_OscConfig+0x240>)
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b66      	ldr	r3, [pc, #408]	; (800424c <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a65      	ldr	r2, [pc, #404]	; (800424c <HAL_RCC_OscConfig+0x240>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fc fea0 	bl	8000e08 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fc fe9c 	bl	8000e08 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e207      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	4b5b      	ldr	r3, [pc, #364]	; (800424c <HAL_RCC_OscConfig+0x240>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0xc0>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fc fe8c 	bl	8000e08 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fc fe88 	bl	8000e08 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e1f3      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004106:	4b51      	ldr	r3, [pc, #324]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0xe8>
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d063      	beq.n	80041ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004122:	4b4a      	ldr	r3, [pc, #296]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004136:	2b08      	cmp	r3, #8
 8004138:	d11c      	bne.n	8004174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413a:	4b44      	ldr	r3, [pc, #272]	; (800424c <HAL_RCC_OscConfig+0x240>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d116      	bne.n	8004174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004146:	4b41      	ldr	r3, [pc, #260]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_RCC_OscConfig+0x152>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d001      	beq.n	800415e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e1c7      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415e:	4b3b      	ldr	r3, [pc, #236]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4937      	ldr	r1, [pc, #220]	; (800424c <HAL_RCC_OscConfig+0x240>)
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004172:	e03a      	b.n	80041ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417c:	4b34      	ldr	r3, [pc, #208]	; (8004250 <HAL_RCC_OscConfig+0x244>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004182:	f7fc fe41 	bl	8000e08 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418a:	f7fc fe3d 	bl	8000e08 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e1a8      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCC_OscConfig+0x240>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <HAL_RCC_OscConfig+0x240>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4925      	ldr	r1, [pc, #148]	; (800424c <HAL_RCC_OscConfig+0x240>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]
 80041bc:	e015      	b.n	80041ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_RCC_OscConfig+0x244>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fc fe20 	bl	8000e08 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041cc:	f7fc fe1c 	bl	8000e08 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e187      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041de:	4b1b      	ldr	r3, [pc, #108]	; (800424c <HAL_RCC_OscConfig+0x240>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d036      	beq.n	8004264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <HAL_RCC_OscConfig+0x248>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004204:	f7fc fe00 	bl	8000e08 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800420c:	f7fc fdfc 	bl	8000e08 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e167      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCC_OscConfig+0x240>)
 8004220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x200>
 800422a:	e01b      	b.n	8004264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800422c:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HAL_RCC_OscConfig+0x248>)
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004232:	f7fc fde9 	bl	8000e08 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004238:	e00e      	b.n	8004258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423a:	f7fc fde5 	bl	8000e08 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d907      	bls.n	8004258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e150      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
 800424c:	40023800 	.word	0x40023800
 8004250:	42470000 	.word	0x42470000
 8004254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004258:	4b88      	ldr	r3, [pc, #544]	; (800447c <HAL_RCC_OscConfig+0x470>)
 800425a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1ea      	bne.n	800423a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8097 	beq.w	80043a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004272:	2300      	movs	r3, #0
 8004274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004276:	4b81      	ldr	r3, [pc, #516]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	4b7d      	ldr	r3, [pc, #500]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a7c      	ldr	r2, [pc, #496]	; (800447c <HAL_RCC_OscConfig+0x470>)
 800428c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	4b7a      	ldr	r3, [pc, #488]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a2:	4b77      	ldr	r3, [pc, #476]	; (8004480 <HAL_RCC_OscConfig+0x474>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d118      	bne.n	80042e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ae:	4b74      	ldr	r3, [pc, #464]	; (8004480 <HAL_RCC_OscConfig+0x474>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a73      	ldr	r2, [pc, #460]	; (8004480 <HAL_RCC_OscConfig+0x474>)
 80042b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ba:	f7fc fda5 	bl	8000e08 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c2:	f7fc fda1 	bl	8000e08 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e10c      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d4:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_RCC_OscConfig+0x474>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d106      	bne.n	80042f6 <HAL_RCC_OscConfig+0x2ea>
 80042e8:	4b64      	ldr	r3, [pc, #400]	; (800447c <HAL_RCC_OscConfig+0x470>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	4a63      	ldr	r2, [pc, #396]	; (800447c <HAL_RCC_OscConfig+0x470>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
 80042f4:	e01c      	b.n	8004330 <HAL_RCC_OscConfig+0x324>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	d10c      	bne.n	8004318 <HAL_RCC_OscConfig+0x30c>
 80042fe:	4b5f      	ldr	r3, [pc, #380]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a5e      	ldr	r2, [pc, #376]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004304:	f043 0304 	orr.w	r3, r3, #4
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
 800430a:	4b5c      	ldr	r3, [pc, #368]	; (800447c <HAL_RCC_OscConfig+0x470>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4a5b      	ldr	r2, [pc, #364]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	6713      	str	r3, [r2, #112]	; 0x70
 8004316:	e00b      	b.n	8004330 <HAL_RCC_OscConfig+0x324>
 8004318:	4b58      	ldr	r3, [pc, #352]	; (800447c <HAL_RCC_OscConfig+0x470>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a57      	ldr	r2, [pc, #348]	; (800447c <HAL_RCC_OscConfig+0x470>)
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
 8004324:	4b55      	ldr	r3, [pc, #340]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a54      	ldr	r2, [pc, #336]	; (800447c <HAL_RCC_OscConfig+0x470>)
 800432a:	f023 0304 	bic.w	r3, r3, #4
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d015      	beq.n	8004364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004338:	f7fc fd66 	bl	8000e08 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	e00a      	b.n	8004356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004340:	f7fc fd62 	bl	8000e08 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	; 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e0cb      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004356:	4b49      	ldr	r3, [pc, #292]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ee      	beq.n	8004340 <HAL_RCC_OscConfig+0x334>
 8004362:	e014      	b.n	800438e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004364:	f7fc fd50 	bl	8000e08 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fc fd4c 	bl	8000e08 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e0b5      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004382:	4b3e      	ldr	r3, [pc, #248]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ee      	bne.n	800436c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800438e:	7dfb      	ldrb	r3, [r7, #23]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004394:	4b39      	ldr	r3, [pc, #228]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	4a38      	ldr	r2, [pc, #224]	; (800447c <HAL_RCC_OscConfig+0x470>)
 800439a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80a1 	beq.w	80044ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043aa:	4b34      	ldr	r3, [pc, #208]	; (800447c <HAL_RCC_OscConfig+0x470>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d05c      	beq.n	8004470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d141      	bne.n	8004442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043be:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCC_OscConfig+0x478>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fc fd20 	bl	8000e08 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fc fd1c 	bl	8000e08 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e087      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043de:	4b27      	ldr	r3, [pc, #156]	; (800447c <HAL_RCC_OscConfig+0x470>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	3b01      	subs	r3, #1
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	491b      	ldr	r1, [pc, #108]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_RCC_OscConfig+0x478>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441a:	f7fc fcf5 	bl	8000e08 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004422:	f7fc fcf1 	bl	8000e08 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e05c      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x416>
 8004440:	e054      	b.n	80044ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <HAL_RCC_OscConfig+0x478>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fc fcde 	bl	8000e08 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004450:	f7fc fcda 	bl	8000e08 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e045      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_RCC_OscConfig+0x470>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x444>
 800446e:	e03d      	b.n	80044ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e038      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
 800447c:	40023800 	.word	0x40023800
 8004480:	40007000 	.word	0x40007000
 8004484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCC_OscConfig+0x4ec>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d028      	beq.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d121      	bne.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d11a      	bne.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d111      	bne.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	3b01      	subs	r3, #1
 80044d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d107      	bne.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023800 	.word	0x40023800

080044fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0cc      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004510:	4b68      	ldr	r3, [pc, #416]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d90c      	bls.n	8004538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0b8      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d020      	beq.n	8004586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004550:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4a58      	ldr	r2, [pc, #352]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800455a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004568:	4b53      	ldr	r3, [pc, #332]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4a52      	ldr	r2, [pc, #328]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004574:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	494d      	ldr	r1, [pc, #308]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d044      	beq.n	800461c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d119      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e07f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d003      	beq.n	80045ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e06f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ca:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e067      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f023 0203 	bic.w	r2, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4934      	ldr	r1, [pc, #208]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fc fc0c 	bl	8000e08 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	e00a      	b.n	800460a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f4:	f7fc fc08 	bl	8000e08 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e04f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460a:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 020c 	and.w	r2, r3, #12
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	429a      	cmp	r2, r3
 800461a:	d1eb      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d20c      	bcs.n	8004644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e032      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4916      	ldr	r1, [pc, #88]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	490e      	ldr	r1, [pc, #56]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004682:	f000 f821 	bl	80046c8 <HAL_RCC_GetSysClockFreq>
 8004686:	4602      	mov	r2, r0
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	490a      	ldr	r1, [pc, #40]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004694:	5ccb      	ldrb	r3, [r1, r3]
 8004696:	fa22 f303 	lsr.w	r3, r2, r3
 800469a:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_ClockConfig+0x1c8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fc fb6c 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40023c00 	.word	0x40023c00
 80046b8:	40023800 	.word	0x40023800
 80046bc:	08005a24 	.word	0x08005a24
 80046c0:	20000000 	.word	0x20000000
 80046c4:	20000004 	.word	0x20000004

080046c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046cc:	b094      	sub	sp, #80	; 0x50
 80046ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	647b      	str	r3, [r7, #68]	; 0x44
 80046d4:	2300      	movs	r3, #0
 80046d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d8:	2300      	movs	r3, #0
 80046da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e0:	4b79      	ldr	r3, [pc, #484]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d00d      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x40>
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	f200 80e1 	bhi.w	80048b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x34>
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d003      	beq.n	8004702 <HAL_RCC_GetSysClockFreq+0x3a>
 80046fa:	e0db      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046fc:	4b73      	ldr	r3, [pc, #460]	; (80048cc <HAL_RCC_GetSysClockFreq+0x204>)
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004700:	e0db      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004702:	4b73      	ldr	r3, [pc, #460]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004706:	e0d8      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004708:	4b6f      	ldr	r3, [pc, #444]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004712:	4b6d      	ldr	r3, [pc, #436]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d063      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471e:	4b6a      	ldr	r3, [pc, #424]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	2200      	movs	r2, #0
 8004726:	63bb      	str	r3, [r7, #56]	; 0x38
 8004728:	63fa      	str	r2, [r7, #60]	; 0x3c
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004730:	633b      	str	r3, [r7, #48]	; 0x30
 8004732:	2300      	movs	r3, #0
 8004734:	637b      	str	r3, [r7, #52]	; 0x34
 8004736:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800473a:	4622      	mov	r2, r4
 800473c:	462b      	mov	r3, r5
 800473e:	f04f 0000 	mov.w	r0, #0
 8004742:	f04f 0100 	mov.w	r1, #0
 8004746:	0159      	lsls	r1, r3, #5
 8004748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474c:	0150      	lsls	r0, r2, #5
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4621      	mov	r1, r4
 8004754:	1a51      	subs	r1, r2, r1
 8004756:	6139      	str	r1, [r7, #16]
 8004758:	4629      	mov	r1, r5
 800475a:	eb63 0301 	sbc.w	r3, r3, r1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800476c:	4659      	mov	r1, fp
 800476e:	018b      	lsls	r3, r1, #6
 8004770:	4651      	mov	r1, sl
 8004772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004776:	4651      	mov	r1, sl
 8004778:	018a      	lsls	r2, r1, #6
 800477a:	4651      	mov	r1, sl
 800477c:	ebb2 0801 	subs.w	r8, r2, r1
 8004780:	4659      	mov	r1, fp
 8004782:	eb63 0901 	sbc.w	r9, r3, r1
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800479a:	4690      	mov	r8, r2
 800479c:	4699      	mov	r9, r3
 800479e:	4623      	mov	r3, r4
 80047a0:	eb18 0303 	adds.w	r3, r8, r3
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	462b      	mov	r3, r5
 80047a8:	eb49 0303 	adc.w	r3, r9, r3
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047ba:	4629      	mov	r1, r5
 80047bc:	024b      	lsls	r3, r1, #9
 80047be:	4621      	mov	r1, r4
 80047c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047c4:	4621      	mov	r1, r4
 80047c6:	024a      	lsls	r2, r1, #9
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ce:	2200      	movs	r2, #0
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047d8:	f7fb fd62 	bl	80002a0 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e4:	e058      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e6:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	2200      	movs	r2, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	4611      	mov	r1, r2
 80047f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	2300      	movs	r3, #0
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004800:	4642      	mov	r2, r8
 8004802:	464b      	mov	r3, r9
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	0159      	lsls	r1, r3, #5
 800480e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004812:	0150      	lsls	r0, r2, #5
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4641      	mov	r1, r8
 800481a:	ebb2 0a01 	subs.w	sl, r2, r1
 800481e:	4649      	mov	r1, r9
 8004820:	eb63 0b01 	sbc.w	fp, r3, r1
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004838:	ebb2 040a 	subs.w	r4, r2, sl
 800483c:	eb63 050b 	sbc.w	r5, r3, fp
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	00eb      	lsls	r3, r5, #3
 800484a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800484e:	00e2      	lsls	r2, r4, #3
 8004850:	4614      	mov	r4, r2
 8004852:	461d      	mov	r5, r3
 8004854:	4643      	mov	r3, r8
 8004856:	18e3      	adds	r3, r4, r3
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	464b      	mov	r3, r9
 800485c:	eb45 0303 	adc.w	r3, r5, r3
 8004860:	607b      	str	r3, [r7, #4]
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800486e:	4629      	mov	r1, r5
 8004870:	028b      	lsls	r3, r1, #10
 8004872:	4621      	mov	r1, r4
 8004874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004878:	4621      	mov	r1, r4
 800487a:	028a      	lsls	r2, r1, #10
 800487c:	4610      	mov	r0, r2
 800487e:	4619      	mov	r1, r3
 8004880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004882:	2200      	movs	r2, #0
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	61fa      	str	r2, [r7, #28]
 8004888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800488c:	f7fb fd08 	bl	80002a0 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4613      	mov	r3, r2
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	3301      	adds	r3, #1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048b2:	e002      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCC_GetSysClockFreq+0x204>)
 80048b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3750      	adds	r7, #80	; 0x50
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	007a1200 	.word	0x007a1200

080048d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000000 	.word	0x20000000

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048f0:	f7ff fff0 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0a9b      	lsrs	r3, r3, #10
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4903      	ldr	r1, [pc, #12]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	08005a34 	.word	0x08005a34

08004914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004918:	f7ff ffdc 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0b5b      	lsrs	r3, r3, #13
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	; (8004938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	08005a34 	.word	0x08005a34

0800493c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e03f      	b.n	80049ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fc f8f2 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2224      	movs	r2, #36	; 0x24
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800497e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f929 	bl	8004bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b08a      	sub	sp, #40	; 0x28
 80049da:	af02      	add	r7, sp, #8
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d17c      	bne.n	8004af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_UART_Transmit+0x2c>
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e075      	b.n	8004af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Transmit+0x3e>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e06e      	b.n	8004af2 <HAL_UART_Transmit+0x11c>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2221      	movs	r2, #33	; 0x21
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a2a:	f7fc f9ed 	bl	8000e08 <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	88fa      	ldrh	r2, [r7, #6]
 8004a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a44:	d108      	bne.n	8004a58 <HAL_UART_Transmit+0x82>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d104      	bne.n	8004a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	e003      	b.n	8004a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a68:	e02a      	b.n	8004ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2200      	movs	r2, #0
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f840 	bl	8004afa <UART_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e036      	b.n	8004af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10b      	bne.n	8004aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	e007      	b.n	8004ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1cf      	bne.n	8004a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2140      	movs	r1, #64	; 0x40
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f810 	bl	8004afa <UART_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e006      	b.n	8004af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b090      	sub	sp, #64	; 0x40
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0a:	e050      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d04c      	beq.n	8004bae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b1a:	f7fc f975 	bl	8000e08 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d241      	bcs.n	8004bae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b4a:	637a      	str	r2, [r7, #52]	; 0x34
 8004b4c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e5      	bne.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3314      	adds	r3, #20
 8004b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b7e:	623a      	str	r2, [r7, #32]
 8004b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	69f9      	ldr	r1, [r7, #28]
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e5      	bne.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e00f      	b.n	8004bce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2301      	moveq	r3, #1
 8004bc0:	2300      	movne	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d09f      	beq.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3740      	adds	r7, #64	; 0x40
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bdc:	b0c0      	sub	sp, #256	; 0x100
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	68d9      	ldr	r1, [r3, #12]
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	ea40 0301 	orr.w	r3, r0, r1
 8004c00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c30:	f021 010c 	bic.w	r1, r1, #12
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c52:	6999      	ldr	r1, [r3, #24]
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	ea40 0301 	orr.w	r3, r0, r1
 8004c5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b8f      	ldr	r3, [pc, #572]	; (8004ea4 <UART_SetConfig+0x2cc>)
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d005      	beq.n	8004c78 <UART_SetConfig+0xa0>
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b8d      	ldr	r3, [pc, #564]	; (8004ea8 <UART_SetConfig+0x2d0>)
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d104      	bne.n	8004c82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c78:	f7ff fe4c 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 8004c7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c80:	e003      	b.n	8004c8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c82:	f7ff fe33 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8004c86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c94:	f040 810c 	bne.w	8004eb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ca2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ca6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004caa:	4622      	mov	r2, r4
 8004cac:	462b      	mov	r3, r5
 8004cae:	1891      	adds	r1, r2, r2
 8004cb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cb2:	415b      	adcs	r3, r3
 8004cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cba:	4621      	mov	r1, r4
 8004cbc:	eb12 0801 	adds.w	r8, r2, r1
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	eb43 0901 	adc.w	r9, r3, r1
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cda:	4690      	mov	r8, r2
 8004cdc:	4699      	mov	r9, r3
 8004cde:	4623      	mov	r3, r4
 8004ce0:	eb18 0303 	adds.w	r3, r8, r3
 8004ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ce8:	462b      	mov	r3, r5
 8004cea:	eb49 0303 	adc.w	r3, r9, r3
 8004cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d06:	460b      	mov	r3, r1
 8004d08:	18db      	adds	r3, r3, r3
 8004d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	eb42 0303 	adc.w	r3, r2, r3
 8004d12:	657b      	str	r3, [r7, #84]	; 0x54
 8004d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d1c:	f7fb fac0 	bl	80002a0 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4b61      	ldr	r3, [pc, #388]	; (8004eac <UART_SetConfig+0x2d4>)
 8004d26:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	011c      	lsls	r4, r3, #4
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d50:	4641      	mov	r1, r8
 8004d52:	eb12 0a01 	adds.w	sl, r2, r1
 8004d56:	4649      	mov	r1, r9
 8004d58:	eb43 0b01 	adc.w	fp, r3, r1
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d70:	4692      	mov	sl, r2
 8004d72:	469b      	mov	fp, r3
 8004d74:	4643      	mov	r3, r8
 8004d76:	eb1a 0303 	adds.w	r3, sl, r3
 8004d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	eb4b 0303 	adc.w	r3, fp, r3
 8004d84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	18db      	adds	r3, r3, r3
 8004da0:	643b      	str	r3, [r7, #64]	; 0x40
 8004da2:	4613      	mov	r3, r2
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	647b      	str	r3, [r7, #68]	; 0x44
 8004daa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004db2:	f7fb fa75 	bl	80002a0 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	; (8004eac <UART_SetConfig+0x2d4>)
 8004dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	2264      	movs	r2, #100	; 0x64
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	1acb      	subs	r3, r1, r3
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dd2:	4b36      	ldr	r3, [pc, #216]	; (8004eac <UART_SetConfig+0x2d4>)
 8004dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004de0:	441c      	add	r4, r3
 8004de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004df0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e04:	4641      	mov	r1, r8
 8004e06:	1851      	adds	r1, r2, r1
 8004e08:	6339      	str	r1, [r7, #48]	; 0x30
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	414b      	adcs	r3, r1
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	00cb      	lsls	r3, r1, #3
 8004e20:	4651      	mov	r1, sl
 8004e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e26:	4651      	mov	r1, sl
 8004e28:	00ca      	lsls	r2, r1, #3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4642      	mov	r2, r8
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e38:	464b      	mov	r3, r9
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	eb42 0303 	adc.w	r3, r2, r3
 8004e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e58:	460b      	mov	r3, r1
 8004e5a:	18db      	adds	r3, r3, r3
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5e:	4613      	mov	r3, r2
 8004e60:	eb42 0303 	adc.w	r3, r2, r3
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e6e:	f7fb fa17 	bl	80002a0 <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <UART_SetConfig+0x2d4>)
 8004e78:	fba3 1302 	umull	r1, r3, r3, r2
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	2164      	movs	r1, #100	; 0x64
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	3332      	adds	r3, #50	; 0x32
 8004e8a:	4a08      	ldr	r2, [pc, #32]	; (8004eac <UART_SetConfig+0x2d4>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	f003 0207 	and.w	r2, r3, #7
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4422      	add	r2, r4
 8004e9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ea0:	e105      	b.n	80050ae <UART_SetConfig+0x4d6>
 8004ea2:	bf00      	nop
 8004ea4:	40011000 	.word	0x40011000
 8004ea8:	40011400 	.word	0x40011400
 8004eac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ebe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ec2:	4642      	mov	r2, r8
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	1891      	adds	r1, r2, r2
 8004ec8:	6239      	str	r1, [r7, #32]
 8004eca:	415b      	adcs	r3, r3
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	1854      	adds	r4, r2, r1
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	eb43 0501 	adc.w	r5, r3, r1
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	00eb      	lsls	r3, r5, #3
 8004ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eea:	00e2      	lsls	r2, r4, #3
 8004eec:	4614      	mov	r4, r2
 8004eee:	461d      	mov	r5, r3
 8004ef0:	4643      	mov	r3, r8
 8004ef2:	18e3      	adds	r3, r4, r3
 8004ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ef8:	464b      	mov	r3, r9
 8004efa:	eb45 0303 	adc.w	r3, r5, r3
 8004efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f1e:	4629      	mov	r1, r5
 8004f20:	008b      	lsls	r3, r1, #2
 8004f22:	4621      	mov	r1, r4
 8004f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f28:	4621      	mov	r1, r4
 8004f2a:	008a      	lsls	r2, r1, #2
 8004f2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f30:	f7fb f9b6 	bl	80002a0 <__aeabi_uldivmod>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4b60      	ldr	r3, [pc, #384]	; (80050bc <UART_SetConfig+0x4e4>)
 8004f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	011c      	lsls	r4, r3, #4
 8004f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	1891      	adds	r1, r2, r2
 8004f5a:	61b9      	str	r1, [r7, #24]
 8004f5c:	415b      	adcs	r3, r3
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f64:	4641      	mov	r1, r8
 8004f66:	1851      	adds	r1, r2, r1
 8004f68:	6139      	str	r1, [r7, #16]
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	414b      	adcs	r3, r1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	00cb      	lsls	r3, r1, #3
 8004f80:	4651      	mov	r1, sl
 8004f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f86:	4651      	mov	r1, sl
 8004f88:	00ca      	lsls	r2, r1, #3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4642      	mov	r2, r8
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f98:	464b      	mov	r3, r9
 8004f9a:	460a      	mov	r2, r1
 8004f9c:	eb42 0303 	adc.w	r3, r2, r3
 8004fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	008b      	lsls	r3, r1, #2
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	008a      	lsls	r2, r1, #2
 8004fca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fce:	f7fb f967 	bl	80002a0 <__aeabi_uldivmod>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4b39      	ldr	r3, [pc, #228]	; (80050bc <UART_SetConfig+0x4e4>)
 8004fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	2164      	movs	r1, #100	; 0x64
 8004fe0:	fb01 f303 	mul.w	r3, r1, r3
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	3332      	adds	r3, #50	; 0x32
 8004fea:	4a34      	ldr	r2, [pc, #208]	; (80050bc <UART_SetConfig+0x4e4>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ff6:	441c      	add	r4, r3
 8004ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	673b      	str	r3, [r7, #112]	; 0x70
 8005000:	677a      	str	r2, [r7, #116]	; 0x74
 8005002:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005006:	4642      	mov	r2, r8
 8005008:	464b      	mov	r3, r9
 800500a:	1891      	adds	r1, r2, r2
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	415b      	adcs	r3, r3
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005016:	4641      	mov	r1, r8
 8005018:	1851      	adds	r1, r2, r1
 800501a:	6039      	str	r1, [r7, #0]
 800501c:	4649      	mov	r1, r9
 800501e:	414b      	adcs	r3, r1
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800502e:	4659      	mov	r1, fp
 8005030:	00cb      	lsls	r3, r1, #3
 8005032:	4651      	mov	r1, sl
 8005034:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005038:	4651      	mov	r1, sl
 800503a:	00ca      	lsls	r2, r1, #3
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	4603      	mov	r3, r0
 8005042:	4642      	mov	r2, r8
 8005044:	189b      	adds	r3, r3, r2
 8005046:	66bb      	str	r3, [r7, #104]	; 0x68
 8005048:	464b      	mov	r3, r9
 800504a:	460a      	mov	r2, r1
 800504c:	eb42 0303 	adc.w	r3, r2, r3
 8005050:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	663b      	str	r3, [r7, #96]	; 0x60
 800505c:	667a      	str	r2, [r7, #100]	; 0x64
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800506a:	4649      	mov	r1, r9
 800506c:	008b      	lsls	r3, r1, #2
 800506e:	4641      	mov	r1, r8
 8005070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005074:	4641      	mov	r1, r8
 8005076:	008a      	lsls	r2, r1, #2
 8005078:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800507c:	f7fb f910 	bl	80002a0 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <UART_SetConfig+0x4e4>)
 8005086:	fba3 1302 	umull	r1, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2164      	movs	r1, #100	; 0x64
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	3332      	adds	r3, #50	; 0x32
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <UART_SetConfig+0x4e4>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4422      	add	r2, r4
 80050ac:	609a      	str	r2, [r3, #8]
}
 80050ae:	bf00      	nop
 80050b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050b4:	46bd      	mov	sp, r7
 80050b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ba:	bf00      	nop
 80050bc:	51eb851f 	.word	0x51eb851f

080050c0 <__errno>:
 80050c0:	4b01      	ldr	r3, [pc, #4]	; (80050c8 <__errno+0x8>)
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	2000000c 	.word	0x2000000c

080050cc <__libc_init_array>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	4d0d      	ldr	r5, [pc, #52]	; (8005104 <__libc_init_array+0x38>)
 80050d0:	4c0d      	ldr	r4, [pc, #52]	; (8005108 <__libc_init_array+0x3c>)
 80050d2:	1b64      	subs	r4, r4, r5
 80050d4:	10a4      	asrs	r4, r4, #2
 80050d6:	2600      	movs	r6, #0
 80050d8:	42a6      	cmp	r6, r4
 80050da:	d109      	bne.n	80050f0 <__libc_init_array+0x24>
 80050dc:	4d0b      	ldr	r5, [pc, #44]	; (800510c <__libc_init_array+0x40>)
 80050de:	4c0c      	ldr	r4, [pc, #48]	; (8005110 <__libc_init_array+0x44>)
 80050e0:	f000 fc8e 	bl	8005a00 <_init>
 80050e4:	1b64      	subs	r4, r4, r5
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	2600      	movs	r6, #0
 80050ea:	42a6      	cmp	r6, r4
 80050ec:	d105      	bne.n	80050fa <__libc_init_array+0x2e>
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f4:	4798      	blx	r3
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7ee      	b.n	80050d8 <__libc_init_array+0xc>
 80050fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fe:	4798      	blx	r3
 8005100:	3601      	adds	r6, #1
 8005102:	e7f2      	b.n	80050ea <__libc_init_array+0x1e>
 8005104:	08005a78 	.word	0x08005a78
 8005108:	08005a78 	.word	0x08005a78
 800510c:	08005a78 	.word	0x08005a78
 8005110:	08005a7c 	.word	0x08005a7c

08005114 <memset>:
 8005114:	4402      	add	r2, r0
 8005116:	4603      	mov	r3, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	d100      	bne.n	800511e <memset+0xa>
 800511c:	4770      	bx	lr
 800511e:	f803 1b01 	strb.w	r1, [r3], #1
 8005122:	e7f9      	b.n	8005118 <memset+0x4>

08005124 <siprintf>:
 8005124:	b40e      	push	{r1, r2, r3}
 8005126:	b500      	push	{lr}
 8005128:	b09c      	sub	sp, #112	; 0x70
 800512a:	ab1d      	add	r3, sp, #116	; 0x74
 800512c:	9002      	str	r0, [sp, #8]
 800512e:	9006      	str	r0, [sp, #24]
 8005130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005134:	4809      	ldr	r0, [pc, #36]	; (800515c <siprintf+0x38>)
 8005136:	9107      	str	r1, [sp, #28]
 8005138:	9104      	str	r1, [sp, #16]
 800513a:	4909      	ldr	r1, [pc, #36]	; (8005160 <siprintf+0x3c>)
 800513c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005140:	9105      	str	r1, [sp, #20]
 8005142:	6800      	ldr	r0, [r0, #0]
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	a902      	add	r1, sp, #8
 8005148:	f000 f868 	bl	800521c <_svfiprintf_r>
 800514c:	9b02      	ldr	r3, [sp, #8]
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	b01c      	add	sp, #112	; 0x70
 8005154:	f85d eb04 	ldr.w	lr, [sp], #4
 8005158:	b003      	add	sp, #12
 800515a:	4770      	bx	lr
 800515c:	2000000c 	.word	0x2000000c
 8005160:	ffff0208 	.word	0xffff0208

08005164 <__ssputs_r>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	688e      	ldr	r6, [r1, #8]
 800516a:	429e      	cmp	r6, r3
 800516c:	4682      	mov	sl, r0
 800516e:	460c      	mov	r4, r1
 8005170:	4690      	mov	r8, r2
 8005172:	461f      	mov	r7, r3
 8005174:	d838      	bhi.n	80051e8 <__ssputs_r+0x84>
 8005176:	898a      	ldrh	r2, [r1, #12]
 8005178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800517c:	d032      	beq.n	80051e4 <__ssputs_r+0x80>
 800517e:	6825      	ldr	r5, [r4, #0]
 8005180:	6909      	ldr	r1, [r1, #16]
 8005182:	eba5 0901 	sub.w	r9, r5, r1
 8005186:	6965      	ldr	r5, [r4, #20]
 8005188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800518c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005190:	3301      	adds	r3, #1
 8005192:	444b      	add	r3, r9
 8005194:	106d      	asrs	r5, r5, #1
 8005196:	429d      	cmp	r5, r3
 8005198:	bf38      	it	cc
 800519a:	461d      	movcc	r5, r3
 800519c:	0553      	lsls	r3, r2, #21
 800519e:	d531      	bpl.n	8005204 <__ssputs_r+0xa0>
 80051a0:	4629      	mov	r1, r5
 80051a2:	f000 fb63 	bl	800586c <_malloc_r>
 80051a6:	4606      	mov	r6, r0
 80051a8:	b950      	cbnz	r0, 80051c0 <__ssputs_r+0x5c>
 80051aa:	230c      	movs	r3, #12
 80051ac:	f8ca 3000 	str.w	r3, [sl]
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c0:	6921      	ldr	r1, [r4, #16]
 80051c2:	464a      	mov	r2, r9
 80051c4:	f000 fabe 	bl	8005744 <memcpy>
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	6126      	str	r6, [r4, #16]
 80051d6:	6165      	str	r5, [r4, #20]
 80051d8:	444e      	add	r6, r9
 80051da:	eba5 0509 	sub.w	r5, r5, r9
 80051de:	6026      	str	r6, [r4, #0]
 80051e0:	60a5      	str	r5, [r4, #8]
 80051e2:	463e      	mov	r6, r7
 80051e4:	42be      	cmp	r6, r7
 80051e6:	d900      	bls.n	80051ea <__ssputs_r+0x86>
 80051e8:	463e      	mov	r6, r7
 80051ea:	6820      	ldr	r0, [r4, #0]
 80051ec:	4632      	mov	r2, r6
 80051ee:	4641      	mov	r1, r8
 80051f0:	f000 fab6 	bl	8005760 <memmove>
 80051f4:	68a3      	ldr	r3, [r4, #8]
 80051f6:	1b9b      	subs	r3, r3, r6
 80051f8:	60a3      	str	r3, [r4, #8]
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	4433      	add	r3, r6
 80051fe:	6023      	str	r3, [r4, #0]
 8005200:	2000      	movs	r0, #0
 8005202:	e7db      	b.n	80051bc <__ssputs_r+0x58>
 8005204:	462a      	mov	r2, r5
 8005206:	f000 fba5 	bl	8005954 <_realloc_r>
 800520a:	4606      	mov	r6, r0
 800520c:	2800      	cmp	r0, #0
 800520e:	d1e1      	bne.n	80051d4 <__ssputs_r+0x70>
 8005210:	6921      	ldr	r1, [r4, #16]
 8005212:	4650      	mov	r0, sl
 8005214:	f000 fabe 	bl	8005794 <_free_r>
 8005218:	e7c7      	b.n	80051aa <__ssputs_r+0x46>
	...

0800521c <_svfiprintf_r>:
 800521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005220:	4698      	mov	r8, r3
 8005222:	898b      	ldrh	r3, [r1, #12]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	b09d      	sub	sp, #116	; 0x74
 8005228:	4607      	mov	r7, r0
 800522a:	460d      	mov	r5, r1
 800522c:	4614      	mov	r4, r2
 800522e:	d50e      	bpl.n	800524e <_svfiprintf_r+0x32>
 8005230:	690b      	ldr	r3, [r1, #16]
 8005232:	b963      	cbnz	r3, 800524e <_svfiprintf_r+0x32>
 8005234:	2140      	movs	r1, #64	; 0x40
 8005236:	f000 fb19 	bl	800586c <_malloc_r>
 800523a:	6028      	str	r0, [r5, #0]
 800523c:	6128      	str	r0, [r5, #16]
 800523e:	b920      	cbnz	r0, 800524a <_svfiprintf_r+0x2e>
 8005240:	230c      	movs	r3, #12
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	e0d1      	b.n	80053ee <_svfiprintf_r+0x1d2>
 800524a:	2340      	movs	r3, #64	; 0x40
 800524c:	616b      	str	r3, [r5, #20]
 800524e:	2300      	movs	r3, #0
 8005250:	9309      	str	r3, [sp, #36]	; 0x24
 8005252:	2320      	movs	r3, #32
 8005254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005258:	f8cd 800c 	str.w	r8, [sp, #12]
 800525c:	2330      	movs	r3, #48	; 0x30
 800525e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005408 <_svfiprintf_r+0x1ec>
 8005262:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005266:	f04f 0901 	mov.w	r9, #1
 800526a:	4623      	mov	r3, r4
 800526c:	469a      	mov	sl, r3
 800526e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005272:	b10a      	cbz	r2, 8005278 <_svfiprintf_r+0x5c>
 8005274:	2a25      	cmp	r2, #37	; 0x25
 8005276:	d1f9      	bne.n	800526c <_svfiprintf_r+0x50>
 8005278:	ebba 0b04 	subs.w	fp, sl, r4
 800527c:	d00b      	beq.n	8005296 <_svfiprintf_r+0x7a>
 800527e:	465b      	mov	r3, fp
 8005280:	4622      	mov	r2, r4
 8005282:	4629      	mov	r1, r5
 8005284:	4638      	mov	r0, r7
 8005286:	f7ff ff6d 	bl	8005164 <__ssputs_r>
 800528a:	3001      	adds	r0, #1
 800528c:	f000 80aa 	beq.w	80053e4 <_svfiprintf_r+0x1c8>
 8005290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005292:	445a      	add	r2, fp
 8005294:	9209      	str	r2, [sp, #36]	; 0x24
 8005296:	f89a 3000 	ldrb.w	r3, [sl]
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80a2 	beq.w	80053e4 <_svfiprintf_r+0x1c8>
 80052a0:	2300      	movs	r3, #0
 80052a2:	f04f 32ff 	mov.w	r2, #4294967295
 80052a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052aa:	f10a 0a01 	add.w	sl, sl, #1
 80052ae:	9304      	str	r3, [sp, #16]
 80052b0:	9307      	str	r3, [sp, #28]
 80052b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052b6:	931a      	str	r3, [sp, #104]	; 0x68
 80052b8:	4654      	mov	r4, sl
 80052ba:	2205      	movs	r2, #5
 80052bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c0:	4851      	ldr	r0, [pc, #324]	; (8005408 <_svfiprintf_r+0x1ec>)
 80052c2:	f7fa ff9d 	bl	8000200 <memchr>
 80052c6:	9a04      	ldr	r2, [sp, #16]
 80052c8:	b9d8      	cbnz	r0, 8005302 <_svfiprintf_r+0xe6>
 80052ca:	06d0      	lsls	r0, r2, #27
 80052cc:	bf44      	itt	mi
 80052ce:	2320      	movmi	r3, #32
 80052d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d4:	0711      	lsls	r1, r2, #28
 80052d6:	bf44      	itt	mi
 80052d8:	232b      	movmi	r3, #43	; 0x2b
 80052da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052de:	f89a 3000 	ldrb.w	r3, [sl]
 80052e2:	2b2a      	cmp	r3, #42	; 0x2a
 80052e4:	d015      	beq.n	8005312 <_svfiprintf_r+0xf6>
 80052e6:	9a07      	ldr	r2, [sp, #28]
 80052e8:	4654      	mov	r4, sl
 80052ea:	2000      	movs	r0, #0
 80052ec:	f04f 0c0a 	mov.w	ip, #10
 80052f0:	4621      	mov	r1, r4
 80052f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f6:	3b30      	subs	r3, #48	; 0x30
 80052f8:	2b09      	cmp	r3, #9
 80052fa:	d94e      	bls.n	800539a <_svfiprintf_r+0x17e>
 80052fc:	b1b0      	cbz	r0, 800532c <_svfiprintf_r+0x110>
 80052fe:	9207      	str	r2, [sp, #28]
 8005300:	e014      	b.n	800532c <_svfiprintf_r+0x110>
 8005302:	eba0 0308 	sub.w	r3, r0, r8
 8005306:	fa09 f303 	lsl.w	r3, r9, r3
 800530a:	4313      	orrs	r3, r2
 800530c:	9304      	str	r3, [sp, #16]
 800530e:	46a2      	mov	sl, r4
 8005310:	e7d2      	b.n	80052b8 <_svfiprintf_r+0x9c>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	1d19      	adds	r1, r3, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	9103      	str	r1, [sp, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	bfbb      	ittet	lt
 800531e:	425b      	neglt	r3, r3
 8005320:	f042 0202 	orrlt.w	r2, r2, #2
 8005324:	9307      	strge	r3, [sp, #28]
 8005326:	9307      	strlt	r3, [sp, #28]
 8005328:	bfb8      	it	lt
 800532a:	9204      	strlt	r2, [sp, #16]
 800532c:	7823      	ldrb	r3, [r4, #0]
 800532e:	2b2e      	cmp	r3, #46	; 0x2e
 8005330:	d10c      	bne.n	800534c <_svfiprintf_r+0x130>
 8005332:	7863      	ldrb	r3, [r4, #1]
 8005334:	2b2a      	cmp	r3, #42	; 0x2a
 8005336:	d135      	bne.n	80053a4 <_svfiprintf_r+0x188>
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	1d1a      	adds	r2, r3, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	9203      	str	r2, [sp, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	bfb8      	it	lt
 8005344:	f04f 33ff 	movlt.w	r3, #4294967295
 8005348:	3402      	adds	r4, #2
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005418 <_svfiprintf_r+0x1fc>
 8005350:	7821      	ldrb	r1, [r4, #0]
 8005352:	2203      	movs	r2, #3
 8005354:	4650      	mov	r0, sl
 8005356:	f7fa ff53 	bl	8000200 <memchr>
 800535a:	b140      	cbz	r0, 800536e <_svfiprintf_r+0x152>
 800535c:	2340      	movs	r3, #64	; 0x40
 800535e:	eba0 000a 	sub.w	r0, r0, sl
 8005362:	fa03 f000 	lsl.w	r0, r3, r0
 8005366:	9b04      	ldr	r3, [sp, #16]
 8005368:	4303      	orrs	r3, r0
 800536a:	3401      	adds	r4, #1
 800536c:	9304      	str	r3, [sp, #16]
 800536e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005372:	4826      	ldr	r0, [pc, #152]	; (800540c <_svfiprintf_r+0x1f0>)
 8005374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005378:	2206      	movs	r2, #6
 800537a:	f7fa ff41 	bl	8000200 <memchr>
 800537e:	2800      	cmp	r0, #0
 8005380:	d038      	beq.n	80053f4 <_svfiprintf_r+0x1d8>
 8005382:	4b23      	ldr	r3, [pc, #140]	; (8005410 <_svfiprintf_r+0x1f4>)
 8005384:	bb1b      	cbnz	r3, 80053ce <_svfiprintf_r+0x1b2>
 8005386:	9b03      	ldr	r3, [sp, #12]
 8005388:	3307      	adds	r3, #7
 800538a:	f023 0307 	bic.w	r3, r3, #7
 800538e:	3308      	adds	r3, #8
 8005390:	9303      	str	r3, [sp, #12]
 8005392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005394:	4433      	add	r3, r6
 8005396:	9309      	str	r3, [sp, #36]	; 0x24
 8005398:	e767      	b.n	800526a <_svfiprintf_r+0x4e>
 800539a:	fb0c 3202 	mla	r2, ip, r2, r3
 800539e:	460c      	mov	r4, r1
 80053a0:	2001      	movs	r0, #1
 80053a2:	e7a5      	b.n	80052f0 <_svfiprintf_r+0xd4>
 80053a4:	2300      	movs	r3, #0
 80053a6:	3401      	adds	r4, #1
 80053a8:	9305      	str	r3, [sp, #20]
 80053aa:	4619      	mov	r1, r3
 80053ac:	f04f 0c0a 	mov.w	ip, #10
 80053b0:	4620      	mov	r0, r4
 80053b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b6:	3a30      	subs	r2, #48	; 0x30
 80053b8:	2a09      	cmp	r2, #9
 80053ba:	d903      	bls.n	80053c4 <_svfiprintf_r+0x1a8>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0c5      	beq.n	800534c <_svfiprintf_r+0x130>
 80053c0:	9105      	str	r1, [sp, #20]
 80053c2:	e7c3      	b.n	800534c <_svfiprintf_r+0x130>
 80053c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c8:	4604      	mov	r4, r0
 80053ca:	2301      	movs	r3, #1
 80053cc:	e7f0      	b.n	80053b0 <_svfiprintf_r+0x194>
 80053ce:	ab03      	add	r3, sp, #12
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	462a      	mov	r2, r5
 80053d4:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <_svfiprintf_r+0x1f8>)
 80053d6:	a904      	add	r1, sp, #16
 80053d8:	4638      	mov	r0, r7
 80053da:	f3af 8000 	nop.w
 80053de:	1c42      	adds	r2, r0, #1
 80053e0:	4606      	mov	r6, r0
 80053e2:	d1d6      	bne.n	8005392 <_svfiprintf_r+0x176>
 80053e4:	89ab      	ldrh	r3, [r5, #12]
 80053e6:	065b      	lsls	r3, r3, #25
 80053e8:	f53f af2c 	bmi.w	8005244 <_svfiprintf_r+0x28>
 80053ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ee:	b01d      	add	sp, #116	; 0x74
 80053f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f4:	ab03      	add	r3, sp, #12
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	462a      	mov	r2, r5
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <_svfiprintf_r+0x1f8>)
 80053fc:	a904      	add	r1, sp, #16
 80053fe:	4638      	mov	r0, r7
 8005400:	f000 f87a 	bl	80054f8 <_printf_i>
 8005404:	e7eb      	b.n	80053de <_svfiprintf_r+0x1c2>
 8005406:	bf00      	nop
 8005408:	08005a3c 	.word	0x08005a3c
 800540c:	08005a46 	.word	0x08005a46
 8005410:	00000000 	.word	0x00000000
 8005414:	08005165 	.word	0x08005165
 8005418:	08005a42 	.word	0x08005a42

0800541c <_printf_common>:
 800541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005420:	4616      	mov	r6, r2
 8005422:	4699      	mov	r9, r3
 8005424:	688a      	ldr	r2, [r1, #8]
 8005426:	690b      	ldr	r3, [r1, #16]
 8005428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800542c:	4293      	cmp	r3, r2
 800542e:	bfb8      	it	lt
 8005430:	4613      	movlt	r3, r2
 8005432:	6033      	str	r3, [r6, #0]
 8005434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005438:	4607      	mov	r7, r0
 800543a:	460c      	mov	r4, r1
 800543c:	b10a      	cbz	r2, 8005442 <_printf_common+0x26>
 800543e:	3301      	adds	r3, #1
 8005440:	6033      	str	r3, [r6, #0]
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	0699      	lsls	r1, r3, #26
 8005446:	bf42      	ittt	mi
 8005448:	6833      	ldrmi	r3, [r6, #0]
 800544a:	3302      	addmi	r3, #2
 800544c:	6033      	strmi	r3, [r6, #0]
 800544e:	6825      	ldr	r5, [r4, #0]
 8005450:	f015 0506 	ands.w	r5, r5, #6
 8005454:	d106      	bne.n	8005464 <_printf_common+0x48>
 8005456:	f104 0a19 	add.w	sl, r4, #25
 800545a:	68e3      	ldr	r3, [r4, #12]
 800545c:	6832      	ldr	r2, [r6, #0]
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	42ab      	cmp	r3, r5
 8005462:	dc26      	bgt.n	80054b2 <_printf_common+0x96>
 8005464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005468:	1e13      	subs	r3, r2, #0
 800546a:	6822      	ldr	r2, [r4, #0]
 800546c:	bf18      	it	ne
 800546e:	2301      	movne	r3, #1
 8005470:	0692      	lsls	r2, r2, #26
 8005472:	d42b      	bmi.n	80054cc <_printf_common+0xb0>
 8005474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005478:	4649      	mov	r1, r9
 800547a:	4638      	mov	r0, r7
 800547c:	47c0      	blx	r8
 800547e:	3001      	adds	r0, #1
 8005480:	d01e      	beq.n	80054c0 <_printf_common+0xa4>
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	68e5      	ldr	r5, [r4, #12]
 8005486:	6832      	ldr	r2, [r6, #0]
 8005488:	f003 0306 	and.w	r3, r3, #6
 800548c:	2b04      	cmp	r3, #4
 800548e:	bf08      	it	eq
 8005490:	1aad      	subeq	r5, r5, r2
 8005492:	68a3      	ldr	r3, [r4, #8]
 8005494:	6922      	ldr	r2, [r4, #16]
 8005496:	bf0c      	ite	eq
 8005498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800549c:	2500      	movne	r5, #0
 800549e:	4293      	cmp	r3, r2
 80054a0:	bfc4      	itt	gt
 80054a2:	1a9b      	subgt	r3, r3, r2
 80054a4:	18ed      	addgt	r5, r5, r3
 80054a6:	2600      	movs	r6, #0
 80054a8:	341a      	adds	r4, #26
 80054aa:	42b5      	cmp	r5, r6
 80054ac:	d11a      	bne.n	80054e4 <_printf_common+0xc8>
 80054ae:	2000      	movs	r0, #0
 80054b0:	e008      	b.n	80054c4 <_printf_common+0xa8>
 80054b2:	2301      	movs	r3, #1
 80054b4:	4652      	mov	r2, sl
 80054b6:	4649      	mov	r1, r9
 80054b8:	4638      	mov	r0, r7
 80054ba:	47c0      	blx	r8
 80054bc:	3001      	adds	r0, #1
 80054be:	d103      	bne.n	80054c8 <_printf_common+0xac>
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c8:	3501      	adds	r5, #1
 80054ca:	e7c6      	b.n	800545a <_printf_common+0x3e>
 80054cc:	18e1      	adds	r1, r4, r3
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	2030      	movs	r0, #48	; 0x30
 80054d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054d6:	4422      	add	r2, r4
 80054d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054e0:	3302      	adds	r3, #2
 80054e2:	e7c7      	b.n	8005474 <_printf_common+0x58>
 80054e4:	2301      	movs	r3, #1
 80054e6:	4622      	mov	r2, r4
 80054e8:	4649      	mov	r1, r9
 80054ea:	4638      	mov	r0, r7
 80054ec:	47c0      	blx	r8
 80054ee:	3001      	adds	r0, #1
 80054f0:	d0e6      	beq.n	80054c0 <_printf_common+0xa4>
 80054f2:	3601      	adds	r6, #1
 80054f4:	e7d9      	b.n	80054aa <_printf_common+0x8e>
	...

080054f8 <_printf_i>:
 80054f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054fc:	7e0f      	ldrb	r7, [r1, #24]
 80054fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005500:	2f78      	cmp	r7, #120	; 0x78
 8005502:	4691      	mov	r9, r2
 8005504:	4680      	mov	r8, r0
 8005506:	460c      	mov	r4, r1
 8005508:	469a      	mov	sl, r3
 800550a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800550e:	d807      	bhi.n	8005520 <_printf_i+0x28>
 8005510:	2f62      	cmp	r7, #98	; 0x62
 8005512:	d80a      	bhi.n	800552a <_printf_i+0x32>
 8005514:	2f00      	cmp	r7, #0
 8005516:	f000 80d8 	beq.w	80056ca <_printf_i+0x1d2>
 800551a:	2f58      	cmp	r7, #88	; 0x58
 800551c:	f000 80a3 	beq.w	8005666 <_printf_i+0x16e>
 8005520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005528:	e03a      	b.n	80055a0 <_printf_i+0xa8>
 800552a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800552e:	2b15      	cmp	r3, #21
 8005530:	d8f6      	bhi.n	8005520 <_printf_i+0x28>
 8005532:	a101      	add	r1, pc, #4	; (adr r1, 8005538 <_printf_i+0x40>)
 8005534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005538:	08005591 	.word	0x08005591
 800553c:	080055a5 	.word	0x080055a5
 8005540:	08005521 	.word	0x08005521
 8005544:	08005521 	.word	0x08005521
 8005548:	08005521 	.word	0x08005521
 800554c:	08005521 	.word	0x08005521
 8005550:	080055a5 	.word	0x080055a5
 8005554:	08005521 	.word	0x08005521
 8005558:	08005521 	.word	0x08005521
 800555c:	08005521 	.word	0x08005521
 8005560:	08005521 	.word	0x08005521
 8005564:	080056b1 	.word	0x080056b1
 8005568:	080055d5 	.word	0x080055d5
 800556c:	08005693 	.word	0x08005693
 8005570:	08005521 	.word	0x08005521
 8005574:	08005521 	.word	0x08005521
 8005578:	080056d3 	.word	0x080056d3
 800557c:	08005521 	.word	0x08005521
 8005580:	080055d5 	.word	0x080055d5
 8005584:	08005521 	.word	0x08005521
 8005588:	08005521 	.word	0x08005521
 800558c:	0800569b 	.word	0x0800569b
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	1d1a      	adds	r2, r3, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	602a      	str	r2, [r5, #0]
 8005598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800559c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0a3      	b.n	80056ec <_printf_i+0x1f4>
 80055a4:	6820      	ldr	r0, [r4, #0]
 80055a6:	6829      	ldr	r1, [r5, #0]
 80055a8:	0606      	lsls	r6, r0, #24
 80055aa:	f101 0304 	add.w	r3, r1, #4
 80055ae:	d50a      	bpl.n	80055c6 <_printf_i+0xce>
 80055b0:	680e      	ldr	r6, [r1, #0]
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	2e00      	cmp	r6, #0
 80055b6:	da03      	bge.n	80055c0 <_printf_i+0xc8>
 80055b8:	232d      	movs	r3, #45	; 0x2d
 80055ba:	4276      	negs	r6, r6
 80055bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c0:	485e      	ldr	r0, [pc, #376]	; (800573c <_printf_i+0x244>)
 80055c2:	230a      	movs	r3, #10
 80055c4:	e019      	b.n	80055fa <_printf_i+0x102>
 80055c6:	680e      	ldr	r6, [r1, #0]
 80055c8:	602b      	str	r3, [r5, #0]
 80055ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055ce:	bf18      	it	ne
 80055d0:	b236      	sxthne	r6, r6
 80055d2:	e7ef      	b.n	80055b4 <_printf_i+0xbc>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	6820      	ldr	r0, [r4, #0]
 80055d8:	1d19      	adds	r1, r3, #4
 80055da:	6029      	str	r1, [r5, #0]
 80055dc:	0601      	lsls	r1, r0, #24
 80055de:	d501      	bpl.n	80055e4 <_printf_i+0xec>
 80055e0:	681e      	ldr	r6, [r3, #0]
 80055e2:	e002      	b.n	80055ea <_printf_i+0xf2>
 80055e4:	0646      	lsls	r6, r0, #25
 80055e6:	d5fb      	bpl.n	80055e0 <_printf_i+0xe8>
 80055e8:	881e      	ldrh	r6, [r3, #0]
 80055ea:	4854      	ldr	r0, [pc, #336]	; (800573c <_printf_i+0x244>)
 80055ec:	2f6f      	cmp	r7, #111	; 0x6f
 80055ee:	bf0c      	ite	eq
 80055f0:	2308      	moveq	r3, #8
 80055f2:	230a      	movne	r3, #10
 80055f4:	2100      	movs	r1, #0
 80055f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055fa:	6865      	ldr	r5, [r4, #4]
 80055fc:	60a5      	str	r5, [r4, #8]
 80055fe:	2d00      	cmp	r5, #0
 8005600:	bfa2      	ittt	ge
 8005602:	6821      	ldrge	r1, [r4, #0]
 8005604:	f021 0104 	bicge.w	r1, r1, #4
 8005608:	6021      	strge	r1, [r4, #0]
 800560a:	b90e      	cbnz	r6, 8005610 <_printf_i+0x118>
 800560c:	2d00      	cmp	r5, #0
 800560e:	d04d      	beq.n	80056ac <_printf_i+0x1b4>
 8005610:	4615      	mov	r5, r2
 8005612:	fbb6 f1f3 	udiv	r1, r6, r3
 8005616:	fb03 6711 	mls	r7, r3, r1, r6
 800561a:	5dc7      	ldrb	r7, [r0, r7]
 800561c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005620:	4637      	mov	r7, r6
 8005622:	42bb      	cmp	r3, r7
 8005624:	460e      	mov	r6, r1
 8005626:	d9f4      	bls.n	8005612 <_printf_i+0x11a>
 8005628:	2b08      	cmp	r3, #8
 800562a:	d10b      	bne.n	8005644 <_printf_i+0x14c>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	07de      	lsls	r6, r3, #31
 8005630:	d508      	bpl.n	8005644 <_printf_i+0x14c>
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	6861      	ldr	r1, [r4, #4]
 8005636:	4299      	cmp	r1, r3
 8005638:	bfde      	ittt	le
 800563a:	2330      	movle	r3, #48	; 0x30
 800563c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005640:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005644:	1b52      	subs	r2, r2, r5
 8005646:	6122      	str	r2, [r4, #16]
 8005648:	f8cd a000 	str.w	sl, [sp]
 800564c:	464b      	mov	r3, r9
 800564e:	aa03      	add	r2, sp, #12
 8005650:	4621      	mov	r1, r4
 8005652:	4640      	mov	r0, r8
 8005654:	f7ff fee2 	bl	800541c <_printf_common>
 8005658:	3001      	adds	r0, #1
 800565a:	d14c      	bne.n	80056f6 <_printf_i+0x1fe>
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
 8005660:	b004      	add	sp, #16
 8005662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005666:	4835      	ldr	r0, [pc, #212]	; (800573c <_printf_i+0x244>)
 8005668:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800566c:	6829      	ldr	r1, [r5, #0]
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	f851 6b04 	ldr.w	r6, [r1], #4
 8005674:	6029      	str	r1, [r5, #0]
 8005676:	061d      	lsls	r5, r3, #24
 8005678:	d514      	bpl.n	80056a4 <_printf_i+0x1ac>
 800567a:	07df      	lsls	r7, r3, #31
 800567c:	bf44      	itt	mi
 800567e:	f043 0320 	orrmi.w	r3, r3, #32
 8005682:	6023      	strmi	r3, [r4, #0]
 8005684:	b91e      	cbnz	r6, 800568e <_printf_i+0x196>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	f023 0320 	bic.w	r3, r3, #32
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	2310      	movs	r3, #16
 8005690:	e7b0      	b.n	80055f4 <_printf_i+0xfc>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	f043 0320 	orr.w	r3, r3, #32
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	2378      	movs	r3, #120	; 0x78
 800569c:	4828      	ldr	r0, [pc, #160]	; (8005740 <_printf_i+0x248>)
 800569e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056a2:	e7e3      	b.n	800566c <_printf_i+0x174>
 80056a4:	0659      	lsls	r1, r3, #25
 80056a6:	bf48      	it	mi
 80056a8:	b2b6      	uxthmi	r6, r6
 80056aa:	e7e6      	b.n	800567a <_printf_i+0x182>
 80056ac:	4615      	mov	r5, r2
 80056ae:	e7bb      	b.n	8005628 <_printf_i+0x130>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	6826      	ldr	r6, [r4, #0]
 80056b4:	6961      	ldr	r1, [r4, #20]
 80056b6:	1d18      	adds	r0, r3, #4
 80056b8:	6028      	str	r0, [r5, #0]
 80056ba:	0635      	lsls	r5, r6, #24
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	d501      	bpl.n	80056c4 <_printf_i+0x1cc>
 80056c0:	6019      	str	r1, [r3, #0]
 80056c2:	e002      	b.n	80056ca <_printf_i+0x1d2>
 80056c4:	0670      	lsls	r0, r6, #25
 80056c6:	d5fb      	bpl.n	80056c0 <_printf_i+0x1c8>
 80056c8:	8019      	strh	r1, [r3, #0]
 80056ca:	2300      	movs	r3, #0
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	4615      	mov	r5, r2
 80056d0:	e7ba      	b.n	8005648 <_printf_i+0x150>
 80056d2:	682b      	ldr	r3, [r5, #0]
 80056d4:	1d1a      	adds	r2, r3, #4
 80056d6:	602a      	str	r2, [r5, #0]
 80056d8:	681d      	ldr	r5, [r3, #0]
 80056da:	6862      	ldr	r2, [r4, #4]
 80056dc:	2100      	movs	r1, #0
 80056de:	4628      	mov	r0, r5
 80056e0:	f7fa fd8e 	bl	8000200 <memchr>
 80056e4:	b108      	cbz	r0, 80056ea <_printf_i+0x1f2>
 80056e6:	1b40      	subs	r0, r0, r5
 80056e8:	6060      	str	r0, [r4, #4]
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	6123      	str	r3, [r4, #16]
 80056ee:	2300      	movs	r3, #0
 80056f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f4:	e7a8      	b.n	8005648 <_printf_i+0x150>
 80056f6:	6923      	ldr	r3, [r4, #16]
 80056f8:	462a      	mov	r2, r5
 80056fa:	4649      	mov	r1, r9
 80056fc:	4640      	mov	r0, r8
 80056fe:	47d0      	blx	sl
 8005700:	3001      	adds	r0, #1
 8005702:	d0ab      	beq.n	800565c <_printf_i+0x164>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	079b      	lsls	r3, r3, #30
 8005708:	d413      	bmi.n	8005732 <_printf_i+0x23a>
 800570a:	68e0      	ldr	r0, [r4, #12]
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	4298      	cmp	r0, r3
 8005710:	bfb8      	it	lt
 8005712:	4618      	movlt	r0, r3
 8005714:	e7a4      	b.n	8005660 <_printf_i+0x168>
 8005716:	2301      	movs	r3, #1
 8005718:	4632      	mov	r2, r6
 800571a:	4649      	mov	r1, r9
 800571c:	4640      	mov	r0, r8
 800571e:	47d0      	blx	sl
 8005720:	3001      	adds	r0, #1
 8005722:	d09b      	beq.n	800565c <_printf_i+0x164>
 8005724:	3501      	adds	r5, #1
 8005726:	68e3      	ldr	r3, [r4, #12]
 8005728:	9903      	ldr	r1, [sp, #12]
 800572a:	1a5b      	subs	r3, r3, r1
 800572c:	42ab      	cmp	r3, r5
 800572e:	dcf2      	bgt.n	8005716 <_printf_i+0x21e>
 8005730:	e7eb      	b.n	800570a <_printf_i+0x212>
 8005732:	2500      	movs	r5, #0
 8005734:	f104 0619 	add.w	r6, r4, #25
 8005738:	e7f5      	b.n	8005726 <_printf_i+0x22e>
 800573a:	bf00      	nop
 800573c:	08005a4d 	.word	0x08005a4d
 8005740:	08005a5e 	.word	0x08005a5e

08005744 <memcpy>:
 8005744:	440a      	add	r2, r1
 8005746:	4291      	cmp	r1, r2
 8005748:	f100 33ff 	add.w	r3, r0, #4294967295
 800574c:	d100      	bne.n	8005750 <memcpy+0xc>
 800574e:	4770      	bx	lr
 8005750:	b510      	push	{r4, lr}
 8005752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800575a:	4291      	cmp	r1, r2
 800575c:	d1f9      	bne.n	8005752 <memcpy+0xe>
 800575e:	bd10      	pop	{r4, pc}

08005760 <memmove>:
 8005760:	4288      	cmp	r0, r1
 8005762:	b510      	push	{r4, lr}
 8005764:	eb01 0402 	add.w	r4, r1, r2
 8005768:	d902      	bls.n	8005770 <memmove+0x10>
 800576a:	4284      	cmp	r4, r0
 800576c:	4623      	mov	r3, r4
 800576e:	d807      	bhi.n	8005780 <memmove+0x20>
 8005770:	1e43      	subs	r3, r0, #1
 8005772:	42a1      	cmp	r1, r4
 8005774:	d008      	beq.n	8005788 <memmove+0x28>
 8005776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800577a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800577e:	e7f8      	b.n	8005772 <memmove+0x12>
 8005780:	4402      	add	r2, r0
 8005782:	4601      	mov	r1, r0
 8005784:	428a      	cmp	r2, r1
 8005786:	d100      	bne.n	800578a <memmove+0x2a>
 8005788:	bd10      	pop	{r4, pc}
 800578a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800578e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005792:	e7f7      	b.n	8005784 <memmove+0x24>

08005794 <_free_r>:
 8005794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005796:	2900      	cmp	r1, #0
 8005798:	d044      	beq.n	8005824 <_free_r+0x90>
 800579a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800579e:	9001      	str	r0, [sp, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f1a1 0404 	sub.w	r4, r1, #4
 80057a6:	bfb8      	it	lt
 80057a8:	18e4      	addlt	r4, r4, r3
 80057aa:	f000 f913 	bl	80059d4 <__malloc_lock>
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <_free_r+0x94>)
 80057b0:	9801      	ldr	r0, [sp, #4]
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	b933      	cbnz	r3, 80057c4 <_free_r+0x30>
 80057b6:	6063      	str	r3, [r4, #4]
 80057b8:	6014      	str	r4, [r2, #0]
 80057ba:	b003      	add	sp, #12
 80057bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057c0:	f000 b90e 	b.w	80059e0 <__malloc_unlock>
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	d908      	bls.n	80057da <_free_r+0x46>
 80057c8:	6825      	ldr	r5, [r4, #0]
 80057ca:	1961      	adds	r1, r4, r5
 80057cc:	428b      	cmp	r3, r1
 80057ce:	bf01      	itttt	eq
 80057d0:	6819      	ldreq	r1, [r3, #0]
 80057d2:	685b      	ldreq	r3, [r3, #4]
 80057d4:	1949      	addeq	r1, r1, r5
 80057d6:	6021      	streq	r1, [r4, #0]
 80057d8:	e7ed      	b.n	80057b6 <_free_r+0x22>
 80057da:	461a      	mov	r2, r3
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	b10b      	cbz	r3, 80057e4 <_free_r+0x50>
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d9fa      	bls.n	80057da <_free_r+0x46>
 80057e4:	6811      	ldr	r1, [r2, #0]
 80057e6:	1855      	adds	r5, r2, r1
 80057e8:	42a5      	cmp	r5, r4
 80057ea:	d10b      	bne.n	8005804 <_free_r+0x70>
 80057ec:	6824      	ldr	r4, [r4, #0]
 80057ee:	4421      	add	r1, r4
 80057f0:	1854      	adds	r4, r2, r1
 80057f2:	42a3      	cmp	r3, r4
 80057f4:	6011      	str	r1, [r2, #0]
 80057f6:	d1e0      	bne.n	80057ba <_free_r+0x26>
 80057f8:	681c      	ldr	r4, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	6053      	str	r3, [r2, #4]
 80057fe:	4421      	add	r1, r4
 8005800:	6011      	str	r1, [r2, #0]
 8005802:	e7da      	b.n	80057ba <_free_r+0x26>
 8005804:	d902      	bls.n	800580c <_free_r+0x78>
 8005806:	230c      	movs	r3, #12
 8005808:	6003      	str	r3, [r0, #0]
 800580a:	e7d6      	b.n	80057ba <_free_r+0x26>
 800580c:	6825      	ldr	r5, [r4, #0]
 800580e:	1961      	adds	r1, r4, r5
 8005810:	428b      	cmp	r3, r1
 8005812:	bf04      	itt	eq
 8005814:	6819      	ldreq	r1, [r3, #0]
 8005816:	685b      	ldreq	r3, [r3, #4]
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	bf04      	itt	eq
 800581c:	1949      	addeq	r1, r1, r5
 800581e:	6021      	streq	r1, [r4, #0]
 8005820:	6054      	str	r4, [r2, #4]
 8005822:	e7ca      	b.n	80057ba <_free_r+0x26>
 8005824:	b003      	add	sp, #12
 8005826:	bd30      	pop	{r4, r5, pc}
 8005828:	20000170 	.word	0x20000170

0800582c <sbrk_aligned>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4e0e      	ldr	r6, [pc, #56]	; (8005868 <sbrk_aligned+0x3c>)
 8005830:	460c      	mov	r4, r1
 8005832:	6831      	ldr	r1, [r6, #0]
 8005834:	4605      	mov	r5, r0
 8005836:	b911      	cbnz	r1, 800583e <sbrk_aligned+0x12>
 8005838:	f000 f8bc 	bl	80059b4 <_sbrk_r>
 800583c:	6030      	str	r0, [r6, #0]
 800583e:	4621      	mov	r1, r4
 8005840:	4628      	mov	r0, r5
 8005842:	f000 f8b7 	bl	80059b4 <_sbrk_r>
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	d00a      	beq.n	8005860 <sbrk_aligned+0x34>
 800584a:	1cc4      	adds	r4, r0, #3
 800584c:	f024 0403 	bic.w	r4, r4, #3
 8005850:	42a0      	cmp	r0, r4
 8005852:	d007      	beq.n	8005864 <sbrk_aligned+0x38>
 8005854:	1a21      	subs	r1, r4, r0
 8005856:	4628      	mov	r0, r5
 8005858:	f000 f8ac 	bl	80059b4 <_sbrk_r>
 800585c:	3001      	adds	r0, #1
 800585e:	d101      	bne.n	8005864 <sbrk_aligned+0x38>
 8005860:	f04f 34ff 	mov.w	r4, #4294967295
 8005864:	4620      	mov	r0, r4
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	20000174 	.word	0x20000174

0800586c <_malloc_r>:
 800586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	1ccd      	adds	r5, r1, #3
 8005872:	f025 0503 	bic.w	r5, r5, #3
 8005876:	3508      	adds	r5, #8
 8005878:	2d0c      	cmp	r5, #12
 800587a:	bf38      	it	cc
 800587c:	250c      	movcc	r5, #12
 800587e:	2d00      	cmp	r5, #0
 8005880:	4607      	mov	r7, r0
 8005882:	db01      	blt.n	8005888 <_malloc_r+0x1c>
 8005884:	42a9      	cmp	r1, r5
 8005886:	d905      	bls.n	8005894 <_malloc_r+0x28>
 8005888:	230c      	movs	r3, #12
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	2600      	movs	r6, #0
 800588e:	4630      	mov	r0, r6
 8005890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005894:	4e2e      	ldr	r6, [pc, #184]	; (8005950 <_malloc_r+0xe4>)
 8005896:	f000 f89d 	bl	80059d4 <__malloc_lock>
 800589a:	6833      	ldr	r3, [r6, #0]
 800589c:	461c      	mov	r4, r3
 800589e:	bb34      	cbnz	r4, 80058ee <_malloc_r+0x82>
 80058a0:	4629      	mov	r1, r5
 80058a2:	4638      	mov	r0, r7
 80058a4:	f7ff ffc2 	bl	800582c <sbrk_aligned>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	4604      	mov	r4, r0
 80058ac:	d14d      	bne.n	800594a <_malloc_r+0xde>
 80058ae:	6834      	ldr	r4, [r6, #0]
 80058b0:	4626      	mov	r6, r4
 80058b2:	2e00      	cmp	r6, #0
 80058b4:	d140      	bne.n	8005938 <_malloc_r+0xcc>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	4631      	mov	r1, r6
 80058ba:	4638      	mov	r0, r7
 80058bc:	eb04 0803 	add.w	r8, r4, r3
 80058c0:	f000 f878 	bl	80059b4 <_sbrk_r>
 80058c4:	4580      	cmp	r8, r0
 80058c6:	d13a      	bne.n	800593e <_malloc_r+0xd2>
 80058c8:	6821      	ldr	r1, [r4, #0]
 80058ca:	3503      	adds	r5, #3
 80058cc:	1a6d      	subs	r5, r5, r1
 80058ce:	f025 0503 	bic.w	r5, r5, #3
 80058d2:	3508      	adds	r5, #8
 80058d4:	2d0c      	cmp	r5, #12
 80058d6:	bf38      	it	cc
 80058d8:	250c      	movcc	r5, #12
 80058da:	4629      	mov	r1, r5
 80058dc:	4638      	mov	r0, r7
 80058de:	f7ff ffa5 	bl	800582c <sbrk_aligned>
 80058e2:	3001      	adds	r0, #1
 80058e4:	d02b      	beq.n	800593e <_malloc_r+0xd2>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	442b      	add	r3, r5
 80058ea:	6023      	str	r3, [r4, #0]
 80058ec:	e00e      	b.n	800590c <_malloc_r+0xa0>
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	1b52      	subs	r2, r2, r5
 80058f2:	d41e      	bmi.n	8005932 <_malloc_r+0xc6>
 80058f4:	2a0b      	cmp	r2, #11
 80058f6:	d916      	bls.n	8005926 <_malloc_r+0xba>
 80058f8:	1961      	adds	r1, r4, r5
 80058fa:	42a3      	cmp	r3, r4
 80058fc:	6025      	str	r5, [r4, #0]
 80058fe:	bf18      	it	ne
 8005900:	6059      	strne	r1, [r3, #4]
 8005902:	6863      	ldr	r3, [r4, #4]
 8005904:	bf08      	it	eq
 8005906:	6031      	streq	r1, [r6, #0]
 8005908:	5162      	str	r2, [r4, r5]
 800590a:	604b      	str	r3, [r1, #4]
 800590c:	4638      	mov	r0, r7
 800590e:	f104 060b 	add.w	r6, r4, #11
 8005912:	f000 f865 	bl	80059e0 <__malloc_unlock>
 8005916:	f026 0607 	bic.w	r6, r6, #7
 800591a:	1d23      	adds	r3, r4, #4
 800591c:	1af2      	subs	r2, r6, r3
 800591e:	d0b6      	beq.n	800588e <_malloc_r+0x22>
 8005920:	1b9b      	subs	r3, r3, r6
 8005922:	50a3      	str	r3, [r4, r2]
 8005924:	e7b3      	b.n	800588e <_malloc_r+0x22>
 8005926:	6862      	ldr	r2, [r4, #4]
 8005928:	42a3      	cmp	r3, r4
 800592a:	bf0c      	ite	eq
 800592c:	6032      	streq	r2, [r6, #0]
 800592e:	605a      	strne	r2, [r3, #4]
 8005930:	e7ec      	b.n	800590c <_malloc_r+0xa0>
 8005932:	4623      	mov	r3, r4
 8005934:	6864      	ldr	r4, [r4, #4]
 8005936:	e7b2      	b.n	800589e <_malloc_r+0x32>
 8005938:	4634      	mov	r4, r6
 800593a:	6876      	ldr	r6, [r6, #4]
 800593c:	e7b9      	b.n	80058b2 <_malloc_r+0x46>
 800593e:	230c      	movs	r3, #12
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4638      	mov	r0, r7
 8005944:	f000 f84c 	bl	80059e0 <__malloc_unlock>
 8005948:	e7a1      	b.n	800588e <_malloc_r+0x22>
 800594a:	6025      	str	r5, [r4, #0]
 800594c:	e7de      	b.n	800590c <_malloc_r+0xa0>
 800594e:	bf00      	nop
 8005950:	20000170 	.word	0x20000170

08005954 <_realloc_r>:
 8005954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005958:	4680      	mov	r8, r0
 800595a:	4614      	mov	r4, r2
 800595c:	460e      	mov	r6, r1
 800595e:	b921      	cbnz	r1, 800596a <_realloc_r+0x16>
 8005960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005964:	4611      	mov	r1, r2
 8005966:	f7ff bf81 	b.w	800586c <_malloc_r>
 800596a:	b92a      	cbnz	r2, 8005978 <_realloc_r+0x24>
 800596c:	f7ff ff12 	bl	8005794 <_free_r>
 8005970:	4625      	mov	r5, r4
 8005972:	4628      	mov	r0, r5
 8005974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005978:	f000 f838 	bl	80059ec <_malloc_usable_size_r>
 800597c:	4284      	cmp	r4, r0
 800597e:	4607      	mov	r7, r0
 8005980:	d802      	bhi.n	8005988 <_realloc_r+0x34>
 8005982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005986:	d812      	bhi.n	80059ae <_realloc_r+0x5a>
 8005988:	4621      	mov	r1, r4
 800598a:	4640      	mov	r0, r8
 800598c:	f7ff ff6e 	bl	800586c <_malloc_r>
 8005990:	4605      	mov	r5, r0
 8005992:	2800      	cmp	r0, #0
 8005994:	d0ed      	beq.n	8005972 <_realloc_r+0x1e>
 8005996:	42bc      	cmp	r4, r7
 8005998:	4622      	mov	r2, r4
 800599a:	4631      	mov	r1, r6
 800599c:	bf28      	it	cs
 800599e:	463a      	movcs	r2, r7
 80059a0:	f7ff fed0 	bl	8005744 <memcpy>
 80059a4:	4631      	mov	r1, r6
 80059a6:	4640      	mov	r0, r8
 80059a8:	f7ff fef4 	bl	8005794 <_free_r>
 80059ac:	e7e1      	b.n	8005972 <_realloc_r+0x1e>
 80059ae:	4635      	mov	r5, r6
 80059b0:	e7df      	b.n	8005972 <_realloc_r+0x1e>
	...

080059b4 <_sbrk_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d06      	ldr	r5, [pc, #24]	; (80059d0 <_sbrk_r+0x1c>)
 80059b8:	2300      	movs	r3, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	f7fb f94a 	bl	8000c58 <_sbrk>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_sbrk_r+0x1a>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_sbrk_r+0x1a>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	20000178 	.word	0x20000178

080059d4 <__malloc_lock>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__malloc_lock+0x8>)
 80059d6:	f000 b811 	b.w	80059fc <__retarget_lock_acquire_recursive>
 80059da:	bf00      	nop
 80059dc:	2000017c 	.word	0x2000017c

080059e0 <__malloc_unlock>:
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <__malloc_unlock+0x8>)
 80059e2:	f000 b80c 	b.w	80059fe <__retarget_lock_release_recursive>
 80059e6:	bf00      	nop
 80059e8:	2000017c 	.word	0x2000017c

080059ec <_malloc_usable_size_r>:
 80059ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f0:	1f18      	subs	r0, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfbc      	itt	lt
 80059f6:	580b      	ldrlt	r3, [r1, r0]
 80059f8:	18c0      	addlt	r0, r0, r3
 80059fa:	4770      	bx	lr

080059fc <__retarget_lock_acquire_recursive>:
 80059fc:	4770      	bx	lr

080059fe <__retarget_lock_release_recursive>:
 80059fe:	4770      	bx	lr

08005a00 <_init>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	bf00      	nop
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr

08005a0c <_fini>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	bf00      	nop
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr
