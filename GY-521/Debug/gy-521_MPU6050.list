
gy-521_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006e20  08006e20  00016e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800724c  0800724c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007254  08007254  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800725c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000154  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000330  20000330  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000baee  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6b  00000000  00000000  0002bcfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002d768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000998  00000000  00000000  0002e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ade  00000000  00000000  0002eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf29  00000000  00000000  00052616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d54b6  00000000  00000000  0005f53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001349f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b94  00000000  00000000  00134a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e08 	.word	0x08006e08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08006e08 	.word	0x08006e08

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <MPU_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_Init(void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af04      	add	r7, sp, #16
 uint8_t check, value;

 HAL_I2C_Mem_Read(&hi2c1,MPU_ADDR,MPU_WHO_AM_I,1,&check,1,1000);
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	2275      	movs	r2, #117	; 0x75
 8000ee4:	21d0      	movs	r1, #208	; 0xd0
 8000ee6:	4823      	ldr	r0, [pc, #140]	; (8000f74 <MPU_Init+0xa8>)
 8000ee8:	f001 f9d4 	bl	8002294 <HAL_I2C_Mem_Read>

 if(check == 104){
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b68      	cmp	r3, #104	; 0x68
 8000ef0:	d13b      	bne.n	8000f6a <MPU_Init+0x9e>
	 value = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1,MPU_ADDR,MPU_PWR,1,&value,1,1000);
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	226b      	movs	r2, #107	; 0x6b
 8000f08:	21d0      	movs	r1, #208	; 0xd0
 8000f0a:	481a      	ldr	r0, [pc, #104]	; (8000f74 <MPU_Init+0xa8>)
 8000f0c:	f001 f8c8 	bl	80020a0 <HAL_I2C_Mem_Write>

	 value = 0x07;
 8000f10:	2307      	movs	r3, #7
 8000f12:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1,MPU_ADDR,MPU_DIV,1,&value,1,1000);
 8000f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	1dbb      	adds	r3, r7, #6
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	2219      	movs	r2, #25
 8000f26:	21d0      	movs	r1, #208	; 0xd0
 8000f28:	4812      	ldr	r0, [pc, #72]	; (8000f74 <MPU_Init+0xa8>)
 8000f2a:	f001 f8b9 	bl	80020a0 <HAL_I2C_Mem_Write>

	 value = 0x00;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1,MPU_ADDR,MPU_GYRO_CONFIG,1,&value,1,1000);
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	221b      	movs	r2, #27
 8000f44:	21d0      	movs	r1, #208	; 0xd0
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <MPU_Init+0xa8>)
 8000f48:	f001 f8aa 	bl	80020a0 <HAL_I2C_Mem_Write>

	 value = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	71bb      	strb	r3, [r7, #6]
	 HAL_I2C_Mem_Write(&hi2c1,MPU_ADDR,MPU_ACCEL_CONFIG,1,&value,1,1000);
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	1dbb      	adds	r3, r7, #6
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	221c      	movs	r2, #28
 8000f62:	21d0      	movs	r1, #208	; 0xd0
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MPU_Init+0xa8>)
 8000f66:	f001 f89b 	bl	80020a0 <HAL_I2C_Mem_Write>


 }
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000280 	.word	0x20000280

08000f78 <MPU_Read_ACCEL>:
void MPU_Read_ACCEL(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af04      	add	r7, sp, #16
	uint8_t value_arr [6];

	HAL_I2C_Mem_Read(&hi2c1,MPU_ADDR,MPU_XOUT_H,1,value_arr,6,1000);
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2306      	movs	r3, #6
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	463b      	mov	r3, r7
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	223b      	movs	r2, #59	; 0x3b
 8000f90:	21d0      	movs	r1, #208	; 0xd0
 8000f92:	4826      	ldr	r0, [pc, #152]	; (800102c <MPU_Read_ACCEL+0xb4>)
 8000f94:	f001 f97e 	bl	8002294 <HAL_I2C_Mem_Read>

	ACCEL_X_RAW = (int16_t)(value_arr [0]<<8 | value_arr[1]);
 8000f98:	783b      	ldrb	r3, [r7, #0]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	787b      	ldrb	r3, [r7, #1]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MPU_Read_ACCEL+0xb8>)
 8000fa8:	801a      	strh	r2, [r3, #0]
	ACCEL_Y_RAW = (int16_t)(value_arr [2]<<8 | value_arr[3]);
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <MPU_Read_ACCEL+0xbc>)
 8000fba:	801a      	strh	r2, [r3, #0]
	ACCEL_Z_RAW = (int16_t)(value_arr [4]<<8 | value_arr[5]);
 8000fbc:	793b      	ldrb	r3, [r7, #4]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	797b      	ldrb	r3, [r7, #5]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MPU_Read_ACCEL+0xc0>)
 8000fcc:	801a      	strh	r2, [r3, #0]


	X_Accel = (float)ACCEL_X_RAW/16384.0;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MPU_Read_ACCEL+0xb8>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fdc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800103c <MPU_Read_ACCEL+0xc4>
 8000fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MPU_Read_ACCEL+0xc8>)
 8000fe6:	edc3 7a00 	vstr	s15, [r3]
	Y_Accel = (float)ACCEL_Y_RAW/16384.0;
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MPU_Read_ACCEL+0xbc>)
 8000fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800103c <MPU_Read_ACCEL+0xc4>
 8000ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MPU_Read_ACCEL+0xcc>)
 8001002:	edc3 7a00 	vstr	s15, [r3]
    Z_Accel = (float)ACCEL_Z_RAW/16384.0;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MPU_Read_ACCEL+0xc0>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001014:	eddf 6a09 	vldr	s13, [pc, #36]	; 800103c <MPU_Read_ACCEL+0xc4>
 8001018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <MPU_Read_ACCEL+0xd0>)
 800101e:	edc3 7a00 	vstr	s15, [r3]
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000280 	.word	0x20000280
 8001030:	2000025c 	.word	0x2000025c
 8001034:	2000025e 	.word	0x2000025e
 8001038:	20000260 	.word	0x20000260
 800103c:	46800000 	.word	0x46800000
 8001040:	20000268 	.word	0x20000268
 8001044:	2000026c 	.word	0x2000026c
 8001048:	20000270 	.word	0x20000270

0800104c <MPU_Read_Gyro>:

void MPU_Read_Gyro(void){
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af04      	add	r7, sp, #16
	uint8_t value_arr [6];

	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR,MPU_XOUT_H,1,value_arr,6,1000);
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2306      	movs	r3, #6
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	463b      	mov	r3, r7
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	223b      	movs	r2, #59	; 0x3b
 8001064:	21d0      	movs	r1, #208	; 0xd0
 8001066:	4826      	ldr	r0, [pc, #152]	; (8001100 <MPU_Read_Gyro+0xb4>)
 8001068:	f001 f914 	bl	8002294 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(value_arr [0]<<8 | value_arr[1]);
 800106c:	783b      	ldrb	r3, [r7, #0]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	787b      	ldrb	r3, [r7, #1]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MPU_Read_Gyro+0xb8>)
 800107c:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(value_arr [2]<<8 | value_arr[3]);
 800107e:	78bb      	ldrb	r3, [r7, #2]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MPU_Read_Gyro+0xbc>)
 800108e:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(value_arr [4]<<8 | value_arr[5]);
 8001090:	793b      	ldrb	r3, [r7, #4]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MPU_Read_Gyro+0xc0>)
 80010a0:	801a      	strh	r2, [r3, #0]

	X_Gyro = (float)Gyro_X_RAW/131.0;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MPU_Read_Gyro+0xb8>)
 80010a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001110 <MPU_Read_Gyro+0xc4>
 80010b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MPU_Read_Gyro+0xc8>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	Y_Gyro = (float)Gyro_Y_RAW/131.0;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MPU_Read_Gyro+0xbc>)
 80010c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010cc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001110 <MPU_Read_Gyro+0xc4>
 80010d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MPU_Read_Gyro+0xcc>)
 80010d6:	edc3 7a00 	vstr	s15, [r3]
	Z_Gyro = (float)Gyro_Z_RAW/131.0;
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MPU_Read_Gyro+0xc0>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001110 <MPU_Read_Gyro+0xc4>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <MPU_Read_Gyro+0xd0>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000280 	.word	0x20000280
 8001104:	20000262 	.word	0x20000262
 8001108:	20000264 	.word	0x20000264
 800110c:	20000266 	.word	0x20000266
 8001110:	43030000 	.word	0x43030000
 8001114:	20000274 	.word	0x20000274
 8001118:	20000278 	.word	0x20000278
 800111c:	2000027c 	.word	0x2000027c

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001128:	f000 fb4e 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112c:	f000 f844 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f000 f91c 	bl	800136c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001134:	f000 f8f0 	bl	8001318 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001138:	f000 f8ae 	bl	8001298 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   MPU_Init();
 800113c:	f7ff fec6 	bl	8000ecc <MPU_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
   MPU_Read_ACCEL();
 8001140:	f7ff ff1a 	bl	8000f78 <MPU_Read_ACCEL>
   MPU_Read_Gyro();
 8001144:	f7ff ff82 	bl	800104c <MPU_Read_Gyro>

   sprintf(uart_buf,"ACCEL_X = %.2f\r\n,ACCEL_Y = %.2f\r\n,ACCEL_Z = %.2f\r\n, ",X_Accel,Y_Accel,Z_Accel);
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <main+0x80>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa0b 	bl	8000568 <__aeabi_f2d>
 8001152:	4680      	mov	r8, r0
 8001154:	4689      	mov	r9, r1
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <main+0x84>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa04 	bl	8000568 <__aeabi_f2d>
 8001160:	4604      	mov	r4, r0
 8001162:	460d      	mov	r5, r1
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <main+0x88>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9fd 	bl	8000568 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001176:	e9cd 4500 	strd	r4, r5, [sp]
 800117a:	4642      	mov	r2, r8
 800117c:	464b      	mov	r3, r9
 800117e:	490b      	ldr	r1, [pc, #44]	; (80011ac <main+0x8c>)
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <main+0x90>)
 8001182:	f003 fbc9 	bl	8004918 <siprintf>


   HAL_UART_Transmit(&huart3,uart_buf,sizeof(uart_buf),0xFFFF);
 8001186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118a:	2264      	movs	r2, #100	; 0x64
 800118c:	4908      	ldr	r1, [pc, #32]	; (80011b0 <main+0x90>)
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <main+0x94>)
 8001190:	f002 fbb1 	bl	80038f6 <HAL_UART_Transmit>
   HAL_Delay(1000);
 8001194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001198:	f000 fb88 	bl	80018ac <HAL_Delay>
  {
 800119c:	e7d0      	b.n	8001140 <main+0x20>
 800119e:	bf00      	nop
 80011a0:	20000268 	.word	0x20000268
 80011a4:	2000026c 	.word	0x2000026c
 80011a8:	20000270 	.word	0x20000270
 80011ac:	08006e20 	.word	0x08006e20
 80011b0:	200001f8 	.word	0x200001f8
 80011b4:	200002d4 	.word	0x200002d4

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 ff34 	bl	8004034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <SystemClock_Config+0xd8>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <SystemClock_Config+0xd8>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <SystemClock_Config+0xd8>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b25      	ldr	r3, [pc, #148]	; (8001294 <SystemClock_Config+0xdc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a24      	ldr	r2, [pc, #144]	; (8001294 <SystemClock_Config+0xdc>)
 8001202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <SystemClock_Config+0xdc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001214:	2301      	movs	r3, #1
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001218:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001228:	2304      	movs	r3, #4
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800122c:	23b4      	movs	r3, #180	; 0xb4
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001234:	2307      	movs	r3, #7
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fe75 	bl	8002f2c <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001248:	f000 f8d4 	bl	80013f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800124c:	f001 fe1e 	bl	8002e8c <HAL_PWREx_EnableOverDrive>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001256:	f000 f8cd 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001266:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800126a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800126c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001270:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2105      	movs	r1, #5
 8001278:	4618      	mov	r0, r3
 800127a:	f002 f8cf 	bl	800341c <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001284:	f000 f8b6 	bl	80013f4 <Error_Handler>
  }
}
 8001288:	bf00      	nop
 800128a:	3750      	adds	r7, #80	; 0x50
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_I2C1_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <MX_I2C1_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_I2C1_Init+0x74>)
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_I2C1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_I2C1_Init+0x74>)
 80012b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_I2C1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_I2C1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_I2C1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_I2C1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_I2C1_Init+0x74>)
 80012d6:	f000 fd9f 	bl	8001e18 <HAL_I2C_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e0:	f000 f888 	bl	80013f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e4:	2100      	movs	r1, #0
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <MX_I2C1_Init+0x74>)
 80012e8:	f001 fd55 	bl	8002d96 <HAL_I2CEx_ConfigAnalogFilter>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012f2:	f000 f87f 	bl	80013f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_I2C1_Init+0x74>)
 80012fa:	f001 fd88 	bl	8002e0e <HAL_I2CEx_ConfigDigitalFilter>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001304:	f000 f876 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000280 	.word	0x20000280
 8001310:	40005400 	.word	0x40005400
 8001314:	000186a0 	.word	0x000186a0

08001318 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_USART3_UART_Init+0x4c>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_USART3_UART_Init+0x50>)
 8001320:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_USART3_UART_Init+0x4c>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_USART3_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_USART3_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_USART3_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_USART3_UART_Init+0x4c>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_USART3_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_USART3_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_USART3_UART_Init+0x4c>)
 8001350:	f002 fa84 	bl	800385c <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800135a:	f000 f84b 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200002d4 	.word	0x200002d4
 8001368:	40004800 	.word	0x40004800

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_GPIO_Init+0x84>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <MX_GPIO_Init+0x84>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_GPIO_Init+0x84>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_GPIO_Init+0x84>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <MX_GPIO_Init+0x84>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_GPIO_Init+0x84>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_GPIO_Init+0x84>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <MX_GPIO_Init+0x84>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <MX_GPIO_Init+0x84>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_GPIO_Init+0x84>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <MX_GPIO_Init+0x84>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_GPIO_Init+0x84>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_MspInit+0x4c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_I2C_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12c      	bne.n	80014cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800148e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001494:	2312      	movs	r3, #18
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a0:	2304      	movs	r3, #4
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	480c      	ldr	r0, [pc, #48]	; (80014dc <HAL_I2C_MspInit+0x8c>)
 80014ac:	f000 fb08 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_I2C_MspInit+0x88>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_UART_MspInit+0x84>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d12c      	bne.n	800155c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a17      	ldr	r2, [pc, #92]	; (8001568 <HAL_UART_MspInit+0x88>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800153a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800154c:	2307      	movs	r3, #7
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_UART_MspInit+0x8c>)
 8001558:	f000 fab2 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40004800 	.word	0x40004800
 8001568:	40023800 	.word	0x40023800
 800156c:	40020c00 	.word	0x40020c00

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015bc:	f000 f956 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return 1;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_kill>:

int _kill(int pid, int sig)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015de:	f002 fcff 	bl	8003fe0 <__errno>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2216      	movs	r2, #22
 80015e6:	601a      	str	r2, [r3, #0]
  return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_exit>:

void _exit (int status)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffe7 	bl	80015d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001606:	e7fe      	b.n	8001606 <_exit+0x12>

08001608 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e00a      	b.n	8001630 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800161a:	f3af 8000 	nop.w
 800161e:	4601      	mov	r1, r0
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	60ba      	str	r2, [r7, #8]
 8001626:	b2ca      	uxtb	r2, r1
 8001628:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbf0      	blt.n	800161a <_read+0x12>
  }

  return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e009      	b.n	8001668 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbf1      	blt.n	8001654 <_write+0x12>
  }
  return len;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_close>:

int _close(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a2:	605a      	str	r2, [r3, #4]
  return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_isatty>:

int _isatty(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f002 fc64 	bl	8003fe0 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20030000 	.word	0x20030000
 8001744:	00000400 	.word	0x00000400
 8001748:	20000318 	.word	0x20000318
 800174c:	20000330 	.word	0x20000330

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800177a:	490e      	ldr	r1, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001790:	4c0b      	ldr	r4, [pc, #44]	; (80017c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800179e:	f7ff ffd7 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f002 fc23 	bl	8003fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7ff fcbb 	bl	8001120 <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017b8:	0800725c 	.word	0x0800725c
  ldr r2, =_sbss
 80017bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017c0:	20000330 	.word	0x20000330

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f931 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fe00 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f93b 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f911 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000000 	.word	0x20000000
 8001864:	20000008 	.word	0x20000008
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008
 8001890:	2000031c 	.word	0x2000031c

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000031c 	.word	0x2000031c

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff47 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff5c 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff8e 	bl	80019ac <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffb0 	bl	8001a14 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e177      	b.n	8001dcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 8166 	bne.w	8001dc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d005      	beq.n	8001b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d130      	bne.n	8001b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d017      	beq.n	8001bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d123      	bne.n	8001c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	69b9      	ldr	r1, [r7, #24]
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80c0 	beq.w	8001dc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a65      	ldr	r2, [pc, #404]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c62:	4a61      	ldr	r2, [pc, #388]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a58      	ldr	r2, [pc, #352]	; (8001dec <HAL_GPIO_Init+0x32c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d037      	beq.n	8001cfe <HAL_GPIO_Init+0x23e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d031      	beq.n	8001cfa <HAL_GPIO_Init+0x23a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a56      	ldr	r2, [pc, #344]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d02b      	beq.n	8001cf6 <HAL_GPIO_Init+0x236>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <HAL_GPIO_Init+0x338>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x232>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a54      	ldr	r2, [pc, #336]	; (8001dfc <HAL_GPIO_Init+0x33c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a53      	ldr	r2, [pc, #332]	; (8001e00 <HAL_GPIO_Init+0x340>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x22a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_GPIO_Init+0x344>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x348>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x34c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x21a>
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	e012      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cda:	230a      	movs	r3, #10
 8001cdc:	e010      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cde:	2308      	movs	r3, #8
 8001ce0:	e00e      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae84 	bls.w	8001adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40021c00 	.word	0x40021c00
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40022400 	.word	0x40022400
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e12b      	b.n	8002082 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fb06 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	; 0x24
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e7c:	f001 fcc6 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8001e80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4a81      	ldr	r2, [pc, #516]	; (800208c <HAL_I2C_Init+0x274>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d807      	bhi.n	8001e9c <HAL_I2C_Init+0x84>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a80      	ldr	r2, [pc, #512]	; (8002090 <HAL_I2C_Init+0x278>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	bf94      	ite	ls
 8001e94:	2301      	movls	r3, #1
 8001e96:	2300      	movhi	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e006      	b.n	8001eaa <HAL_I2C_Init+0x92>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a7d      	ldr	r2, [pc, #500]	; (8002094 <HAL_I2C_Init+0x27c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	bf94      	ite	ls
 8001ea4:	2301      	movls	r3, #1
 8001ea6:	2300      	movhi	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0e7      	b.n	8002082 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4a78      	ldr	r2, [pc, #480]	; (8002098 <HAL_I2C_Init+0x280>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0c9b      	lsrs	r3, r3, #18
 8001ebc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a6a      	ldr	r2, [pc, #424]	; (800208c <HAL_I2C_Init+0x274>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d802      	bhi.n	8001eec <HAL_I2C_Init+0xd4>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	e009      	b.n	8001f00 <HAL_I2C_Init+0xe8>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	4a69      	ldr	r2, [pc, #420]	; (800209c <HAL_I2C_Init+0x284>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	3301      	adds	r3, #1
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	495c      	ldr	r1, [pc, #368]	; (800208c <HAL_I2C_Init+0x274>)
 8001f1c:	428b      	cmp	r3, r1
 8001f1e:	d819      	bhi.n	8001f54 <HAL_I2C_Init+0x13c>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e59      	subs	r1, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f2e:	1c59      	adds	r1, r3, #1
 8001f30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f34:	400b      	ands	r3, r1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_I2C_Init+0x138>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e59      	subs	r1, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4e:	e051      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001f50:	2304      	movs	r3, #4
 8001f52:	e04f      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d111      	bne.n	8001f80 <HAL_I2C_Init+0x168>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1e58      	subs	r0, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	440b      	add	r3, r1
 8001f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e012      	b.n	8001fa6 <HAL_I2C_Init+0x18e>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	0099      	lsls	r1, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Init+0x196>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e022      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_I2C_Init+0x1bc>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1e58      	subs	r0, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	440b      	add	r3, r1
 8001fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd2:	e00f      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e58      	subs	r0, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	0099      	lsls	r1, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	6809      	ldr	r1, [r1, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6911      	ldr	r1, [r2, #16]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68d2      	ldr	r2, [r2, #12]
 800202e:	4311      	orrs	r1, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	430b      	orrs	r3, r1
 8002036:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	000186a0 	.word	0x000186a0
 8002090:	001e847f 	.word	0x001e847f
 8002094:	003d08ff 	.word	0x003d08ff
 8002098:	431bde83 	.word	0x431bde83
 800209c:	10624dd3 	.word	0x10624dd3

080020a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	4608      	mov	r0, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	461a      	mov	r2, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	817b      	strh	r3, [r7, #10]
 80020b2:	460b      	mov	r3, r1
 80020b4:	813b      	strh	r3, [r7, #8]
 80020b6:	4613      	mov	r3, r2
 80020b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ba:	f7ff fbeb 	bl	8001894 <HAL_GetTick>
 80020be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	f040 80d9 	bne.w	8002280 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2319      	movs	r3, #25
 80020d4:	2201      	movs	r2, #1
 80020d6:	496d      	ldr	r1, [pc, #436]	; (800228c <HAL_I2C_Mem_Write+0x1ec>)
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fc7f 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
 80020e6:	e0cc      	b.n	8002282 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_I2C_Mem_Write+0x56>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e0c5      	b.n	8002282 <HAL_I2C_Mem_Write+0x1e2>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d007      	beq.n	800211c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2221      	movs	r2, #33	; 0x21
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2240      	movs	r2, #64	; 0x40
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800214c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a4d      	ldr	r2, [pc, #308]	; (8002290 <HAL_I2C_Mem_Write+0x1f0>)
 800215c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800215e:	88f8      	ldrh	r0, [r7, #6]
 8002160:	893a      	ldrh	r2, [r7, #8]
 8002162:	8979      	ldrh	r1, [r7, #10]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	4603      	mov	r3, r0
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fab6 	bl	80026e0 <I2C_RequestMemoryWrite>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d052      	beq.n	8002220 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e081      	b.n	8002282 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fd00 	bl	8002b88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	2b04      	cmp	r3, #4
 8002194:	d107      	bne.n	80021a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e06b      	b.n	8002282 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d11b      	bne.n	8002220 <HAL_I2C_Mem_Write+0x180>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d017      	beq.n	8002220 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1aa      	bne.n	800217e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fcec 	bl	8002c0a <I2C_WaitOnBTFFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00d      	beq.n	8002254 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	2b04      	cmp	r3, #4
 800223e:	d107      	bne.n	8002250 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e016      	b.n	8002282 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	00100002 	.word	0x00100002
 8002290:	ffff0000 	.word	0xffff0000

08002294 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	817b      	strh	r3, [r7, #10]
 80022a6:	460b      	mov	r3, r1
 80022a8:	813b      	strh	r3, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ae:	f7ff faf1 	bl	8001894 <HAL_GetTick>
 80022b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b20      	cmp	r3, #32
 80022be:	f040 8208 	bne.w	80026d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2319      	movs	r3, #25
 80022c8:	2201      	movs	r2, #1
 80022ca:	497b      	ldr	r1, [pc, #492]	; (80024b8 <HAL_I2C_Mem_Read+0x224>)
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fb85 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
 80022da:	e1fb      	b.n	80026d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_I2C_Mem_Read+0x56>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e1f4      	b.n	80026d4 <HAL_I2C_Mem_Read+0x440>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d007      	beq.n	8002310 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2222      	movs	r2, #34	; 0x22
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2240      	movs	r2, #64	; 0x40
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a5b      	ldr	r2, [pc, #364]	; (80024bc <HAL_I2C_Mem_Read+0x228>)
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002352:	88f8      	ldrh	r0, [r7, #6]
 8002354:	893a      	ldrh	r2, [r7, #8]
 8002356:	8979      	ldrh	r1, [r7, #10]
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	4603      	mov	r3, r0
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fa52 	bl	800280c <I2C_RequestMemoryRead>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1b0      	b.n	80026d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	2b00      	cmp	r3, #0
 8002378:	d113      	bne.n	80023a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e184      	b.n	80026ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d11b      	bne.n	80023e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e164      	b.n	80026ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d11b      	bne.n	8002422 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	e144      	b.n	80026ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002438:	e138      	b.n	80026ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	2b03      	cmp	r3, #3
 8002440:	f200 80f1 	bhi.w	8002626 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	2b01      	cmp	r3, #1
 800244a:	d123      	bne.n	8002494 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fc1b 	bl	8002c8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e139      	b.n	80026d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002492:	e10b      	b.n	80026ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b02      	cmp	r3, #2
 800249a:	d14e      	bne.n	800253a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a2:	2200      	movs	r2, #0
 80024a4:	4906      	ldr	r1, [pc, #24]	; (80024c0 <HAL_I2C_Mem_Read+0x22c>)
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa98 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e10e      	b.n	80026d4 <HAL_I2C_Mem_Read+0x440>
 80024b6:	bf00      	nop
 80024b8:	00100002 	.word	0x00100002
 80024bc:	ffff0000 	.word	0xffff0000
 80024c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002538:	e0b8      	b.n	80026ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	2200      	movs	r2, #0
 8002542:	4966      	ldr	r1, [pc, #408]	; (80026dc <HAL_I2C_Mem_Read+0x448>)
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa49 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0bf      	b.n	80026d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	2200      	movs	r2, #0
 800259e:	494f      	ldr	r1, [pc, #316]	; (80026dc <HAL_I2C_Mem_Read+0x448>)
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fa1b 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e091      	b.n	80026d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002624:	e042      	b.n	80026ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fb2e 	bl	8002c8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e04c      	b.n	80026d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d118      	bne.n	80026ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f aec2 	bne.w	800243a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	00010004 	.word	0x00010004

080026e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	4608      	mov	r0, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	460b      	mov	r3, r1
 80026f4:	813b      	strh	r3, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	2200      	movs	r2, #0
 8002712:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f960 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002730:	d103      	bne.n	800273a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e05f      	b.n	80027fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800274c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	6a3a      	ldr	r2, [r7, #32]
 8002752:	492d      	ldr	r1, [pc, #180]	; (8002808 <I2C_RequestMemoryWrite+0x128>)
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f998 	bl	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e04c      	b.n	80027fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277c:	6a39      	ldr	r1, [r7, #32]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fa02 	bl	8002b88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00d      	beq.n	80027a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b04      	cmp	r3, #4
 8002790:	d107      	bne.n	80027a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e02b      	b.n	80027fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027ac:	893b      	ldrh	r3, [r7, #8]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	e021      	b.n	80027fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027b8:	893b      	ldrh	r3, [r7, #8]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	b29b      	uxth	r3, r3
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f9dc 	bl	8002b88 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d107      	bne.n	80027ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e005      	b.n	80027fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f2:	893b      	ldrh	r3, [r7, #8]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	00010002 	.word	0x00010002

0800280c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	4608      	mov	r0, r1
 8002816:	4611      	mov	r1, r2
 8002818:	461a      	mov	r2, r3
 800281a:	4603      	mov	r3, r0
 800281c:	817b      	strh	r3, [r7, #10]
 800281e:	460b      	mov	r3, r1
 8002820:	813b      	strh	r3, [r7, #8]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002834:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002844:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	2200      	movs	r2, #0
 800284e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f8c2 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286c:	d103      	bne.n	8002876 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0aa      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800287a:	897b      	ldrh	r3, [r7, #10]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002888:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	4952      	ldr	r1, [pc, #328]	; (80029d8 <I2C_RequestMemoryRead+0x1cc>)
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f8fa 	bl	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e097      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	6a39      	ldr	r1, [r7, #32]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f964 	bl	8002b88 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00d      	beq.n	80028e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d107      	bne.n	80028de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e076      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028e8:	893b      	ldrh	r3, [r7, #8]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	e021      	b.n	8002938 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028f4:	893b      	ldrh	r3, [r7, #8]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002904:	6a39      	ldr	r1, [r7, #32]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f93e 	bl	8002b88 <I2C_WaitOnTXEFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b04      	cmp	r3, #4
 8002918:	d107      	bne.n	800292a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002928:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e050      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800292e:	893b      	ldrh	r3, [r7, #8]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	6a39      	ldr	r1, [r7, #32]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f923 	bl	8002b88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	2b04      	cmp	r3, #4
 800294e:	d107      	bne.n	8002960 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e035      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002972:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2200      	movs	r2, #0
 800297c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f82b 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800299a:	d103      	bne.n	80029a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e013      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029a8:	897b      	ldrh	r3, [r7, #10]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	6a3a      	ldr	r2, [r7, #32]
 80029bc:	4906      	ldr	r1, [pc, #24]	; (80029d8 <I2C_RequestMemoryRead+0x1cc>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f863 	bl	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	00010002 	.word	0x00010002

080029dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ec:	e025      	b.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d021      	beq.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7fe ff4d 	bl	8001894 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d116      	bne.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e023      	b.n	8002a82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10d      	bne.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	e00c      	b.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d0b6      	beq.n	80029ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a98:	e051      	b.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa8:	d123      	bne.n	8002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f043 0204 	orr.w	r2, r3, #4
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e046      	b.n	8002b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d021      	beq.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7fe fecb 	bl	8001894 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d116      	bne.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e020      	b.n	8002b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10c      	bne.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	e00b      	b.n	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d18d      	bne.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b94:	e02d      	b.n	8002bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f8ce 	bl	8002d38 <I2C_IsAcknowledgeFailed>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e02d      	b.n	8002c02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d021      	beq.n	8002bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bae:	f7fe fe71 	bl	8001894 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d302      	bcc.n	8002bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d116      	bne.n	8002bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e007      	b.n	8002c02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d1ca      	bne.n	8002b96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c16:	e02d      	b.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f88d 	bl	8002d38 <I2C_IsAcknowledgeFailed>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e02d      	b.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	d021      	beq.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c30:	f7fe fe30 	bl	8001894 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d302      	bcc.n	8002c46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f043 0220 	orr.w	r2, r3, #32
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e007      	b.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d1ca      	bne.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c98:	e042      	b.n	8002d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d119      	bne.n	8002cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0210 	mvn.w	r2, #16
 8002cb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e029      	b.n	8002d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cdc:	f7fe fdda 	bl	8001894 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d302      	bcc.n	8002cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d116      	bne.n	8002d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e007      	b.n	8002d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d1b5      	bne.n	8002c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d11b      	bne.n	8002d88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0204 	orr.w	r2, r3, #4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d129      	bne.n	8002e00 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0210 	bic.w	r2, r2, #16
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e000      	b.n	8002e02 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
  }
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d12a      	bne.n	8002e7e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e48:	89fb      	ldrh	r3, [r7, #14]
 8002e4a:	f023 030f 	bic.w	r3, r3, #15
 8002e4e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	89fb      	ldrh	r3, [r7, #14]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	89fa      	ldrh	r2, [r7, #14]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_PWREx_EnableOverDrive+0x94>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb8:	f7fe fcec 	bl	8001894 <HAL_GetTick>
 8002ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ebe:	e009      	b.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ec0:	f7fe fce8 	bl	8001894 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ece:	d901      	bls.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e01f      	b.n	8002f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d1ee      	bne.n	8002ec0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee8:	f7fe fcd4 	bl	8001894 <HAL_GetTick>
 8002eec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eee:	e009      	b.n	8002f04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ef0:	f7fe fcd0 	bl	8001894 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002efe:	d901      	bls.n	8002f04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e007      	b.n	8002f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f10:	d1ee      	bne.n	8002ef0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	420e0040 	.word	0x420e0040
 8002f24:	40007000 	.word	0x40007000
 8002f28:	420e0044 	.word	0x420e0044

08002f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e267      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d075      	beq.n	8003036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f4a:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d00c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f56:	4b85      	ldr	r3, [pc, #532]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d112      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4b82      	ldr	r3, [pc, #520]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	4b7e      	ldr	r3, [pc, #504]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d05b      	beq.n	8003034 <HAL_RCC_OscConfig+0x108>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d157      	bne.n	8003034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e242      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x74>
 8002f92:	4b76      	ldr	r3, [pc, #472]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a75      	ldr	r2, [pc, #468]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e01d      	b.n	8002fdc <HAL_RCC_OscConfig+0xb0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x98>
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6f      	ldr	r2, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6c      	ldr	r2, [pc, #432]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCC_OscConfig+0xb0>
 8002fc4:	4b69      	ldr	r3, [pc, #420]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a68      	ldr	r2, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b66      	ldr	r3, [pc, #408]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a65      	ldr	r2, [pc, #404]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fc56 	bl	8001894 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe fc52 	bl	8001894 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e207      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0xc0>
 800300a:	e014      	b.n	8003036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe fc42 	bl	8001894 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003014:	f7fe fc3e 	bl	8001894 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e1f3      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	4b51      	ldr	r3, [pc, #324]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0xe8>
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d063      	beq.n	800310a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003042:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003056:	2b08      	cmp	r3, #8
 8003058:	d11c      	bne.n	8003094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b44      	ldr	r3, [pc, #272]	; (800316c <HAL_RCC_OscConfig+0x240>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d116      	bne.n	8003094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x152>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e1c7      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4937      	ldr	r1, [pc, #220]	; (800316c <HAL_RCC_OscConfig+0x240>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	e03a      	b.n	800310a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309c:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_RCC_OscConfig+0x244>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe fbf7 	bl	8001894 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030aa:	f7fe fbf3 	bl	8001894 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1a8      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4925      	ldr	r1, [pc, #148]	; (800316c <HAL_RCC_OscConfig+0x240>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
 80030dc:	e015      	b.n	800310a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x244>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe fbd6 	bl	8001894 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ec:	f7fe fbd2 	bl	8001894 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e187      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d036      	beq.n	8003184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x248>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe fbb6 	bl	8001894 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312c:	f7fe fbb2 	bl	8001894 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e167      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x200>
 800314a:	e01b      	b.n	8003184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_OscConfig+0x248>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003152:	f7fe fb9f 	bl	8001894 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	e00e      	b.n	8003178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800315a:	f7fe fb9b 	bl	8001894 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d907      	bls.n	8003178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e150      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	42470000 	.word	0x42470000
 8003174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b88      	ldr	r3, [pc, #544]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ea      	bne.n	800315a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8097 	beq.w	80032c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b81      	ldr	r3, [pc, #516]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	4b7d      	ldr	r3, [pc, #500]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a7c      	ldr	r2, [pc, #496]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b7a      	ldr	r3, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b77      	ldr	r3, [pc, #476]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b74      	ldr	r3, [pc, #464]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a73      	ldr	r2, [pc, #460]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe fb5b 	bl	8001894 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe fb57 	bl	8001894 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e10c      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x2ea>
 8003208:	4b64      	ldr	r3, [pc, #400]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a63      	ldr	r2, [pc, #396]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	e01c      	b.n	8003250 <HAL_RCC_OscConfig+0x324>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x30c>
 800321e:	4b5f      	ldr	r3, [pc, #380]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a5e      	ldr	r2, [pc, #376]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	4b5c      	ldr	r3, [pc, #368]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a5b      	ldr	r2, [pc, #364]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0x324>
 8003238:	4b58      	ldr	r3, [pc, #352]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4a57      	ldr	r2, [pc, #348]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6713      	str	r3, [r2, #112]	; 0x70
 8003244:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a54      	ldr	r2, [pc, #336]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 0304 	bic.w	r3, r3, #4
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe fb1c 	bl	8001894 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	e00a      	b.n	8003276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe fb18 	bl	8001894 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0cb      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003276:	4b49      	ldr	r3, [pc, #292]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ee      	beq.n	8003260 <HAL_RCC_OscConfig+0x334>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003284:	f7fe fb06 	bl	8001894 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe fb02 	bl	8001894 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0b5      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a2:	4b3e      	ldr	r3, [pc, #248]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1ee      	bne.n	800328c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b4:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a1 	beq.w	800340c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ca:	4b34      	ldr	r3, [pc, #208]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d05c      	beq.n	8003390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d141      	bne.n	8003362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCC_OscConfig+0x478>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fad6 	bl	8001894 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe fad2 	bl	8001894 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e087      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	3b01      	subs	r3, #1
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	491b      	ldr	r1, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x478>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe faab 	bl	8001894 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe faa7 	bl	8001894 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e05c      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x416>
 8003360:	e054      	b.n	800340c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x478>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fa94 	bl	8001894 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe fa90 	bl	8001894 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e045      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x444>
 800338e:	e03d      	b.n	800340c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e038      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
 800339c:	40023800 	.word	0x40023800
 80033a0:	40007000 	.word	0x40007000
 80033a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x4ec>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d028      	beq.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d121      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d11a      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d111      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0cc      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003430:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d90c      	bls.n	8003458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b65      	ldr	r3, [pc, #404]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800347a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d044      	beq.n	800353c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d119      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d003      	beq.n	80034da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e06f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e067      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fa:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 0203 	bic.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4934      	ldr	r1, [pc, #208]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800350c:	f7fe f9c2 	bl	8001894 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	e00a      	b.n	800352a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003514:	f7fe f9be 	bl	8001894 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e04f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 020c 	and.w	r2, r3, #12
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	429a      	cmp	r2, r3
 800353a:	d1eb      	bne.n	8003514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d20c      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490a      	ldr	r1, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe f922 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023c00 	.word	0x40023c00
 80035d8:	40023800 	.word	0x40023800
 80035dc:	08006e58 	.word	0x08006e58
 80035e0:	20000000 	.word	0x20000000
 80035e4:	20000004 	.word	0x20000004

080035e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ec:	b094      	sub	sp, #80	; 0x50
 80035ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	647b      	str	r3, [r7, #68]	; 0x44
 80035f4:	2300      	movs	r3, #0
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f8:	2300      	movs	r3, #0
 80035fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003600:	4b79      	ldr	r3, [pc, #484]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d00d      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x40>
 800360c:	2b08      	cmp	r3, #8
 800360e:	f200 80e1 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x34>
 8003616:	2b04      	cmp	r3, #4
 8003618:	d003      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x3a>
 800361a:	e0db      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b73      	ldr	r3, [pc, #460]	; (80037ec <HAL_RCC_GetSysClockFreq+0x204>)
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003620:	e0db      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003622:	4b73      	ldr	r3, [pc, #460]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003626:	e0d8      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003628:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003630:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003632:	4b6d      	ldr	r3, [pc, #436]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d063      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363e:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	2200      	movs	r2, #0
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
 8003648:	63fa      	str	r2, [r7, #60]	; 0x3c
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
 8003652:	2300      	movs	r3, #0
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
 8003656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0159      	lsls	r1, r3, #5
 8003668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366c:	0150      	lsls	r0, r2, #5
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4621      	mov	r1, r4
 8003674:	1a51      	subs	r1, r2, r1
 8003676:	6139      	str	r1, [r7, #16]
 8003678:	4629      	mov	r1, r5
 800367a:	eb63 0301 	sbc.w	r3, r3, r1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368c:	4659      	mov	r1, fp
 800368e:	018b      	lsls	r3, r1, #6
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003696:	4651      	mov	r1, sl
 8003698:	018a      	lsls	r2, r1, #6
 800369a:	4651      	mov	r1, sl
 800369c:	ebb2 0801 	subs.w	r8, r2, r1
 80036a0:	4659      	mov	r1, fp
 80036a2:	eb63 0901 	sbc.w	r9, r3, r1
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ba:	4690      	mov	r8, r2
 80036bc:	4699      	mov	r9, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	eb18 0303 	adds.w	r3, r8, r3
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	462b      	mov	r3, r5
 80036c8:	eb49 0303 	adc.w	r3, r9, r3
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036da:	4629      	mov	r1, r5
 80036dc:	024b      	lsls	r3, r1, #9
 80036de:	4621      	mov	r1, r4
 80036e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036e4:	4621      	mov	r1, r4
 80036e6:	024a      	lsls	r2, r1, #9
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ee:	2200      	movs	r2, #0
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036f8:	f7fd fa66 	bl	8000bc8 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4613      	mov	r3, r2
 8003702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003704:	e058      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	2200      	movs	r2, #0
 800370e:	4618      	mov	r0, r3
 8003710:	4611      	mov	r1, r2
 8003712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
 800371c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003720:	4642      	mov	r2, r8
 8003722:	464b      	mov	r3, r9
 8003724:	f04f 0000 	mov.w	r0, #0
 8003728:	f04f 0100 	mov.w	r1, #0
 800372c:	0159      	lsls	r1, r3, #5
 800372e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003732:	0150      	lsls	r0, r2, #5
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4641      	mov	r1, r8
 800373a:	ebb2 0a01 	subs.w	sl, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb63 0b01 	sbc.w	fp, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003758:	ebb2 040a 	subs.w	r4, r2, sl
 800375c:	eb63 050b 	sbc.w	r5, r3, fp
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	00eb      	lsls	r3, r5, #3
 800376a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800376e:	00e2      	lsls	r2, r4, #3
 8003770:	4614      	mov	r4, r2
 8003772:	461d      	mov	r5, r3
 8003774:	4643      	mov	r3, r8
 8003776:	18e3      	adds	r3, r4, r3
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	464b      	mov	r3, r9
 800377c:	eb45 0303 	adc.w	r3, r5, r3
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800378e:	4629      	mov	r1, r5
 8003790:	028b      	lsls	r3, r1, #10
 8003792:	4621      	mov	r1, r4
 8003794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003798:	4621      	mov	r1, r4
 800379a:	028a      	lsls	r2, r1, #10
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a2:	2200      	movs	r2, #0
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	61fa      	str	r2, [r7, #28]
 80037a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ac:	f7fd fa0c 	bl	8000bc8 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetSysClockFreq+0x204>)
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3750      	adds	r7, #80	; 0x50
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	007a1200 	.word	0x007a1200

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_GetHCLKFreq+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003810:	f7ff fff0 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0a9b      	lsrs	r3, r3, #10
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	08006e68 	.word	0x08006e68

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003838:	f7ff ffdc 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0b5b      	lsrs	r3, r3, #13
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4903      	ldr	r1, [pc, #12]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	08006e68 	.word	0x08006e68

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e03f      	b.n	80038ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fe2c 	bl	80014e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f929 	bl	8003af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08a      	sub	sp, #40	; 0x28
 80038fa:	af02      	add	r7, sp, #8
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d17c      	bne.n	8003a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Transmit+0x2c>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e075      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_UART_Transmit+0x3e>
 8003930:	2302      	movs	r3, #2
 8003932:	e06e      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2221      	movs	r2, #33	; 0x21
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800394a:	f7fd ffa3 	bl	8001894 <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d108      	bne.n	8003978 <HAL_UART_Transmit+0x82>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e003      	b.n	8003980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003988:	e02a      	b.n	80039e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f840 	bl	8003a1a <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e036      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3302      	adds	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	e007      	b.n	80039d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1cf      	bne.n	800398a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2140      	movs	r1, #64	; 0x40
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f810 	bl	8003a1a <UART_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e006      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b090      	sub	sp, #64	; 0x40
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2a:	e050      	b.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d04c      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3a:	f7fd ff2b 	bl	8001894 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d241      	bcs.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a6a:	637a      	str	r2, [r7, #52]	; 0x34
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e5      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3314      	adds	r3, #20
 8003a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a9e:	623a      	str	r2, [r7, #32]
 8003aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e5      	bne.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e00f      	b.n	8003aee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	bf0c      	ite	eq
 8003ade:	2301      	moveq	r3, #1
 8003ae0:	2300      	movne	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d09f      	beq.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3740      	adds	r7, #64	; 0x40
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003afc:	b0c0      	sub	sp, #256	; 0x100
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	68d9      	ldr	r1, [r3, #12]
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	ea40 0301 	orr.w	r3, r0, r1
 8003b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b50:	f021 010c 	bic.w	r1, r1, #12
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	6999      	ldr	r1, [r3, #24]
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	ea40 0301 	orr.w	r3, r0, r1
 8003b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b8f      	ldr	r3, [pc, #572]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d005      	beq.n	8003b98 <UART_SetConfig+0xa0>
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <UART_SetConfig+0x2d0>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d104      	bne.n	8003ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7ff fe4c 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ba0:	e003      	b.n	8003baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ba2:	f7ff fe33 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8003ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb4:	f040 810c 	bne.w	8003dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bda:	4621      	mov	r1, r4
 8003bdc:	eb12 0801 	adds.w	r8, r2, r1
 8003be0:	4629      	mov	r1, r5
 8003be2:	eb43 0901 	adc.w	r9, r3, r1
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfa:	4690      	mov	r8, r2
 8003bfc:	4699      	mov	r9, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	eb18 0303 	adds.w	r3, r8, r3
 8003c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c08:	462b      	mov	r3, r5
 8003c0a:	eb49 0303 	adc.w	r3, r9, r3
 8003c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c26:	460b      	mov	r3, r1
 8003c28:	18db      	adds	r3, r3, r3
 8003c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	eb42 0303 	adc.w	r3, r2, r3
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
 8003c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c3c:	f7fc ffc4 	bl	8000bc8 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003c46:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	011c      	lsls	r4, r3, #4
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c70:	4641      	mov	r1, r8
 8003c72:	eb12 0a01 	adds.w	sl, r2, r1
 8003c76:	4649      	mov	r1, r9
 8003c78:	eb43 0b01 	adc.w	fp, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c90:	4692      	mov	sl, r2
 8003c92:	469b      	mov	fp, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	eb1a 0303 	adds.w	r3, sl, r3
 8003c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	18db      	adds	r3, r3, r3
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	eb42 0303 	adc.w	r3, r2, r3
 8003cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cd2:	f7fc ff79 	bl	8000bc8 <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003cde:	fba3 2301 	umull	r2, r3, r3, r1
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2264      	movs	r2, #100	; 0x64
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	1acb      	subs	r3, r1, r3
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cf2:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d00:	441c      	add	r4, r3
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d24:	4641      	mov	r1, r8
 8003d26:	1851      	adds	r1, r2, r1
 8003d28:	6339      	str	r1, [r7, #48]	; 0x30
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	414b      	adcs	r3, r1
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	00cb      	lsls	r3, r1, #3
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d46:	4651      	mov	r1, sl
 8003d48:	00ca      	lsls	r2, r1, #3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4642      	mov	r2, r8
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d58:	464b      	mov	r3, r9
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d78:	460b      	mov	r3, r1
 8003d7a:	18db      	adds	r3, r3, r3
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	4613      	mov	r3, r2
 8003d80:	eb42 0303 	adc.w	r3, r2, r3
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d8e:	f7fc ff1b 	bl	8000bc8 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003d98:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	2164      	movs	r1, #100	; 0x64
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	3332      	adds	r3, #50	; 0x32
 8003daa:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 0207 	and.w	r2, r3, #7
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4422      	add	r2, r4
 8003dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dc0:	e105      	b.n	8003fce <UART_SetConfig+0x4d6>
 8003dc2:	bf00      	nop
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40011400 	.word	0x40011400
 8003dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003de2:	4642      	mov	r2, r8
 8003de4:	464b      	mov	r3, r9
 8003de6:	1891      	adds	r1, r2, r2
 8003de8:	6239      	str	r1, [r7, #32]
 8003dea:	415b      	adcs	r3, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003df2:	4641      	mov	r1, r8
 8003df4:	1854      	adds	r4, r2, r1
 8003df6:	4649      	mov	r1, r9
 8003df8:	eb43 0501 	adc.w	r5, r3, r1
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	00eb      	lsls	r3, r5, #3
 8003e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0a:	00e2      	lsls	r2, r4, #3
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	461d      	mov	r5, r3
 8003e10:	4643      	mov	r3, r8
 8003e12:	18e3      	adds	r3, r4, r3
 8003e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e18:	464b      	mov	r3, r9
 8003e1a:	eb45 0303 	adc.w	r3, r5, r3
 8003e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e3e:	4629      	mov	r1, r5
 8003e40:	008b      	lsls	r3, r1, #2
 8003e42:	4621      	mov	r1, r4
 8003e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e48:	4621      	mov	r1, r4
 8003e4a:	008a      	lsls	r2, r1, #2
 8003e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e50:	f7fc feba 	bl	8000bc8 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4b60      	ldr	r3, [pc, #384]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	011c      	lsls	r4, r3, #4
 8003e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	61b9      	str	r1, [r7, #24]
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e84:	4641      	mov	r1, r8
 8003e86:	1851      	adds	r1, r2, r1
 8003e88:	6139      	str	r1, [r7, #16]
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	414b      	adcs	r3, r1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	00cb      	lsls	r3, r1, #3
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	00ca      	lsls	r2, r1, #3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb8:	464b      	mov	r3, r9
 8003eba:	460a      	mov	r2, r1
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ece:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003edc:	4649      	mov	r1, r9
 8003ede:	008b      	lsls	r3, r1, #2
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	008a      	lsls	r2, r1, #2
 8003eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eee:	f7fc fe6b 	bl	8000bc8 <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	2164      	movs	r1, #100	; 0x64
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	3332      	adds	r3, #50	; 0x32
 8003f0a:	4a34      	ldr	r2, [pc, #208]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f16:	441c      	add	r4, r3
 8003f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f20:	677a      	str	r2, [r7, #116]	; 0x74
 8003f22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f26:	4642      	mov	r2, r8
 8003f28:	464b      	mov	r3, r9
 8003f2a:	1891      	adds	r1, r2, r2
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	415b      	adcs	r3, r3
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f36:	4641      	mov	r1, r8
 8003f38:	1851      	adds	r1, r2, r1
 8003f3a:	6039      	str	r1, [r7, #0]
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	414b      	adcs	r3, r1
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f4e:	4659      	mov	r1, fp
 8003f50:	00cb      	lsls	r3, r1, #3
 8003f52:	4651      	mov	r1, sl
 8003f54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f58:	4651      	mov	r1, sl
 8003f5a:	00ca      	lsls	r2, r1, #3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	4642      	mov	r2, r8
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f68:	464b      	mov	r3, r9
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	008b      	lsls	r3, r1, #2
 8003f8e:	4641      	mov	r1, r8
 8003f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f94:	4641      	mov	r1, r8
 8003f96:	008a      	lsls	r2, r1, #2
 8003f98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f9c:	f7fc fe14 	bl	8000bc8 <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2164      	movs	r1, #100	; 0x64
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	3332      	adds	r3, #50	; 0x32
 8003fb8:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4422      	add	r2, r4
 8003fcc:	609a      	str	r2, [r3, #8]
}
 8003fce:	bf00      	nop
 8003fd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fda:	bf00      	nop
 8003fdc:	51eb851f 	.word	0x51eb851f

08003fe0 <__errno>:
 8003fe0:	4b01      	ldr	r3, [pc, #4]	; (8003fe8 <__errno+0x8>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	2000000c 	.word	0x2000000c

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	4d0d      	ldr	r5, [pc, #52]	; (8004024 <__libc_init_array+0x38>)
 8003ff0:	4c0d      	ldr	r4, [pc, #52]	; (8004028 <__libc_init_array+0x3c>)
 8003ff2:	1b64      	subs	r4, r4, r5
 8003ff4:	10a4      	asrs	r4, r4, #2
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	42a6      	cmp	r6, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	4d0b      	ldr	r5, [pc, #44]	; (800402c <__libc_init_array+0x40>)
 8003ffe:	4c0c      	ldr	r4, [pc, #48]	; (8004030 <__libc_init_array+0x44>)
 8004000:	f002 ff02 	bl	8006e08 <_init>
 8004004:	1b64      	subs	r4, r4, r5
 8004006:	10a4      	asrs	r4, r4, #2
 8004008:	2600      	movs	r6, #0
 800400a:	42a6      	cmp	r6, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	f855 3b04 	ldr.w	r3, [r5], #4
 8004014:	4798      	blx	r3
 8004016:	3601      	adds	r6, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	f855 3b04 	ldr.w	r3, [r5], #4
 800401e:	4798      	blx	r3
 8004020:	3601      	adds	r6, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	08007254 	.word	0x08007254
 8004028:	08007254 	.word	0x08007254
 800402c:	08007254 	.word	0x08007254
 8004030:	08007258 	.word	0x08007258

08004034 <memset>:
 8004034:	4402      	add	r2, r0
 8004036:	4603      	mov	r3, r0
 8004038:	4293      	cmp	r3, r2
 800403a:	d100      	bne.n	800403e <memset+0xa>
 800403c:	4770      	bx	lr
 800403e:	f803 1b01 	strb.w	r1, [r3], #1
 8004042:	e7f9      	b.n	8004038 <memset+0x4>

08004044 <__cvt>:
 8004044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	ec55 4b10 	vmov	r4, r5, d0
 800404c:	2d00      	cmp	r5, #0
 800404e:	460e      	mov	r6, r1
 8004050:	4619      	mov	r1, r3
 8004052:	462b      	mov	r3, r5
 8004054:	bfbb      	ittet	lt
 8004056:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800405a:	461d      	movlt	r5, r3
 800405c:	2300      	movge	r3, #0
 800405e:	232d      	movlt	r3, #45	; 0x2d
 8004060:	700b      	strb	r3, [r1, #0]
 8004062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004064:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004068:	4691      	mov	r9, r2
 800406a:	f023 0820 	bic.w	r8, r3, #32
 800406e:	bfbc      	itt	lt
 8004070:	4622      	movlt	r2, r4
 8004072:	4614      	movlt	r4, r2
 8004074:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004078:	d005      	beq.n	8004086 <__cvt+0x42>
 800407a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800407e:	d100      	bne.n	8004082 <__cvt+0x3e>
 8004080:	3601      	adds	r6, #1
 8004082:	2102      	movs	r1, #2
 8004084:	e000      	b.n	8004088 <__cvt+0x44>
 8004086:	2103      	movs	r1, #3
 8004088:	ab03      	add	r3, sp, #12
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	ab02      	add	r3, sp, #8
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	ec45 4b10 	vmov	d0, r4, r5
 8004094:	4653      	mov	r3, sl
 8004096:	4632      	mov	r2, r6
 8004098:	f000 fcea 	bl	8004a70 <_dtoa_r>
 800409c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040a0:	4607      	mov	r7, r0
 80040a2:	d102      	bne.n	80040aa <__cvt+0x66>
 80040a4:	f019 0f01 	tst.w	r9, #1
 80040a8:	d022      	beq.n	80040f0 <__cvt+0xac>
 80040aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040ae:	eb07 0906 	add.w	r9, r7, r6
 80040b2:	d110      	bne.n	80040d6 <__cvt+0x92>
 80040b4:	783b      	ldrb	r3, [r7, #0]
 80040b6:	2b30      	cmp	r3, #48	; 0x30
 80040b8:	d10a      	bne.n	80040d0 <__cvt+0x8c>
 80040ba:	2200      	movs	r2, #0
 80040bc:	2300      	movs	r3, #0
 80040be:	4620      	mov	r0, r4
 80040c0:	4629      	mov	r1, r5
 80040c2:	f7fc fd11 	bl	8000ae8 <__aeabi_dcmpeq>
 80040c6:	b918      	cbnz	r0, 80040d0 <__cvt+0x8c>
 80040c8:	f1c6 0601 	rsb	r6, r6, #1
 80040cc:	f8ca 6000 	str.w	r6, [sl]
 80040d0:	f8da 3000 	ldr.w	r3, [sl]
 80040d4:	4499      	add	r9, r3
 80040d6:	2200      	movs	r2, #0
 80040d8:	2300      	movs	r3, #0
 80040da:	4620      	mov	r0, r4
 80040dc:	4629      	mov	r1, r5
 80040de:	f7fc fd03 	bl	8000ae8 <__aeabi_dcmpeq>
 80040e2:	b108      	cbz	r0, 80040e8 <__cvt+0xa4>
 80040e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80040e8:	2230      	movs	r2, #48	; 0x30
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	454b      	cmp	r3, r9
 80040ee:	d307      	bcc.n	8004100 <__cvt+0xbc>
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040f4:	1bdb      	subs	r3, r3, r7
 80040f6:	4638      	mov	r0, r7
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	b004      	add	sp, #16
 80040fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004100:	1c59      	adds	r1, r3, #1
 8004102:	9103      	str	r1, [sp, #12]
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e7f0      	b.n	80040ea <__cvt+0xa6>

08004108 <__exponent>:
 8004108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800410a:	4603      	mov	r3, r0
 800410c:	2900      	cmp	r1, #0
 800410e:	bfb8      	it	lt
 8004110:	4249      	neglt	r1, r1
 8004112:	f803 2b02 	strb.w	r2, [r3], #2
 8004116:	bfb4      	ite	lt
 8004118:	222d      	movlt	r2, #45	; 0x2d
 800411a:	222b      	movge	r2, #43	; 0x2b
 800411c:	2909      	cmp	r1, #9
 800411e:	7042      	strb	r2, [r0, #1]
 8004120:	dd2a      	ble.n	8004178 <__exponent+0x70>
 8004122:	f10d 0407 	add.w	r4, sp, #7
 8004126:	46a4      	mov	ip, r4
 8004128:	270a      	movs	r7, #10
 800412a:	46a6      	mov	lr, r4
 800412c:	460a      	mov	r2, r1
 800412e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004132:	fb07 1516 	mls	r5, r7, r6, r1
 8004136:	3530      	adds	r5, #48	; 0x30
 8004138:	2a63      	cmp	r2, #99	; 0x63
 800413a:	f104 34ff 	add.w	r4, r4, #4294967295
 800413e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004142:	4631      	mov	r1, r6
 8004144:	dcf1      	bgt.n	800412a <__exponent+0x22>
 8004146:	3130      	adds	r1, #48	; 0x30
 8004148:	f1ae 0502 	sub.w	r5, lr, #2
 800414c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004150:	1c44      	adds	r4, r0, #1
 8004152:	4629      	mov	r1, r5
 8004154:	4561      	cmp	r1, ip
 8004156:	d30a      	bcc.n	800416e <__exponent+0x66>
 8004158:	f10d 0209 	add.w	r2, sp, #9
 800415c:	eba2 020e 	sub.w	r2, r2, lr
 8004160:	4565      	cmp	r5, ip
 8004162:	bf88      	it	hi
 8004164:	2200      	movhi	r2, #0
 8004166:	4413      	add	r3, r2
 8004168:	1a18      	subs	r0, r3, r0
 800416a:	b003      	add	sp, #12
 800416c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800416e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004172:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004176:	e7ed      	b.n	8004154 <__exponent+0x4c>
 8004178:	2330      	movs	r3, #48	; 0x30
 800417a:	3130      	adds	r1, #48	; 0x30
 800417c:	7083      	strb	r3, [r0, #2]
 800417e:	70c1      	strb	r1, [r0, #3]
 8004180:	1d03      	adds	r3, r0, #4
 8004182:	e7f1      	b.n	8004168 <__exponent+0x60>

08004184 <_printf_float>:
 8004184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004188:	ed2d 8b02 	vpush	{d8}
 800418c:	b08d      	sub	sp, #52	; 0x34
 800418e:	460c      	mov	r4, r1
 8004190:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004194:	4616      	mov	r6, r2
 8004196:	461f      	mov	r7, r3
 8004198:	4605      	mov	r5, r0
 800419a:	f001 fa57 	bl	800564c <_localeconv_r>
 800419e:	f8d0 a000 	ldr.w	sl, [r0]
 80041a2:	4650      	mov	r0, sl
 80041a4:	f7fc f824 	bl	80001f0 <strlen>
 80041a8:	2300      	movs	r3, #0
 80041aa:	930a      	str	r3, [sp, #40]	; 0x28
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	9305      	str	r3, [sp, #20]
 80041b0:	f8d8 3000 	ldr.w	r3, [r8]
 80041b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80041b8:	3307      	adds	r3, #7
 80041ba:	f023 0307 	bic.w	r3, r3, #7
 80041be:	f103 0208 	add.w	r2, r3, #8
 80041c2:	f8c8 2000 	str.w	r2, [r8]
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80041d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041d6:	9307      	str	r3, [sp, #28]
 80041d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80041dc:	ee08 0a10 	vmov	s16, r0
 80041e0:	4b9f      	ldr	r3, [pc, #636]	; (8004460 <_printf_float+0x2dc>)
 80041e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ea:	f7fc fcaf 	bl	8000b4c <__aeabi_dcmpun>
 80041ee:	bb88      	cbnz	r0, 8004254 <_printf_float+0xd0>
 80041f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041f4:	4b9a      	ldr	r3, [pc, #616]	; (8004460 <_printf_float+0x2dc>)
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	f7fc fc89 	bl	8000b10 <__aeabi_dcmple>
 80041fe:	bb48      	cbnz	r0, 8004254 <_printf_float+0xd0>
 8004200:	2200      	movs	r2, #0
 8004202:	2300      	movs	r3, #0
 8004204:	4640      	mov	r0, r8
 8004206:	4649      	mov	r1, r9
 8004208:	f7fc fc78 	bl	8000afc <__aeabi_dcmplt>
 800420c:	b110      	cbz	r0, 8004214 <_printf_float+0x90>
 800420e:	232d      	movs	r3, #45	; 0x2d
 8004210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004214:	4b93      	ldr	r3, [pc, #588]	; (8004464 <_printf_float+0x2e0>)
 8004216:	4894      	ldr	r0, [pc, #592]	; (8004468 <_printf_float+0x2e4>)
 8004218:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800421c:	bf94      	ite	ls
 800421e:	4698      	movls	r8, r3
 8004220:	4680      	movhi	r8, r0
 8004222:	2303      	movs	r3, #3
 8004224:	6123      	str	r3, [r4, #16]
 8004226:	9b05      	ldr	r3, [sp, #20]
 8004228:	f023 0204 	bic.w	r2, r3, #4
 800422c:	6022      	str	r2, [r4, #0]
 800422e:	f04f 0900 	mov.w	r9, #0
 8004232:	9700      	str	r7, [sp, #0]
 8004234:	4633      	mov	r3, r6
 8004236:	aa0b      	add	r2, sp, #44	; 0x2c
 8004238:	4621      	mov	r1, r4
 800423a:	4628      	mov	r0, r5
 800423c:	f000 f9d8 	bl	80045f0 <_printf_common>
 8004240:	3001      	adds	r0, #1
 8004242:	f040 8090 	bne.w	8004366 <_printf_float+0x1e2>
 8004246:	f04f 30ff 	mov.w	r0, #4294967295
 800424a:	b00d      	add	sp, #52	; 0x34
 800424c:	ecbd 8b02 	vpop	{d8}
 8004250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	4640      	mov	r0, r8
 800425a:	4649      	mov	r1, r9
 800425c:	f7fc fc76 	bl	8000b4c <__aeabi_dcmpun>
 8004260:	b140      	cbz	r0, 8004274 <_printf_float+0xf0>
 8004262:	464b      	mov	r3, r9
 8004264:	2b00      	cmp	r3, #0
 8004266:	bfbc      	itt	lt
 8004268:	232d      	movlt	r3, #45	; 0x2d
 800426a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800426e:	487f      	ldr	r0, [pc, #508]	; (800446c <_printf_float+0x2e8>)
 8004270:	4b7f      	ldr	r3, [pc, #508]	; (8004470 <_printf_float+0x2ec>)
 8004272:	e7d1      	b.n	8004218 <_printf_float+0x94>
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800427a:	9206      	str	r2, [sp, #24]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	d13f      	bne.n	8004300 <_printf_float+0x17c>
 8004280:	2306      	movs	r3, #6
 8004282:	6063      	str	r3, [r4, #4]
 8004284:	9b05      	ldr	r3, [sp, #20]
 8004286:	6861      	ldr	r1, [r4, #4]
 8004288:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800428c:	2300      	movs	r3, #0
 800428e:	9303      	str	r3, [sp, #12]
 8004290:	ab0a      	add	r3, sp, #40	; 0x28
 8004292:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004296:	ab09      	add	r3, sp, #36	; 0x24
 8004298:	ec49 8b10 	vmov	d0, r8, r9
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6022      	str	r2, [r4, #0]
 80042a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042a4:	4628      	mov	r0, r5
 80042a6:	f7ff fecd 	bl	8004044 <__cvt>
 80042aa:	9b06      	ldr	r3, [sp, #24]
 80042ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042ae:	2b47      	cmp	r3, #71	; 0x47
 80042b0:	4680      	mov	r8, r0
 80042b2:	d108      	bne.n	80042c6 <_printf_float+0x142>
 80042b4:	1cc8      	adds	r0, r1, #3
 80042b6:	db02      	blt.n	80042be <_printf_float+0x13a>
 80042b8:	6863      	ldr	r3, [r4, #4]
 80042ba:	4299      	cmp	r1, r3
 80042bc:	dd41      	ble.n	8004342 <_printf_float+0x1be>
 80042be:	f1ab 0b02 	sub.w	fp, fp, #2
 80042c2:	fa5f fb8b 	uxtb.w	fp, fp
 80042c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042ca:	d820      	bhi.n	800430e <_printf_float+0x18a>
 80042cc:	3901      	subs	r1, #1
 80042ce:	465a      	mov	r2, fp
 80042d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042d4:	9109      	str	r1, [sp, #36]	; 0x24
 80042d6:	f7ff ff17 	bl	8004108 <__exponent>
 80042da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042dc:	1813      	adds	r3, r2, r0
 80042de:	2a01      	cmp	r2, #1
 80042e0:	4681      	mov	r9, r0
 80042e2:	6123      	str	r3, [r4, #16]
 80042e4:	dc02      	bgt.n	80042ec <_printf_float+0x168>
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	07d2      	lsls	r2, r2, #31
 80042ea:	d501      	bpl.n	80042f0 <_printf_float+0x16c>
 80042ec:	3301      	adds	r3, #1
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d09c      	beq.n	8004232 <_printf_float+0xae>
 80042f8:	232d      	movs	r3, #45	; 0x2d
 80042fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fe:	e798      	b.n	8004232 <_printf_float+0xae>
 8004300:	9a06      	ldr	r2, [sp, #24]
 8004302:	2a47      	cmp	r2, #71	; 0x47
 8004304:	d1be      	bne.n	8004284 <_printf_float+0x100>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1bc      	bne.n	8004284 <_printf_float+0x100>
 800430a:	2301      	movs	r3, #1
 800430c:	e7b9      	b.n	8004282 <_printf_float+0xfe>
 800430e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004312:	d118      	bne.n	8004346 <_printf_float+0x1c2>
 8004314:	2900      	cmp	r1, #0
 8004316:	6863      	ldr	r3, [r4, #4]
 8004318:	dd0b      	ble.n	8004332 <_printf_float+0x1ae>
 800431a:	6121      	str	r1, [r4, #16]
 800431c:	b913      	cbnz	r3, 8004324 <_printf_float+0x1a0>
 800431e:	6822      	ldr	r2, [r4, #0]
 8004320:	07d0      	lsls	r0, r2, #31
 8004322:	d502      	bpl.n	800432a <_printf_float+0x1a6>
 8004324:	3301      	adds	r3, #1
 8004326:	440b      	add	r3, r1
 8004328:	6123      	str	r3, [r4, #16]
 800432a:	65a1      	str	r1, [r4, #88]	; 0x58
 800432c:	f04f 0900 	mov.w	r9, #0
 8004330:	e7de      	b.n	80042f0 <_printf_float+0x16c>
 8004332:	b913      	cbnz	r3, 800433a <_printf_float+0x1b6>
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	07d2      	lsls	r2, r2, #31
 8004338:	d501      	bpl.n	800433e <_printf_float+0x1ba>
 800433a:	3302      	adds	r3, #2
 800433c:	e7f4      	b.n	8004328 <_printf_float+0x1a4>
 800433e:	2301      	movs	r3, #1
 8004340:	e7f2      	b.n	8004328 <_printf_float+0x1a4>
 8004342:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004348:	4299      	cmp	r1, r3
 800434a:	db05      	blt.n	8004358 <_printf_float+0x1d4>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	6121      	str	r1, [r4, #16]
 8004350:	07d8      	lsls	r0, r3, #31
 8004352:	d5ea      	bpl.n	800432a <_printf_float+0x1a6>
 8004354:	1c4b      	adds	r3, r1, #1
 8004356:	e7e7      	b.n	8004328 <_printf_float+0x1a4>
 8004358:	2900      	cmp	r1, #0
 800435a:	bfd4      	ite	le
 800435c:	f1c1 0202 	rsble	r2, r1, #2
 8004360:	2201      	movgt	r2, #1
 8004362:	4413      	add	r3, r2
 8004364:	e7e0      	b.n	8004328 <_printf_float+0x1a4>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	055a      	lsls	r2, r3, #21
 800436a:	d407      	bmi.n	800437c <_printf_float+0x1f8>
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	4642      	mov	r2, r8
 8004370:	4631      	mov	r1, r6
 8004372:	4628      	mov	r0, r5
 8004374:	47b8      	blx	r7
 8004376:	3001      	adds	r0, #1
 8004378:	d12c      	bne.n	80043d4 <_printf_float+0x250>
 800437a:	e764      	b.n	8004246 <_printf_float+0xc2>
 800437c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004380:	f240 80e0 	bls.w	8004544 <_printf_float+0x3c0>
 8004384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004388:	2200      	movs	r2, #0
 800438a:	2300      	movs	r3, #0
 800438c:	f7fc fbac 	bl	8000ae8 <__aeabi_dcmpeq>
 8004390:	2800      	cmp	r0, #0
 8004392:	d034      	beq.n	80043fe <_printf_float+0x27a>
 8004394:	4a37      	ldr	r2, [pc, #220]	; (8004474 <_printf_float+0x2f0>)
 8004396:	2301      	movs	r3, #1
 8004398:	4631      	mov	r1, r6
 800439a:	4628      	mov	r0, r5
 800439c:	47b8      	blx	r7
 800439e:	3001      	adds	r0, #1
 80043a0:	f43f af51 	beq.w	8004246 <_printf_float+0xc2>
 80043a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043a8:	429a      	cmp	r2, r3
 80043aa:	db02      	blt.n	80043b2 <_printf_float+0x22e>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	07d8      	lsls	r0, r3, #31
 80043b0:	d510      	bpl.n	80043d4 <_printf_float+0x250>
 80043b2:	ee18 3a10 	vmov	r3, s16
 80043b6:	4652      	mov	r2, sl
 80043b8:	4631      	mov	r1, r6
 80043ba:	4628      	mov	r0, r5
 80043bc:	47b8      	blx	r7
 80043be:	3001      	adds	r0, #1
 80043c0:	f43f af41 	beq.w	8004246 <_printf_float+0xc2>
 80043c4:	f04f 0800 	mov.w	r8, #0
 80043c8:	f104 091a 	add.w	r9, r4, #26
 80043cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4543      	cmp	r3, r8
 80043d2:	dc09      	bgt.n	80043e8 <_printf_float+0x264>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	079b      	lsls	r3, r3, #30
 80043d8:	f100 8105 	bmi.w	80045e6 <_printf_float+0x462>
 80043dc:	68e0      	ldr	r0, [r4, #12]
 80043de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043e0:	4298      	cmp	r0, r3
 80043e2:	bfb8      	it	lt
 80043e4:	4618      	movlt	r0, r3
 80043e6:	e730      	b.n	800424a <_printf_float+0xc6>
 80043e8:	2301      	movs	r3, #1
 80043ea:	464a      	mov	r2, r9
 80043ec:	4631      	mov	r1, r6
 80043ee:	4628      	mov	r0, r5
 80043f0:	47b8      	blx	r7
 80043f2:	3001      	adds	r0, #1
 80043f4:	f43f af27 	beq.w	8004246 <_printf_float+0xc2>
 80043f8:	f108 0801 	add.w	r8, r8, #1
 80043fc:	e7e6      	b.n	80043cc <_printf_float+0x248>
 80043fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	dc39      	bgt.n	8004478 <_printf_float+0x2f4>
 8004404:	4a1b      	ldr	r2, [pc, #108]	; (8004474 <_printf_float+0x2f0>)
 8004406:	2301      	movs	r3, #1
 8004408:	4631      	mov	r1, r6
 800440a:	4628      	mov	r0, r5
 800440c:	47b8      	blx	r7
 800440e:	3001      	adds	r0, #1
 8004410:	f43f af19 	beq.w	8004246 <_printf_float+0xc2>
 8004414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004418:	4313      	orrs	r3, r2
 800441a:	d102      	bne.n	8004422 <_printf_float+0x29e>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	07d9      	lsls	r1, r3, #31
 8004420:	d5d8      	bpl.n	80043d4 <_printf_float+0x250>
 8004422:	ee18 3a10 	vmov	r3, s16
 8004426:	4652      	mov	r2, sl
 8004428:	4631      	mov	r1, r6
 800442a:	4628      	mov	r0, r5
 800442c:	47b8      	blx	r7
 800442e:	3001      	adds	r0, #1
 8004430:	f43f af09 	beq.w	8004246 <_printf_float+0xc2>
 8004434:	f04f 0900 	mov.w	r9, #0
 8004438:	f104 0a1a 	add.w	sl, r4, #26
 800443c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800443e:	425b      	negs	r3, r3
 8004440:	454b      	cmp	r3, r9
 8004442:	dc01      	bgt.n	8004448 <_printf_float+0x2c4>
 8004444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004446:	e792      	b.n	800436e <_printf_float+0x1ea>
 8004448:	2301      	movs	r3, #1
 800444a:	4652      	mov	r2, sl
 800444c:	4631      	mov	r1, r6
 800444e:	4628      	mov	r0, r5
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	f43f aef7 	beq.w	8004246 <_printf_float+0xc2>
 8004458:	f109 0901 	add.w	r9, r9, #1
 800445c:	e7ee      	b.n	800443c <_printf_float+0x2b8>
 800445e:	bf00      	nop
 8004460:	7fefffff 	.word	0x7fefffff
 8004464:	08006e74 	.word	0x08006e74
 8004468:	08006e78 	.word	0x08006e78
 800446c:	08006e80 	.word	0x08006e80
 8004470:	08006e7c 	.word	0x08006e7c
 8004474:	08006e84 	.word	0x08006e84
 8004478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800447a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800447c:	429a      	cmp	r2, r3
 800447e:	bfa8      	it	ge
 8004480:	461a      	movge	r2, r3
 8004482:	2a00      	cmp	r2, #0
 8004484:	4691      	mov	r9, r2
 8004486:	dc37      	bgt.n	80044f8 <_printf_float+0x374>
 8004488:	f04f 0b00 	mov.w	fp, #0
 800448c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004490:	f104 021a 	add.w	r2, r4, #26
 8004494:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	eba3 0309 	sub.w	r3, r3, r9
 800449c:	455b      	cmp	r3, fp
 800449e:	dc33      	bgt.n	8004508 <_printf_float+0x384>
 80044a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044a4:	429a      	cmp	r2, r3
 80044a6:	db3b      	blt.n	8004520 <_printf_float+0x39c>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	07da      	lsls	r2, r3, #31
 80044ac:	d438      	bmi.n	8004520 <_printf_float+0x39c>
 80044ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b0:	9a05      	ldr	r2, [sp, #20]
 80044b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044b4:	1a9a      	subs	r2, r3, r2
 80044b6:	eba3 0901 	sub.w	r9, r3, r1
 80044ba:	4591      	cmp	r9, r2
 80044bc:	bfa8      	it	ge
 80044be:	4691      	movge	r9, r2
 80044c0:	f1b9 0f00 	cmp.w	r9, #0
 80044c4:	dc35      	bgt.n	8004532 <_printf_float+0x3ae>
 80044c6:	f04f 0800 	mov.w	r8, #0
 80044ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044ce:	f104 0a1a 	add.w	sl, r4, #26
 80044d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	eba3 0309 	sub.w	r3, r3, r9
 80044dc:	4543      	cmp	r3, r8
 80044de:	f77f af79 	ble.w	80043d4 <_printf_float+0x250>
 80044e2:	2301      	movs	r3, #1
 80044e4:	4652      	mov	r2, sl
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	f43f aeaa 	beq.w	8004246 <_printf_float+0xc2>
 80044f2:	f108 0801 	add.w	r8, r8, #1
 80044f6:	e7ec      	b.n	80044d2 <_printf_float+0x34e>
 80044f8:	4613      	mov	r3, r2
 80044fa:	4631      	mov	r1, r6
 80044fc:	4642      	mov	r2, r8
 80044fe:	4628      	mov	r0, r5
 8004500:	47b8      	blx	r7
 8004502:	3001      	adds	r0, #1
 8004504:	d1c0      	bne.n	8004488 <_printf_float+0x304>
 8004506:	e69e      	b.n	8004246 <_printf_float+0xc2>
 8004508:	2301      	movs	r3, #1
 800450a:	4631      	mov	r1, r6
 800450c:	4628      	mov	r0, r5
 800450e:	9205      	str	r2, [sp, #20]
 8004510:	47b8      	blx	r7
 8004512:	3001      	adds	r0, #1
 8004514:	f43f ae97 	beq.w	8004246 <_printf_float+0xc2>
 8004518:	9a05      	ldr	r2, [sp, #20]
 800451a:	f10b 0b01 	add.w	fp, fp, #1
 800451e:	e7b9      	b.n	8004494 <_printf_float+0x310>
 8004520:	ee18 3a10 	vmov	r3, s16
 8004524:	4652      	mov	r2, sl
 8004526:	4631      	mov	r1, r6
 8004528:	4628      	mov	r0, r5
 800452a:	47b8      	blx	r7
 800452c:	3001      	adds	r0, #1
 800452e:	d1be      	bne.n	80044ae <_printf_float+0x32a>
 8004530:	e689      	b.n	8004246 <_printf_float+0xc2>
 8004532:	9a05      	ldr	r2, [sp, #20]
 8004534:	464b      	mov	r3, r9
 8004536:	4442      	add	r2, r8
 8004538:	4631      	mov	r1, r6
 800453a:	4628      	mov	r0, r5
 800453c:	47b8      	blx	r7
 800453e:	3001      	adds	r0, #1
 8004540:	d1c1      	bne.n	80044c6 <_printf_float+0x342>
 8004542:	e680      	b.n	8004246 <_printf_float+0xc2>
 8004544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004546:	2a01      	cmp	r2, #1
 8004548:	dc01      	bgt.n	800454e <_printf_float+0x3ca>
 800454a:	07db      	lsls	r3, r3, #31
 800454c:	d538      	bpl.n	80045c0 <_printf_float+0x43c>
 800454e:	2301      	movs	r3, #1
 8004550:	4642      	mov	r2, r8
 8004552:	4631      	mov	r1, r6
 8004554:	4628      	mov	r0, r5
 8004556:	47b8      	blx	r7
 8004558:	3001      	adds	r0, #1
 800455a:	f43f ae74 	beq.w	8004246 <_printf_float+0xc2>
 800455e:	ee18 3a10 	vmov	r3, s16
 8004562:	4652      	mov	r2, sl
 8004564:	4631      	mov	r1, r6
 8004566:	4628      	mov	r0, r5
 8004568:	47b8      	blx	r7
 800456a:	3001      	adds	r0, #1
 800456c:	f43f ae6b 	beq.w	8004246 <_printf_float+0xc2>
 8004570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004574:	2200      	movs	r2, #0
 8004576:	2300      	movs	r3, #0
 8004578:	f7fc fab6 	bl	8000ae8 <__aeabi_dcmpeq>
 800457c:	b9d8      	cbnz	r0, 80045b6 <_printf_float+0x432>
 800457e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004580:	f108 0201 	add.w	r2, r8, #1
 8004584:	3b01      	subs	r3, #1
 8004586:	4631      	mov	r1, r6
 8004588:	4628      	mov	r0, r5
 800458a:	47b8      	blx	r7
 800458c:	3001      	adds	r0, #1
 800458e:	d10e      	bne.n	80045ae <_printf_float+0x42a>
 8004590:	e659      	b.n	8004246 <_printf_float+0xc2>
 8004592:	2301      	movs	r3, #1
 8004594:	4652      	mov	r2, sl
 8004596:	4631      	mov	r1, r6
 8004598:	4628      	mov	r0, r5
 800459a:	47b8      	blx	r7
 800459c:	3001      	adds	r0, #1
 800459e:	f43f ae52 	beq.w	8004246 <_printf_float+0xc2>
 80045a2:	f108 0801 	add.w	r8, r8, #1
 80045a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a8:	3b01      	subs	r3, #1
 80045aa:	4543      	cmp	r3, r8
 80045ac:	dcf1      	bgt.n	8004592 <_printf_float+0x40e>
 80045ae:	464b      	mov	r3, r9
 80045b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045b4:	e6dc      	b.n	8004370 <_printf_float+0x1ec>
 80045b6:	f04f 0800 	mov.w	r8, #0
 80045ba:	f104 0a1a 	add.w	sl, r4, #26
 80045be:	e7f2      	b.n	80045a6 <_printf_float+0x422>
 80045c0:	2301      	movs	r3, #1
 80045c2:	4642      	mov	r2, r8
 80045c4:	e7df      	b.n	8004586 <_printf_float+0x402>
 80045c6:	2301      	movs	r3, #1
 80045c8:	464a      	mov	r2, r9
 80045ca:	4631      	mov	r1, r6
 80045cc:	4628      	mov	r0, r5
 80045ce:	47b8      	blx	r7
 80045d0:	3001      	adds	r0, #1
 80045d2:	f43f ae38 	beq.w	8004246 <_printf_float+0xc2>
 80045d6:	f108 0801 	add.w	r8, r8, #1
 80045da:	68e3      	ldr	r3, [r4, #12]
 80045dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045de:	1a5b      	subs	r3, r3, r1
 80045e0:	4543      	cmp	r3, r8
 80045e2:	dcf0      	bgt.n	80045c6 <_printf_float+0x442>
 80045e4:	e6fa      	b.n	80043dc <_printf_float+0x258>
 80045e6:	f04f 0800 	mov.w	r8, #0
 80045ea:	f104 0919 	add.w	r9, r4, #25
 80045ee:	e7f4      	b.n	80045da <_printf_float+0x456>

080045f0 <_printf_common>:
 80045f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	4616      	mov	r6, r2
 80045f6:	4699      	mov	r9, r3
 80045f8:	688a      	ldr	r2, [r1, #8]
 80045fa:	690b      	ldr	r3, [r1, #16]
 80045fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004600:	4293      	cmp	r3, r2
 8004602:	bfb8      	it	lt
 8004604:	4613      	movlt	r3, r2
 8004606:	6033      	str	r3, [r6, #0]
 8004608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800460c:	4607      	mov	r7, r0
 800460e:	460c      	mov	r4, r1
 8004610:	b10a      	cbz	r2, 8004616 <_printf_common+0x26>
 8004612:	3301      	adds	r3, #1
 8004614:	6033      	str	r3, [r6, #0]
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	0699      	lsls	r1, r3, #26
 800461a:	bf42      	ittt	mi
 800461c:	6833      	ldrmi	r3, [r6, #0]
 800461e:	3302      	addmi	r3, #2
 8004620:	6033      	strmi	r3, [r6, #0]
 8004622:	6825      	ldr	r5, [r4, #0]
 8004624:	f015 0506 	ands.w	r5, r5, #6
 8004628:	d106      	bne.n	8004638 <_printf_common+0x48>
 800462a:	f104 0a19 	add.w	sl, r4, #25
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	6832      	ldr	r2, [r6, #0]
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	42ab      	cmp	r3, r5
 8004636:	dc26      	bgt.n	8004686 <_printf_common+0x96>
 8004638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800463c:	1e13      	subs	r3, r2, #0
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	bf18      	it	ne
 8004642:	2301      	movne	r3, #1
 8004644:	0692      	lsls	r2, r2, #26
 8004646:	d42b      	bmi.n	80046a0 <_printf_common+0xb0>
 8004648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800464c:	4649      	mov	r1, r9
 800464e:	4638      	mov	r0, r7
 8004650:	47c0      	blx	r8
 8004652:	3001      	adds	r0, #1
 8004654:	d01e      	beq.n	8004694 <_printf_common+0xa4>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	68e5      	ldr	r5, [r4, #12]
 800465a:	6832      	ldr	r2, [r6, #0]
 800465c:	f003 0306 	and.w	r3, r3, #6
 8004660:	2b04      	cmp	r3, #4
 8004662:	bf08      	it	eq
 8004664:	1aad      	subeq	r5, r5, r2
 8004666:	68a3      	ldr	r3, [r4, #8]
 8004668:	6922      	ldr	r2, [r4, #16]
 800466a:	bf0c      	ite	eq
 800466c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004670:	2500      	movne	r5, #0
 8004672:	4293      	cmp	r3, r2
 8004674:	bfc4      	itt	gt
 8004676:	1a9b      	subgt	r3, r3, r2
 8004678:	18ed      	addgt	r5, r5, r3
 800467a:	2600      	movs	r6, #0
 800467c:	341a      	adds	r4, #26
 800467e:	42b5      	cmp	r5, r6
 8004680:	d11a      	bne.n	80046b8 <_printf_common+0xc8>
 8004682:	2000      	movs	r0, #0
 8004684:	e008      	b.n	8004698 <_printf_common+0xa8>
 8004686:	2301      	movs	r3, #1
 8004688:	4652      	mov	r2, sl
 800468a:	4649      	mov	r1, r9
 800468c:	4638      	mov	r0, r7
 800468e:	47c0      	blx	r8
 8004690:	3001      	adds	r0, #1
 8004692:	d103      	bne.n	800469c <_printf_common+0xac>
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469c:	3501      	adds	r5, #1
 800469e:	e7c6      	b.n	800462e <_printf_common+0x3e>
 80046a0:	18e1      	adds	r1, r4, r3
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	2030      	movs	r0, #48	; 0x30
 80046a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046aa:	4422      	add	r2, r4
 80046ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046b4:	3302      	adds	r3, #2
 80046b6:	e7c7      	b.n	8004648 <_printf_common+0x58>
 80046b8:	2301      	movs	r3, #1
 80046ba:	4622      	mov	r2, r4
 80046bc:	4649      	mov	r1, r9
 80046be:	4638      	mov	r0, r7
 80046c0:	47c0      	blx	r8
 80046c2:	3001      	adds	r0, #1
 80046c4:	d0e6      	beq.n	8004694 <_printf_common+0xa4>
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7d9      	b.n	800467e <_printf_common+0x8e>
	...

080046cc <_printf_i>:
 80046cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d0:	7e0f      	ldrb	r7, [r1, #24]
 80046d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046d4:	2f78      	cmp	r7, #120	; 0x78
 80046d6:	4691      	mov	r9, r2
 80046d8:	4680      	mov	r8, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	469a      	mov	sl, r3
 80046de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046e2:	d807      	bhi.n	80046f4 <_printf_i+0x28>
 80046e4:	2f62      	cmp	r7, #98	; 0x62
 80046e6:	d80a      	bhi.n	80046fe <_printf_i+0x32>
 80046e8:	2f00      	cmp	r7, #0
 80046ea:	f000 80d8 	beq.w	800489e <_printf_i+0x1d2>
 80046ee:	2f58      	cmp	r7, #88	; 0x58
 80046f0:	f000 80a3 	beq.w	800483a <_printf_i+0x16e>
 80046f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046fc:	e03a      	b.n	8004774 <_printf_i+0xa8>
 80046fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004702:	2b15      	cmp	r3, #21
 8004704:	d8f6      	bhi.n	80046f4 <_printf_i+0x28>
 8004706:	a101      	add	r1, pc, #4	; (adr r1, 800470c <_printf_i+0x40>)
 8004708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800470c:	08004765 	.word	0x08004765
 8004710:	08004779 	.word	0x08004779
 8004714:	080046f5 	.word	0x080046f5
 8004718:	080046f5 	.word	0x080046f5
 800471c:	080046f5 	.word	0x080046f5
 8004720:	080046f5 	.word	0x080046f5
 8004724:	08004779 	.word	0x08004779
 8004728:	080046f5 	.word	0x080046f5
 800472c:	080046f5 	.word	0x080046f5
 8004730:	080046f5 	.word	0x080046f5
 8004734:	080046f5 	.word	0x080046f5
 8004738:	08004885 	.word	0x08004885
 800473c:	080047a9 	.word	0x080047a9
 8004740:	08004867 	.word	0x08004867
 8004744:	080046f5 	.word	0x080046f5
 8004748:	080046f5 	.word	0x080046f5
 800474c:	080048a7 	.word	0x080048a7
 8004750:	080046f5 	.word	0x080046f5
 8004754:	080047a9 	.word	0x080047a9
 8004758:	080046f5 	.word	0x080046f5
 800475c:	080046f5 	.word	0x080046f5
 8004760:	0800486f 	.word	0x0800486f
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	1d1a      	adds	r2, r3, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	602a      	str	r2, [r5, #0]
 800476c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004774:	2301      	movs	r3, #1
 8004776:	e0a3      	b.n	80048c0 <_printf_i+0x1f4>
 8004778:	6820      	ldr	r0, [r4, #0]
 800477a:	6829      	ldr	r1, [r5, #0]
 800477c:	0606      	lsls	r6, r0, #24
 800477e:	f101 0304 	add.w	r3, r1, #4
 8004782:	d50a      	bpl.n	800479a <_printf_i+0xce>
 8004784:	680e      	ldr	r6, [r1, #0]
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	2e00      	cmp	r6, #0
 800478a:	da03      	bge.n	8004794 <_printf_i+0xc8>
 800478c:	232d      	movs	r3, #45	; 0x2d
 800478e:	4276      	negs	r6, r6
 8004790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004794:	485e      	ldr	r0, [pc, #376]	; (8004910 <_printf_i+0x244>)
 8004796:	230a      	movs	r3, #10
 8004798:	e019      	b.n	80047ce <_printf_i+0x102>
 800479a:	680e      	ldr	r6, [r1, #0]
 800479c:	602b      	str	r3, [r5, #0]
 800479e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047a2:	bf18      	it	ne
 80047a4:	b236      	sxthne	r6, r6
 80047a6:	e7ef      	b.n	8004788 <_printf_i+0xbc>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	6820      	ldr	r0, [r4, #0]
 80047ac:	1d19      	adds	r1, r3, #4
 80047ae:	6029      	str	r1, [r5, #0]
 80047b0:	0601      	lsls	r1, r0, #24
 80047b2:	d501      	bpl.n	80047b8 <_printf_i+0xec>
 80047b4:	681e      	ldr	r6, [r3, #0]
 80047b6:	e002      	b.n	80047be <_printf_i+0xf2>
 80047b8:	0646      	lsls	r6, r0, #25
 80047ba:	d5fb      	bpl.n	80047b4 <_printf_i+0xe8>
 80047bc:	881e      	ldrh	r6, [r3, #0]
 80047be:	4854      	ldr	r0, [pc, #336]	; (8004910 <_printf_i+0x244>)
 80047c0:	2f6f      	cmp	r7, #111	; 0x6f
 80047c2:	bf0c      	ite	eq
 80047c4:	2308      	moveq	r3, #8
 80047c6:	230a      	movne	r3, #10
 80047c8:	2100      	movs	r1, #0
 80047ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ce:	6865      	ldr	r5, [r4, #4]
 80047d0:	60a5      	str	r5, [r4, #8]
 80047d2:	2d00      	cmp	r5, #0
 80047d4:	bfa2      	ittt	ge
 80047d6:	6821      	ldrge	r1, [r4, #0]
 80047d8:	f021 0104 	bicge.w	r1, r1, #4
 80047dc:	6021      	strge	r1, [r4, #0]
 80047de:	b90e      	cbnz	r6, 80047e4 <_printf_i+0x118>
 80047e0:	2d00      	cmp	r5, #0
 80047e2:	d04d      	beq.n	8004880 <_printf_i+0x1b4>
 80047e4:	4615      	mov	r5, r2
 80047e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80047ea:	fb03 6711 	mls	r7, r3, r1, r6
 80047ee:	5dc7      	ldrb	r7, [r0, r7]
 80047f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047f4:	4637      	mov	r7, r6
 80047f6:	42bb      	cmp	r3, r7
 80047f8:	460e      	mov	r6, r1
 80047fa:	d9f4      	bls.n	80047e6 <_printf_i+0x11a>
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d10b      	bne.n	8004818 <_printf_i+0x14c>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	07de      	lsls	r6, r3, #31
 8004804:	d508      	bpl.n	8004818 <_printf_i+0x14c>
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	6861      	ldr	r1, [r4, #4]
 800480a:	4299      	cmp	r1, r3
 800480c:	bfde      	ittt	le
 800480e:	2330      	movle	r3, #48	; 0x30
 8004810:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004814:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004818:	1b52      	subs	r2, r2, r5
 800481a:	6122      	str	r2, [r4, #16]
 800481c:	f8cd a000 	str.w	sl, [sp]
 8004820:	464b      	mov	r3, r9
 8004822:	aa03      	add	r2, sp, #12
 8004824:	4621      	mov	r1, r4
 8004826:	4640      	mov	r0, r8
 8004828:	f7ff fee2 	bl	80045f0 <_printf_common>
 800482c:	3001      	adds	r0, #1
 800482e:	d14c      	bne.n	80048ca <_printf_i+0x1fe>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	b004      	add	sp, #16
 8004836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483a:	4835      	ldr	r0, [pc, #212]	; (8004910 <_printf_i+0x244>)
 800483c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004840:	6829      	ldr	r1, [r5, #0]
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	f851 6b04 	ldr.w	r6, [r1], #4
 8004848:	6029      	str	r1, [r5, #0]
 800484a:	061d      	lsls	r5, r3, #24
 800484c:	d514      	bpl.n	8004878 <_printf_i+0x1ac>
 800484e:	07df      	lsls	r7, r3, #31
 8004850:	bf44      	itt	mi
 8004852:	f043 0320 	orrmi.w	r3, r3, #32
 8004856:	6023      	strmi	r3, [r4, #0]
 8004858:	b91e      	cbnz	r6, 8004862 <_printf_i+0x196>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	f023 0320 	bic.w	r3, r3, #32
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	2310      	movs	r3, #16
 8004864:	e7b0      	b.n	80047c8 <_printf_i+0xfc>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	f043 0320 	orr.w	r3, r3, #32
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	2378      	movs	r3, #120	; 0x78
 8004870:	4828      	ldr	r0, [pc, #160]	; (8004914 <_printf_i+0x248>)
 8004872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004876:	e7e3      	b.n	8004840 <_printf_i+0x174>
 8004878:	0659      	lsls	r1, r3, #25
 800487a:	bf48      	it	mi
 800487c:	b2b6      	uxthmi	r6, r6
 800487e:	e7e6      	b.n	800484e <_printf_i+0x182>
 8004880:	4615      	mov	r5, r2
 8004882:	e7bb      	b.n	80047fc <_printf_i+0x130>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	6826      	ldr	r6, [r4, #0]
 8004888:	6961      	ldr	r1, [r4, #20]
 800488a:	1d18      	adds	r0, r3, #4
 800488c:	6028      	str	r0, [r5, #0]
 800488e:	0635      	lsls	r5, r6, #24
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	d501      	bpl.n	8004898 <_printf_i+0x1cc>
 8004894:	6019      	str	r1, [r3, #0]
 8004896:	e002      	b.n	800489e <_printf_i+0x1d2>
 8004898:	0670      	lsls	r0, r6, #25
 800489a:	d5fb      	bpl.n	8004894 <_printf_i+0x1c8>
 800489c:	8019      	strh	r1, [r3, #0]
 800489e:	2300      	movs	r3, #0
 80048a0:	6123      	str	r3, [r4, #16]
 80048a2:	4615      	mov	r5, r2
 80048a4:	e7ba      	b.n	800481c <_printf_i+0x150>
 80048a6:	682b      	ldr	r3, [r5, #0]
 80048a8:	1d1a      	adds	r2, r3, #4
 80048aa:	602a      	str	r2, [r5, #0]
 80048ac:	681d      	ldr	r5, [r3, #0]
 80048ae:	6862      	ldr	r2, [r4, #4]
 80048b0:	2100      	movs	r1, #0
 80048b2:	4628      	mov	r0, r5
 80048b4:	f7fb fca4 	bl	8000200 <memchr>
 80048b8:	b108      	cbz	r0, 80048be <_printf_i+0x1f2>
 80048ba:	1b40      	subs	r0, r0, r5
 80048bc:	6060      	str	r0, [r4, #4]
 80048be:	6863      	ldr	r3, [r4, #4]
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	2300      	movs	r3, #0
 80048c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c8:	e7a8      	b.n	800481c <_printf_i+0x150>
 80048ca:	6923      	ldr	r3, [r4, #16]
 80048cc:	462a      	mov	r2, r5
 80048ce:	4649      	mov	r1, r9
 80048d0:	4640      	mov	r0, r8
 80048d2:	47d0      	blx	sl
 80048d4:	3001      	adds	r0, #1
 80048d6:	d0ab      	beq.n	8004830 <_printf_i+0x164>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	079b      	lsls	r3, r3, #30
 80048dc:	d413      	bmi.n	8004906 <_printf_i+0x23a>
 80048de:	68e0      	ldr	r0, [r4, #12]
 80048e0:	9b03      	ldr	r3, [sp, #12]
 80048e2:	4298      	cmp	r0, r3
 80048e4:	bfb8      	it	lt
 80048e6:	4618      	movlt	r0, r3
 80048e8:	e7a4      	b.n	8004834 <_printf_i+0x168>
 80048ea:	2301      	movs	r3, #1
 80048ec:	4632      	mov	r2, r6
 80048ee:	4649      	mov	r1, r9
 80048f0:	4640      	mov	r0, r8
 80048f2:	47d0      	blx	sl
 80048f4:	3001      	adds	r0, #1
 80048f6:	d09b      	beq.n	8004830 <_printf_i+0x164>
 80048f8:	3501      	adds	r5, #1
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	9903      	ldr	r1, [sp, #12]
 80048fe:	1a5b      	subs	r3, r3, r1
 8004900:	42ab      	cmp	r3, r5
 8004902:	dcf2      	bgt.n	80048ea <_printf_i+0x21e>
 8004904:	e7eb      	b.n	80048de <_printf_i+0x212>
 8004906:	2500      	movs	r5, #0
 8004908:	f104 0619 	add.w	r6, r4, #25
 800490c:	e7f5      	b.n	80048fa <_printf_i+0x22e>
 800490e:	bf00      	nop
 8004910:	08006e86 	.word	0x08006e86
 8004914:	08006e97 	.word	0x08006e97

08004918 <siprintf>:
 8004918:	b40e      	push	{r1, r2, r3}
 800491a:	b500      	push	{lr}
 800491c:	b09c      	sub	sp, #112	; 0x70
 800491e:	ab1d      	add	r3, sp, #116	; 0x74
 8004920:	9002      	str	r0, [sp, #8]
 8004922:	9006      	str	r0, [sp, #24]
 8004924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004928:	4809      	ldr	r0, [pc, #36]	; (8004950 <siprintf+0x38>)
 800492a:	9107      	str	r1, [sp, #28]
 800492c:	9104      	str	r1, [sp, #16]
 800492e:	4909      	ldr	r1, [pc, #36]	; (8004954 <siprintf+0x3c>)
 8004930:	f853 2b04 	ldr.w	r2, [r3], #4
 8004934:	9105      	str	r1, [sp, #20]
 8004936:	6800      	ldr	r0, [r0, #0]
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	a902      	add	r1, sp, #8
 800493c:	f001 fb76 	bl	800602c <_svfiprintf_r>
 8004940:	9b02      	ldr	r3, [sp, #8]
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	b01c      	add	sp, #112	; 0x70
 8004948:	f85d eb04 	ldr.w	lr, [sp], #4
 800494c:	b003      	add	sp, #12
 800494e:	4770      	bx	lr
 8004950:	2000000c 	.word	0x2000000c
 8004954:	ffff0208 	.word	0xffff0208

08004958 <quorem>:
 8004958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	6903      	ldr	r3, [r0, #16]
 800495e:	690c      	ldr	r4, [r1, #16]
 8004960:	42a3      	cmp	r3, r4
 8004962:	4607      	mov	r7, r0
 8004964:	f2c0 8081 	blt.w	8004a6a <quorem+0x112>
 8004968:	3c01      	subs	r4, #1
 800496a:	f101 0814 	add.w	r8, r1, #20
 800496e:	f100 0514 	add.w	r5, r0, #20
 8004972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800497c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004980:	3301      	adds	r3, #1
 8004982:	429a      	cmp	r2, r3
 8004984:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004988:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800498c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004990:	d331      	bcc.n	80049f6 <quorem+0x9e>
 8004992:	f04f 0e00 	mov.w	lr, #0
 8004996:	4640      	mov	r0, r8
 8004998:	46ac      	mov	ip, r5
 800499a:	46f2      	mov	sl, lr
 800499c:	f850 2b04 	ldr.w	r2, [r0], #4
 80049a0:	b293      	uxth	r3, r2
 80049a2:	fb06 e303 	mla	r3, r6, r3, lr
 80049a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	ebaa 0303 	sub.w	r3, sl, r3
 80049b0:	f8dc a000 	ldr.w	sl, [ip]
 80049b4:	0c12      	lsrs	r2, r2, #16
 80049b6:	fa13 f38a 	uxtah	r3, r3, sl
 80049ba:	fb06 e202 	mla	r2, r6, r2, lr
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	9b00      	ldr	r3, [sp, #0]
 80049c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049c6:	b292      	uxth	r2, r2
 80049c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80049cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80049d4:	4581      	cmp	r9, r0
 80049d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049da:	f84c 3b04 	str.w	r3, [ip], #4
 80049de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80049e2:	d2db      	bcs.n	800499c <quorem+0x44>
 80049e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80049e8:	b92b      	cbnz	r3, 80049f6 <quorem+0x9e>
 80049ea:	9b01      	ldr	r3, [sp, #4]
 80049ec:	3b04      	subs	r3, #4
 80049ee:	429d      	cmp	r5, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	d32e      	bcc.n	8004a52 <quorem+0xfa>
 80049f4:	613c      	str	r4, [r7, #16]
 80049f6:	4638      	mov	r0, r7
 80049f8:	f001 f8c4 	bl	8005b84 <__mcmp>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	db24      	blt.n	8004a4a <quorem+0xf2>
 8004a00:	3601      	adds	r6, #1
 8004a02:	4628      	mov	r0, r5
 8004a04:	f04f 0c00 	mov.w	ip, #0
 8004a08:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a0c:	f8d0 e000 	ldr.w	lr, [r0]
 8004a10:	b293      	uxth	r3, r2
 8004a12:	ebac 0303 	sub.w	r3, ip, r3
 8004a16:	0c12      	lsrs	r2, r2, #16
 8004a18:	fa13 f38e 	uxtah	r3, r3, lr
 8004a1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a2a:	45c1      	cmp	r9, r8
 8004a2c:	f840 3b04 	str.w	r3, [r0], #4
 8004a30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a34:	d2e8      	bcs.n	8004a08 <quorem+0xb0>
 8004a36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a3e:	b922      	cbnz	r2, 8004a4a <quorem+0xf2>
 8004a40:	3b04      	subs	r3, #4
 8004a42:	429d      	cmp	r5, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	d30a      	bcc.n	8004a5e <quorem+0x106>
 8004a48:	613c      	str	r4, [r7, #16]
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	b003      	add	sp, #12
 8004a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	3b04      	subs	r3, #4
 8004a56:	2a00      	cmp	r2, #0
 8004a58:	d1cc      	bne.n	80049f4 <quorem+0x9c>
 8004a5a:	3c01      	subs	r4, #1
 8004a5c:	e7c7      	b.n	80049ee <quorem+0x96>
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	3b04      	subs	r3, #4
 8004a62:	2a00      	cmp	r2, #0
 8004a64:	d1f0      	bne.n	8004a48 <quorem+0xf0>
 8004a66:	3c01      	subs	r4, #1
 8004a68:	e7eb      	b.n	8004a42 <quorem+0xea>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e7ee      	b.n	8004a4c <quorem+0xf4>
	...

08004a70 <_dtoa_r>:
 8004a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	ed2d 8b04 	vpush	{d8-d9}
 8004a78:	ec57 6b10 	vmov	r6, r7, d0
 8004a7c:	b093      	sub	sp, #76	; 0x4c
 8004a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a84:	9106      	str	r1, [sp, #24]
 8004a86:	ee10 aa10 	vmov	sl, s0
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a8e:	930c      	str	r3, [sp, #48]	; 0x30
 8004a90:	46bb      	mov	fp, r7
 8004a92:	b975      	cbnz	r5, 8004ab2 <_dtoa_r+0x42>
 8004a94:	2010      	movs	r0, #16
 8004a96:	f000 fddd 	bl	8005654 <malloc>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6260      	str	r0, [r4, #36]	; 0x24
 8004a9e:	b920      	cbnz	r0, 8004aaa <_dtoa_r+0x3a>
 8004aa0:	4ba7      	ldr	r3, [pc, #668]	; (8004d40 <_dtoa_r+0x2d0>)
 8004aa2:	21ea      	movs	r1, #234	; 0xea
 8004aa4:	48a7      	ldr	r0, [pc, #668]	; (8004d44 <_dtoa_r+0x2d4>)
 8004aa6:	f001 fbd1 	bl	800624c <__assert_func>
 8004aaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004aae:	6005      	str	r5, [r0, #0]
 8004ab0:	60c5      	str	r5, [r0, #12]
 8004ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	b151      	cbz	r1, 8004ace <_dtoa_r+0x5e>
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	604a      	str	r2, [r1, #4]
 8004abc:	2301      	movs	r3, #1
 8004abe:	4093      	lsls	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 fe1c 	bl	8005700 <_Bfree>
 8004ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	1e3b      	subs	r3, r7, #0
 8004ad0:	bfaa      	itet	ge
 8004ad2:	2300      	movge	r3, #0
 8004ad4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004ad8:	f8c8 3000 	strge.w	r3, [r8]
 8004adc:	4b9a      	ldr	r3, [pc, #616]	; (8004d48 <_dtoa_r+0x2d8>)
 8004ade:	bfbc      	itt	lt
 8004ae0:	2201      	movlt	r2, #1
 8004ae2:	f8c8 2000 	strlt.w	r2, [r8]
 8004ae6:	ea33 030b 	bics.w	r3, r3, fp
 8004aea:	d11b      	bne.n	8004b24 <_dtoa_r+0xb4>
 8004aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aee:	f242 730f 	movw	r3, #9999	; 0x270f
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004af8:	4333      	orrs	r3, r6
 8004afa:	f000 8592 	beq.w	8005622 <_dtoa_r+0xbb2>
 8004afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b00:	b963      	cbnz	r3, 8004b1c <_dtoa_r+0xac>
 8004b02:	4b92      	ldr	r3, [pc, #584]	; (8004d4c <_dtoa_r+0x2dc>)
 8004b04:	e022      	b.n	8004b4c <_dtoa_r+0xdc>
 8004b06:	4b92      	ldr	r3, [pc, #584]	; (8004d50 <_dtoa_r+0x2e0>)
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	9801      	ldr	r0, [sp, #4]
 8004b12:	b013      	add	sp, #76	; 0x4c
 8004b14:	ecbd 8b04 	vpop	{d8-d9}
 8004b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1c:	4b8b      	ldr	r3, [pc, #556]	; (8004d4c <_dtoa_r+0x2dc>)
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	3303      	adds	r3, #3
 8004b22:	e7f3      	b.n	8004b0c <_dtoa_r+0x9c>
 8004b24:	2200      	movs	r2, #0
 8004b26:	2300      	movs	r3, #0
 8004b28:	4650      	mov	r0, sl
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	f7fb ffdc 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b30:	ec4b ab19 	vmov	d9, sl, fp
 8004b34:	4680      	mov	r8, r0
 8004b36:	b158      	cbz	r0, 8004b50 <_dtoa_r+0xe0>
 8004b38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 856b 	beq.w	800561c <_dtoa_r+0xbac>
 8004b46:	4883      	ldr	r0, [pc, #524]	; (8004d54 <_dtoa_r+0x2e4>)
 8004b48:	6018      	str	r0, [r3, #0]
 8004b4a:	1e43      	subs	r3, r0, #1
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	e7df      	b.n	8004b10 <_dtoa_r+0xa0>
 8004b50:	ec4b ab10 	vmov	d0, sl, fp
 8004b54:	aa10      	add	r2, sp, #64	; 0x40
 8004b56:	a911      	add	r1, sp, #68	; 0x44
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f001 f8b9 	bl	8005cd0 <__d2b>
 8004b5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004b62:	ee08 0a10 	vmov	s16, r0
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	f000 8084 	beq.w	8004c74 <_dtoa_r+0x204>
 8004b6c:	ee19 3a90 	vmov	r3, s19
 8004b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004b78:	4656      	mov	r6, sl
 8004b7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004b86:	4b74      	ldr	r3, [pc, #464]	; (8004d58 <_dtoa_r+0x2e8>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	4639      	mov	r1, r7
 8004b8e:	f7fb fb8b 	bl	80002a8 <__aeabi_dsub>
 8004b92:	a365      	add	r3, pc, #404	; (adr r3, 8004d28 <_dtoa_r+0x2b8>)
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f7fb fd3e 	bl	8000618 <__aeabi_dmul>
 8004b9c:	a364      	add	r3, pc, #400	; (adr r3, 8004d30 <_dtoa_r+0x2c0>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	f7fb fb83 	bl	80002ac <__adddf3>
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	4628      	mov	r0, r5
 8004baa:	460f      	mov	r7, r1
 8004bac:	f7fb fcca 	bl	8000544 <__aeabi_i2d>
 8004bb0:	a361      	add	r3, pc, #388	; (adr r3, 8004d38 <_dtoa_r+0x2c8>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fd2f 	bl	8000618 <__aeabi_dmul>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	f7fb fb73 	bl	80002ac <__adddf3>
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	460f      	mov	r7, r1
 8004bca:	f7fb ffd5 	bl	8000b78 <__aeabi_d2iz>
 8004bce:	2200      	movs	r2, #0
 8004bd0:	9000      	str	r0, [sp, #0]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	f7fb ff90 	bl	8000afc <__aeabi_dcmplt>
 8004bdc:	b150      	cbz	r0, 8004bf4 <_dtoa_r+0x184>
 8004bde:	9800      	ldr	r0, [sp, #0]
 8004be0:	f7fb fcb0 	bl	8000544 <__aeabi_i2d>
 8004be4:	4632      	mov	r2, r6
 8004be6:	463b      	mov	r3, r7
 8004be8:	f7fb ff7e 	bl	8000ae8 <__aeabi_dcmpeq>
 8004bec:	b910      	cbnz	r0, 8004bf4 <_dtoa_r+0x184>
 8004bee:	9b00      	ldr	r3, [sp, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	9b00      	ldr	r3, [sp, #0]
 8004bf6:	2b16      	cmp	r3, #22
 8004bf8:	d85a      	bhi.n	8004cb0 <_dtoa_r+0x240>
 8004bfa:	9a00      	ldr	r2, [sp, #0]
 8004bfc:	4b57      	ldr	r3, [pc, #348]	; (8004d5c <_dtoa_r+0x2ec>)
 8004bfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	ec51 0b19 	vmov	r0, r1, d9
 8004c0a:	f7fb ff77 	bl	8000afc <__aeabi_dcmplt>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d050      	beq.n	8004cb4 <_dtoa_r+0x244>
 8004c12:	9b00      	ldr	r3, [sp, #0]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c1e:	1b5d      	subs	r5, r3, r5
 8004c20:	1e6b      	subs	r3, r5, #1
 8004c22:	9305      	str	r3, [sp, #20]
 8004c24:	bf45      	ittet	mi
 8004c26:	f1c5 0301 	rsbmi	r3, r5, #1
 8004c2a:	9304      	strmi	r3, [sp, #16]
 8004c2c:	2300      	movpl	r3, #0
 8004c2e:	2300      	movmi	r3, #0
 8004c30:	bf4c      	ite	mi
 8004c32:	9305      	strmi	r3, [sp, #20]
 8004c34:	9304      	strpl	r3, [sp, #16]
 8004c36:	9b00      	ldr	r3, [sp, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	db3d      	blt.n	8004cb8 <_dtoa_r+0x248>
 8004c3c:	9b05      	ldr	r3, [sp, #20]
 8004c3e:	9a00      	ldr	r2, [sp, #0]
 8004c40:	920a      	str	r2, [sp, #40]	; 0x28
 8004c42:	4413      	add	r3, r2
 8004c44:	9305      	str	r3, [sp, #20]
 8004c46:	2300      	movs	r3, #0
 8004c48:	9307      	str	r3, [sp, #28]
 8004c4a:	9b06      	ldr	r3, [sp, #24]
 8004c4c:	2b09      	cmp	r3, #9
 8004c4e:	f200 8089 	bhi.w	8004d64 <_dtoa_r+0x2f4>
 8004c52:	2b05      	cmp	r3, #5
 8004c54:	bfc4      	itt	gt
 8004c56:	3b04      	subgt	r3, #4
 8004c58:	9306      	strgt	r3, [sp, #24]
 8004c5a:	9b06      	ldr	r3, [sp, #24]
 8004c5c:	f1a3 0302 	sub.w	r3, r3, #2
 8004c60:	bfcc      	ite	gt
 8004c62:	2500      	movgt	r5, #0
 8004c64:	2501      	movle	r5, #1
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	f200 8087 	bhi.w	8004d7a <_dtoa_r+0x30a>
 8004c6c:	e8df f003 	tbb	[pc, r3]
 8004c70:	59383a2d 	.word	0x59383a2d
 8004c74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004c78:	441d      	add	r5, r3
 8004c7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	bfc1      	itttt	gt
 8004c82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004c8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004c8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c92:	bfda      	itte	le
 8004c94:	f1c3 0320 	rsble	r3, r3, #32
 8004c98:	fa06 f003 	lslle.w	r0, r6, r3
 8004c9c:	4318      	orrgt	r0, r3
 8004c9e:	f7fb fc41 	bl	8000524 <__aeabi_ui2d>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004caa:	3d01      	subs	r5, #1
 8004cac:	930e      	str	r3, [sp, #56]	; 0x38
 8004cae:	e76a      	b.n	8004b86 <_dtoa_r+0x116>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e7b2      	b.n	8004c1a <_dtoa_r+0x1aa>
 8004cb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004cb6:	e7b1      	b.n	8004c1c <_dtoa_r+0x1ac>
 8004cb8:	9b04      	ldr	r3, [sp, #16]
 8004cba:	9a00      	ldr	r2, [sp, #0]
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	9304      	str	r3, [sp, #16]
 8004cc0:	4253      	negs	r3, r2
 8004cc2:	9307      	str	r3, [sp, #28]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8004cc8:	e7bf      	b.n	8004c4a <_dtoa_r+0x1da>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9308      	str	r3, [sp, #32]
 8004cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	dc55      	bgt.n	8004d80 <_dtoa_r+0x310>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cde:	e00c      	b.n	8004cfa <_dtoa_r+0x28a>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e7f3      	b.n	8004ccc <_dtoa_r+0x25c>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ce8:	9308      	str	r3, [sp, #32]
 8004cea:	9b00      	ldr	r3, [sp, #0]
 8004cec:	4413      	add	r3, r2
 8004cee:	9302      	str	r3, [sp, #8]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	9303      	str	r3, [sp, #12]
 8004cf6:	bfb8      	it	lt
 8004cf8:	2301      	movlt	r3, #1
 8004cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	6042      	str	r2, [r0, #4]
 8004d00:	2204      	movs	r2, #4
 8004d02:	f102 0614 	add.w	r6, r2, #20
 8004d06:	429e      	cmp	r6, r3
 8004d08:	6841      	ldr	r1, [r0, #4]
 8004d0a:	d93d      	bls.n	8004d88 <_dtoa_r+0x318>
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f000 fcb7 	bl	8005680 <_Balloc>
 8004d12:	9001      	str	r0, [sp, #4]
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d13b      	bne.n	8004d90 <_dtoa_r+0x320>
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <_dtoa_r+0x2f0>)
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d20:	e6c0      	b.n	8004aa4 <_dtoa_r+0x34>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e7df      	b.n	8004ce6 <_dtoa_r+0x276>
 8004d26:	bf00      	nop
 8004d28:	636f4361 	.word	0x636f4361
 8004d2c:	3fd287a7 	.word	0x3fd287a7
 8004d30:	8b60c8b3 	.word	0x8b60c8b3
 8004d34:	3fc68a28 	.word	0x3fc68a28
 8004d38:	509f79fb 	.word	0x509f79fb
 8004d3c:	3fd34413 	.word	0x3fd34413
 8004d40:	08006eb5 	.word	0x08006eb5
 8004d44:	08006ecc 	.word	0x08006ecc
 8004d48:	7ff00000 	.word	0x7ff00000
 8004d4c:	08006eb1 	.word	0x08006eb1
 8004d50:	08006ea8 	.word	0x08006ea8
 8004d54:	08006e85 	.word	0x08006e85
 8004d58:	3ff80000 	.word	0x3ff80000
 8004d5c:	08006fc0 	.word	0x08006fc0
 8004d60:	08006f27 	.word	0x08006f27
 8004d64:	2501      	movs	r5, #1
 8004d66:	2300      	movs	r3, #0
 8004d68:	9306      	str	r3, [sp, #24]
 8004d6a:	9508      	str	r5, [sp, #32]
 8004d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d74:	2200      	movs	r2, #0
 8004d76:	2312      	movs	r3, #18
 8004d78:	e7b0      	b.n	8004cdc <_dtoa_r+0x26c>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	9308      	str	r3, [sp, #32]
 8004d7e:	e7f5      	b.n	8004d6c <_dtoa_r+0x2fc>
 8004d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d86:	e7b8      	b.n	8004cfa <_dtoa_r+0x28a>
 8004d88:	3101      	adds	r1, #1
 8004d8a:	6041      	str	r1, [r0, #4]
 8004d8c:	0052      	lsls	r2, r2, #1
 8004d8e:	e7b8      	b.n	8004d02 <_dtoa_r+0x292>
 8004d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d92:	9a01      	ldr	r2, [sp, #4]
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	2b0e      	cmp	r3, #14
 8004d9a:	f200 809d 	bhi.w	8004ed8 <_dtoa_r+0x468>
 8004d9e:	2d00      	cmp	r5, #0
 8004da0:	f000 809a 	beq.w	8004ed8 <_dtoa_r+0x468>
 8004da4:	9b00      	ldr	r3, [sp, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	dd32      	ble.n	8004e10 <_dtoa_r+0x3a0>
 8004daa:	4ab7      	ldr	r2, [pc, #732]	; (8005088 <_dtoa_r+0x618>)
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004db4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004db8:	9b00      	ldr	r3, [sp, #0]
 8004dba:	05d8      	lsls	r0, r3, #23
 8004dbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004dc0:	d516      	bpl.n	8004df0 <_dtoa_r+0x380>
 8004dc2:	4bb2      	ldr	r3, [pc, #712]	; (800508c <_dtoa_r+0x61c>)
 8004dc4:	ec51 0b19 	vmov	r0, r1, d9
 8004dc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dcc:	f7fb fd4e 	bl	800086c <__aeabi_ddiv>
 8004dd0:	f007 070f 	and.w	r7, r7, #15
 8004dd4:	4682      	mov	sl, r0
 8004dd6:	468b      	mov	fp, r1
 8004dd8:	2503      	movs	r5, #3
 8004dda:	4eac      	ldr	r6, [pc, #688]	; (800508c <_dtoa_r+0x61c>)
 8004ddc:	b957      	cbnz	r7, 8004df4 <_dtoa_r+0x384>
 8004dde:	4642      	mov	r2, r8
 8004de0:	464b      	mov	r3, r9
 8004de2:	4650      	mov	r0, sl
 8004de4:	4659      	mov	r1, fp
 8004de6:	f7fb fd41 	bl	800086c <__aeabi_ddiv>
 8004dea:	4682      	mov	sl, r0
 8004dec:	468b      	mov	fp, r1
 8004dee:	e028      	b.n	8004e42 <_dtoa_r+0x3d2>
 8004df0:	2502      	movs	r5, #2
 8004df2:	e7f2      	b.n	8004dda <_dtoa_r+0x36a>
 8004df4:	07f9      	lsls	r1, r7, #31
 8004df6:	d508      	bpl.n	8004e0a <_dtoa_r+0x39a>
 8004df8:	4640      	mov	r0, r8
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e00:	f7fb fc0a 	bl	8000618 <__aeabi_dmul>
 8004e04:	3501      	adds	r5, #1
 8004e06:	4680      	mov	r8, r0
 8004e08:	4689      	mov	r9, r1
 8004e0a:	107f      	asrs	r7, r7, #1
 8004e0c:	3608      	adds	r6, #8
 8004e0e:	e7e5      	b.n	8004ddc <_dtoa_r+0x36c>
 8004e10:	f000 809b 	beq.w	8004f4a <_dtoa_r+0x4da>
 8004e14:	9b00      	ldr	r3, [sp, #0]
 8004e16:	4f9d      	ldr	r7, [pc, #628]	; (800508c <_dtoa_r+0x61c>)
 8004e18:	425e      	negs	r6, r3
 8004e1a:	4b9b      	ldr	r3, [pc, #620]	; (8005088 <_dtoa_r+0x618>)
 8004e1c:	f006 020f 	and.w	r2, r6, #15
 8004e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	ec51 0b19 	vmov	r0, r1, d9
 8004e2c:	f7fb fbf4 	bl	8000618 <__aeabi_dmul>
 8004e30:	1136      	asrs	r6, r6, #4
 8004e32:	4682      	mov	sl, r0
 8004e34:	468b      	mov	fp, r1
 8004e36:	2300      	movs	r3, #0
 8004e38:	2502      	movs	r5, #2
 8004e3a:	2e00      	cmp	r6, #0
 8004e3c:	d17a      	bne.n	8004f34 <_dtoa_r+0x4c4>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1d3      	bne.n	8004dea <_dtoa_r+0x37a>
 8004e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8082 	beq.w	8004f4e <_dtoa_r+0x4de>
 8004e4a:	4b91      	ldr	r3, [pc, #580]	; (8005090 <_dtoa_r+0x620>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4650      	mov	r0, sl
 8004e50:	4659      	mov	r1, fp
 8004e52:	f7fb fe53 	bl	8000afc <__aeabi_dcmplt>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d079      	beq.n	8004f4e <_dtoa_r+0x4de>
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d076      	beq.n	8004f4e <_dtoa_r+0x4de>
 8004e60:	9b02      	ldr	r3, [sp, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	dd36      	ble.n	8004ed4 <_dtoa_r+0x464>
 8004e66:	9b00      	ldr	r3, [sp, #0]
 8004e68:	4650      	mov	r0, sl
 8004e6a:	4659      	mov	r1, fp
 8004e6c:	1e5f      	subs	r7, r3, #1
 8004e6e:	2200      	movs	r2, #0
 8004e70:	4b88      	ldr	r3, [pc, #544]	; (8005094 <_dtoa_r+0x624>)
 8004e72:	f7fb fbd1 	bl	8000618 <__aeabi_dmul>
 8004e76:	9e02      	ldr	r6, [sp, #8]
 8004e78:	4682      	mov	sl, r0
 8004e7a:	468b      	mov	fp, r1
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f7fb fb60 	bl	8000544 <__aeabi_i2d>
 8004e84:	4652      	mov	r2, sl
 8004e86:	465b      	mov	r3, fp
 8004e88:	f7fb fbc6 	bl	8000618 <__aeabi_dmul>
 8004e8c:	4b82      	ldr	r3, [pc, #520]	; (8005098 <_dtoa_r+0x628>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f7fb fa0c 	bl	80002ac <__adddf3>
 8004e94:	46d0      	mov	r8, sl
 8004e96:	46d9      	mov	r9, fp
 8004e98:	4682      	mov	sl, r0
 8004e9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	d158      	bne.n	8004f54 <_dtoa_r+0x4e4>
 8004ea2:	4b7e      	ldr	r3, [pc, #504]	; (800509c <_dtoa_r+0x62c>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	f7fb f9fd 	bl	80002a8 <__aeabi_dsub>
 8004eae:	4652      	mov	r2, sl
 8004eb0:	465b      	mov	r3, fp
 8004eb2:	4680      	mov	r8, r0
 8004eb4:	4689      	mov	r9, r1
 8004eb6:	f7fb fe3f 	bl	8000b38 <__aeabi_dcmpgt>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	f040 8295 	bne.w	80053ea <_dtoa_r+0x97a>
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	4649      	mov	r1, r9
 8004eca:	f7fb fe17 	bl	8000afc <__aeabi_dcmplt>
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	f040 8289 	bne.w	80053e6 <_dtoa_r+0x976>
 8004ed4:	ec5b ab19 	vmov	sl, fp, d9
 8004ed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f2c0 8148 	blt.w	8005170 <_dtoa_r+0x700>
 8004ee0:	9a00      	ldr	r2, [sp, #0]
 8004ee2:	2a0e      	cmp	r2, #14
 8004ee4:	f300 8144 	bgt.w	8005170 <_dtoa_r+0x700>
 8004ee8:	4b67      	ldr	r3, [pc, #412]	; (8005088 <_dtoa_r+0x618>)
 8004eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f280 80d5 	bge.w	80050a4 <_dtoa_r+0x634>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f300 80d1 	bgt.w	80050a4 <_dtoa_r+0x634>
 8004f02:	f040 826f 	bne.w	80053e4 <_dtoa_r+0x974>
 8004f06:	4b65      	ldr	r3, [pc, #404]	; (800509c <_dtoa_r+0x62c>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	f7fb fb83 	bl	8000618 <__aeabi_dmul>
 8004f12:	4652      	mov	r2, sl
 8004f14:	465b      	mov	r3, fp
 8004f16:	f7fb fe05 	bl	8000b24 <__aeabi_dcmpge>
 8004f1a:	9e03      	ldr	r6, [sp, #12]
 8004f1c:	4637      	mov	r7, r6
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	f040 8245 	bne.w	80053ae <_dtoa_r+0x93e>
 8004f24:	9d01      	ldr	r5, [sp, #4]
 8004f26:	2331      	movs	r3, #49	; 0x31
 8004f28:	f805 3b01 	strb.w	r3, [r5], #1
 8004f2c:	9b00      	ldr	r3, [sp, #0]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	e240      	b.n	80053b6 <_dtoa_r+0x946>
 8004f34:	07f2      	lsls	r2, r6, #31
 8004f36:	d505      	bpl.n	8004f44 <_dtoa_r+0x4d4>
 8004f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f3c:	f7fb fb6c 	bl	8000618 <__aeabi_dmul>
 8004f40:	3501      	adds	r5, #1
 8004f42:	2301      	movs	r3, #1
 8004f44:	1076      	asrs	r6, r6, #1
 8004f46:	3708      	adds	r7, #8
 8004f48:	e777      	b.n	8004e3a <_dtoa_r+0x3ca>
 8004f4a:	2502      	movs	r5, #2
 8004f4c:	e779      	b.n	8004e42 <_dtoa_r+0x3d2>
 8004f4e:	9f00      	ldr	r7, [sp, #0]
 8004f50:	9e03      	ldr	r6, [sp, #12]
 8004f52:	e794      	b.n	8004e7e <_dtoa_r+0x40e>
 8004f54:	9901      	ldr	r1, [sp, #4]
 8004f56:	4b4c      	ldr	r3, [pc, #304]	; (8005088 <_dtoa_r+0x618>)
 8004f58:	4431      	add	r1, r6
 8004f5a:	910d      	str	r1, [sp, #52]	; 0x34
 8004f5c:	9908      	ldr	r1, [sp, #32]
 8004f5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004f62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f66:	2900      	cmp	r1, #0
 8004f68:	d043      	beq.n	8004ff2 <_dtoa_r+0x582>
 8004f6a:	494d      	ldr	r1, [pc, #308]	; (80050a0 <_dtoa_r+0x630>)
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7fb fc7d 	bl	800086c <__aeabi_ddiv>
 8004f72:	4652      	mov	r2, sl
 8004f74:	465b      	mov	r3, fp
 8004f76:	f7fb f997 	bl	80002a8 <__aeabi_dsub>
 8004f7a:	9d01      	ldr	r5, [sp, #4]
 8004f7c:	4682      	mov	sl, r0
 8004f7e:	468b      	mov	fp, r1
 8004f80:	4649      	mov	r1, r9
 8004f82:	4640      	mov	r0, r8
 8004f84:	f7fb fdf8 	bl	8000b78 <__aeabi_d2iz>
 8004f88:	4606      	mov	r6, r0
 8004f8a:	f7fb fadb 	bl	8000544 <__aeabi_i2d>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f7fb f987 	bl	80002a8 <__aeabi_dsub>
 8004f9a:	3630      	adds	r6, #48	; 0x30
 8004f9c:	f805 6b01 	strb.w	r6, [r5], #1
 8004fa0:	4652      	mov	r2, sl
 8004fa2:	465b      	mov	r3, fp
 8004fa4:	4680      	mov	r8, r0
 8004fa6:	4689      	mov	r9, r1
 8004fa8:	f7fb fda8 	bl	8000afc <__aeabi_dcmplt>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d163      	bne.n	8005078 <_dtoa_r+0x608>
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	4936      	ldr	r1, [pc, #216]	; (8005090 <_dtoa_r+0x620>)
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f7fb f976 	bl	80002a8 <__aeabi_dsub>
 8004fbc:	4652      	mov	r2, sl
 8004fbe:	465b      	mov	r3, fp
 8004fc0:	f7fb fd9c 	bl	8000afc <__aeabi_dcmplt>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	f040 80b5 	bne.w	8005134 <_dtoa_r+0x6c4>
 8004fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fcc:	429d      	cmp	r5, r3
 8004fce:	d081      	beq.n	8004ed4 <_dtoa_r+0x464>
 8004fd0:	4b30      	ldr	r3, [pc, #192]	; (8005094 <_dtoa_r+0x624>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	4650      	mov	r0, sl
 8004fd6:	4659      	mov	r1, fp
 8004fd8:	f7fb fb1e 	bl	8000618 <__aeabi_dmul>
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <_dtoa_r+0x624>)
 8004fde:	4682      	mov	sl, r0
 8004fe0:	468b      	mov	fp, r1
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f7fb fb16 	bl	8000618 <__aeabi_dmul>
 8004fec:	4680      	mov	r8, r0
 8004fee:	4689      	mov	r9, r1
 8004ff0:	e7c6      	b.n	8004f80 <_dtoa_r+0x510>
 8004ff2:	4650      	mov	r0, sl
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	f7fb fb0f 	bl	8000618 <__aeabi_dmul>
 8004ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ffc:	9d01      	ldr	r5, [sp, #4]
 8004ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005000:	4682      	mov	sl, r0
 8005002:	468b      	mov	fp, r1
 8005004:	4649      	mov	r1, r9
 8005006:	4640      	mov	r0, r8
 8005008:	f7fb fdb6 	bl	8000b78 <__aeabi_d2iz>
 800500c:	4606      	mov	r6, r0
 800500e:	f7fb fa99 	bl	8000544 <__aeabi_i2d>
 8005012:	3630      	adds	r6, #48	; 0x30
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	f7fb f944 	bl	80002a8 <__aeabi_dsub>
 8005020:	f805 6b01 	strb.w	r6, [r5], #1
 8005024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005026:	429d      	cmp	r5, r3
 8005028:	4680      	mov	r8, r0
 800502a:	4689      	mov	r9, r1
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	d124      	bne.n	800507c <_dtoa_r+0x60c>
 8005032:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <_dtoa_r+0x630>)
 8005034:	4650      	mov	r0, sl
 8005036:	4659      	mov	r1, fp
 8005038:	f7fb f938 	bl	80002ac <__adddf3>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4640      	mov	r0, r8
 8005042:	4649      	mov	r1, r9
 8005044:	f7fb fd78 	bl	8000b38 <__aeabi_dcmpgt>
 8005048:	2800      	cmp	r0, #0
 800504a:	d173      	bne.n	8005134 <_dtoa_r+0x6c4>
 800504c:	4652      	mov	r2, sl
 800504e:	465b      	mov	r3, fp
 8005050:	4913      	ldr	r1, [pc, #76]	; (80050a0 <_dtoa_r+0x630>)
 8005052:	2000      	movs	r0, #0
 8005054:	f7fb f928 	bl	80002a8 <__aeabi_dsub>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4640      	mov	r0, r8
 800505e:	4649      	mov	r1, r9
 8005060:	f7fb fd4c 	bl	8000afc <__aeabi_dcmplt>
 8005064:	2800      	cmp	r0, #0
 8005066:	f43f af35 	beq.w	8004ed4 <_dtoa_r+0x464>
 800506a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800506c:	1e6b      	subs	r3, r5, #1
 800506e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005070:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005074:	2b30      	cmp	r3, #48	; 0x30
 8005076:	d0f8      	beq.n	800506a <_dtoa_r+0x5fa>
 8005078:	9700      	str	r7, [sp, #0]
 800507a:	e049      	b.n	8005110 <_dtoa_r+0x6a0>
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <_dtoa_r+0x624>)
 800507e:	f7fb facb 	bl	8000618 <__aeabi_dmul>
 8005082:	4680      	mov	r8, r0
 8005084:	4689      	mov	r9, r1
 8005086:	e7bd      	b.n	8005004 <_dtoa_r+0x594>
 8005088:	08006fc0 	.word	0x08006fc0
 800508c:	08006f98 	.word	0x08006f98
 8005090:	3ff00000 	.word	0x3ff00000
 8005094:	40240000 	.word	0x40240000
 8005098:	401c0000 	.word	0x401c0000
 800509c:	40140000 	.word	0x40140000
 80050a0:	3fe00000 	.word	0x3fe00000
 80050a4:	9d01      	ldr	r5, [sp, #4]
 80050a6:	4656      	mov	r6, sl
 80050a8:	465f      	mov	r7, fp
 80050aa:	4642      	mov	r2, r8
 80050ac:	464b      	mov	r3, r9
 80050ae:	4630      	mov	r0, r6
 80050b0:	4639      	mov	r1, r7
 80050b2:	f7fb fbdb 	bl	800086c <__aeabi_ddiv>
 80050b6:	f7fb fd5f 	bl	8000b78 <__aeabi_d2iz>
 80050ba:	4682      	mov	sl, r0
 80050bc:	f7fb fa42 	bl	8000544 <__aeabi_i2d>
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	f7fb faa8 	bl	8000618 <__aeabi_dmul>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80050d4:	f7fb f8e8 	bl	80002a8 <__aeabi_dsub>
 80050d8:	f805 6b01 	strb.w	r6, [r5], #1
 80050dc:	9e01      	ldr	r6, [sp, #4]
 80050de:	9f03      	ldr	r7, [sp, #12]
 80050e0:	1bae      	subs	r6, r5, r6
 80050e2:	42b7      	cmp	r7, r6
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	d135      	bne.n	8005156 <_dtoa_r+0x6e6>
 80050ea:	f7fb f8df 	bl	80002ac <__adddf3>
 80050ee:	4642      	mov	r2, r8
 80050f0:	464b      	mov	r3, r9
 80050f2:	4606      	mov	r6, r0
 80050f4:	460f      	mov	r7, r1
 80050f6:	f7fb fd1f 	bl	8000b38 <__aeabi_dcmpgt>
 80050fa:	b9d0      	cbnz	r0, 8005132 <_dtoa_r+0x6c2>
 80050fc:	4642      	mov	r2, r8
 80050fe:	464b      	mov	r3, r9
 8005100:	4630      	mov	r0, r6
 8005102:	4639      	mov	r1, r7
 8005104:	f7fb fcf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8005108:	b110      	cbz	r0, 8005110 <_dtoa_r+0x6a0>
 800510a:	f01a 0f01 	tst.w	sl, #1
 800510e:	d110      	bne.n	8005132 <_dtoa_r+0x6c2>
 8005110:	4620      	mov	r0, r4
 8005112:	ee18 1a10 	vmov	r1, s16
 8005116:	f000 faf3 	bl	8005700 <_Bfree>
 800511a:	2300      	movs	r3, #0
 800511c:	9800      	ldr	r0, [sp, #0]
 800511e:	702b      	strb	r3, [r5, #0]
 8005120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005122:	3001      	adds	r0, #1
 8005124:	6018      	str	r0, [r3, #0]
 8005126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005128:	2b00      	cmp	r3, #0
 800512a:	f43f acf1 	beq.w	8004b10 <_dtoa_r+0xa0>
 800512e:	601d      	str	r5, [r3, #0]
 8005130:	e4ee      	b.n	8004b10 <_dtoa_r+0xa0>
 8005132:	9f00      	ldr	r7, [sp, #0]
 8005134:	462b      	mov	r3, r5
 8005136:	461d      	mov	r5, r3
 8005138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800513c:	2a39      	cmp	r2, #57	; 0x39
 800513e:	d106      	bne.n	800514e <_dtoa_r+0x6de>
 8005140:	9a01      	ldr	r2, [sp, #4]
 8005142:	429a      	cmp	r2, r3
 8005144:	d1f7      	bne.n	8005136 <_dtoa_r+0x6c6>
 8005146:	9901      	ldr	r1, [sp, #4]
 8005148:	2230      	movs	r2, #48	; 0x30
 800514a:	3701      	adds	r7, #1
 800514c:	700a      	strb	r2, [r1, #0]
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	3201      	adds	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	e790      	b.n	8005078 <_dtoa_r+0x608>
 8005156:	4ba6      	ldr	r3, [pc, #664]	; (80053f0 <_dtoa_r+0x980>)
 8005158:	2200      	movs	r2, #0
 800515a:	f7fb fa5d 	bl	8000618 <__aeabi_dmul>
 800515e:	2200      	movs	r2, #0
 8005160:	2300      	movs	r3, #0
 8005162:	4606      	mov	r6, r0
 8005164:	460f      	mov	r7, r1
 8005166:	f7fb fcbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800516a:	2800      	cmp	r0, #0
 800516c:	d09d      	beq.n	80050aa <_dtoa_r+0x63a>
 800516e:	e7cf      	b.n	8005110 <_dtoa_r+0x6a0>
 8005170:	9a08      	ldr	r2, [sp, #32]
 8005172:	2a00      	cmp	r2, #0
 8005174:	f000 80d7 	beq.w	8005326 <_dtoa_r+0x8b6>
 8005178:	9a06      	ldr	r2, [sp, #24]
 800517a:	2a01      	cmp	r2, #1
 800517c:	f300 80ba 	bgt.w	80052f4 <_dtoa_r+0x884>
 8005180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005182:	2a00      	cmp	r2, #0
 8005184:	f000 80b2 	beq.w	80052ec <_dtoa_r+0x87c>
 8005188:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800518c:	9e07      	ldr	r6, [sp, #28]
 800518e:	9d04      	ldr	r5, [sp, #16]
 8005190:	9a04      	ldr	r2, [sp, #16]
 8005192:	441a      	add	r2, r3
 8005194:	9204      	str	r2, [sp, #16]
 8005196:	9a05      	ldr	r2, [sp, #20]
 8005198:	2101      	movs	r1, #1
 800519a:	441a      	add	r2, r3
 800519c:	4620      	mov	r0, r4
 800519e:	9205      	str	r2, [sp, #20]
 80051a0:	f000 fb66 	bl	8005870 <__i2b>
 80051a4:	4607      	mov	r7, r0
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	dd0c      	ble.n	80051c4 <_dtoa_r+0x754>
 80051aa:	9b05      	ldr	r3, [sp, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dd09      	ble.n	80051c4 <_dtoa_r+0x754>
 80051b0:	42ab      	cmp	r3, r5
 80051b2:	9a04      	ldr	r2, [sp, #16]
 80051b4:	bfa8      	it	ge
 80051b6:	462b      	movge	r3, r5
 80051b8:	1ad2      	subs	r2, r2, r3
 80051ba:	9204      	str	r2, [sp, #16]
 80051bc:	9a05      	ldr	r2, [sp, #20]
 80051be:	1aed      	subs	r5, r5, r3
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	9b07      	ldr	r3, [sp, #28]
 80051c6:	b31b      	cbz	r3, 8005210 <_dtoa_r+0x7a0>
 80051c8:	9b08      	ldr	r3, [sp, #32]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80af 	beq.w	800532e <_dtoa_r+0x8be>
 80051d0:	2e00      	cmp	r6, #0
 80051d2:	dd13      	ble.n	80051fc <_dtoa_r+0x78c>
 80051d4:	4639      	mov	r1, r7
 80051d6:	4632      	mov	r2, r6
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 fc09 	bl	80059f0 <__pow5mult>
 80051de:	ee18 2a10 	vmov	r2, s16
 80051e2:	4601      	mov	r1, r0
 80051e4:	4607      	mov	r7, r0
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 fb58 	bl	800589c <__multiply>
 80051ec:	ee18 1a10 	vmov	r1, s16
 80051f0:	4680      	mov	r8, r0
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 fa84 	bl	8005700 <_Bfree>
 80051f8:	ee08 8a10 	vmov	s16, r8
 80051fc:	9b07      	ldr	r3, [sp, #28]
 80051fe:	1b9a      	subs	r2, r3, r6
 8005200:	d006      	beq.n	8005210 <_dtoa_r+0x7a0>
 8005202:	ee18 1a10 	vmov	r1, s16
 8005206:	4620      	mov	r0, r4
 8005208:	f000 fbf2 	bl	80059f0 <__pow5mult>
 800520c:	ee08 0a10 	vmov	s16, r0
 8005210:	2101      	movs	r1, #1
 8005212:	4620      	mov	r0, r4
 8005214:	f000 fb2c 	bl	8005870 <__i2b>
 8005218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800521a:	2b00      	cmp	r3, #0
 800521c:	4606      	mov	r6, r0
 800521e:	f340 8088 	ble.w	8005332 <_dtoa_r+0x8c2>
 8005222:	461a      	mov	r2, r3
 8005224:	4601      	mov	r1, r0
 8005226:	4620      	mov	r0, r4
 8005228:	f000 fbe2 	bl	80059f0 <__pow5mult>
 800522c:	9b06      	ldr	r3, [sp, #24]
 800522e:	2b01      	cmp	r3, #1
 8005230:	4606      	mov	r6, r0
 8005232:	f340 8081 	ble.w	8005338 <_dtoa_r+0x8c8>
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	6933      	ldr	r3, [r6, #16]
 800523c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005240:	6918      	ldr	r0, [r3, #16]
 8005242:	f000 fac5 	bl	80057d0 <__hi0bits>
 8005246:	f1c0 0020 	rsb	r0, r0, #32
 800524a:	9b05      	ldr	r3, [sp, #20]
 800524c:	4418      	add	r0, r3
 800524e:	f010 001f 	ands.w	r0, r0, #31
 8005252:	f000 8092 	beq.w	800537a <_dtoa_r+0x90a>
 8005256:	f1c0 0320 	rsb	r3, r0, #32
 800525a:	2b04      	cmp	r3, #4
 800525c:	f340 808a 	ble.w	8005374 <_dtoa_r+0x904>
 8005260:	f1c0 001c 	rsb	r0, r0, #28
 8005264:	9b04      	ldr	r3, [sp, #16]
 8005266:	4403      	add	r3, r0
 8005268:	9304      	str	r3, [sp, #16]
 800526a:	9b05      	ldr	r3, [sp, #20]
 800526c:	4403      	add	r3, r0
 800526e:	4405      	add	r5, r0
 8005270:	9305      	str	r3, [sp, #20]
 8005272:	9b04      	ldr	r3, [sp, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	dd07      	ble.n	8005288 <_dtoa_r+0x818>
 8005278:	ee18 1a10 	vmov	r1, s16
 800527c:	461a      	mov	r2, r3
 800527e:	4620      	mov	r0, r4
 8005280:	f000 fc10 	bl	8005aa4 <__lshift>
 8005284:	ee08 0a10 	vmov	s16, r0
 8005288:	9b05      	ldr	r3, [sp, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dd05      	ble.n	800529a <_dtoa_r+0x82a>
 800528e:	4631      	mov	r1, r6
 8005290:	461a      	mov	r2, r3
 8005292:	4620      	mov	r0, r4
 8005294:	f000 fc06 	bl	8005aa4 <__lshift>
 8005298:	4606      	mov	r6, r0
 800529a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d06e      	beq.n	800537e <_dtoa_r+0x90e>
 80052a0:	ee18 0a10 	vmov	r0, s16
 80052a4:	4631      	mov	r1, r6
 80052a6:	f000 fc6d 	bl	8005b84 <__mcmp>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	da67      	bge.n	800537e <_dtoa_r+0x90e>
 80052ae:	9b00      	ldr	r3, [sp, #0]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	ee18 1a10 	vmov	r1, s16
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	220a      	movs	r2, #10
 80052ba:	2300      	movs	r3, #0
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 fa41 	bl	8005744 <__multadd>
 80052c2:	9b08      	ldr	r3, [sp, #32]
 80052c4:	ee08 0a10 	vmov	s16, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 81b1 	beq.w	8005630 <_dtoa_r+0xbc0>
 80052ce:	2300      	movs	r3, #0
 80052d0:	4639      	mov	r1, r7
 80052d2:	220a      	movs	r2, #10
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 fa35 	bl	8005744 <__multadd>
 80052da:	9b02      	ldr	r3, [sp, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	4607      	mov	r7, r0
 80052e0:	f300 808e 	bgt.w	8005400 <_dtoa_r+0x990>
 80052e4:	9b06      	ldr	r3, [sp, #24]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	dc51      	bgt.n	800538e <_dtoa_r+0x91e>
 80052ea:	e089      	b.n	8005400 <_dtoa_r+0x990>
 80052ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052f2:	e74b      	b.n	800518c <_dtoa_r+0x71c>
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	1e5e      	subs	r6, r3, #1
 80052f8:	9b07      	ldr	r3, [sp, #28]
 80052fa:	42b3      	cmp	r3, r6
 80052fc:	bfbf      	itttt	lt
 80052fe:	9b07      	ldrlt	r3, [sp, #28]
 8005300:	9607      	strlt	r6, [sp, #28]
 8005302:	1af2      	sublt	r2, r6, r3
 8005304:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005306:	bfb6      	itet	lt
 8005308:	189b      	addlt	r3, r3, r2
 800530a:	1b9e      	subge	r6, r3, r6
 800530c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	bfb8      	it	lt
 8005312:	2600      	movlt	r6, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	bfb7      	itett	lt
 8005318:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800531c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005320:	1a9d      	sublt	r5, r3, r2
 8005322:	2300      	movlt	r3, #0
 8005324:	e734      	b.n	8005190 <_dtoa_r+0x720>
 8005326:	9e07      	ldr	r6, [sp, #28]
 8005328:	9d04      	ldr	r5, [sp, #16]
 800532a:	9f08      	ldr	r7, [sp, #32]
 800532c:	e73b      	b.n	80051a6 <_dtoa_r+0x736>
 800532e:	9a07      	ldr	r2, [sp, #28]
 8005330:	e767      	b.n	8005202 <_dtoa_r+0x792>
 8005332:	9b06      	ldr	r3, [sp, #24]
 8005334:	2b01      	cmp	r3, #1
 8005336:	dc18      	bgt.n	800536a <_dtoa_r+0x8fa>
 8005338:	f1ba 0f00 	cmp.w	sl, #0
 800533c:	d115      	bne.n	800536a <_dtoa_r+0x8fa>
 800533e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005342:	b993      	cbnz	r3, 800536a <_dtoa_r+0x8fa>
 8005344:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005348:	0d1b      	lsrs	r3, r3, #20
 800534a:	051b      	lsls	r3, r3, #20
 800534c:	b183      	cbz	r3, 8005370 <_dtoa_r+0x900>
 800534e:	9b04      	ldr	r3, [sp, #16]
 8005350:	3301      	adds	r3, #1
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	9b05      	ldr	r3, [sp, #20]
 8005356:	3301      	adds	r3, #1
 8005358:	9305      	str	r3, [sp, #20]
 800535a:	f04f 0801 	mov.w	r8, #1
 800535e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005360:	2b00      	cmp	r3, #0
 8005362:	f47f af6a 	bne.w	800523a <_dtoa_r+0x7ca>
 8005366:	2001      	movs	r0, #1
 8005368:	e76f      	b.n	800524a <_dtoa_r+0x7da>
 800536a:	f04f 0800 	mov.w	r8, #0
 800536e:	e7f6      	b.n	800535e <_dtoa_r+0x8ee>
 8005370:	4698      	mov	r8, r3
 8005372:	e7f4      	b.n	800535e <_dtoa_r+0x8ee>
 8005374:	f43f af7d 	beq.w	8005272 <_dtoa_r+0x802>
 8005378:	4618      	mov	r0, r3
 800537a:	301c      	adds	r0, #28
 800537c:	e772      	b.n	8005264 <_dtoa_r+0x7f4>
 800537e:	9b03      	ldr	r3, [sp, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	dc37      	bgt.n	80053f4 <_dtoa_r+0x984>
 8005384:	9b06      	ldr	r3, [sp, #24]
 8005386:	2b02      	cmp	r3, #2
 8005388:	dd34      	ble.n	80053f4 <_dtoa_r+0x984>
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	9b02      	ldr	r3, [sp, #8]
 8005390:	b96b      	cbnz	r3, 80053ae <_dtoa_r+0x93e>
 8005392:	4631      	mov	r1, r6
 8005394:	2205      	movs	r2, #5
 8005396:	4620      	mov	r0, r4
 8005398:	f000 f9d4 	bl	8005744 <__multadd>
 800539c:	4601      	mov	r1, r0
 800539e:	4606      	mov	r6, r0
 80053a0:	ee18 0a10 	vmov	r0, s16
 80053a4:	f000 fbee 	bl	8005b84 <__mcmp>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	f73f adbb 	bgt.w	8004f24 <_dtoa_r+0x4b4>
 80053ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b0:	9d01      	ldr	r5, [sp, #4]
 80053b2:	43db      	mvns	r3, r3
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	f04f 0800 	mov.w	r8, #0
 80053ba:	4631      	mov	r1, r6
 80053bc:	4620      	mov	r0, r4
 80053be:	f000 f99f 	bl	8005700 <_Bfree>
 80053c2:	2f00      	cmp	r7, #0
 80053c4:	f43f aea4 	beq.w	8005110 <_dtoa_r+0x6a0>
 80053c8:	f1b8 0f00 	cmp.w	r8, #0
 80053cc:	d005      	beq.n	80053da <_dtoa_r+0x96a>
 80053ce:	45b8      	cmp	r8, r7
 80053d0:	d003      	beq.n	80053da <_dtoa_r+0x96a>
 80053d2:	4641      	mov	r1, r8
 80053d4:	4620      	mov	r0, r4
 80053d6:	f000 f993 	bl	8005700 <_Bfree>
 80053da:	4639      	mov	r1, r7
 80053dc:	4620      	mov	r0, r4
 80053de:	f000 f98f 	bl	8005700 <_Bfree>
 80053e2:	e695      	b.n	8005110 <_dtoa_r+0x6a0>
 80053e4:	2600      	movs	r6, #0
 80053e6:	4637      	mov	r7, r6
 80053e8:	e7e1      	b.n	80053ae <_dtoa_r+0x93e>
 80053ea:	9700      	str	r7, [sp, #0]
 80053ec:	4637      	mov	r7, r6
 80053ee:	e599      	b.n	8004f24 <_dtoa_r+0x4b4>
 80053f0:	40240000 	.word	0x40240000
 80053f4:	9b08      	ldr	r3, [sp, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80ca 	beq.w	8005590 <_dtoa_r+0xb20>
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	9302      	str	r3, [sp, #8]
 8005400:	2d00      	cmp	r5, #0
 8005402:	dd05      	ble.n	8005410 <_dtoa_r+0x9a0>
 8005404:	4639      	mov	r1, r7
 8005406:	462a      	mov	r2, r5
 8005408:	4620      	mov	r0, r4
 800540a:	f000 fb4b 	bl	8005aa4 <__lshift>
 800540e:	4607      	mov	r7, r0
 8005410:	f1b8 0f00 	cmp.w	r8, #0
 8005414:	d05b      	beq.n	80054ce <_dtoa_r+0xa5e>
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4620      	mov	r0, r4
 800541a:	f000 f931 	bl	8005680 <_Balloc>
 800541e:	4605      	mov	r5, r0
 8005420:	b928      	cbnz	r0, 800542e <_dtoa_r+0x9be>
 8005422:	4b87      	ldr	r3, [pc, #540]	; (8005640 <_dtoa_r+0xbd0>)
 8005424:	4602      	mov	r2, r0
 8005426:	f240 21ea 	movw	r1, #746	; 0x2ea
 800542a:	f7ff bb3b 	b.w	8004aa4 <_dtoa_r+0x34>
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	3202      	adds	r2, #2
 8005432:	0092      	lsls	r2, r2, #2
 8005434:	f107 010c 	add.w	r1, r7, #12
 8005438:	300c      	adds	r0, #12
 800543a:	f000 f913 	bl	8005664 <memcpy>
 800543e:	2201      	movs	r2, #1
 8005440:	4629      	mov	r1, r5
 8005442:	4620      	mov	r0, r4
 8005444:	f000 fb2e 	bl	8005aa4 <__lshift>
 8005448:	9b01      	ldr	r3, [sp, #4]
 800544a:	f103 0901 	add.w	r9, r3, #1
 800544e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005452:	4413      	add	r3, r2
 8005454:	9305      	str	r3, [sp, #20]
 8005456:	f00a 0301 	and.w	r3, sl, #1
 800545a:	46b8      	mov	r8, r7
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	4607      	mov	r7, r0
 8005460:	4631      	mov	r1, r6
 8005462:	ee18 0a10 	vmov	r0, s16
 8005466:	f7ff fa77 	bl	8004958 <quorem>
 800546a:	4641      	mov	r1, r8
 800546c:	9002      	str	r0, [sp, #8]
 800546e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005472:	ee18 0a10 	vmov	r0, s16
 8005476:	f000 fb85 	bl	8005b84 <__mcmp>
 800547a:	463a      	mov	r2, r7
 800547c:	9003      	str	r0, [sp, #12]
 800547e:	4631      	mov	r1, r6
 8005480:	4620      	mov	r0, r4
 8005482:	f000 fb9b 	bl	8005bbc <__mdiff>
 8005486:	68c2      	ldr	r2, [r0, #12]
 8005488:	f109 3bff 	add.w	fp, r9, #4294967295
 800548c:	4605      	mov	r5, r0
 800548e:	bb02      	cbnz	r2, 80054d2 <_dtoa_r+0xa62>
 8005490:	4601      	mov	r1, r0
 8005492:	ee18 0a10 	vmov	r0, s16
 8005496:	f000 fb75 	bl	8005b84 <__mcmp>
 800549a:	4602      	mov	r2, r0
 800549c:	4629      	mov	r1, r5
 800549e:	4620      	mov	r0, r4
 80054a0:	9207      	str	r2, [sp, #28]
 80054a2:	f000 f92d 	bl	8005700 <_Bfree>
 80054a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80054aa:	ea43 0102 	orr.w	r1, r3, r2
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	430b      	orrs	r3, r1
 80054b2:	464d      	mov	r5, r9
 80054b4:	d10f      	bne.n	80054d6 <_dtoa_r+0xa66>
 80054b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80054ba:	d02a      	beq.n	8005512 <_dtoa_r+0xaa2>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	dd02      	ble.n	80054c8 <_dtoa_r+0xa58>
 80054c2:	9b02      	ldr	r3, [sp, #8]
 80054c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80054c8:	f88b a000 	strb.w	sl, [fp]
 80054cc:	e775      	b.n	80053ba <_dtoa_r+0x94a>
 80054ce:	4638      	mov	r0, r7
 80054d0:	e7ba      	b.n	8005448 <_dtoa_r+0x9d8>
 80054d2:	2201      	movs	r2, #1
 80054d4:	e7e2      	b.n	800549c <_dtoa_r+0xa2c>
 80054d6:	9b03      	ldr	r3, [sp, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	db04      	blt.n	80054e6 <_dtoa_r+0xa76>
 80054dc:	9906      	ldr	r1, [sp, #24]
 80054de:	430b      	orrs	r3, r1
 80054e0:	9904      	ldr	r1, [sp, #16]
 80054e2:	430b      	orrs	r3, r1
 80054e4:	d122      	bne.n	800552c <_dtoa_r+0xabc>
 80054e6:	2a00      	cmp	r2, #0
 80054e8:	ddee      	ble.n	80054c8 <_dtoa_r+0xa58>
 80054ea:	ee18 1a10 	vmov	r1, s16
 80054ee:	2201      	movs	r2, #1
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 fad7 	bl	8005aa4 <__lshift>
 80054f6:	4631      	mov	r1, r6
 80054f8:	ee08 0a10 	vmov	s16, r0
 80054fc:	f000 fb42 	bl	8005b84 <__mcmp>
 8005500:	2800      	cmp	r0, #0
 8005502:	dc03      	bgt.n	800550c <_dtoa_r+0xa9c>
 8005504:	d1e0      	bne.n	80054c8 <_dtoa_r+0xa58>
 8005506:	f01a 0f01 	tst.w	sl, #1
 800550a:	d0dd      	beq.n	80054c8 <_dtoa_r+0xa58>
 800550c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005510:	d1d7      	bne.n	80054c2 <_dtoa_r+0xa52>
 8005512:	2339      	movs	r3, #57	; 0x39
 8005514:	f88b 3000 	strb.w	r3, [fp]
 8005518:	462b      	mov	r3, r5
 800551a:	461d      	mov	r5, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005522:	2a39      	cmp	r2, #57	; 0x39
 8005524:	d071      	beq.n	800560a <_dtoa_r+0xb9a>
 8005526:	3201      	adds	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e746      	b.n	80053ba <_dtoa_r+0x94a>
 800552c:	2a00      	cmp	r2, #0
 800552e:	dd07      	ble.n	8005540 <_dtoa_r+0xad0>
 8005530:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005534:	d0ed      	beq.n	8005512 <_dtoa_r+0xaa2>
 8005536:	f10a 0301 	add.w	r3, sl, #1
 800553a:	f88b 3000 	strb.w	r3, [fp]
 800553e:	e73c      	b.n	80053ba <_dtoa_r+0x94a>
 8005540:	9b05      	ldr	r3, [sp, #20]
 8005542:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005546:	4599      	cmp	r9, r3
 8005548:	d047      	beq.n	80055da <_dtoa_r+0xb6a>
 800554a:	ee18 1a10 	vmov	r1, s16
 800554e:	2300      	movs	r3, #0
 8005550:	220a      	movs	r2, #10
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f8f6 	bl	8005744 <__multadd>
 8005558:	45b8      	cmp	r8, r7
 800555a:	ee08 0a10 	vmov	s16, r0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	f04f 020a 	mov.w	r2, #10
 8005566:	4641      	mov	r1, r8
 8005568:	4620      	mov	r0, r4
 800556a:	d106      	bne.n	800557a <_dtoa_r+0xb0a>
 800556c:	f000 f8ea 	bl	8005744 <__multadd>
 8005570:	4680      	mov	r8, r0
 8005572:	4607      	mov	r7, r0
 8005574:	f109 0901 	add.w	r9, r9, #1
 8005578:	e772      	b.n	8005460 <_dtoa_r+0x9f0>
 800557a:	f000 f8e3 	bl	8005744 <__multadd>
 800557e:	4639      	mov	r1, r7
 8005580:	4680      	mov	r8, r0
 8005582:	2300      	movs	r3, #0
 8005584:	220a      	movs	r2, #10
 8005586:	4620      	mov	r0, r4
 8005588:	f000 f8dc 	bl	8005744 <__multadd>
 800558c:	4607      	mov	r7, r0
 800558e:	e7f1      	b.n	8005574 <_dtoa_r+0xb04>
 8005590:	9b03      	ldr	r3, [sp, #12]
 8005592:	9302      	str	r3, [sp, #8]
 8005594:	9d01      	ldr	r5, [sp, #4]
 8005596:	ee18 0a10 	vmov	r0, s16
 800559a:	4631      	mov	r1, r6
 800559c:	f7ff f9dc 	bl	8004958 <quorem>
 80055a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80055a4:	9b01      	ldr	r3, [sp, #4]
 80055a6:	f805 ab01 	strb.w	sl, [r5], #1
 80055aa:	1aea      	subs	r2, r5, r3
 80055ac:	9b02      	ldr	r3, [sp, #8]
 80055ae:	4293      	cmp	r3, r2
 80055b0:	dd09      	ble.n	80055c6 <_dtoa_r+0xb56>
 80055b2:	ee18 1a10 	vmov	r1, s16
 80055b6:	2300      	movs	r3, #0
 80055b8:	220a      	movs	r2, #10
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f8c2 	bl	8005744 <__multadd>
 80055c0:	ee08 0a10 	vmov	s16, r0
 80055c4:	e7e7      	b.n	8005596 <_dtoa_r+0xb26>
 80055c6:	9b02      	ldr	r3, [sp, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bfc8      	it	gt
 80055cc:	461d      	movgt	r5, r3
 80055ce:	9b01      	ldr	r3, [sp, #4]
 80055d0:	bfd8      	it	le
 80055d2:	2501      	movle	r5, #1
 80055d4:	441d      	add	r5, r3
 80055d6:	f04f 0800 	mov.w	r8, #0
 80055da:	ee18 1a10 	vmov	r1, s16
 80055de:	2201      	movs	r2, #1
 80055e0:	4620      	mov	r0, r4
 80055e2:	f000 fa5f 	bl	8005aa4 <__lshift>
 80055e6:	4631      	mov	r1, r6
 80055e8:	ee08 0a10 	vmov	s16, r0
 80055ec:	f000 faca 	bl	8005b84 <__mcmp>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	dc91      	bgt.n	8005518 <_dtoa_r+0xaa8>
 80055f4:	d102      	bne.n	80055fc <_dtoa_r+0xb8c>
 80055f6:	f01a 0f01 	tst.w	sl, #1
 80055fa:	d18d      	bne.n	8005518 <_dtoa_r+0xaa8>
 80055fc:	462b      	mov	r3, r5
 80055fe:	461d      	mov	r5, r3
 8005600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005604:	2a30      	cmp	r2, #48	; 0x30
 8005606:	d0fa      	beq.n	80055fe <_dtoa_r+0xb8e>
 8005608:	e6d7      	b.n	80053ba <_dtoa_r+0x94a>
 800560a:	9a01      	ldr	r2, [sp, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d184      	bne.n	800551a <_dtoa_r+0xaaa>
 8005610:	9b00      	ldr	r3, [sp, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	2331      	movs	r3, #49	; 0x31
 8005618:	7013      	strb	r3, [r2, #0]
 800561a:	e6ce      	b.n	80053ba <_dtoa_r+0x94a>
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <_dtoa_r+0xbd4>)
 800561e:	f7ff ba95 	b.w	8004b4c <_dtoa_r+0xdc>
 8005622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005624:	2b00      	cmp	r3, #0
 8005626:	f47f aa6e 	bne.w	8004b06 <_dtoa_r+0x96>
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <_dtoa_r+0xbd8>)
 800562c:	f7ff ba8e 	b.w	8004b4c <_dtoa_r+0xdc>
 8005630:	9b02      	ldr	r3, [sp, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	dcae      	bgt.n	8005594 <_dtoa_r+0xb24>
 8005636:	9b06      	ldr	r3, [sp, #24]
 8005638:	2b02      	cmp	r3, #2
 800563a:	f73f aea8 	bgt.w	800538e <_dtoa_r+0x91e>
 800563e:	e7a9      	b.n	8005594 <_dtoa_r+0xb24>
 8005640:	08006f27 	.word	0x08006f27
 8005644:	08006e84 	.word	0x08006e84
 8005648:	08006ea8 	.word	0x08006ea8

0800564c <_localeconv_r>:
 800564c:	4800      	ldr	r0, [pc, #0]	; (8005650 <_localeconv_r+0x4>)
 800564e:	4770      	bx	lr
 8005650:	20000160 	.word	0x20000160

08005654 <malloc>:
 8005654:	4b02      	ldr	r3, [pc, #8]	; (8005660 <malloc+0xc>)
 8005656:	4601      	mov	r1, r0
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	f000 bc17 	b.w	8005e8c <_malloc_r>
 800565e:	bf00      	nop
 8005660:	2000000c 	.word	0x2000000c

08005664 <memcpy>:
 8005664:	440a      	add	r2, r1
 8005666:	4291      	cmp	r1, r2
 8005668:	f100 33ff 	add.w	r3, r0, #4294967295
 800566c:	d100      	bne.n	8005670 <memcpy+0xc>
 800566e:	4770      	bx	lr
 8005670:	b510      	push	{r4, lr}
 8005672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567a:	4291      	cmp	r1, r2
 800567c:	d1f9      	bne.n	8005672 <memcpy+0xe>
 800567e:	bd10      	pop	{r4, pc}

08005680 <_Balloc>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	b976      	cbnz	r6, 80056a8 <_Balloc+0x28>
 800568a:	2010      	movs	r0, #16
 800568c:	f7ff ffe2 	bl	8005654 <malloc>
 8005690:	4602      	mov	r2, r0
 8005692:	6260      	str	r0, [r4, #36]	; 0x24
 8005694:	b920      	cbnz	r0, 80056a0 <_Balloc+0x20>
 8005696:	4b18      	ldr	r3, [pc, #96]	; (80056f8 <_Balloc+0x78>)
 8005698:	4818      	ldr	r0, [pc, #96]	; (80056fc <_Balloc+0x7c>)
 800569a:	2166      	movs	r1, #102	; 0x66
 800569c:	f000 fdd6 	bl	800624c <__assert_func>
 80056a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056a4:	6006      	str	r6, [r0, #0]
 80056a6:	60c6      	str	r6, [r0, #12]
 80056a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056aa:	68f3      	ldr	r3, [r6, #12]
 80056ac:	b183      	cbz	r3, 80056d0 <_Balloc+0x50>
 80056ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056b6:	b9b8      	cbnz	r0, 80056e8 <_Balloc+0x68>
 80056b8:	2101      	movs	r1, #1
 80056ba:	fa01 f605 	lsl.w	r6, r1, r5
 80056be:	1d72      	adds	r2, r6, #5
 80056c0:	0092      	lsls	r2, r2, #2
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 fb60 	bl	8005d88 <_calloc_r>
 80056c8:	b160      	cbz	r0, 80056e4 <_Balloc+0x64>
 80056ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056ce:	e00e      	b.n	80056ee <_Balloc+0x6e>
 80056d0:	2221      	movs	r2, #33	; 0x21
 80056d2:	2104      	movs	r1, #4
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 fb57 	bl	8005d88 <_calloc_r>
 80056da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056dc:	60f0      	str	r0, [r6, #12]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e4      	bne.n	80056ae <_Balloc+0x2e>
 80056e4:	2000      	movs	r0, #0
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	6802      	ldr	r2, [r0, #0]
 80056ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056ee:	2300      	movs	r3, #0
 80056f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056f4:	e7f7      	b.n	80056e6 <_Balloc+0x66>
 80056f6:	bf00      	nop
 80056f8:	08006eb5 	.word	0x08006eb5
 80056fc:	08006f38 	.word	0x08006f38

08005700 <_Bfree>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005704:	4605      	mov	r5, r0
 8005706:	460c      	mov	r4, r1
 8005708:	b976      	cbnz	r6, 8005728 <_Bfree+0x28>
 800570a:	2010      	movs	r0, #16
 800570c:	f7ff ffa2 	bl	8005654 <malloc>
 8005710:	4602      	mov	r2, r0
 8005712:	6268      	str	r0, [r5, #36]	; 0x24
 8005714:	b920      	cbnz	r0, 8005720 <_Bfree+0x20>
 8005716:	4b09      	ldr	r3, [pc, #36]	; (800573c <_Bfree+0x3c>)
 8005718:	4809      	ldr	r0, [pc, #36]	; (8005740 <_Bfree+0x40>)
 800571a:	218a      	movs	r1, #138	; 0x8a
 800571c:	f000 fd96 	bl	800624c <__assert_func>
 8005720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005724:	6006      	str	r6, [r0, #0]
 8005726:	60c6      	str	r6, [r0, #12]
 8005728:	b13c      	cbz	r4, 800573a <_Bfree+0x3a>
 800572a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800572c:	6862      	ldr	r2, [r4, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005734:	6021      	str	r1, [r4, #0]
 8005736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	08006eb5 	.word	0x08006eb5
 8005740:	08006f38 	.word	0x08006f38

08005744 <__multadd>:
 8005744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005748:	690d      	ldr	r5, [r1, #16]
 800574a:	4607      	mov	r7, r0
 800574c:	460c      	mov	r4, r1
 800574e:	461e      	mov	r6, r3
 8005750:	f101 0c14 	add.w	ip, r1, #20
 8005754:	2000      	movs	r0, #0
 8005756:	f8dc 3000 	ldr.w	r3, [ip]
 800575a:	b299      	uxth	r1, r3
 800575c:	fb02 6101 	mla	r1, r2, r1, r6
 8005760:	0c1e      	lsrs	r6, r3, #16
 8005762:	0c0b      	lsrs	r3, r1, #16
 8005764:	fb02 3306 	mla	r3, r2, r6, r3
 8005768:	b289      	uxth	r1, r1
 800576a:	3001      	adds	r0, #1
 800576c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005770:	4285      	cmp	r5, r0
 8005772:	f84c 1b04 	str.w	r1, [ip], #4
 8005776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800577a:	dcec      	bgt.n	8005756 <__multadd+0x12>
 800577c:	b30e      	cbz	r6, 80057c2 <__multadd+0x7e>
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	42ab      	cmp	r3, r5
 8005782:	dc19      	bgt.n	80057b8 <__multadd+0x74>
 8005784:	6861      	ldr	r1, [r4, #4]
 8005786:	4638      	mov	r0, r7
 8005788:	3101      	adds	r1, #1
 800578a:	f7ff ff79 	bl	8005680 <_Balloc>
 800578e:	4680      	mov	r8, r0
 8005790:	b928      	cbnz	r0, 800579e <__multadd+0x5a>
 8005792:	4602      	mov	r2, r0
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <__multadd+0x84>)
 8005796:	480d      	ldr	r0, [pc, #52]	; (80057cc <__multadd+0x88>)
 8005798:	21b5      	movs	r1, #181	; 0xb5
 800579a:	f000 fd57 	bl	800624c <__assert_func>
 800579e:	6922      	ldr	r2, [r4, #16]
 80057a0:	3202      	adds	r2, #2
 80057a2:	f104 010c 	add.w	r1, r4, #12
 80057a6:	0092      	lsls	r2, r2, #2
 80057a8:	300c      	adds	r0, #12
 80057aa:	f7ff ff5b 	bl	8005664 <memcpy>
 80057ae:	4621      	mov	r1, r4
 80057b0:	4638      	mov	r0, r7
 80057b2:	f7ff ffa5 	bl	8005700 <_Bfree>
 80057b6:	4644      	mov	r4, r8
 80057b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057bc:	3501      	adds	r5, #1
 80057be:	615e      	str	r6, [r3, #20]
 80057c0:	6125      	str	r5, [r4, #16]
 80057c2:	4620      	mov	r0, r4
 80057c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c8:	08006f27 	.word	0x08006f27
 80057cc:	08006f38 	.word	0x08006f38

080057d0 <__hi0bits>:
 80057d0:	0c03      	lsrs	r3, r0, #16
 80057d2:	041b      	lsls	r3, r3, #16
 80057d4:	b9d3      	cbnz	r3, 800580c <__hi0bits+0x3c>
 80057d6:	0400      	lsls	r0, r0, #16
 80057d8:	2310      	movs	r3, #16
 80057da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80057de:	bf04      	itt	eq
 80057e0:	0200      	lsleq	r0, r0, #8
 80057e2:	3308      	addeq	r3, #8
 80057e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80057e8:	bf04      	itt	eq
 80057ea:	0100      	lsleq	r0, r0, #4
 80057ec:	3304      	addeq	r3, #4
 80057ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80057f2:	bf04      	itt	eq
 80057f4:	0080      	lsleq	r0, r0, #2
 80057f6:	3302      	addeq	r3, #2
 80057f8:	2800      	cmp	r0, #0
 80057fa:	db05      	blt.n	8005808 <__hi0bits+0x38>
 80057fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005800:	f103 0301 	add.w	r3, r3, #1
 8005804:	bf08      	it	eq
 8005806:	2320      	moveq	r3, #32
 8005808:	4618      	mov	r0, r3
 800580a:	4770      	bx	lr
 800580c:	2300      	movs	r3, #0
 800580e:	e7e4      	b.n	80057da <__hi0bits+0xa>

08005810 <__lo0bits>:
 8005810:	6803      	ldr	r3, [r0, #0]
 8005812:	f013 0207 	ands.w	r2, r3, #7
 8005816:	4601      	mov	r1, r0
 8005818:	d00b      	beq.n	8005832 <__lo0bits+0x22>
 800581a:	07da      	lsls	r2, r3, #31
 800581c:	d423      	bmi.n	8005866 <__lo0bits+0x56>
 800581e:	0798      	lsls	r0, r3, #30
 8005820:	bf49      	itett	mi
 8005822:	085b      	lsrmi	r3, r3, #1
 8005824:	089b      	lsrpl	r3, r3, #2
 8005826:	2001      	movmi	r0, #1
 8005828:	600b      	strmi	r3, [r1, #0]
 800582a:	bf5c      	itt	pl
 800582c:	600b      	strpl	r3, [r1, #0]
 800582e:	2002      	movpl	r0, #2
 8005830:	4770      	bx	lr
 8005832:	b298      	uxth	r0, r3
 8005834:	b9a8      	cbnz	r0, 8005862 <__lo0bits+0x52>
 8005836:	0c1b      	lsrs	r3, r3, #16
 8005838:	2010      	movs	r0, #16
 800583a:	b2da      	uxtb	r2, r3
 800583c:	b90a      	cbnz	r2, 8005842 <__lo0bits+0x32>
 800583e:	3008      	adds	r0, #8
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	071a      	lsls	r2, r3, #28
 8005844:	bf04      	itt	eq
 8005846:	091b      	lsreq	r3, r3, #4
 8005848:	3004      	addeq	r0, #4
 800584a:	079a      	lsls	r2, r3, #30
 800584c:	bf04      	itt	eq
 800584e:	089b      	lsreq	r3, r3, #2
 8005850:	3002      	addeq	r0, #2
 8005852:	07da      	lsls	r2, r3, #31
 8005854:	d403      	bmi.n	800585e <__lo0bits+0x4e>
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	f100 0001 	add.w	r0, r0, #1
 800585c:	d005      	beq.n	800586a <__lo0bits+0x5a>
 800585e:	600b      	str	r3, [r1, #0]
 8005860:	4770      	bx	lr
 8005862:	4610      	mov	r0, r2
 8005864:	e7e9      	b.n	800583a <__lo0bits+0x2a>
 8005866:	2000      	movs	r0, #0
 8005868:	4770      	bx	lr
 800586a:	2020      	movs	r0, #32
 800586c:	4770      	bx	lr
	...

08005870 <__i2b>:
 8005870:	b510      	push	{r4, lr}
 8005872:	460c      	mov	r4, r1
 8005874:	2101      	movs	r1, #1
 8005876:	f7ff ff03 	bl	8005680 <_Balloc>
 800587a:	4602      	mov	r2, r0
 800587c:	b928      	cbnz	r0, 800588a <__i2b+0x1a>
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <__i2b+0x24>)
 8005880:	4805      	ldr	r0, [pc, #20]	; (8005898 <__i2b+0x28>)
 8005882:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005886:	f000 fce1 	bl	800624c <__assert_func>
 800588a:	2301      	movs	r3, #1
 800588c:	6144      	str	r4, [r0, #20]
 800588e:	6103      	str	r3, [r0, #16]
 8005890:	bd10      	pop	{r4, pc}
 8005892:	bf00      	nop
 8005894:	08006f27 	.word	0x08006f27
 8005898:	08006f38 	.word	0x08006f38

0800589c <__multiply>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	4691      	mov	r9, r2
 80058a2:	690a      	ldr	r2, [r1, #16]
 80058a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	bfb8      	it	lt
 80058ac:	460b      	movlt	r3, r1
 80058ae:	460c      	mov	r4, r1
 80058b0:	bfbc      	itt	lt
 80058b2:	464c      	movlt	r4, r9
 80058b4:	4699      	movlt	r9, r3
 80058b6:	6927      	ldr	r7, [r4, #16]
 80058b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80058bc:	68a3      	ldr	r3, [r4, #8]
 80058be:	6861      	ldr	r1, [r4, #4]
 80058c0:	eb07 060a 	add.w	r6, r7, sl
 80058c4:	42b3      	cmp	r3, r6
 80058c6:	b085      	sub	sp, #20
 80058c8:	bfb8      	it	lt
 80058ca:	3101      	addlt	r1, #1
 80058cc:	f7ff fed8 	bl	8005680 <_Balloc>
 80058d0:	b930      	cbnz	r0, 80058e0 <__multiply+0x44>
 80058d2:	4602      	mov	r2, r0
 80058d4:	4b44      	ldr	r3, [pc, #272]	; (80059e8 <__multiply+0x14c>)
 80058d6:	4845      	ldr	r0, [pc, #276]	; (80059ec <__multiply+0x150>)
 80058d8:	f240 115d 	movw	r1, #349	; 0x15d
 80058dc:	f000 fcb6 	bl	800624c <__assert_func>
 80058e0:	f100 0514 	add.w	r5, r0, #20
 80058e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80058e8:	462b      	mov	r3, r5
 80058ea:	2200      	movs	r2, #0
 80058ec:	4543      	cmp	r3, r8
 80058ee:	d321      	bcc.n	8005934 <__multiply+0x98>
 80058f0:	f104 0314 	add.w	r3, r4, #20
 80058f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80058f8:	f109 0314 	add.w	r3, r9, #20
 80058fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005900:	9202      	str	r2, [sp, #8]
 8005902:	1b3a      	subs	r2, r7, r4
 8005904:	3a15      	subs	r2, #21
 8005906:	f022 0203 	bic.w	r2, r2, #3
 800590a:	3204      	adds	r2, #4
 800590c:	f104 0115 	add.w	r1, r4, #21
 8005910:	428f      	cmp	r7, r1
 8005912:	bf38      	it	cc
 8005914:	2204      	movcc	r2, #4
 8005916:	9201      	str	r2, [sp, #4]
 8005918:	9a02      	ldr	r2, [sp, #8]
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d80c      	bhi.n	800593a <__multiply+0x9e>
 8005920:	2e00      	cmp	r6, #0
 8005922:	dd03      	ble.n	800592c <__multiply+0x90>
 8005924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005928:	2b00      	cmp	r3, #0
 800592a:	d05a      	beq.n	80059e2 <__multiply+0x146>
 800592c:	6106      	str	r6, [r0, #16]
 800592e:	b005      	add	sp, #20
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	f843 2b04 	str.w	r2, [r3], #4
 8005938:	e7d8      	b.n	80058ec <__multiply+0x50>
 800593a:	f8b3 a000 	ldrh.w	sl, [r3]
 800593e:	f1ba 0f00 	cmp.w	sl, #0
 8005942:	d024      	beq.n	800598e <__multiply+0xf2>
 8005944:	f104 0e14 	add.w	lr, r4, #20
 8005948:	46a9      	mov	r9, r5
 800594a:	f04f 0c00 	mov.w	ip, #0
 800594e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005952:	f8d9 1000 	ldr.w	r1, [r9]
 8005956:	fa1f fb82 	uxth.w	fp, r2
 800595a:	b289      	uxth	r1, r1
 800595c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005960:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005964:	f8d9 2000 	ldr.w	r2, [r9]
 8005968:	4461      	add	r1, ip
 800596a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800596e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005976:	b289      	uxth	r1, r1
 8005978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800597c:	4577      	cmp	r7, lr
 800597e:	f849 1b04 	str.w	r1, [r9], #4
 8005982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005986:	d8e2      	bhi.n	800594e <__multiply+0xb2>
 8005988:	9a01      	ldr	r2, [sp, #4]
 800598a:	f845 c002 	str.w	ip, [r5, r2]
 800598e:	9a03      	ldr	r2, [sp, #12]
 8005990:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005994:	3304      	adds	r3, #4
 8005996:	f1b9 0f00 	cmp.w	r9, #0
 800599a:	d020      	beq.n	80059de <__multiply+0x142>
 800599c:	6829      	ldr	r1, [r5, #0]
 800599e:	f104 0c14 	add.w	ip, r4, #20
 80059a2:	46ae      	mov	lr, r5
 80059a4:	f04f 0a00 	mov.w	sl, #0
 80059a8:	f8bc b000 	ldrh.w	fp, [ip]
 80059ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80059b0:	fb09 220b 	mla	r2, r9, fp, r2
 80059b4:	4492      	add	sl, r2
 80059b6:	b289      	uxth	r1, r1
 80059b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80059bc:	f84e 1b04 	str.w	r1, [lr], #4
 80059c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80059c4:	f8be 1000 	ldrh.w	r1, [lr]
 80059c8:	0c12      	lsrs	r2, r2, #16
 80059ca:	fb09 1102 	mla	r1, r9, r2, r1
 80059ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80059d2:	4567      	cmp	r7, ip
 80059d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80059d8:	d8e6      	bhi.n	80059a8 <__multiply+0x10c>
 80059da:	9a01      	ldr	r2, [sp, #4]
 80059dc:	50a9      	str	r1, [r5, r2]
 80059de:	3504      	adds	r5, #4
 80059e0:	e79a      	b.n	8005918 <__multiply+0x7c>
 80059e2:	3e01      	subs	r6, #1
 80059e4:	e79c      	b.n	8005920 <__multiply+0x84>
 80059e6:	bf00      	nop
 80059e8:	08006f27 	.word	0x08006f27
 80059ec:	08006f38 	.word	0x08006f38

080059f0 <__pow5mult>:
 80059f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f4:	4615      	mov	r5, r2
 80059f6:	f012 0203 	ands.w	r2, r2, #3
 80059fa:	4606      	mov	r6, r0
 80059fc:	460f      	mov	r7, r1
 80059fe:	d007      	beq.n	8005a10 <__pow5mult+0x20>
 8005a00:	4c25      	ldr	r4, [pc, #148]	; (8005a98 <__pow5mult+0xa8>)
 8005a02:	3a01      	subs	r2, #1
 8005a04:	2300      	movs	r3, #0
 8005a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a0a:	f7ff fe9b 	bl	8005744 <__multadd>
 8005a0e:	4607      	mov	r7, r0
 8005a10:	10ad      	asrs	r5, r5, #2
 8005a12:	d03d      	beq.n	8005a90 <__pow5mult+0xa0>
 8005a14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a16:	b97c      	cbnz	r4, 8005a38 <__pow5mult+0x48>
 8005a18:	2010      	movs	r0, #16
 8005a1a:	f7ff fe1b 	bl	8005654 <malloc>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	6270      	str	r0, [r6, #36]	; 0x24
 8005a22:	b928      	cbnz	r0, 8005a30 <__pow5mult+0x40>
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <__pow5mult+0xac>)
 8005a26:	481e      	ldr	r0, [pc, #120]	; (8005aa0 <__pow5mult+0xb0>)
 8005a28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a2c:	f000 fc0e 	bl	800624c <__assert_func>
 8005a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a34:	6004      	str	r4, [r0, #0]
 8005a36:	60c4      	str	r4, [r0, #12]
 8005a38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a40:	b94c      	cbnz	r4, 8005a56 <__pow5mult+0x66>
 8005a42:	f240 2171 	movw	r1, #625	; 0x271
 8005a46:	4630      	mov	r0, r6
 8005a48:	f7ff ff12 	bl	8005870 <__i2b>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a52:	4604      	mov	r4, r0
 8005a54:	6003      	str	r3, [r0, #0]
 8005a56:	f04f 0900 	mov.w	r9, #0
 8005a5a:	07eb      	lsls	r3, r5, #31
 8005a5c:	d50a      	bpl.n	8005a74 <__pow5mult+0x84>
 8005a5e:	4639      	mov	r1, r7
 8005a60:	4622      	mov	r2, r4
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff ff1a 	bl	800589c <__multiply>
 8005a68:	4639      	mov	r1, r7
 8005a6a:	4680      	mov	r8, r0
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f7ff fe47 	bl	8005700 <_Bfree>
 8005a72:	4647      	mov	r7, r8
 8005a74:	106d      	asrs	r5, r5, #1
 8005a76:	d00b      	beq.n	8005a90 <__pow5mult+0xa0>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	b938      	cbnz	r0, 8005a8c <__pow5mult+0x9c>
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ff0b 	bl	800589c <__multiply>
 8005a86:	6020      	str	r0, [r4, #0]
 8005a88:	f8c0 9000 	str.w	r9, [r0]
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	e7e4      	b.n	8005a5a <__pow5mult+0x6a>
 8005a90:	4638      	mov	r0, r7
 8005a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a96:	bf00      	nop
 8005a98:	08007088 	.word	0x08007088
 8005a9c:	08006eb5 	.word	0x08006eb5
 8005aa0:	08006f38 	.word	0x08006f38

08005aa4 <__lshift>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	6849      	ldr	r1, [r1, #4]
 8005aac:	6923      	ldr	r3, [r4, #16]
 8005aae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ab2:	68a3      	ldr	r3, [r4, #8]
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	4691      	mov	r9, r2
 8005ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005abc:	f108 0601 	add.w	r6, r8, #1
 8005ac0:	42b3      	cmp	r3, r6
 8005ac2:	db0b      	blt.n	8005adc <__lshift+0x38>
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	f7ff fddb 	bl	8005680 <_Balloc>
 8005aca:	4605      	mov	r5, r0
 8005acc:	b948      	cbnz	r0, 8005ae2 <__lshift+0x3e>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	4b2a      	ldr	r3, [pc, #168]	; (8005b7c <__lshift+0xd8>)
 8005ad2:	482b      	ldr	r0, [pc, #172]	; (8005b80 <__lshift+0xdc>)
 8005ad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ad8:	f000 fbb8 	bl	800624c <__assert_func>
 8005adc:	3101      	adds	r1, #1
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	e7ee      	b.n	8005ac0 <__lshift+0x1c>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f100 0114 	add.w	r1, r0, #20
 8005ae8:	f100 0210 	add.w	r2, r0, #16
 8005aec:	4618      	mov	r0, r3
 8005aee:	4553      	cmp	r3, sl
 8005af0:	db37      	blt.n	8005b62 <__lshift+0xbe>
 8005af2:	6920      	ldr	r0, [r4, #16]
 8005af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005af8:	f104 0314 	add.w	r3, r4, #20
 8005afc:	f019 091f 	ands.w	r9, r9, #31
 8005b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b08:	d02f      	beq.n	8005b6a <__lshift+0xc6>
 8005b0a:	f1c9 0e20 	rsb	lr, r9, #32
 8005b0e:	468a      	mov	sl, r1
 8005b10:	f04f 0c00 	mov.w	ip, #0
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	fa02 f209 	lsl.w	r2, r2, r9
 8005b1a:	ea42 020c 	orr.w	r2, r2, ip
 8005b1e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b26:	4298      	cmp	r0, r3
 8005b28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005b2c:	d8f2      	bhi.n	8005b14 <__lshift+0x70>
 8005b2e:	1b03      	subs	r3, r0, r4
 8005b30:	3b15      	subs	r3, #21
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	3304      	adds	r3, #4
 8005b38:	f104 0215 	add.w	r2, r4, #21
 8005b3c:	4290      	cmp	r0, r2
 8005b3e:	bf38      	it	cc
 8005b40:	2304      	movcc	r3, #4
 8005b42:	f841 c003 	str.w	ip, [r1, r3]
 8005b46:	f1bc 0f00 	cmp.w	ip, #0
 8005b4a:	d001      	beq.n	8005b50 <__lshift+0xac>
 8005b4c:	f108 0602 	add.w	r6, r8, #2
 8005b50:	3e01      	subs	r6, #1
 8005b52:	4638      	mov	r0, r7
 8005b54:	612e      	str	r6, [r5, #16]
 8005b56:	4621      	mov	r1, r4
 8005b58:	f7ff fdd2 	bl	8005700 <_Bfree>
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b62:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b66:	3301      	adds	r3, #1
 8005b68:	e7c1      	b.n	8005aee <__lshift+0x4a>
 8005b6a:	3904      	subs	r1, #4
 8005b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b70:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b74:	4298      	cmp	r0, r3
 8005b76:	d8f9      	bhi.n	8005b6c <__lshift+0xc8>
 8005b78:	e7ea      	b.n	8005b50 <__lshift+0xac>
 8005b7a:	bf00      	nop
 8005b7c:	08006f27 	.word	0x08006f27
 8005b80:	08006f38 	.word	0x08006f38

08005b84 <__mcmp>:
 8005b84:	b530      	push	{r4, r5, lr}
 8005b86:	6902      	ldr	r2, [r0, #16]
 8005b88:	690c      	ldr	r4, [r1, #16]
 8005b8a:	1b12      	subs	r2, r2, r4
 8005b8c:	d10e      	bne.n	8005bac <__mcmp+0x28>
 8005b8e:	f100 0314 	add.w	r3, r0, #20
 8005b92:	3114      	adds	r1, #20
 8005b94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005b98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005b9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005ba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005ba4:	42a5      	cmp	r5, r4
 8005ba6:	d003      	beq.n	8005bb0 <__mcmp+0x2c>
 8005ba8:	d305      	bcc.n	8005bb6 <__mcmp+0x32>
 8005baa:	2201      	movs	r2, #1
 8005bac:	4610      	mov	r0, r2
 8005bae:	bd30      	pop	{r4, r5, pc}
 8005bb0:	4283      	cmp	r3, r0
 8005bb2:	d3f3      	bcc.n	8005b9c <__mcmp+0x18>
 8005bb4:	e7fa      	b.n	8005bac <__mcmp+0x28>
 8005bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bba:	e7f7      	b.n	8005bac <__mcmp+0x28>

08005bbc <__mdiff>:
 8005bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4690      	mov	r8, r2
 8005bca:	f7ff ffdb 	bl	8005b84 <__mcmp>
 8005bce:	1e05      	subs	r5, r0, #0
 8005bd0:	d110      	bne.n	8005bf4 <__mdiff+0x38>
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7ff fd53 	bl	8005680 <_Balloc>
 8005bda:	b930      	cbnz	r0, 8005bea <__mdiff+0x2e>
 8005bdc:	4b3a      	ldr	r3, [pc, #232]	; (8005cc8 <__mdiff+0x10c>)
 8005bde:	4602      	mov	r2, r0
 8005be0:	f240 2132 	movw	r1, #562	; 0x232
 8005be4:	4839      	ldr	r0, [pc, #228]	; (8005ccc <__mdiff+0x110>)
 8005be6:	f000 fb31 	bl	800624c <__assert_func>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	bfa4      	itt	ge
 8005bf6:	4643      	movge	r3, r8
 8005bf8:	46a0      	movge	r8, r4
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c00:	bfa6      	itte	ge
 8005c02:	461c      	movge	r4, r3
 8005c04:	2500      	movge	r5, #0
 8005c06:	2501      	movlt	r5, #1
 8005c08:	f7ff fd3a 	bl	8005680 <_Balloc>
 8005c0c:	b920      	cbnz	r0, 8005c18 <__mdiff+0x5c>
 8005c0e:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <__mdiff+0x10c>)
 8005c10:	4602      	mov	r2, r0
 8005c12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c16:	e7e5      	b.n	8005be4 <__mdiff+0x28>
 8005c18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c1c:	6926      	ldr	r6, [r4, #16]
 8005c1e:	60c5      	str	r5, [r0, #12]
 8005c20:	f104 0914 	add.w	r9, r4, #20
 8005c24:	f108 0514 	add.w	r5, r8, #20
 8005c28:	f100 0e14 	add.w	lr, r0, #20
 8005c2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005c30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c34:	f108 0210 	add.w	r2, r8, #16
 8005c38:	46f2      	mov	sl, lr
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005c44:	fa1f f883 	uxth.w	r8, r3
 8005c48:	fa11 f18b 	uxtah	r1, r1, fp
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	eba1 0808 	sub.w	r8, r1, r8
 8005c52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005c5a:	fa1f f888 	uxth.w	r8, r8
 8005c5e:	1419      	asrs	r1, r3, #16
 8005c60:	454e      	cmp	r6, r9
 8005c62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005c66:	f84a 3b04 	str.w	r3, [sl], #4
 8005c6a:	d8e7      	bhi.n	8005c3c <__mdiff+0x80>
 8005c6c:	1b33      	subs	r3, r6, r4
 8005c6e:	3b15      	subs	r3, #21
 8005c70:	f023 0303 	bic.w	r3, r3, #3
 8005c74:	3304      	adds	r3, #4
 8005c76:	3415      	adds	r4, #21
 8005c78:	42a6      	cmp	r6, r4
 8005c7a:	bf38      	it	cc
 8005c7c:	2304      	movcc	r3, #4
 8005c7e:	441d      	add	r5, r3
 8005c80:	4473      	add	r3, lr
 8005c82:	469e      	mov	lr, r3
 8005c84:	462e      	mov	r6, r5
 8005c86:	4566      	cmp	r6, ip
 8005c88:	d30e      	bcc.n	8005ca8 <__mdiff+0xec>
 8005c8a:	f10c 0203 	add.w	r2, ip, #3
 8005c8e:	1b52      	subs	r2, r2, r5
 8005c90:	f022 0203 	bic.w	r2, r2, #3
 8005c94:	3d03      	subs	r5, #3
 8005c96:	45ac      	cmp	ip, r5
 8005c98:	bf38      	it	cc
 8005c9a:	2200      	movcc	r2, #0
 8005c9c:	441a      	add	r2, r3
 8005c9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005ca2:	b17b      	cbz	r3, 8005cc4 <__mdiff+0x108>
 8005ca4:	6107      	str	r7, [r0, #16]
 8005ca6:	e7a3      	b.n	8005bf0 <__mdiff+0x34>
 8005ca8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005cac:	fa11 f288 	uxtah	r2, r1, r8
 8005cb0:	1414      	asrs	r4, r2, #16
 8005cb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005cb6:	b292      	uxth	r2, r2
 8005cb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005cbc:	f84e 2b04 	str.w	r2, [lr], #4
 8005cc0:	1421      	asrs	r1, r4, #16
 8005cc2:	e7e0      	b.n	8005c86 <__mdiff+0xca>
 8005cc4:	3f01      	subs	r7, #1
 8005cc6:	e7ea      	b.n	8005c9e <__mdiff+0xe2>
 8005cc8:	08006f27 	.word	0x08006f27
 8005ccc:	08006f38 	.word	0x08006f38

08005cd0 <__d2b>:
 8005cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cd4:	4689      	mov	r9, r1
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	ec57 6b10 	vmov	r6, r7, d0
 8005cdc:	4690      	mov	r8, r2
 8005cde:	f7ff fccf 	bl	8005680 <_Balloc>
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	b930      	cbnz	r0, 8005cf4 <__d2b+0x24>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <__d2b+0xb0>)
 8005cea:	4826      	ldr	r0, [pc, #152]	; (8005d84 <__d2b+0xb4>)
 8005cec:	f240 310a 	movw	r1, #778	; 0x30a
 8005cf0:	f000 faac 	bl	800624c <__assert_func>
 8005cf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cfc:	bb35      	cbnz	r5, 8005d4c <__d2b+0x7c>
 8005cfe:	2e00      	cmp	r6, #0
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	d028      	beq.n	8005d56 <__d2b+0x86>
 8005d04:	4668      	mov	r0, sp
 8005d06:	9600      	str	r6, [sp, #0]
 8005d08:	f7ff fd82 	bl	8005810 <__lo0bits>
 8005d0c:	9900      	ldr	r1, [sp, #0]
 8005d0e:	b300      	cbz	r0, 8005d52 <__d2b+0x82>
 8005d10:	9a01      	ldr	r2, [sp, #4]
 8005d12:	f1c0 0320 	rsb	r3, r0, #32
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	40c2      	lsrs	r2, r0
 8005d1e:	6163      	str	r3, [r4, #20]
 8005d20:	9201      	str	r2, [sp, #4]
 8005d22:	9b01      	ldr	r3, [sp, #4]
 8005d24:	61a3      	str	r3, [r4, #24]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bf14      	ite	ne
 8005d2a:	2202      	movne	r2, #2
 8005d2c:	2201      	moveq	r2, #1
 8005d2e:	6122      	str	r2, [r4, #16]
 8005d30:	b1d5      	cbz	r5, 8005d68 <__d2b+0x98>
 8005d32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d36:	4405      	add	r5, r0
 8005d38:	f8c9 5000 	str.w	r5, [r9]
 8005d3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d40:	f8c8 0000 	str.w	r0, [r8]
 8005d44:	4620      	mov	r0, r4
 8005d46:	b003      	add	sp, #12
 8005d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d50:	e7d5      	b.n	8005cfe <__d2b+0x2e>
 8005d52:	6161      	str	r1, [r4, #20]
 8005d54:	e7e5      	b.n	8005d22 <__d2b+0x52>
 8005d56:	a801      	add	r0, sp, #4
 8005d58:	f7ff fd5a 	bl	8005810 <__lo0bits>
 8005d5c:	9b01      	ldr	r3, [sp, #4]
 8005d5e:	6163      	str	r3, [r4, #20]
 8005d60:	2201      	movs	r2, #1
 8005d62:	6122      	str	r2, [r4, #16]
 8005d64:	3020      	adds	r0, #32
 8005d66:	e7e3      	b.n	8005d30 <__d2b+0x60>
 8005d68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d70:	f8c9 0000 	str.w	r0, [r9]
 8005d74:	6918      	ldr	r0, [r3, #16]
 8005d76:	f7ff fd2b 	bl	80057d0 <__hi0bits>
 8005d7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d7e:	e7df      	b.n	8005d40 <__d2b+0x70>
 8005d80:	08006f27 	.word	0x08006f27
 8005d84:	08006f38 	.word	0x08006f38

08005d88 <_calloc_r>:
 8005d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d8a:	fba1 2402 	umull	r2, r4, r1, r2
 8005d8e:	b94c      	cbnz	r4, 8005da4 <_calloc_r+0x1c>
 8005d90:	4611      	mov	r1, r2
 8005d92:	9201      	str	r2, [sp, #4]
 8005d94:	f000 f87a 	bl	8005e8c <_malloc_r>
 8005d98:	9a01      	ldr	r2, [sp, #4]
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	b930      	cbnz	r0, 8005dac <_calloc_r+0x24>
 8005d9e:	4628      	mov	r0, r5
 8005da0:	b003      	add	sp, #12
 8005da2:	bd30      	pop	{r4, r5, pc}
 8005da4:	220c      	movs	r2, #12
 8005da6:	6002      	str	r2, [r0, #0]
 8005da8:	2500      	movs	r5, #0
 8005daa:	e7f8      	b.n	8005d9e <_calloc_r+0x16>
 8005dac:	4621      	mov	r1, r4
 8005dae:	f7fe f941 	bl	8004034 <memset>
 8005db2:	e7f4      	b.n	8005d9e <_calloc_r+0x16>

08005db4 <_free_r>:
 8005db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005db6:	2900      	cmp	r1, #0
 8005db8:	d044      	beq.n	8005e44 <_free_r+0x90>
 8005dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dbe:	9001      	str	r0, [sp, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8005dc6:	bfb8      	it	lt
 8005dc8:	18e4      	addlt	r4, r4, r3
 8005dca:	f000 fa9b 	bl	8006304 <__malloc_lock>
 8005dce:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <_free_r+0x94>)
 8005dd0:	9801      	ldr	r0, [sp, #4]
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	b933      	cbnz	r3, 8005de4 <_free_r+0x30>
 8005dd6:	6063      	str	r3, [r4, #4]
 8005dd8:	6014      	str	r4, [r2, #0]
 8005dda:	b003      	add	sp, #12
 8005ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005de0:	f000 ba96 	b.w	8006310 <__malloc_unlock>
 8005de4:	42a3      	cmp	r3, r4
 8005de6:	d908      	bls.n	8005dfa <_free_r+0x46>
 8005de8:	6825      	ldr	r5, [r4, #0]
 8005dea:	1961      	adds	r1, r4, r5
 8005dec:	428b      	cmp	r3, r1
 8005dee:	bf01      	itttt	eq
 8005df0:	6819      	ldreq	r1, [r3, #0]
 8005df2:	685b      	ldreq	r3, [r3, #4]
 8005df4:	1949      	addeq	r1, r1, r5
 8005df6:	6021      	streq	r1, [r4, #0]
 8005df8:	e7ed      	b.n	8005dd6 <_free_r+0x22>
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	b10b      	cbz	r3, 8005e04 <_free_r+0x50>
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	d9fa      	bls.n	8005dfa <_free_r+0x46>
 8005e04:	6811      	ldr	r1, [r2, #0]
 8005e06:	1855      	adds	r5, r2, r1
 8005e08:	42a5      	cmp	r5, r4
 8005e0a:	d10b      	bne.n	8005e24 <_free_r+0x70>
 8005e0c:	6824      	ldr	r4, [r4, #0]
 8005e0e:	4421      	add	r1, r4
 8005e10:	1854      	adds	r4, r2, r1
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	d1e0      	bne.n	8005dda <_free_r+0x26>
 8005e18:	681c      	ldr	r4, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	6053      	str	r3, [r2, #4]
 8005e1e:	4421      	add	r1, r4
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	e7da      	b.n	8005dda <_free_r+0x26>
 8005e24:	d902      	bls.n	8005e2c <_free_r+0x78>
 8005e26:	230c      	movs	r3, #12
 8005e28:	6003      	str	r3, [r0, #0]
 8005e2a:	e7d6      	b.n	8005dda <_free_r+0x26>
 8005e2c:	6825      	ldr	r5, [r4, #0]
 8005e2e:	1961      	adds	r1, r4, r5
 8005e30:	428b      	cmp	r3, r1
 8005e32:	bf04      	itt	eq
 8005e34:	6819      	ldreq	r1, [r3, #0]
 8005e36:	685b      	ldreq	r3, [r3, #4]
 8005e38:	6063      	str	r3, [r4, #4]
 8005e3a:	bf04      	itt	eq
 8005e3c:	1949      	addeq	r1, r1, r5
 8005e3e:	6021      	streq	r1, [r4, #0]
 8005e40:	6054      	str	r4, [r2, #4]
 8005e42:	e7ca      	b.n	8005dda <_free_r+0x26>
 8005e44:	b003      	add	sp, #12
 8005e46:	bd30      	pop	{r4, r5, pc}
 8005e48:	20000320 	.word	0x20000320

08005e4c <sbrk_aligned>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4e0e      	ldr	r6, [pc, #56]	; (8005e88 <sbrk_aligned+0x3c>)
 8005e50:	460c      	mov	r4, r1
 8005e52:	6831      	ldr	r1, [r6, #0]
 8005e54:	4605      	mov	r5, r0
 8005e56:	b911      	cbnz	r1, 8005e5e <sbrk_aligned+0x12>
 8005e58:	f000 f9e8 	bl	800622c <_sbrk_r>
 8005e5c:	6030      	str	r0, [r6, #0]
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4628      	mov	r0, r5
 8005e62:	f000 f9e3 	bl	800622c <_sbrk_r>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	d00a      	beq.n	8005e80 <sbrk_aligned+0x34>
 8005e6a:	1cc4      	adds	r4, r0, #3
 8005e6c:	f024 0403 	bic.w	r4, r4, #3
 8005e70:	42a0      	cmp	r0, r4
 8005e72:	d007      	beq.n	8005e84 <sbrk_aligned+0x38>
 8005e74:	1a21      	subs	r1, r4, r0
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 f9d8 	bl	800622c <_sbrk_r>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d101      	bne.n	8005e84 <sbrk_aligned+0x38>
 8005e80:	f04f 34ff 	mov.w	r4, #4294967295
 8005e84:	4620      	mov	r0, r4
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	20000324 	.word	0x20000324

08005e8c <_malloc_r>:
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	1ccd      	adds	r5, r1, #3
 8005e92:	f025 0503 	bic.w	r5, r5, #3
 8005e96:	3508      	adds	r5, #8
 8005e98:	2d0c      	cmp	r5, #12
 8005e9a:	bf38      	it	cc
 8005e9c:	250c      	movcc	r5, #12
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	db01      	blt.n	8005ea8 <_malloc_r+0x1c>
 8005ea4:	42a9      	cmp	r1, r5
 8005ea6:	d905      	bls.n	8005eb4 <_malloc_r+0x28>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	2600      	movs	r6, #0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb4:	4e2e      	ldr	r6, [pc, #184]	; (8005f70 <_malloc_r+0xe4>)
 8005eb6:	f000 fa25 	bl	8006304 <__malloc_lock>
 8005eba:	6833      	ldr	r3, [r6, #0]
 8005ebc:	461c      	mov	r4, r3
 8005ebe:	bb34      	cbnz	r4, 8005f0e <_malloc_r+0x82>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f7ff ffc2 	bl	8005e4c <sbrk_aligned>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	4604      	mov	r4, r0
 8005ecc:	d14d      	bne.n	8005f6a <_malloc_r+0xde>
 8005ece:	6834      	ldr	r4, [r6, #0]
 8005ed0:	4626      	mov	r6, r4
 8005ed2:	2e00      	cmp	r6, #0
 8005ed4:	d140      	bne.n	8005f58 <_malloc_r+0xcc>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4638      	mov	r0, r7
 8005edc:	eb04 0803 	add.w	r8, r4, r3
 8005ee0:	f000 f9a4 	bl	800622c <_sbrk_r>
 8005ee4:	4580      	cmp	r8, r0
 8005ee6:	d13a      	bne.n	8005f5e <_malloc_r+0xd2>
 8005ee8:	6821      	ldr	r1, [r4, #0]
 8005eea:	3503      	adds	r5, #3
 8005eec:	1a6d      	subs	r5, r5, r1
 8005eee:	f025 0503 	bic.w	r5, r5, #3
 8005ef2:	3508      	adds	r5, #8
 8005ef4:	2d0c      	cmp	r5, #12
 8005ef6:	bf38      	it	cc
 8005ef8:	250c      	movcc	r5, #12
 8005efa:	4629      	mov	r1, r5
 8005efc:	4638      	mov	r0, r7
 8005efe:	f7ff ffa5 	bl	8005e4c <sbrk_aligned>
 8005f02:	3001      	adds	r0, #1
 8005f04:	d02b      	beq.n	8005f5e <_malloc_r+0xd2>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	442b      	add	r3, r5
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	e00e      	b.n	8005f2c <_malloc_r+0xa0>
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	1b52      	subs	r2, r2, r5
 8005f12:	d41e      	bmi.n	8005f52 <_malloc_r+0xc6>
 8005f14:	2a0b      	cmp	r2, #11
 8005f16:	d916      	bls.n	8005f46 <_malloc_r+0xba>
 8005f18:	1961      	adds	r1, r4, r5
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	6025      	str	r5, [r4, #0]
 8005f1e:	bf18      	it	ne
 8005f20:	6059      	strne	r1, [r3, #4]
 8005f22:	6863      	ldr	r3, [r4, #4]
 8005f24:	bf08      	it	eq
 8005f26:	6031      	streq	r1, [r6, #0]
 8005f28:	5162      	str	r2, [r4, r5]
 8005f2a:	604b      	str	r3, [r1, #4]
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f104 060b 	add.w	r6, r4, #11
 8005f32:	f000 f9ed 	bl	8006310 <__malloc_unlock>
 8005f36:	f026 0607 	bic.w	r6, r6, #7
 8005f3a:	1d23      	adds	r3, r4, #4
 8005f3c:	1af2      	subs	r2, r6, r3
 8005f3e:	d0b6      	beq.n	8005eae <_malloc_r+0x22>
 8005f40:	1b9b      	subs	r3, r3, r6
 8005f42:	50a3      	str	r3, [r4, r2]
 8005f44:	e7b3      	b.n	8005eae <_malloc_r+0x22>
 8005f46:	6862      	ldr	r2, [r4, #4]
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	bf0c      	ite	eq
 8005f4c:	6032      	streq	r2, [r6, #0]
 8005f4e:	605a      	strne	r2, [r3, #4]
 8005f50:	e7ec      	b.n	8005f2c <_malloc_r+0xa0>
 8005f52:	4623      	mov	r3, r4
 8005f54:	6864      	ldr	r4, [r4, #4]
 8005f56:	e7b2      	b.n	8005ebe <_malloc_r+0x32>
 8005f58:	4634      	mov	r4, r6
 8005f5a:	6876      	ldr	r6, [r6, #4]
 8005f5c:	e7b9      	b.n	8005ed2 <_malloc_r+0x46>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	4638      	mov	r0, r7
 8005f64:	f000 f9d4 	bl	8006310 <__malloc_unlock>
 8005f68:	e7a1      	b.n	8005eae <_malloc_r+0x22>
 8005f6a:	6025      	str	r5, [r4, #0]
 8005f6c:	e7de      	b.n	8005f2c <_malloc_r+0xa0>
 8005f6e:	bf00      	nop
 8005f70:	20000320 	.word	0x20000320

08005f74 <__ssputs_r>:
 8005f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	688e      	ldr	r6, [r1, #8]
 8005f7a:	429e      	cmp	r6, r3
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	4690      	mov	r8, r2
 8005f82:	461f      	mov	r7, r3
 8005f84:	d838      	bhi.n	8005ff8 <__ssputs_r+0x84>
 8005f86:	898a      	ldrh	r2, [r1, #12]
 8005f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f8c:	d032      	beq.n	8005ff4 <__ssputs_r+0x80>
 8005f8e:	6825      	ldr	r5, [r4, #0]
 8005f90:	6909      	ldr	r1, [r1, #16]
 8005f92:	eba5 0901 	sub.w	r9, r5, r1
 8005f96:	6965      	ldr	r5, [r4, #20]
 8005f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	444b      	add	r3, r9
 8005fa4:	106d      	asrs	r5, r5, #1
 8005fa6:	429d      	cmp	r5, r3
 8005fa8:	bf38      	it	cc
 8005faa:	461d      	movcc	r5, r3
 8005fac:	0553      	lsls	r3, r2, #21
 8005fae:	d531      	bpl.n	8006014 <__ssputs_r+0xa0>
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	f7ff ff6b 	bl	8005e8c <_malloc_r>
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	b950      	cbnz	r0, 8005fd0 <__ssputs_r+0x5c>
 8005fba:	230c      	movs	r3, #12
 8005fbc:	f8ca 3000 	str.w	r3, [sl]
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc6:	81a3      	strh	r3, [r4, #12]
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd0:	6921      	ldr	r1, [r4, #16]
 8005fd2:	464a      	mov	r2, r9
 8005fd4:	f7ff fb46 	bl	8005664 <memcpy>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	6126      	str	r6, [r4, #16]
 8005fe6:	6165      	str	r5, [r4, #20]
 8005fe8:	444e      	add	r6, r9
 8005fea:	eba5 0509 	sub.w	r5, r5, r9
 8005fee:	6026      	str	r6, [r4, #0]
 8005ff0:	60a5      	str	r5, [r4, #8]
 8005ff2:	463e      	mov	r6, r7
 8005ff4:	42be      	cmp	r6, r7
 8005ff6:	d900      	bls.n	8005ffa <__ssputs_r+0x86>
 8005ff8:	463e      	mov	r6, r7
 8005ffa:	6820      	ldr	r0, [r4, #0]
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	4641      	mov	r1, r8
 8006000:	f000 f966 	bl	80062d0 <memmove>
 8006004:	68a3      	ldr	r3, [r4, #8]
 8006006:	1b9b      	subs	r3, r3, r6
 8006008:	60a3      	str	r3, [r4, #8]
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	4433      	add	r3, r6
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	2000      	movs	r0, #0
 8006012:	e7db      	b.n	8005fcc <__ssputs_r+0x58>
 8006014:	462a      	mov	r2, r5
 8006016:	f000 f981 	bl	800631c <_realloc_r>
 800601a:	4606      	mov	r6, r0
 800601c:	2800      	cmp	r0, #0
 800601e:	d1e1      	bne.n	8005fe4 <__ssputs_r+0x70>
 8006020:	6921      	ldr	r1, [r4, #16]
 8006022:	4650      	mov	r0, sl
 8006024:	f7ff fec6 	bl	8005db4 <_free_r>
 8006028:	e7c7      	b.n	8005fba <__ssputs_r+0x46>
	...

0800602c <_svfiprintf_r>:
 800602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	4698      	mov	r8, r3
 8006032:	898b      	ldrh	r3, [r1, #12]
 8006034:	061b      	lsls	r3, r3, #24
 8006036:	b09d      	sub	sp, #116	; 0x74
 8006038:	4607      	mov	r7, r0
 800603a:	460d      	mov	r5, r1
 800603c:	4614      	mov	r4, r2
 800603e:	d50e      	bpl.n	800605e <_svfiprintf_r+0x32>
 8006040:	690b      	ldr	r3, [r1, #16]
 8006042:	b963      	cbnz	r3, 800605e <_svfiprintf_r+0x32>
 8006044:	2140      	movs	r1, #64	; 0x40
 8006046:	f7ff ff21 	bl	8005e8c <_malloc_r>
 800604a:	6028      	str	r0, [r5, #0]
 800604c:	6128      	str	r0, [r5, #16]
 800604e:	b920      	cbnz	r0, 800605a <_svfiprintf_r+0x2e>
 8006050:	230c      	movs	r3, #12
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	e0d1      	b.n	80061fe <_svfiprintf_r+0x1d2>
 800605a:	2340      	movs	r3, #64	; 0x40
 800605c:	616b      	str	r3, [r5, #20]
 800605e:	2300      	movs	r3, #0
 8006060:	9309      	str	r3, [sp, #36]	; 0x24
 8006062:	2320      	movs	r3, #32
 8006064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006068:	f8cd 800c 	str.w	r8, [sp, #12]
 800606c:	2330      	movs	r3, #48	; 0x30
 800606e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006218 <_svfiprintf_r+0x1ec>
 8006072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006076:	f04f 0901 	mov.w	r9, #1
 800607a:	4623      	mov	r3, r4
 800607c:	469a      	mov	sl, r3
 800607e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006082:	b10a      	cbz	r2, 8006088 <_svfiprintf_r+0x5c>
 8006084:	2a25      	cmp	r2, #37	; 0x25
 8006086:	d1f9      	bne.n	800607c <_svfiprintf_r+0x50>
 8006088:	ebba 0b04 	subs.w	fp, sl, r4
 800608c:	d00b      	beq.n	80060a6 <_svfiprintf_r+0x7a>
 800608e:	465b      	mov	r3, fp
 8006090:	4622      	mov	r2, r4
 8006092:	4629      	mov	r1, r5
 8006094:	4638      	mov	r0, r7
 8006096:	f7ff ff6d 	bl	8005f74 <__ssputs_r>
 800609a:	3001      	adds	r0, #1
 800609c:	f000 80aa 	beq.w	80061f4 <_svfiprintf_r+0x1c8>
 80060a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060a2:	445a      	add	r2, fp
 80060a4:	9209      	str	r2, [sp, #36]	; 0x24
 80060a6:	f89a 3000 	ldrb.w	r3, [sl]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80a2 	beq.w	80061f4 <_svfiprintf_r+0x1c8>
 80060b0:	2300      	movs	r3, #0
 80060b2:	f04f 32ff 	mov.w	r2, #4294967295
 80060b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060ba:	f10a 0a01 	add.w	sl, sl, #1
 80060be:	9304      	str	r3, [sp, #16]
 80060c0:	9307      	str	r3, [sp, #28]
 80060c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060c6:	931a      	str	r3, [sp, #104]	; 0x68
 80060c8:	4654      	mov	r4, sl
 80060ca:	2205      	movs	r2, #5
 80060cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d0:	4851      	ldr	r0, [pc, #324]	; (8006218 <_svfiprintf_r+0x1ec>)
 80060d2:	f7fa f895 	bl	8000200 <memchr>
 80060d6:	9a04      	ldr	r2, [sp, #16]
 80060d8:	b9d8      	cbnz	r0, 8006112 <_svfiprintf_r+0xe6>
 80060da:	06d0      	lsls	r0, r2, #27
 80060dc:	bf44      	itt	mi
 80060de:	2320      	movmi	r3, #32
 80060e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060e4:	0711      	lsls	r1, r2, #28
 80060e6:	bf44      	itt	mi
 80060e8:	232b      	movmi	r3, #43	; 0x2b
 80060ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060ee:	f89a 3000 	ldrb.w	r3, [sl]
 80060f2:	2b2a      	cmp	r3, #42	; 0x2a
 80060f4:	d015      	beq.n	8006122 <_svfiprintf_r+0xf6>
 80060f6:	9a07      	ldr	r2, [sp, #28]
 80060f8:	4654      	mov	r4, sl
 80060fa:	2000      	movs	r0, #0
 80060fc:	f04f 0c0a 	mov.w	ip, #10
 8006100:	4621      	mov	r1, r4
 8006102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006106:	3b30      	subs	r3, #48	; 0x30
 8006108:	2b09      	cmp	r3, #9
 800610a:	d94e      	bls.n	80061aa <_svfiprintf_r+0x17e>
 800610c:	b1b0      	cbz	r0, 800613c <_svfiprintf_r+0x110>
 800610e:	9207      	str	r2, [sp, #28]
 8006110:	e014      	b.n	800613c <_svfiprintf_r+0x110>
 8006112:	eba0 0308 	sub.w	r3, r0, r8
 8006116:	fa09 f303 	lsl.w	r3, r9, r3
 800611a:	4313      	orrs	r3, r2
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	46a2      	mov	sl, r4
 8006120:	e7d2      	b.n	80060c8 <_svfiprintf_r+0x9c>
 8006122:	9b03      	ldr	r3, [sp, #12]
 8006124:	1d19      	adds	r1, r3, #4
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	9103      	str	r1, [sp, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	bfbb      	ittet	lt
 800612e:	425b      	neglt	r3, r3
 8006130:	f042 0202 	orrlt.w	r2, r2, #2
 8006134:	9307      	strge	r3, [sp, #28]
 8006136:	9307      	strlt	r3, [sp, #28]
 8006138:	bfb8      	it	lt
 800613a:	9204      	strlt	r2, [sp, #16]
 800613c:	7823      	ldrb	r3, [r4, #0]
 800613e:	2b2e      	cmp	r3, #46	; 0x2e
 8006140:	d10c      	bne.n	800615c <_svfiprintf_r+0x130>
 8006142:	7863      	ldrb	r3, [r4, #1]
 8006144:	2b2a      	cmp	r3, #42	; 0x2a
 8006146:	d135      	bne.n	80061b4 <_svfiprintf_r+0x188>
 8006148:	9b03      	ldr	r3, [sp, #12]
 800614a:	1d1a      	adds	r2, r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	9203      	str	r2, [sp, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	bfb8      	it	lt
 8006154:	f04f 33ff 	movlt.w	r3, #4294967295
 8006158:	3402      	adds	r4, #2
 800615a:	9305      	str	r3, [sp, #20]
 800615c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006228 <_svfiprintf_r+0x1fc>
 8006160:	7821      	ldrb	r1, [r4, #0]
 8006162:	2203      	movs	r2, #3
 8006164:	4650      	mov	r0, sl
 8006166:	f7fa f84b 	bl	8000200 <memchr>
 800616a:	b140      	cbz	r0, 800617e <_svfiprintf_r+0x152>
 800616c:	2340      	movs	r3, #64	; 0x40
 800616e:	eba0 000a 	sub.w	r0, r0, sl
 8006172:	fa03 f000 	lsl.w	r0, r3, r0
 8006176:	9b04      	ldr	r3, [sp, #16]
 8006178:	4303      	orrs	r3, r0
 800617a:	3401      	adds	r4, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006182:	4826      	ldr	r0, [pc, #152]	; (800621c <_svfiprintf_r+0x1f0>)
 8006184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006188:	2206      	movs	r2, #6
 800618a:	f7fa f839 	bl	8000200 <memchr>
 800618e:	2800      	cmp	r0, #0
 8006190:	d038      	beq.n	8006204 <_svfiprintf_r+0x1d8>
 8006192:	4b23      	ldr	r3, [pc, #140]	; (8006220 <_svfiprintf_r+0x1f4>)
 8006194:	bb1b      	cbnz	r3, 80061de <_svfiprintf_r+0x1b2>
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	3307      	adds	r3, #7
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	3308      	adds	r3, #8
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a4:	4433      	add	r3, r6
 80061a6:	9309      	str	r3, [sp, #36]	; 0x24
 80061a8:	e767      	b.n	800607a <_svfiprintf_r+0x4e>
 80061aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80061ae:	460c      	mov	r4, r1
 80061b0:	2001      	movs	r0, #1
 80061b2:	e7a5      	b.n	8006100 <_svfiprintf_r+0xd4>
 80061b4:	2300      	movs	r3, #0
 80061b6:	3401      	adds	r4, #1
 80061b8:	9305      	str	r3, [sp, #20]
 80061ba:	4619      	mov	r1, r3
 80061bc:	f04f 0c0a 	mov.w	ip, #10
 80061c0:	4620      	mov	r0, r4
 80061c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061c6:	3a30      	subs	r2, #48	; 0x30
 80061c8:	2a09      	cmp	r2, #9
 80061ca:	d903      	bls.n	80061d4 <_svfiprintf_r+0x1a8>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0c5      	beq.n	800615c <_svfiprintf_r+0x130>
 80061d0:	9105      	str	r1, [sp, #20]
 80061d2:	e7c3      	b.n	800615c <_svfiprintf_r+0x130>
 80061d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061d8:	4604      	mov	r4, r0
 80061da:	2301      	movs	r3, #1
 80061dc:	e7f0      	b.n	80061c0 <_svfiprintf_r+0x194>
 80061de:	ab03      	add	r3, sp, #12
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	462a      	mov	r2, r5
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <_svfiprintf_r+0x1f8>)
 80061e6:	a904      	add	r1, sp, #16
 80061e8:	4638      	mov	r0, r7
 80061ea:	f7fd ffcb 	bl	8004184 <_printf_float>
 80061ee:	1c42      	adds	r2, r0, #1
 80061f0:	4606      	mov	r6, r0
 80061f2:	d1d6      	bne.n	80061a2 <_svfiprintf_r+0x176>
 80061f4:	89ab      	ldrh	r3, [r5, #12]
 80061f6:	065b      	lsls	r3, r3, #25
 80061f8:	f53f af2c 	bmi.w	8006054 <_svfiprintf_r+0x28>
 80061fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061fe:	b01d      	add	sp, #116	; 0x74
 8006200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006204:	ab03      	add	r3, sp, #12
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	462a      	mov	r2, r5
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <_svfiprintf_r+0x1f8>)
 800620c:	a904      	add	r1, sp, #16
 800620e:	4638      	mov	r0, r7
 8006210:	f7fe fa5c 	bl	80046cc <_printf_i>
 8006214:	e7eb      	b.n	80061ee <_svfiprintf_r+0x1c2>
 8006216:	bf00      	nop
 8006218:	08007094 	.word	0x08007094
 800621c:	0800709e 	.word	0x0800709e
 8006220:	08004185 	.word	0x08004185
 8006224:	08005f75 	.word	0x08005f75
 8006228:	0800709a 	.word	0x0800709a

0800622c <_sbrk_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d06      	ldr	r5, [pc, #24]	; (8006248 <_sbrk_r+0x1c>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fb fa54 	bl	80016e4 <_sbrk>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_sbrk_r+0x1a>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_sbrk_r+0x1a>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	20000328 	.word	0x20000328

0800624c <__assert_func>:
 800624c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800624e:	4614      	mov	r4, r2
 8006250:	461a      	mov	r2, r3
 8006252:	4b09      	ldr	r3, [pc, #36]	; (8006278 <__assert_func+0x2c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4605      	mov	r5, r0
 8006258:	68d8      	ldr	r0, [r3, #12]
 800625a:	b14c      	cbz	r4, 8006270 <__assert_func+0x24>
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <__assert_func+0x30>)
 800625e:	9100      	str	r1, [sp, #0]
 8006260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006264:	4906      	ldr	r1, [pc, #24]	; (8006280 <__assert_func+0x34>)
 8006266:	462b      	mov	r3, r5
 8006268:	f000 f80e 	bl	8006288 <fiprintf>
 800626c:	f000 faac 	bl	80067c8 <abort>
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <__assert_func+0x38>)
 8006272:	461c      	mov	r4, r3
 8006274:	e7f3      	b.n	800625e <__assert_func+0x12>
 8006276:	bf00      	nop
 8006278:	2000000c 	.word	0x2000000c
 800627c:	080070a5 	.word	0x080070a5
 8006280:	080070b2 	.word	0x080070b2
 8006284:	080070e0 	.word	0x080070e0

08006288 <fiprintf>:
 8006288:	b40e      	push	{r1, r2, r3}
 800628a:	b503      	push	{r0, r1, lr}
 800628c:	4601      	mov	r1, r0
 800628e:	ab03      	add	r3, sp, #12
 8006290:	4805      	ldr	r0, [pc, #20]	; (80062a8 <fiprintf+0x20>)
 8006292:	f853 2b04 	ldr.w	r2, [r3], #4
 8006296:	6800      	ldr	r0, [r0, #0]
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	f000 f897 	bl	80063cc <_vfiprintf_r>
 800629e:	b002      	add	sp, #8
 80062a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a4:	b003      	add	sp, #12
 80062a6:	4770      	bx	lr
 80062a8:	2000000c 	.word	0x2000000c

080062ac <__ascii_mbtowc>:
 80062ac:	b082      	sub	sp, #8
 80062ae:	b901      	cbnz	r1, 80062b2 <__ascii_mbtowc+0x6>
 80062b0:	a901      	add	r1, sp, #4
 80062b2:	b142      	cbz	r2, 80062c6 <__ascii_mbtowc+0x1a>
 80062b4:	b14b      	cbz	r3, 80062ca <__ascii_mbtowc+0x1e>
 80062b6:	7813      	ldrb	r3, [r2, #0]
 80062b8:	600b      	str	r3, [r1, #0]
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	1e10      	subs	r0, r2, #0
 80062be:	bf18      	it	ne
 80062c0:	2001      	movne	r0, #1
 80062c2:	b002      	add	sp, #8
 80062c4:	4770      	bx	lr
 80062c6:	4610      	mov	r0, r2
 80062c8:	e7fb      	b.n	80062c2 <__ascii_mbtowc+0x16>
 80062ca:	f06f 0001 	mvn.w	r0, #1
 80062ce:	e7f8      	b.n	80062c2 <__ascii_mbtowc+0x16>

080062d0 <memmove>:
 80062d0:	4288      	cmp	r0, r1
 80062d2:	b510      	push	{r4, lr}
 80062d4:	eb01 0402 	add.w	r4, r1, r2
 80062d8:	d902      	bls.n	80062e0 <memmove+0x10>
 80062da:	4284      	cmp	r4, r0
 80062dc:	4623      	mov	r3, r4
 80062de:	d807      	bhi.n	80062f0 <memmove+0x20>
 80062e0:	1e43      	subs	r3, r0, #1
 80062e2:	42a1      	cmp	r1, r4
 80062e4:	d008      	beq.n	80062f8 <memmove+0x28>
 80062e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062ee:	e7f8      	b.n	80062e2 <memmove+0x12>
 80062f0:	4402      	add	r2, r0
 80062f2:	4601      	mov	r1, r0
 80062f4:	428a      	cmp	r2, r1
 80062f6:	d100      	bne.n	80062fa <memmove+0x2a>
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006302:	e7f7      	b.n	80062f4 <memmove+0x24>

08006304 <__malloc_lock>:
 8006304:	4801      	ldr	r0, [pc, #4]	; (800630c <__malloc_lock+0x8>)
 8006306:	f000 bc1f 	b.w	8006b48 <__retarget_lock_acquire_recursive>
 800630a:	bf00      	nop
 800630c:	2000032c 	.word	0x2000032c

08006310 <__malloc_unlock>:
 8006310:	4801      	ldr	r0, [pc, #4]	; (8006318 <__malloc_unlock+0x8>)
 8006312:	f000 bc1a 	b.w	8006b4a <__retarget_lock_release_recursive>
 8006316:	bf00      	nop
 8006318:	2000032c 	.word	0x2000032c

0800631c <_realloc_r>:
 800631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006320:	4680      	mov	r8, r0
 8006322:	4614      	mov	r4, r2
 8006324:	460e      	mov	r6, r1
 8006326:	b921      	cbnz	r1, 8006332 <_realloc_r+0x16>
 8006328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632c:	4611      	mov	r1, r2
 800632e:	f7ff bdad 	b.w	8005e8c <_malloc_r>
 8006332:	b92a      	cbnz	r2, 8006340 <_realloc_r+0x24>
 8006334:	f7ff fd3e 	bl	8005db4 <_free_r>
 8006338:	4625      	mov	r5, r4
 800633a:	4628      	mov	r0, r5
 800633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006340:	f000 fc6a 	bl	8006c18 <_malloc_usable_size_r>
 8006344:	4284      	cmp	r4, r0
 8006346:	4607      	mov	r7, r0
 8006348:	d802      	bhi.n	8006350 <_realloc_r+0x34>
 800634a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800634e:	d812      	bhi.n	8006376 <_realloc_r+0x5a>
 8006350:	4621      	mov	r1, r4
 8006352:	4640      	mov	r0, r8
 8006354:	f7ff fd9a 	bl	8005e8c <_malloc_r>
 8006358:	4605      	mov	r5, r0
 800635a:	2800      	cmp	r0, #0
 800635c:	d0ed      	beq.n	800633a <_realloc_r+0x1e>
 800635e:	42bc      	cmp	r4, r7
 8006360:	4622      	mov	r2, r4
 8006362:	4631      	mov	r1, r6
 8006364:	bf28      	it	cs
 8006366:	463a      	movcs	r2, r7
 8006368:	f7ff f97c 	bl	8005664 <memcpy>
 800636c:	4631      	mov	r1, r6
 800636e:	4640      	mov	r0, r8
 8006370:	f7ff fd20 	bl	8005db4 <_free_r>
 8006374:	e7e1      	b.n	800633a <_realloc_r+0x1e>
 8006376:	4635      	mov	r5, r6
 8006378:	e7df      	b.n	800633a <_realloc_r+0x1e>

0800637a <__sfputc_r>:
 800637a:	6893      	ldr	r3, [r2, #8]
 800637c:	3b01      	subs	r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	b410      	push	{r4}
 8006382:	6093      	str	r3, [r2, #8]
 8006384:	da08      	bge.n	8006398 <__sfputc_r+0x1e>
 8006386:	6994      	ldr	r4, [r2, #24]
 8006388:	42a3      	cmp	r3, r4
 800638a:	db01      	blt.n	8006390 <__sfputc_r+0x16>
 800638c:	290a      	cmp	r1, #10
 800638e:	d103      	bne.n	8006398 <__sfputc_r+0x1e>
 8006390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006394:	f000 b94a 	b.w	800662c <__swbuf_r>
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	1c58      	adds	r0, r3, #1
 800639c:	6010      	str	r0, [r2, #0]
 800639e:	7019      	strb	r1, [r3, #0]
 80063a0:	4608      	mov	r0, r1
 80063a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <__sfputs_r>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	4606      	mov	r6, r0
 80063ac:	460f      	mov	r7, r1
 80063ae:	4614      	mov	r4, r2
 80063b0:	18d5      	adds	r5, r2, r3
 80063b2:	42ac      	cmp	r4, r5
 80063b4:	d101      	bne.n	80063ba <__sfputs_r+0x12>
 80063b6:	2000      	movs	r0, #0
 80063b8:	e007      	b.n	80063ca <__sfputs_r+0x22>
 80063ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063be:	463a      	mov	r2, r7
 80063c0:	4630      	mov	r0, r6
 80063c2:	f7ff ffda 	bl	800637a <__sfputc_r>
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	d1f3      	bne.n	80063b2 <__sfputs_r+0xa>
 80063ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063cc <_vfiprintf_r>:
 80063cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d0:	460d      	mov	r5, r1
 80063d2:	b09d      	sub	sp, #116	; 0x74
 80063d4:	4614      	mov	r4, r2
 80063d6:	4698      	mov	r8, r3
 80063d8:	4606      	mov	r6, r0
 80063da:	b118      	cbz	r0, 80063e4 <_vfiprintf_r+0x18>
 80063dc:	6983      	ldr	r3, [r0, #24]
 80063de:	b90b      	cbnz	r3, 80063e4 <_vfiprintf_r+0x18>
 80063e0:	f000 fb14 	bl	8006a0c <__sinit>
 80063e4:	4b89      	ldr	r3, [pc, #548]	; (800660c <_vfiprintf_r+0x240>)
 80063e6:	429d      	cmp	r5, r3
 80063e8:	d11b      	bne.n	8006422 <_vfiprintf_r+0x56>
 80063ea:	6875      	ldr	r5, [r6, #4]
 80063ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063ee:	07d9      	lsls	r1, r3, #31
 80063f0:	d405      	bmi.n	80063fe <_vfiprintf_r+0x32>
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	059a      	lsls	r2, r3, #22
 80063f6:	d402      	bmi.n	80063fe <_vfiprintf_r+0x32>
 80063f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063fa:	f000 fba5 	bl	8006b48 <__retarget_lock_acquire_recursive>
 80063fe:	89ab      	ldrh	r3, [r5, #12]
 8006400:	071b      	lsls	r3, r3, #28
 8006402:	d501      	bpl.n	8006408 <_vfiprintf_r+0x3c>
 8006404:	692b      	ldr	r3, [r5, #16]
 8006406:	b9eb      	cbnz	r3, 8006444 <_vfiprintf_r+0x78>
 8006408:	4629      	mov	r1, r5
 800640a:	4630      	mov	r0, r6
 800640c:	f000 f96e 	bl	80066ec <__swsetup_r>
 8006410:	b1c0      	cbz	r0, 8006444 <_vfiprintf_r+0x78>
 8006412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006414:	07dc      	lsls	r4, r3, #31
 8006416:	d50e      	bpl.n	8006436 <_vfiprintf_r+0x6a>
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	b01d      	add	sp, #116	; 0x74
 800641e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006422:	4b7b      	ldr	r3, [pc, #492]	; (8006610 <_vfiprintf_r+0x244>)
 8006424:	429d      	cmp	r5, r3
 8006426:	d101      	bne.n	800642c <_vfiprintf_r+0x60>
 8006428:	68b5      	ldr	r5, [r6, #8]
 800642a:	e7df      	b.n	80063ec <_vfiprintf_r+0x20>
 800642c:	4b79      	ldr	r3, [pc, #484]	; (8006614 <_vfiprintf_r+0x248>)
 800642e:	429d      	cmp	r5, r3
 8006430:	bf08      	it	eq
 8006432:	68f5      	ldreq	r5, [r6, #12]
 8006434:	e7da      	b.n	80063ec <_vfiprintf_r+0x20>
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	0598      	lsls	r0, r3, #22
 800643a:	d4ed      	bmi.n	8006418 <_vfiprintf_r+0x4c>
 800643c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800643e:	f000 fb84 	bl	8006b4a <__retarget_lock_release_recursive>
 8006442:	e7e9      	b.n	8006418 <_vfiprintf_r+0x4c>
 8006444:	2300      	movs	r3, #0
 8006446:	9309      	str	r3, [sp, #36]	; 0x24
 8006448:	2320      	movs	r3, #32
 800644a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800644e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006452:	2330      	movs	r3, #48	; 0x30
 8006454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006618 <_vfiprintf_r+0x24c>
 8006458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800645c:	f04f 0901 	mov.w	r9, #1
 8006460:	4623      	mov	r3, r4
 8006462:	469a      	mov	sl, r3
 8006464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006468:	b10a      	cbz	r2, 800646e <_vfiprintf_r+0xa2>
 800646a:	2a25      	cmp	r2, #37	; 0x25
 800646c:	d1f9      	bne.n	8006462 <_vfiprintf_r+0x96>
 800646e:	ebba 0b04 	subs.w	fp, sl, r4
 8006472:	d00b      	beq.n	800648c <_vfiprintf_r+0xc0>
 8006474:	465b      	mov	r3, fp
 8006476:	4622      	mov	r2, r4
 8006478:	4629      	mov	r1, r5
 800647a:	4630      	mov	r0, r6
 800647c:	f7ff ff94 	bl	80063a8 <__sfputs_r>
 8006480:	3001      	adds	r0, #1
 8006482:	f000 80aa 	beq.w	80065da <_vfiprintf_r+0x20e>
 8006486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006488:	445a      	add	r2, fp
 800648a:	9209      	str	r2, [sp, #36]	; 0x24
 800648c:	f89a 3000 	ldrb.w	r3, [sl]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80a2 	beq.w	80065da <_vfiprintf_r+0x20e>
 8006496:	2300      	movs	r3, #0
 8006498:	f04f 32ff 	mov.w	r2, #4294967295
 800649c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064a0:	f10a 0a01 	add.w	sl, sl, #1
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	9307      	str	r3, [sp, #28]
 80064a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ac:	931a      	str	r3, [sp, #104]	; 0x68
 80064ae:	4654      	mov	r4, sl
 80064b0:	2205      	movs	r2, #5
 80064b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b6:	4858      	ldr	r0, [pc, #352]	; (8006618 <_vfiprintf_r+0x24c>)
 80064b8:	f7f9 fea2 	bl	8000200 <memchr>
 80064bc:	9a04      	ldr	r2, [sp, #16]
 80064be:	b9d8      	cbnz	r0, 80064f8 <_vfiprintf_r+0x12c>
 80064c0:	06d1      	lsls	r1, r2, #27
 80064c2:	bf44      	itt	mi
 80064c4:	2320      	movmi	r3, #32
 80064c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ca:	0713      	lsls	r3, r2, #28
 80064cc:	bf44      	itt	mi
 80064ce:	232b      	movmi	r3, #43	; 0x2b
 80064d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064d4:	f89a 3000 	ldrb.w	r3, [sl]
 80064d8:	2b2a      	cmp	r3, #42	; 0x2a
 80064da:	d015      	beq.n	8006508 <_vfiprintf_r+0x13c>
 80064dc:	9a07      	ldr	r2, [sp, #28]
 80064de:	4654      	mov	r4, sl
 80064e0:	2000      	movs	r0, #0
 80064e2:	f04f 0c0a 	mov.w	ip, #10
 80064e6:	4621      	mov	r1, r4
 80064e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ec:	3b30      	subs	r3, #48	; 0x30
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d94e      	bls.n	8006590 <_vfiprintf_r+0x1c4>
 80064f2:	b1b0      	cbz	r0, 8006522 <_vfiprintf_r+0x156>
 80064f4:	9207      	str	r2, [sp, #28]
 80064f6:	e014      	b.n	8006522 <_vfiprintf_r+0x156>
 80064f8:	eba0 0308 	sub.w	r3, r0, r8
 80064fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006500:	4313      	orrs	r3, r2
 8006502:	9304      	str	r3, [sp, #16]
 8006504:	46a2      	mov	sl, r4
 8006506:	e7d2      	b.n	80064ae <_vfiprintf_r+0xe2>
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	1d19      	adds	r1, r3, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	9103      	str	r1, [sp, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	bfbb      	ittet	lt
 8006514:	425b      	neglt	r3, r3
 8006516:	f042 0202 	orrlt.w	r2, r2, #2
 800651a:	9307      	strge	r3, [sp, #28]
 800651c:	9307      	strlt	r3, [sp, #28]
 800651e:	bfb8      	it	lt
 8006520:	9204      	strlt	r2, [sp, #16]
 8006522:	7823      	ldrb	r3, [r4, #0]
 8006524:	2b2e      	cmp	r3, #46	; 0x2e
 8006526:	d10c      	bne.n	8006542 <_vfiprintf_r+0x176>
 8006528:	7863      	ldrb	r3, [r4, #1]
 800652a:	2b2a      	cmp	r3, #42	; 0x2a
 800652c:	d135      	bne.n	800659a <_vfiprintf_r+0x1ce>
 800652e:	9b03      	ldr	r3, [sp, #12]
 8006530:	1d1a      	adds	r2, r3, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	9203      	str	r2, [sp, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	bfb8      	it	lt
 800653a:	f04f 33ff 	movlt.w	r3, #4294967295
 800653e:	3402      	adds	r4, #2
 8006540:	9305      	str	r3, [sp, #20]
 8006542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006628 <_vfiprintf_r+0x25c>
 8006546:	7821      	ldrb	r1, [r4, #0]
 8006548:	2203      	movs	r2, #3
 800654a:	4650      	mov	r0, sl
 800654c:	f7f9 fe58 	bl	8000200 <memchr>
 8006550:	b140      	cbz	r0, 8006564 <_vfiprintf_r+0x198>
 8006552:	2340      	movs	r3, #64	; 0x40
 8006554:	eba0 000a 	sub.w	r0, r0, sl
 8006558:	fa03 f000 	lsl.w	r0, r3, r0
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	4303      	orrs	r3, r0
 8006560:	3401      	adds	r4, #1
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006568:	482c      	ldr	r0, [pc, #176]	; (800661c <_vfiprintf_r+0x250>)
 800656a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800656e:	2206      	movs	r2, #6
 8006570:	f7f9 fe46 	bl	8000200 <memchr>
 8006574:	2800      	cmp	r0, #0
 8006576:	d03f      	beq.n	80065f8 <_vfiprintf_r+0x22c>
 8006578:	4b29      	ldr	r3, [pc, #164]	; (8006620 <_vfiprintf_r+0x254>)
 800657a:	bb1b      	cbnz	r3, 80065c4 <_vfiprintf_r+0x1f8>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	3307      	adds	r3, #7
 8006580:	f023 0307 	bic.w	r3, r3, #7
 8006584:	3308      	adds	r3, #8
 8006586:	9303      	str	r3, [sp, #12]
 8006588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658a:	443b      	add	r3, r7
 800658c:	9309      	str	r3, [sp, #36]	; 0x24
 800658e:	e767      	b.n	8006460 <_vfiprintf_r+0x94>
 8006590:	fb0c 3202 	mla	r2, ip, r2, r3
 8006594:	460c      	mov	r4, r1
 8006596:	2001      	movs	r0, #1
 8006598:	e7a5      	b.n	80064e6 <_vfiprintf_r+0x11a>
 800659a:	2300      	movs	r3, #0
 800659c:	3401      	adds	r4, #1
 800659e:	9305      	str	r3, [sp, #20]
 80065a0:	4619      	mov	r1, r3
 80065a2:	f04f 0c0a 	mov.w	ip, #10
 80065a6:	4620      	mov	r0, r4
 80065a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ac:	3a30      	subs	r2, #48	; 0x30
 80065ae:	2a09      	cmp	r2, #9
 80065b0:	d903      	bls.n	80065ba <_vfiprintf_r+0x1ee>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0c5      	beq.n	8006542 <_vfiprintf_r+0x176>
 80065b6:	9105      	str	r1, [sp, #20]
 80065b8:	e7c3      	b.n	8006542 <_vfiprintf_r+0x176>
 80065ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80065be:	4604      	mov	r4, r0
 80065c0:	2301      	movs	r3, #1
 80065c2:	e7f0      	b.n	80065a6 <_vfiprintf_r+0x1da>
 80065c4:	ab03      	add	r3, sp, #12
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	462a      	mov	r2, r5
 80065ca:	4b16      	ldr	r3, [pc, #88]	; (8006624 <_vfiprintf_r+0x258>)
 80065cc:	a904      	add	r1, sp, #16
 80065ce:	4630      	mov	r0, r6
 80065d0:	f7fd fdd8 	bl	8004184 <_printf_float>
 80065d4:	4607      	mov	r7, r0
 80065d6:	1c78      	adds	r0, r7, #1
 80065d8:	d1d6      	bne.n	8006588 <_vfiprintf_r+0x1bc>
 80065da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065dc:	07d9      	lsls	r1, r3, #31
 80065de:	d405      	bmi.n	80065ec <_vfiprintf_r+0x220>
 80065e0:	89ab      	ldrh	r3, [r5, #12]
 80065e2:	059a      	lsls	r2, r3, #22
 80065e4:	d402      	bmi.n	80065ec <_vfiprintf_r+0x220>
 80065e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065e8:	f000 faaf 	bl	8006b4a <__retarget_lock_release_recursive>
 80065ec:	89ab      	ldrh	r3, [r5, #12]
 80065ee:	065b      	lsls	r3, r3, #25
 80065f0:	f53f af12 	bmi.w	8006418 <_vfiprintf_r+0x4c>
 80065f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f6:	e711      	b.n	800641c <_vfiprintf_r+0x50>
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	462a      	mov	r2, r5
 80065fe:	4b09      	ldr	r3, [pc, #36]	; (8006624 <_vfiprintf_r+0x258>)
 8006600:	a904      	add	r1, sp, #16
 8006602:	4630      	mov	r0, r6
 8006604:	f7fe f862 	bl	80046cc <_printf_i>
 8006608:	e7e4      	b.n	80065d4 <_vfiprintf_r+0x208>
 800660a:	bf00      	nop
 800660c:	0800720c 	.word	0x0800720c
 8006610:	0800722c 	.word	0x0800722c
 8006614:	080071ec 	.word	0x080071ec
 8006618:	08007094 	.word	0x08007094
 800661c:	0800709e 	.word	0x0800709e
 8006620:	08004185 	.word	0x08004185
 8006624:	080063a9 	.word	0x080063a9
 8006628:	0800709a 	.word	0x0800709a

0800662c <__swbuf_r>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	460e      	mov	r6, r1
 8006630:	4614      	mov	r4, r2
 8006632:	4605      	mov	r5, r0
 8006634:	b118      	cbz	r0, 800663e <__swbuf_r+0x12>
 8006636:	6983      	ldr	r3, [r0, #24]
 8006638:	b90b      	cbnz	r3, 800663e <__swbuf_r+0x12>
 800663a:	f000 f9e7 	bl	8006a0c <__sinit>
 800663e:	4b21      	ldr	r3, [pc, #132]	; (80066c4 <__swbuf_r+0x98>)
 8006640:	429c      	cmp	r4, r3
 8006642:	d12b      	bne.n	800669c <__swbuf_r+0x70>
 8006644:	686c      	ldr	r4, [r5, #4]
 8006646:	69a3      	ldr	r3, [r4, #24]
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	071a      	lsls	r2, r3, #28
 800664e:	d52f      	bpl.n	80066b0 <__swbuf_r+0x84>
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	b36b      	cbz	r3, 80066b0 <__swbuf_r+0x84>
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	1ac0      	subs	r0, r0, r3
 800665a:	6963      	ldr	r3, [r4, #20]
 800665c:	b2f6      	uxtb	r6, r6
 800665e:	4283      	cmp	r3, r0
 8006660:	4637      	mov	r7, r6
 8006662:	dc04      	bgt.n	800666e <__swbuf_r+0x42>
 8006664:	4621      	mov	r1, r4
 8006666:	4628      	mov	r0, r5
 8006668:	f000 f93c 	bl	80068e4 <_fflush_r>
 800666c:	bb30      	cbnz	r0, 80066bc <__swbuf_r+0x90>
 800666e:	68a3      	ldr	r3, [r4, #8]
 8006670:	3b01      	subs	r3, #1
 8006672:	60a3      	str	r3, [r4, #8]
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	6022      	str	r2, [r4, #0]
 800667a:	701e      	strb	r6, [r3, #0]
 800667c:	6963      	ldr	r3, [r4, #20]
 800667e:	3001      	adds	r0, #1
 8006680:	4283      	cmp	r3, r0
 8006682:	d004      	beq.n	800668e <__swbuf_r+0x62>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	07db      	lsls	r3, r3, #31
 8006688:	d506      	bpl.n	8006698 <__swbuf_r+0x6c>
 800668a:	2e0a      	cmp	r6, #10
 800668c:	d104      	bne.n	8006698 <__swbuf_r+0x6c>
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	f000 f927 	bl	80068e4 <_fflush_r>
 8006696:	b988      	cbnz	r0, 80066bc <__swbuf_r+0x90>
 8006698:	4638      	mov	r0, r7
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669c:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <__swbuf_r+0x9c>)
 800669e:	429c      	cmp	r4, r3
 80066a0:	d101      	bne.n	80066a6 <__swbuf_r+0x7a>
 80066a2:	68ac      	ldr	r4, [r5, #8]
 80066a4:	e7cf      	b.n	8006646 <__swbuf_r+0x1a>
 80066a6:	4b09      	ldr	r3, [pc, #36]	; (80066cc <__swbuf_r+0xa0>)
 80066a8:	429c      	cmp	r4, r3
 80066aa:	bf08      	it	eq
 80066ac:	68ec      	ldreq	r4, [r5, #12]
 80066ae:	e7ca      	b.n	8006646 <__swbuf_r+0x1a>
 80066b0:	4621      	mov	r1, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f81a 	bl	80066ec <__swsetup_r>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d0cb      	beq.n	8006654 <__swbuf_r+0x28>
 80066bc:	f04f 37ff 	mov.w	r7, #4294967295
 80066c0:	e7ea      	b.n	8006698 <__swbuf_r+0x6c>
 80066c2:	bf00      	nop
 80066c4:	0800720c 	.word	0x0800720c
 80066c8:	0800722c 	.word	0x0800722c
 80066cc:	080071ec 	.word	0x080071ec

080066d0 <__ascii_wctomb>:
 80066d0:	b149      	cbz	r1, 80066e6 <__ascii_wctomb+0x16>
 80066d2:	2aff      	cmp	r2, #255	; 0xff
 80066d4:	bf85      	ittet	hi
 80066d6:	238a      	movhi	r3, #138	; 0x8a
 80066d8:	6003      	strhi	r3, [r0, #0]
 80066da:	700a      	strbls	r2, [r1, #0]
 80066dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80066e0:	bf98      	it	ls
 80066e2:	2001      	movls	r0, #1
 80066e4:	4770      	bx	lr
 80066e6:	4608      	mov	r0, r1
 80066e8:	4770      	bx	lr
	...

080066ec <__swsetup_r>:
 80066ec:	4b32      	ldr	r3, [pc, #200]	; (80067b8 <__swsetup_r+0xcc>)
 80066ee:	b570      	push	{r4, r5, r6, lr}
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	4606      	mov	r6, r0
 80066f4:	460c      	mov	r4, r1
 80066f6:	b125      	cbz	r5, 8006702 <__swsetup_r+0x16>
 80066f8:	69ab      	ldr	r3, [r5, #24]
 80066fa:	b913      	cbnz	r3, 8006702 <__swsetup_r+0x16>
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 f985 	bl	8006a0c <__sinit>
 8006702:	4b2e      	ldr	r3, [pc, #184]	; (80067bc <__swsetup_r+0xd0>)
 8006704:	429c      	cmp	r4, r3
 8006706:	d10f      	bne.n	8006728 <__swsetup_r+0x3c>
 8006708:	686c      	ldr	r4, [r5, #4]
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006710:	0719      	lsls	r1, r3, #28
 8006712:	d42c      	bmi.n	800676e <__swsetup_r+0x82>
 8006714:	06dd      	lsls	r5, r3, #27
 8006716:	d411      	bmi.n	800673c <__swsetup_r+0x50>
 8006718:	2309      	movs	r3, #9
 800671a:	6033      	str	r3, [r6, #0]
 800671c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	f04f 30ff 	mov.w	r0, #4294967295
 8006726:	e03e      	b.n	80067a6 <__swsetup_r+0xba>
 8006728:	4b25      	ldr	r3, [pc, #148]	; (80067c0 <__swsetup_r+0xd4>)
 800672a:	429c      	cmp	r4, r3
 800672c:	d101      	bne.n	8006732 <__swsetup_r+0x46>
 800672e:	68ac      	ldr	r4, [r5, #8]
 8006730:	e7eb      	b.n	800670a <__swsetup_r+0x1e>
 8006732:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <__swsetup_r+0xd8>)
 8006734:	429c      	cmp	r4, r3
 8006736:	bf08      	it	eq
 8006738:	68ec      	ldreq	r4, [r5, #12]
 800673a:	e7e6      	b.n	800670a <__swsetup_r+0x1e>
 800673c:	0758      	lsls	r0, r3, #29
 800673e:	d512      	bpl.n	8006766 <__swsetup_r+0x7a>
 8006740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006742:	b141      	cbz	r1, 8006756 <__swsetup_r+0x6a>
 8006744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006748:	4299      	cmp	r1, r3
 800674a:	d002      	beq.n	8006752 <__swsetup_r+0x66>
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff fb31 	bl	8005db4 <_free_r>
 8006752:	2300      	movs	r3, #0
 8006754:	6363      	str	r3, [r4, #52]	; 0x34
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800675c:	81a3      	strh	r3, [r4, #12]
 800675e:	2300      	movs	r3, #0
 8006760:	6063      	str	r3, [r4, #4]
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	f043 0308 	orr.w	r3, r3, #8
 800676c:	81a3      	strh	r3, [r4, #12]
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	b94b      	cbnz	r3, 8006786 <__swsetup_r+0x9a>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677c:	d003      	beq.n	8006786 <__swsetup_r+0x9a>
 800677e:	4621      	mov	r1, r4
 8006780:	4630      	mov	r0, r6
 8006782:	f000 fa09 	bl	8006b98 <__smakebuf_r>
 8006786:	89a0      	ldrh	r0, [r4, #12]
 8006788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800678c:	f010 0301 	ands.w	r3, r0, #1
 8006790:	d00a      	beq.n	80067a8 <__swsetup_r+0xbc>
 8006792:	2300      	movs	r3, #0
 8006794:	60a3      	str	r3, [r4, #8]
 8006796:	6963      	ldr	r3, [r4, #20]
 8006798:	425b      	negs	r3, r3
 800679a:	61a3      	str	r3, [r4, #24]
 800679c:	6923      	ldr	r3, [r4, #16]
 800679e:	b943      	cbnz	r3, 80067b2 <__swsetup_r+0xc6>
 80067a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067a4:	d1ba      	bne.n	800671c <__swsetup_r+0x30>
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	0781      	lsls	r1, r0, #30
 80067aa:	bf58      	it	pl
 80067ac:	6963      	ldrpl	r3, [r4, #20]
 80067ae:	60a3      	str	r3, [r4, #8]
 80067b0:	e7f4      	b.n	800679c <__swsetup_r+0xb0>
 80067b2:	2000      	movs	r0, #0
 80067b4:	e7f7      	b.n	80067a6 <__swsetup_r+0xba>
 80067b6:	bf00      	nop
 80067b8:	2000000c 	.word	0x2000000c
 80067bc:	0800720c 	.word	0x0800720c
 80067c0:	0800722c 	.word	0x0800722c
 80067c4:	080071ec 	.word	0x080071ec

080067c8 <abort>:
 80067c8:	b508      	push	{r3, lr}
 80067ca:	2006      	movs	r0, #6
 80067cc:	f000 fa54 	bl	8006c78 <raise>
 80067d0:	2001      	movs	r0, #1
 80067d2:	f7fa ff0f 	bl	80015f4 <_exit>
	...

080067d8 <__sflush_r>:
 80067d8:	898a      	ldrh	r2, [r1, #12]
 80067da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067de:	4605      	mov	r5, r0
 80067e0:	0710      	lsls	r0, r2, #28
 80067e2:	460c      	mov	r4, r1
 80067e4:	d458      	bmi.n	8006898 <__sflush_r+0xc0>
 80067e6:	684b      	ldr	r3, [r1, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	dc05      	bgt.n	80067f8 <__sflush_r+0x20>
 80067ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dc02      	bgt.n	80067f8 <__sflush_r+0x20>
 80067f2:	2000      	movs	r0, #0
 80067f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067fa:	2e00      	cmp	r6, #0
 80067fc:	d0f9      	beq.n	80067f2 <__sflush_r+0x1a>
 80067fe:	2300      	movs	r3, #0
 8006800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006804:	682f      	ldr	r7, [r5, #0]
 8006806:	602b      	str	r3, [r5, #0]
 8006808:	d032      	beq.n	8006870 <__sflush_r+0x98>
 800680a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	075a      	lsls	r2, r3, #29
 8006810:	d505      	bpl.n	800681e <__sflush_r+0x46>
 8006812:	6863      	ldr	r3, [r4, #4]
 8006814:	1ac0      	subs	r0, r0, r3
 8006816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006818:	b10b      	cbz	r3, 800681e <__sflush_r+0x46>
 800681a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800681c:	1ac0      	subs	r0, r0, r3
 800681e:	2300      	movs	r3, #0
 8006820:	4602      	mov	r2, r0
 8006822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006824:	6a21      	ldr	r1, [r4, #32]
 8006826:	4628      	mov	r0, r5
 8006828:	47b0      	blx	r6
 800682a:	1c43      	adds	r3, r0, #1
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	d106      	bne.n	800683e <__sflush_r+0x66>
 8006830:	6829      	ldr	r1, [r5, #0]
 8006832:	291d      	cmp	r1, #29
 8006834:	d82c      	bhi.n	8006890 <__sflush_r+0xb8>
 8006836:	4a2a      	ldr	r2, [pc, #168]	; (80068e0 <__sflush_r+0x108>)
 8006838:	40ca      	lsrs	r2, r1
 800683a:	07d6      	lsls	r6, r2, #31
 800683c:	d528      	bpl.n	8006890 <__sflush_r+0xb8>
 800683e:	2200      	movs	r2, #0
 8006840:	6062      	str	r2, [r4, #4]
 8006842:	04d9      	lsls	r1, r3, #19
 8006844:	6922      	ldr	r2, [r4, #16]
 8006846:	6022      	str	r2, [r4, #0]
 8006848:	d504      	bpl.n	8006854 <__sflush_r+0x7c>
 800684a:	1c42      	adds	r2, r0, #1
 800684c:	d101      	bne.n	8006852 <__sflush_r+0x7a>
 800684e:	682b      	ldr	r3, [r5, #0]
 8006850:	b903      	cbnz	r3, 8006854 <__sflush_r+0x7c>
 8006852:	6560      	str	r0, [r4, #84]	; 0x54
 8006854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006856:	602f      	str	r7, [r5, #0]
 8006858:	2900      	cmp	r1, #0
 800685a:	d0ca      	beq.n	80067f2 <__sflush_r+0x1a>
 800685c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006860:	4299      	cmp	r1, r3
 8006862:	d002      	beq.n	800686a <__sflush_r+0x92>
 8006864:	4628      	mov	r0, r5
 8006866:	f7ff faa5 	bl	8005db4 <_free_r>
 800686a:	2000      	movs	r0, #0
 800686c:	6360      	str	r0, [r4, #52]	; 0x34
 800686e:	e7c1      	b.n	80067f4 <__sflush_r+0x1c>
 8006870:	6a21      	ldr	r1, [r4, #32]
 8006872:	2301      	movs	r3, #1
 8006874:	4628      	mov	r0, r5
 8006876:	47b0      	blx	r6
 8006878:	1c41      	adds	r1, r0, #1
 800687a:	d1c7      	bne.n	800680c <__sflush_r+0x34>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0c4      	beq.n	800680c <__sflush_r+0x34>
 8006882:	2b1d      	cmp	r3, #29
 8006884:	d001      	beq.n	800688a <__sflush_r+0xb2>
 8006886:	2b16      	cmp	r3, #22
 8006888:	d101      	bne.n	800688e <__sflush_r+0xb6>
 800688a:	602f      	str	r7, [r5, #0]
 800688c:	e7b1      	b.n	80067f2 <__sflush_r+0x1a>
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006894:	81a3      	strh	r3, [r4, #12]
 8006896:	e7ad      	b.n	80067f4 <__sflush_r+0x1c>
 8006898:	690f      	ldr	r7, [r1, #16]
 800689a:	2f00      	cmp	r7, #0
 800689c:	d0a9      	beq.n	80067f2 <__sflush_r+0x1a>
 800689e:	0793      	lsls	r3, r2, #30
 80068a0:	680e      	ldr	r6, [r1, #0]
 80068a2:	bf08      	it	eq
 80068a4:	694b      	ldreq	r3, [r1, #20]
 80068a6:	600f      	str	r7, [r1, #0]
 80068a8:	bf18      	it	ne
 80068aa:	2300      	movne	r3, #0
 80068ac:	eba6 0807 	sub.w	r8, r6, r7
 80068b0:	608b      	str	r3, [r1, #8]
 80068b2:	f1b8 0f00 	cmp.w	r8, #0
 80068b6:	dd9c      	ble.n	80067f2 <__sflush_r+0x1a>
 80068b8:	6a21      	ldr	r1, [r4, #32]
 80068ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068bc:	4643      	mov	r3, r8
 80068be:	463a      	mov	r2, r7
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b0      	blx	r6
 80068c4:	2800      	cmp	r0, #0
 80068c6:	dc06      	bgt.n	80068d6 <__sflush_r+0xfe>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295
 80068d4:	e78e      	b.n	80067f4 <__sflush_r+0x1c>
 80068d6:	4407      	add	r7, r0
 80068d8:	eba8 0800 	sub.w	r8, r8, r0
 80068dc:	e7e9      	b.n	80068b2 <__sflush_r+0xda>
 80068de:	bf00      	nop
 80068e0:	20400001 	.word	0x20400001

080068e4 <_fflush_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	690b      	ldr	r3, [r1, #16]
 80068e8:	4605      	mov	r5, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	b913      	cbnz	r3, 80068f4 <_fflush_r+0x10>
 80068ee:	2500      	movs	r5, #0
 80068f0:	4628      	mov	r0, r5
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	b118      	cbz	r0, 80068fe <_fflush_r+0x1a>
 80068f6:	6983      	ldr	r3, [r0, #24]
 80068f8:	b90b      	cbnz	r3, 80068fe <_fflush_r+0x1a>
 80068fa:	f000 f887 	bl	8006a0c <__sinit>
 80068fe:	4b14      	ldr	r3, [pc, #80]	; (8006950 <_fflush_r+0x6c>)
 8006900:	429c      	cmp	r4, r3
 8006902:	d11b      	bne.n	800693c <_fflush_r+0x58>
 8006904:	686c      	ldr	r4, [r5, #4]
 8006906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0ef      	beq.n	80068ee <_fflush_r+0xa>
 800690e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006910:	07d0      	lsls	r0, r2, #31
 8006912:	d404      	bmi.n	800691e <_fflush_r+0x3a>
 8006914:	0599      	lsls	r1, r3, #22
 8006916:	d402      	bmi.n	800691e <_fflush_r+0x3a>
 8006918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800691a:	f000 f915 	bl	8006b48 <__retarget_lock_acquire_recursive>
 800691e:	4628      	mov	r0, r5
 8006920:	4621      	mov	r1, r4
 8006922:	f7ff ff59 	bl	80067d8 <__sflush_r>
 8006926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006928:	07da      	lsls	r2, r3, #31
 800692a:	4605      	mov	r5, r0
 800692c:	d4e0      	bmi.n	80068f0 <_fflush_r+0xc>
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	059b      	lsls	r3, r3, #22
 8006932:	d4dd      	bmi.n	80068f0 <_fflush_r+0xc>
 8006934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006936:	f000 f908 	bl	8006b4a <__retarget_lock_release_recursive>
 800693a:	e7d9      	b.n	80068f0 <_fflush_r+0xc>
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <_fflush_r+0x70>)
 800693e:	429c      	cmp	r4, r3
 8006940:	d101      	bne.n	8006946 <_fflush_r+0x62>
 8006942:	68ac      	ldr	r4, [r5, #8]
 8006944:	e7df      	b.n	8006906 <_fflush_r+0x22>
 8006946:	4b04      	ldr	r3, [pc, #16]	; (8006958 <_fflush_r+0x74>)
 8006948:	429c      	cmp	r4, r3
 800694a:	bf08      	it	eq
 800694c:	68ec      	ldreq	r4, [r5, #12]
 800694e:	e7da      	b.n	8006906 <_fflush_r+0x22>
 8006950:	0800720c 	.word	0x0800720c
 8006954:	0800722c 	.word	0x0800722c
 8006958:	080071ec 	.word	0x080071ec

0800695c <std>:
 800695c:	2300      	movs	r3, #0
 800695e:	b510      	push	{r4, lr}
 8006960:	4604      	mov	r4, r0
 8006962:	e9c0 3300 	strd	r3, r3, [r0]
 8006966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800696a:	6083      	str	r3, [r0, #8]
 800696c:	8181      	strh	r1, [r0, #12]
 800696e:	6643      	str	r3, [r0, #100]	; 0x64
 8006970:	81c2      	strh	r2, [r0, #14]
 8006972:	6183      	str	r3, [r0, #24]
 8006974:	4619      	mov	r1, r3
 8006976:	2208      	movs	r2, #8
 8006978:	305c      	adds	r0, #92	; 0x5c
 800697a:	f7fd fb5b 	bl	8004034 <memset>
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <std+0x38>)
 8006980:	6263      	str	r3, [r4, #36]	; 0x24
 8006982:	4b05      	ldr	r3, [pc, #20]	; (8006998 <std+0x3c>)
 8006984:	62a3      	str	r3, [r4, #40]	; 0x28
 8006986:	4b05      	ldr	r3, [pc, #20]	; (800699c <std+0x40>)
 8006988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800698a:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <std+0x44>)
 800698c:	6224      	str	r4, [r4, #32]
 800698e:	6323      	str	r3, [r4, #48]	; 0x30
 8006990:	bd10      	pop	{r4, pc}
 8006992:	bf00      	nop
 8006994:	08006cb1 	.word	0x08006cb1
 8006998:	08006cd3 	.word	0x08006cd3
 800699c:	08006d0b 	.word	0x08006d0b
 80069a0:	08006d2f 	.word	0x08006d2f

080069a4 <_cleanup_r>:
 80069a4:	4901      	ldr	r1, [pc, #4]	; (80069ac <_cleanup_r+0x8>)
 80069a6:	f000 b8af 	b.w	8006b08 <_fwalk_reent>
 80069aa:	bf00      	nop
 80069ac:	080068e5 	.word	0x080068e5

080069b0 <__sfmoreglue>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	2268      	movs	r2, #104	; 0x68
 80069b4:	1e4d      	subs	r5, r1, #1
 80069b6:	4355      	muls	r5, r2
 80069b8:	460e      	mov	r6, r1
 80069ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069be:	f7ff fa65 	bl	8005e8c <_malloc_r>
 80069c2:	4604      	mov	r4, r0
 80069c4:	b140      	cbz	r0, 80069d8 <__sfmoreglue+0x28>
 80069c6:	2100      	movs	r1, #0
 80069c8:	e9c0 1600 	strd	r1, r6, [r0]
 80069cc:	300c      	adds	r0, #12
 80069ce:	60a0      	str	r0, [r4, #8]
 80069d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069d4:	f7fd fb2e 	bl	8004034 <memset>
 80069d8:	4620      	mov	r0, r4
 80069da:	bd70      	pop	{r4, r5, r6, pc}

080069dc <__sfp_lock_acquire>:
 80069dc:	4801      	ldr	r0, [pc, #4]	; (80069e4 <__sfp_lock_acquire+0x8>)
 80069de:	f000 b8b3 	b.w	8006b48 <__retarget_lock_acquire_recursive>
 80069e2:	bf00      	nop
 80069e4:	2000032d 	.word	0x2000032d

080069e8 <__sfp_lock_release>:
 80069e8:	4801      	ldr	r0, [pc, #4]	; (80069f0 <__sfp_lock_release+0x8>)
 80069ea:	f000 b8ae 	b.w	8006b4a <__retarget_lock_release_recursive>
 80069ee:	bf00      	nop
 80069f0:	2000032d 	.word	0x2000032d

080069f4 <__sinit_lock_acquire>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__sinit_lock_acquire+0x8>)
 80069f6:	f000 b8a7 	b.w	8006b48 <__retarget_lock_acquire_recursive>
 80069fa:	bf00      	nop
 80069fc:	2000032e 	.word	0x2000032e

08006a00 <__sinit_lock_release>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__sinit_lock_release+0x8>)
 8006a02:	f000 b8a2 	b.w	8006b4a <__retarget_lock_release_recursive>
 8006a06:	bf00      	nop
 8006a08:	2000032e 	.word	0x2000032e

08006a0c <__sinit>:
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	4604      	mov	r4, r0
 8006a10:	f7ff fff0 	bl	80069f4 <__sinit_lock_acquire>
 8006a14:	69a3      	ldr	r3, [r4, #24]
 8006a16:	b11b      	cbz	r3, 8006a20 <__sinit+0x14>
 8006a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1c:	f7ff bff0 	b.w	8006a00 <__sinit_lock_release>
 8006a20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a24:	6523      	str	r3, [r4, #80]	; 0x50
 8006a26:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <__sinit+0x68>)
 8006a28:	4a13      	ldr	r2, [pc, #76]	; (8006a78 <__sinit+0x6c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	bf04      	itt	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	61a3      	streq	r3, [r4, #24]
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 f820 	bl	8006a7c <__sfp>
 8006a3c:	6060      	str	r0, [r4, #4]
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 f81c 	bl	8006a7c <__sfp>
 8006a44:	60a0      	str	r0, [r4, #8]
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 f818 	bl	8006a7c <__sfp>
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	60e0      	str	r0, [r4, #12]
 8006a50:	2104      	movs	r1, #4
 8006a52:	6860      	ldr	r0, [r4, #4]
 8006a54:	f7ff ff82 	bl	800695c <std>
 8006a58:	68a0      	ldr	r0, [r4, #8]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	2109      	movs	r1, #9
 8006a5e:	f7ff ff7d 	bl	800695c <std>
 8006a62:	68e0      	ldr	r0, [r4, #12]
 8006a64:	2202      	movs	r2, #2
 8006a66:	2112      	movs	r1, #18
 8006a68:	f7ff ff78 	bl	800695c <std>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	61a3      	str	r3, [r4, #24]
 8006a70:	e7d2      	b.n	8006a18 <__sinit+0xc>
 8006a72:	bf00      	nop
 8006a74:	08006e70 	.word	0x08006e70
 8006a78:	080069a5 	.word	0x080069a5

08006a7c <__sfp>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	4607      	mov	r7, r0
 8006a80:	f7ff ffac 	bl	80069dc <__sfp_lock_acquire>
 8006a84:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <__sfp+0x84>)
 8006a86:	681e      	ldr	r6, [r3, #0]
 8006a88:	69b3      	ldr	r3, [r6, #24]
 8006a8a:	b913      	cbnz	r3, 8006a92 <__sfp+0x16>
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f7ff ffbd 	bl	8006a0c <__sinit>
 8006a92:	3648      	adds	r6, #72	; 0x48
 8006a94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	d503      	bpl.n	8006aa4 <__sfp+0x28>
 8006a9c:	6833      	ldr	r3, [r6, #0]
 8006a9e:	b30b      	cbz	r3, 8006ae4 <__sfp+0x68>
 8006aa0:	6836      	ldr	r6, [r6, #0]
 8006aa2:	e7f7      	b.n	8006a94 <__sfp+0x18>
 8006aa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006aa8:	b9d5      	cbnz	r5, 8006ae0 <__sfp+0x64>
 8006aaa:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <__sfp+0x88>)
 8006aac:	60e3      	str	r3, [r4, #12]
 8006aae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ab2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ab4:	f000 f847 	bl	8006b46 <__retarget_lock_init_recursive>
 8006ab8:	f7ff ff96 	bl	80069e8 <__sfp_lock_release>
 8006abc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ac0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ac4:	6025      	str	r5, [r4, #0]
 8006ac6:	61a5      	str	r5, [r4, #24]
 8006ac8:	2208      	movs	r2, #8
 8006aca:	4629      	mov	r1, r5
 8006acc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ad0:	f7fd fab0 	bl	8004034 <memset>
 8006ad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006adc:	4620      	mov	r0, r4
 8006ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae0:	3468      	adds	r4, #104	; 0x68
 8006ae2:	e7d9      	b.n	8006a98 <__sfp+0x1c>
 8006ae4:	2104      	movs	r1, #4
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	f7ff ff62 	bl	80069b0 <__sfmoreglue>
 8006aec:	4604      	mov	r4, r0
 8006aee:	6030      	str	r0, [r6, #0]
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d1d5      	bne.n	8006aa0 <__sfp+0x24>
 8006af4:	f7ff ff78 	bl	80069e8 <__sfp_lock_release>
 8006af8:	230c      	movs	r3, #12
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	e7ee      	b.n	8006adc <__sfp+0x60>
 8006afe:	bf00      	nop
 8006b00:	08006e70 	.word	0x08006e70
 8006b04:	ffff0001 	.word	0xffff0001

08006b08 <_fwalk_reent>:
 8006b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	4688      	mov	r8, r1
 8006b10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b14:	2700      	movs	r7, #0
 8006b16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b1a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b1e:	d505      	bpl.n	8006b2c <_fwalk_reent+0x24>
 8006b20:	6824      	ldr	r4, [r4, #0]
 8006b22:	2c00      	cmp	r4, #0
 8006b24:	d1f7      	bne.n	8006b16 <_fwalk_reent+0xe>
 8006b26:	4638      	mov	r0, r7
 8006b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b2c:	89ab      	ldrh	r3, [r5, #12]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d907      	bls.n	8006b42 <_fwalk_reent+0x3a>
 8006b32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b36:	3301      	adds	r3, #1
 8006b38:	d003      	beq.n	8006b42 <_fwalk_reent+0x3a>
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	47c0      	blx	r8
 8006b40:	4307      	orrs	r7, r0
 8006b42:	3568      	adds	r5, #104	; 0x68
 8006b44:	e7e9      	b.n	8006b1a <_fwalk_reent+0x12>

08006b46 <__retarget_lock_init_recursive>:
 8006b46:	4770      	bx	lr

08006b48 <__retarget_lock_acquire_recursive>:
 8006b48:	4770      	bx	lr

08006b4a <__retarget_lock_release_recursive>:
 8006b4a:	4770      	bx	lr

08006b4c <__swhatbuf_r>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	460e      	mov	r6, r1
 8006b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b54:	2900      	cmp	r1, #0
 8006b56:	b096      	sub	sp, #88	; 0x58
 8006b58:	4614      	mov	r4, r2
 8006b5a:	461d      	mov	r5, r3
 8006b5c:	da08      	bge.n	8006b70 <__swhatbuf_r+0x24>
 8006b5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	602a      	str	r2, [r5, #0]
 8006b66:	061a      	lsls	r2, r3, #24
 8006b68:	d410      	bmi.n	8006b8c <__swhatbuf_r+0x40>
 8006b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b6e:	e00e      	b.n	8006b8e <__swhatbuf_r+0x42>
 8006b70:	466a      	mov	r2, sp
 8006b72:	f000 f903 	bl	8006d7c <_fstat_r>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	dbf1      	blt.n	8006b5e <__swhatbuf_r+0x12>
 8006b7a:	9a01      	ldr	r2, [sp, #4]
 8006b7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b84:	425a      	negs	r2, r3
 8006b86:	415a      	adcs	r2, r3
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	e7ee      	b.n	8006b6a <__swhatbuf_r+0x1e>
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	2000      	movs	r0, #0
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	b016      	add	sp, #88	; 0x58
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b98 <__smakebuf_r>:
 8006b98:	898b      	ldrh	r3, [r1, #12]
 8006b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b9c:	079d      	lsls	r5, r3, #30
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	d507      	bpl.n	8006bb4 <__smakebuf_r+0x1c>
 8006ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	6123      	str	r3, [r4, #16]
 8006bac:	2301      	movs	r3, #1
 8006bae:	6163      	str	r3, [r4, #20]
 8006bb0:	b002      	add	sp, #8
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
 8006bb4:	ab01      	add	r3, sp, #4
 8006bb6:	466a      	mov	r2, sp
 8006bb8:	f7ff ffc8 	bl	8006b4c <__swhatbuf_r>
 8006bbc:	9900      	ldr	r1, [sp, #0]
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f7ff f963 	bl	8005e8c <_malloc_r>
 8006bc6:	b948      	cbnz	r0, 8006bdc <__smakebuf_r+0x44>
 8006bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bcc:	059a      	lsls	r2, r3, #22
 8006bce:	d4ef      	bmi.n	8006bb0 <__smakebuf_r+0x18>
 8006bd0:	f023 0303 	bic.w	r3, r3, #3
 8006bd4:	f043 0302 	orr.w	r3, r3, #2
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	e7e3      	b.n	8006ba4 <__smakebuf_r+0xc>
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <__smakebuf_r+0x7c>)
 8006bde:	62b3      	str	r3, [r6, #40]	; 0x28
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	6020      	str	r0, [r4, #0]
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	9b00      	ldr	r3, [sp, #0]
 8006bec:	6163      	str	r3, [r4, #20]
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	6120      	str	r0, [r4, #16]
 8006bf2:	b15b      	cbz	r3, 8006c0c <__smakebuf_r+0x74>
 8006bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 f8d1 	bl	8006da0 <_isatty_r>
 8006bfe:	b128      	cbz	r0, 8006c0c <__smakebuf_r+0x74>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	89a0      	ldrh	r0, [r4, #12]
 8006c0e:	4305      	orrs	r5, r0
 8006c10:	81a5      	strh	r5, [r4, #12]
 8006c12:	e7cd      	b.n	8006bb0 <__smakebuf_r+0x18>
 8006c14:	080069a5 	.word	0x080069a5

08006c18 <_malloc_usable_size_r>:
 8006c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c1c:	1f18      	subs	r0, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bfbc      	itt	lt
 8006c22:	580b      	ldrlt	r3, [r1, r0]
 8006c24:	18c0      	addlt	r0, r0, r3
 8006c26:	4770      	bx	lr

08006c28 <_raise_r>:
 8006c28:	291f      	cmp	r1, #31
 8006c2a:	b538      	push	{r3, r4, r5, lr}
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	460d      	mov	r5, r1
 8006c30:	d904      	bls.n	8006c3c <_raise_r+0x14>
 8006c32:	2316      	movs	r3, #22
 8006c34:	6003      	str	r3, [r0, #0]
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c3e:	b112      	cbz	r2, 8006c46 <_raise_r+0x1e>
 8006c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c44:	b94b      	cbnz	r3, 8006c5a <_raise_r+0x32>
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f830 	bl	8006cac <_getpid_r>
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	4601      	mov	r1, r0
 8006c50:	4620      	mov	r0, r4
 8006c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c56:	f000 b817 	b.w	8006c88 <_kill_r>
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d00a      	beq.n	8006c74 <_raise_r+0x4c>
 8006c5e:	1c59      	adds	r1, r3, #1
 8006c60:	d103      	bne.n	8006c6a <_raise_r+0x42>
 8006c62:	2316      	movs	r3, #22
 8006c64:	6003      	str	r3, [r0, #0]
 8006c66:	2001      	movs	r0, #1
 8006c68:	e7e7      	b.n	8006c3a <_raise_r+0x12>
 8006c6a:	2400      	movs	r4, #0
 8006c6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c70:	4628      	mov	r0, r5
 8006c72:	4798      	blx	r3
 8006c74:	2000      	movs	r0, #0
 8006c76:	e7e0      	b.n	8006c3a <_raise_r+0x12>

08006c78 <raise>:
 8006c78:	4b02      	ldr	r3, [pc, #8]	; (8006c84 <raise+0xc>)
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	f7ff bfd3 	b.w	8006c28 <_raise_r>
 8006c82:	bf00      	nop
 8006c84:	2000000c 	.word	0x2000000c

08006c88 <_kill_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	; (8006ca8 <_kill_r+0x20>)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	602b      	str	r3, [r5, #0]
 8006c96:	f7fa fc9d 	bl	80015d4 <_kill>
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	d102      	bne.n	8006ca4 <_kill_r+0x1c>
 8006c9e:	682b      	ldr	r3, [r5, #0]
 8006ca0:	b103      	cbz	r3, 8006ca4 <_kill_r+0x1c>
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	bd38      	pop	{r3, r4, r5, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000328 	.word	0x20000328

08006cac <_getpid_r>:
 8006cac:	f7fa bc8a 	b.w	80015c4 <_getpid>

08006cb0 <__sread>:
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb8:	f000 f894 	bl	8006de4 <_read_r>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	bfab      	itete	ge
 8006cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc4:	181b      	addge	r3, r3, r0
 8006cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cca:	bfac      	ite	ge
 8006ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cce:	81a3      	strhlt	r3, [r4, #12]
 8006cd0:	bd10      	pop	{r4, pc}

08006cd2 <__swrite>:
 8006cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	898b      	ldrh	r3, [r1, #12]
 8006cda:	05db      	lsls	r3, r3, #23
 8006cdc:	4605      	mov	r5, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	d505      	bpl.n	8006cf0 <__swrite+0x1e>
 8006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce8:	2302      	movs	r3, #2
 8006cea:	2200      	movs	r2, #0
 8006cec:	f000 f868 	bl	8006dc0 <_lseek_r>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	463b      	mov	r3, r7
 8006d00:	4628      	mov	r0, r5
 8006d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d06:	f000 b817 	b.w	8006d38 <_write_r>

08006d0a <__sseek>:
 8006d0a:	b510      	push	{r4, lr}
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d12:	f000 f855 	bl	8006dc0 <_lseek_r>
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	bf15      	itete	ne
 8006d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d26:	81a3      	strheq	r3, [r4, #12]
 8006d28:	bf18      	it	ne
 8006d2a:	81a3      	strhne	r3, [r4, #12]
 8006d2c:	bd10      	pop	{r4, pc}

08006d2e <__sclose>:
 8006d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d32:	f000 b813 	b.w	8006d5c <_close_r>
	...

08006d38 <_write_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4d07      	ldr	r5, [pc, #28]	; (8006d58 <_write_r+0x20>)
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	4608      	mov	r0, r1
 8006d40:	4611      	mov	r1, r2
 8006d42:	2200      	movs	r2, #0
 8006d44:	602a      	str	r2, [r5, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f7fa fc7b 	bl	8001642 <_write>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d102      	bne.n	8006d56 <_write_r+0x1e>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	b103      	cbz	r3, 8006d56 <_write_r+0x1e>
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	20000328 	.word	0x20000328

08006d5c <_close_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4d06      	ldr	r5, [pc, #24]	; (8006d78 <_close_r+0x1c>)
 8006d60:	2300      	movs	r3, #0
 8006d62:	4604      	mov	r4, r0
 8006d64:	4608      	mov	r0, r1
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	f7fa fc87 	bl	800167a <_close>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d102      	bne.n	8006d76 <_close_r+0x1a>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b103      	cbz	r3, 8006d76 <_close_r+0x1a>
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	20000328 	.word	0x20000328

08006d7c <_fstat_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d07      	ldr	r5, [pc, #28]	; (8006d9c <_fstat_r+0x20>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	4611      	mov	r1, r2
 8006d88:	602b      	str	r3, [r5, #0]
 8006d8a:	f7fa fc82 	bl	8001692 <_fstat>
 8006d8e:	1c43      	adds	r3, r0, #1
 8006d90:	d102      	bne.n	8006d98 <_fstat_r+0x1c>
 8006d92:	682b      	ldr	r3, [r5, #0]
 8006d94:	b103      	cbz	r3, 8006d98 <_fstat_r+0x1c>
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	bd38      	pop	{r3, r4, r5, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000328 	.word	0x20000328

08006da0 <_isatty_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d06      	ldr	r5, [pc, #24]	; (8006dbc <_isatty_r+0x1c>)
 8006da4:	2300      	movs	r3, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	f7fa fc81 	bl	80016b2 <_isatty>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_isatty_r+0x1a>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_isatty_r+0x1a>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20000328 	.word	0x20000328

08006dc0 <_lseek_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	; (8006de0 <_lseek_r+0x20>)
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	4611      	mov	r1, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f7fa fc7a 	bl	80016c8 <_lseek>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_lseek_r+0x1e>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_lseek_r+0x1e>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20000328 	.word	0x20000328

08006de4 <_read_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d07      	ldr	r5, [pc, #28]	; (8006e04 <_read_r+0x20>)
 8006de8:	4604      	mov	r4, r0
 8006dea:	4608      	mov	r0, r1
 8006dec:	4611      	mov	r1, r2
 8006dee:	2200      	movs	r2, #0
 8006df0:	602a      	str	r2, [r5, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f7fa fc08 	bl	8001608 <_read>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_read_r+0x1e>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_read_r+0x1e>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	20000328 	.word	0x20000328

08006e08 <_init>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr

08006e14 <_fini>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr
