
qmc_LLM_Model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080095a0  080095a0  0000a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a0  080096a0  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096a4  080096a4  0000a6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080096a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b060  2**0
                  CONTENTS
 10 .bss          00004cbc  20000060  20000060  0000b060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004d1c  20004d1c  0000b060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157ae  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030b1  00000000  00000000  0002083e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  000238f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0c  00000000  00000000  00024b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000322d  00000000  00000000  00025914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001530b  00000000  00000000  00028b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de9fb  00000000  00000000  0003de4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c847  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050b8  00000000  00000000  0011c88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00121944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009588 	.word	0x08009588

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08009588 	.word	0x08009588

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <QMC_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void QMC_init(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af04      	add	r7, sp, #16
	uint8_t reset;

	reset = 0x1D;
 80005d2:	231d      	movs	r3, #29
 80005d4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,DEV_ADDR,QMC_CONT,1,&reset,1,1000);
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2301      	movs	r3, #1
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	2209      	movs	r2, #9
 80005e8:	211a      	movs	r1, #26
 80005ea:	480b      	ldr	r0, [pc, #44]	@ (8000618 <QMC_init+0x4c>)
 80005ec:	f001 f9da 	bl	80019a4 <HAL_I2C_Mem_Write>

	reset = 0x01;
 80005f0:	2301      	movs	r3, #1
 80005f2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,DEV_ADDR,QMC_SR,1,&reset,1,1000);
 80005f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	220b      	movs	r2, #11
 8000606:	211a      	movs	r1, #26
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <QMC_init+0x4c>)
 800060a:	f001 f9cb 	bl	80019a4 <HAL_I2C_Mem_Write>

}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000018c 	.word	0x2000018c

0800061c <QMC_Read>:

void QMC_Read(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af04      	add	r7, sp, #16
	uint8_t flag;
	HAL_I2C_Mem_Read(&hi2c1,DEV_ADDR,QMC_STA,1,&flag,1,1000);
 8000622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2301      	movs	r3, #1
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	2206      	movs	r2, #6
 8000634:	211a      	movs	r1, #26
 8000636:	480b      	ldr	r0, [pc, #44]	@ (8000664 <QMC_Read+0x48>)
 8000638:	f001 faae 	bl	8001b98 <HAL_I2C_Mem_Read>
	if(flag & 0x01){
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d009      	beq.n	800065a <QMC_Read+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1,DEV_ADDR,DATA_OUT,1,data,6);
 8000646:	2306      	movs	r3, #6
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <QMC_Read+0x4c>)
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	2200      	movs	r2, #0
 8000652:	211a      	movs	r1, #26
 8000654:	4803      	ldr	r0, [pc, #12]	@ (8000664 <QMC_Read+0x48>)
 8000656:	f001 fcd1 	bl	8001ffc <HAL_I2C_Mem_Read_IT>
	}
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000018c 	.word	0x2000018c
 8000668:	20000084 	.word	0x20000084

0800066c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a16      	ldr	r2, [pc, #88]	@ (80006d4 <HAL_I2C_MemRxCpltCallback+0x68>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d123      	bne.n	80006c6 <HAL_I2C_MemRxCpltCallback+0x5a>
		 X_OUT = (int16_t)(data[1] << 8)|data[0];
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	b21b      	sxth	r3, r3
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b21a      	sxth	r2, r3
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b21b      	sxth	r3, r3
 800068e:	4313      	orrs	r3, r2
 8000690:	b21a      	sxth	r2, r3
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <HAL_I2C_MemRxCpltCallback+0x70>)
 8000694:	801a      	strh	r2, [r3, #0]
	     Y_OUT = (int16_t)(data[3] << 8)|data[2];
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8000698:	78db      	ldrb	r3, [r3, #3]
 800069a:	b21b      	sxth	r3, r3
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80006a2:	789b      	ldrb	r3, [r3, #2]
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <HAL_I2C_MemRxCpltCallback+0x74>)
 80006ac:	801a      	strh	r2, [r3, #0]
	     Z_OUT = (int16_t)(data[5] << 8)|data[4];
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80006b0:	795b      	ldrb	r3, [r3, #5]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <HAL_I2C_MemRxCpltCallback+0x78>)
 80006c4:	801a      	strh	r2, [r3, #0]

	}
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40005400 	.word	0x40005400
 80006d8:	20000084 	.word	0x20000084
 80006dc:	2000007c 	.word	0x2000007c
 80006e0:	2000007e 	.word	0x2000007e
 80006e4:	20000080 	.word	0x20000080

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fc16 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f838 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 f934 	bl	8000960 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006f8:	f000 f8de 	bl	80008b8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80006fc:	f000 f89c 	bl	8000838 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000700:	f000 f904 	bl	800090c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000704:	f005 fb34 	bl	8005d70 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartQueue01 */
  uartQueue01Handle = osMessageQueueNew (16, sizeof(buf), &uartQueue01_attributes);
 8000708:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <main+0x5c>)
 800070a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800070e:	2010      	movs	r0, #16
 8000710:	f005 fc25 	bl	8005f5e <osMessageQueueNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a0c      	ldr	r2, [pc, #48]	@ (8000748 <main+0x60>)
 8000718:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of qmcTask_Init */
  qmcTask_InitHandle = osThreadNew(qmcTask, NULL, &qmcTask_Init_attributes);
 800071a:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <main+0x64>)
 800071c:	2100      	movs	r1, #0
 800071e:	480c      	ldr	r0, [pc, #48]	@ (8000750 <main+0x68>)
 8000720:	f005 fb70 	bl	8005e04 <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <main+0x6c>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of BTTask_Init */
  BTTask_InitHandle = osThreadNew(BTTask, NULL, &BTTask_Init_attributes);
 800072a:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <main+0x70>)
 800072c:	2100      	movs	r1, #0
 800072e:	480b      	ldr	r0, [pc, #44]	@ (800075c <main+0x74>)
 8000730:	f005 fb68 	bl	8005e04 <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <main+0x78>)
 8000738:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800073a:	f005 fb3d 	bl	8005db8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073e:	bf00      	nop
 8000740:	e7fd      	b.n	800073e <main+0x56>
 8000742:	bf00      	nop
 8000744:	08009634 	.word	0x08009634
 8000748:	20000278 	.word	0x20000278
 800074c:	080095ec 	.word	0x080095ec
 8000750:	08000add 	.word	0x08000add
 8000754:	20000270 	.word	0x20000270
 8000758:	08009610 	.word	0x08009610
 800075c:	08000b49 	.word	0x08000b49
 8000760:	20000274 	.word	0x20000274

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	@ 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f008 fa8a 	bl	8008c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	@ (8000830 <SystemClock_Config+0xcc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	@ 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <SystemClock_Config+0xd0>)
 80007ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007d8:	23a8      	movs	r3, #168	@ 0xa8
 80007da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e0:	2307      	movs	r3, #7
 80007e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fddd 	bl	80043a8 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f4:	f000 f9ca 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000804:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2105      	movs	r1, #5
 8000816:	4618      	mov	r0, r3
 8000818:	f004 f83e 	bl	8004898 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000822:	f000 f9b3 	bl	8000b8c <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	@ 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_I2C1_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <MX_I2C1_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <MX_I2C1_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000856:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000876:	f000 ff3b 	bl	80016f0 <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 f984 	bl	8000b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4809      	ldr	r0, [pc, #36]	@ (80008ac <MX_I2C1_Init+0x74>)
 8000888:	f003 fd13 	bl	80042b2 <HAL_I2CEx_ConfigAnalogFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000892:	f000 f97b 	bl	8000b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_I2C1_Init+0x74>)
 800089a:	f003 fd46 	bl	800432a <HAL_I2CEx_ConfigDigitalFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008a4:	f000 f972 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000018c 	.word	0x2000018c
 80008b0:	40005400 	.word	0x40005400
 80008b4:	000186a0 	.word	0x000186a0

080008b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_USART3_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <MX_USART3_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <MX_USART3_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_USART3_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_USART3_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_USART3_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_USART3_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <MX_USART3_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_USART3_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f004 f9f2 	bl	8004cd8 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f947 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001e0 	.word	0x200001e0
 8000908:	40004800 	.word	0x40004800

0800090c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_USART6_UART_Init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	@ (800095c <MX_USART6_UART_Init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <MX_USART6_UART_Init+0x4c>)
 8000918:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800091c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_USART6_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_USART6_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <MX_USART6_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_USART6_UART_Init+0x4c>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <MX_USART6_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_USART6_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_USART6_UART_Init+0x4c>)
 8000944:	f004 f9c8 	bl	8004cd8 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800094e:	f000 f91d 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000228 	.word	0x20000228
 800095c:	40011400 	.word	0x40011400

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	@ 0x30
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	4b54      	ldr	r3, [pc, #336]	@ (8000acc <MX_GPIO_Init+0x16c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a53      	ldr	r2, [pc, #332]	@ (8000acc <MX_GPIO_Init+0x16c>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b51      	ldr	r3, [pc, #324]	@ (8000acc <MX_GPIO_Init+0x16c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	4b4d      	ldr	r3, [pc, #308]	@ (8000acc <MX_GPIO_Init+0x16c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a4c      	ldr	r2, [pc, #304]	@ (8000acc <MX_GPIO_Init+0x16c>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b4a      	ldr	r3, [pc, #296]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b46      	ldr	r3, [pc, #280]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a45      	ldr	r2, [pc, #276]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b43      	ldr	r3, [pc, #268]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b3f      	ldr	r3, [pc, #252]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a3e      	ldr	r2, [pc, #248]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b3c      	ldr	r3, [pc, #240]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b38      	ldr	r3, [pc, #224]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a37      	ldr	r2, [pc, #220]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b35      	ldr	r3, [pc, #212]	@ (8000acc <MX_GPIO_Init+0x16c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <MX_GPIO_Init+0x16c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a30      	ldr	r2, [pc, #192]	@ (8000acc <MX_GPIO_Init+0x16c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <MX_GPIO_Init+0x16c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a24:	482a      	ldr	r0, [pc, #168]	@ (8000ad0 <MX_GPIO_Init+0x170>)
 8000a26:	f000 fe49 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2140      	movs	r1, #64	@ 0x40
 8000a2e:	4829      	ldr	r0, [pc, #164]	@ (8000ad4 <MX_GPIO_Init+0x174>)
 8000a30:	f000 fe44 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4823      	ldr	r0, [pc, #140]	@ (8000ad8 <MX_GPIO_Init+0x178>)
 8000a4c:	f000 fc8a 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a50:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <MX_GPIO_Init+0x170>)
 8000a6a:	f000 fc7b 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a80:	230b      	movs	r3, #11
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <MX_GPIO_Init+0x170>)
 8000a8c:	f000 fc6a 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a90:	2340      	movs	r3, #64	@ 0x40
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480b      	ldr	r0, [pc, #44]	@ (8000ad4 <MX_GPIO_Init+0x174>)
 8000aa8:	f000 fc5c 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_GPIO_Init+0x174>)
 8000ac0:	f000 fc50 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	@ 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	40020800 	.word	0x40020800

08000adc <qmcTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_qmcTask */
void qmcTask(void *argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 *   */
	QMC_init();
 8000ae4:	f7ff fd72 	bl	80005cc <QMC_init>

  /* Infinite loop */
  for(;;)
  {
	  QMC_Read();
 8000ae8:	f7ff fd98 	bl	800061c <QMC_Read>
	  osDelay(10);
 8000aec:	200a      	movs	r0, #10
 8000aee:	f005 fa1b 	bl	8005f28 <osDelay>
	  sprintf(buf,"%d %d %d\r\n",X_OUT,Y_OUT,Z_OUT);
 8000af2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <qmcTask+0x54>)
 8000af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <qmcTask+0x58>)
 8000afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <qmcTask+0x5c>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	490b      	ldr	r1, [pc, #44]	@ (8000b3c <qmcTask+0x60>)
 8000b0e:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <qmcTask+0x64>)
 8000b10:	f008 f89a 	bl	8008c48 <siprintf>
	  osMessageQueuePut(uartQueue01Handle,buf,0,0);
 8000b14:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <qmcTask+0x68>)
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4908      	ldr	r1, [pc, #32]	@ (8000b40 <qmcTask+0x64>)
 8000b1e:	f005 fa91 	bl	8006044 <osMessageQueuePut>
	  osDelay(5000);
 8000b22:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b26:	f005 f9ff 	bl	8005f28 <osDelay>
  {
 8000b2a:	bf00      	nop
 8000b2c:	e7dc      	b.n	8000ae8 <qmcTask+0xc>
 8000b2e:	bf00      	nop
 8000b30:	2000007c 	.word	0x2000007c
 8000b34:	2000007e 	.word	0x2000007e
 8000b38:	20000080 	.word	0x20000080
 8000b3c:	080095c8 	.word	0x080095c8
 8000b40:	2000008c 	.word	0x2000008c
 8000b44:	20000278 	.word	0x20000278

08000b48 <BTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BTTask */
void BTTask(void *argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BTTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(uartQueue01Handle, buf, NULL, osWaitForever) == osOK) {
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <BTTask+0x38>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	2200      	movs	r2, #0
 8000b5a:	490a      	ldr	r1, [pc, #40]	@ (8000b84 <BTTask+0x3c>)
 8000b5c:	f005 fad2 	bl	8006104 <osMessageQueueGet>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1f4      	bne.n	8000b50 <BTTask+0x8>
		  HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), 0xFFFF);
 8000b66:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <BTTask+0x3c>)
 8000b68:	f7ff fb42 	bl	80001f0 <strlen>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b74:	4903      	ldr	r1, [pc, #12]	@ (8000b84 <BTTask+0x3c>)
 8000b76:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <BTTask+0x40>)
 8000b78:	f004 f8fe 	bl	8004d78 <HAL_UART_Transmit>
	  if (osMessageQueueGet(uartQueue01Handle, buf, NULL, osWaitForever) == osOK) {
 8000b7c:	e7e8      	b.n	8000b50 <BTTask+0x8>
 8000b7e:	bf00      	nop
 8000b80:	20000278 	.word	0x20000278
 8000b84:	2000008c 	.word	0x2000008c
 8000b88:	20000228 	.word	0x20000228

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <HAL_MspInit+0x54>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a11      	ldr	r2, [pc, #68]	@ (8000bec <HAL_MspInit+0x54>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <HAL_MspInit+0x54>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <HAL_MspInit+0x54>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_MspInit+0x54>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_MspInit+0x54>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210f      	movs	r1, #15
 8000bda:	f06f 0001 	mvn.w	r0, #1
 8000bde:	f000 faea 	bl	80011b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a21      	ldr	r2, [pc, #132]	@ (8000c94 <HAL_I2C_MspInit+0xa4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d13c      	bne.n	8000c8c <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <HAL_I2C_MspInit+0xa8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c98 <HAL_I2C_MspInit+0xa8>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <HAL_I2C_MspInit+0xa8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	2312      	movs	r3, #18
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c40:	2304      	movs	r3, #4
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4814      	ldr	r0, [pc, #80]	@ (8000c9c <HAL_I2C_MspInit+0xac>)
 8000c4c:	f000 fb8a 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <HAL_I2C_MspInit+0xa8>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c58:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <HAL_I2C_MspInit+0xa8>)
 8000c5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c60:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <HAL_I2C_MspInit+0xa8>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2105      	movs	r1, #5
 8000c70:	201f      	movs	r0, #31
 8000c72:	f000 faa0 	bl	80011b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c76:	201f      	movs	r0, #31
 8000c78:	f000 fab9 	bl	80011ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2105      	movs	r1, #5
 8000c80:	2020      	movs	r0, #32
 8000c82:	f000 fa98 	bl	80011b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c86:	2020      	movs	r0, #32
 8000c88:	f000 fab1 	bl	80011ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	@ 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40005400 	.word	0x40005400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400

08000ca0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	@ 0x30
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a36      	ldr	r2, [pc, #216]	@ (8000d98 <HAL_UART_MspInit+0xf8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12d      	bne.n	8000d1e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	4b35      	ldr	r3, [pc, #212]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a34      	ldr	r2, [pc, #208]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b32      	ldr	r3, [pc, #200]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b2b      	ldr	r3, [pc, #172]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4822      	ldr	r0, [pc, #136]	@ (8000da0 <HAL_UART_MspInit+0x100>)
 8000d18:	f000 fb24 	bl	8001364 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d1c:	e038      	b.n	8000d90 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a20      	ldr	r2, [pc, #128]	@ (8000da4 <HAL_UART_MspInit+0x104>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d133      	bne.n	8000d90 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d30:	4a1a      	ldr	r2, [pc, #104]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	4a13      	ldr	r2, [pc, #76]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d60:	23c0      	movs	r3, #192	@ 0xc0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d70:	2308      	movs	r3, #8
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480b      	ldr	r0, [pc, #44]	@ (8000da8 <HAL_UART_MspInit+0x108>)
 8000d7c:	f000 faf2 	bl	8001364 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2105      	movs	r1, #5
 8000d84:	2047      	movs	r0, #71	@ 0x47
 8000d86:	f000 fa16 	bl	80011b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000d8a:	2047      	movs	r0, #71	@ 0x47
 8000d8c:	f000 fa2f 	bl	80011ee <HAL_NVIC_EnableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	3730      	adds	r7, #48	@ 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40004800 	.word	0x40004800
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020c00 	.word	0x40020c00
 8000da4:	40011400 	.word	0x40011400
 8000da8:	40020800 	.word	0x40020800

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 f8eb 	bl	8000fc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dea:	f006 feb3 	bl	8007b54 <xTaskGetSchedulerState>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d001      	beq.n	8000df8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000df4:	f007 fca8 	bl	8008748 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e00:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <I2C1_EV_IRQHandler+0x10>)
 8000e02:	f001 f9b5 	bl	8002170 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000018c 	.word	0x2000018c

08000e10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <I2C1_ER_IRQHandler+0x10>)
 8000e16:	f001 fb1c 	bl	8002452 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000018c 	.word	0x2000018c

08000e24 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <USART6_IRQHandler+0x10>)
 8000e2a:	f004 f831 	bl	8004e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000228 	.word	0x20000228

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f007 ff18 	bl	8008c9c <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20030000 	.word	0x20030000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	2000027c 	.word	0x2000027c
 8000ea0:	20004d20 	.word	0x20004d20

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ecc:	f7ff ffea 	bl	8000ea4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	@ (8000f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f007 fed7 	bl	8008ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fbf5 	bl	80006e8 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f0c:	080096a8 	.word	0x080096a8
  ldr r2, =_sbss
 8000f10:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f14:	20004d1c 	.word	0x20004d1c

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f92b 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fe22 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f943 	bl	800120a <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 f90b 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000280 	.word	0x20000280

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000280 	.word	0x20000280

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff29 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff3e 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff8e 	bl	80010f4 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5d 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff31 	bl	8001064 <__NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffa2 	bl	800115c <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff feda 	bl	8000fe8 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d008      	beq.n	8001254 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2280      	movs	r2, #128	@ 0x80
 8001246:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e052      	b.n	80012fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0216 	bic.w	r2, r2, #22
 8001262:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001272:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	2b00      	cmp	r3, #0
 800127a:	d103      	bne.n	8001284 <HAL_DMA_Abort+0x62>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0208 	bic.w	r2, r2, #8
 8001292:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a4:	e013      	b.n	80012ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012a6:	f7ff fe9f 	bl	8000fe8 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	d90c      	bls.n	80012ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2220      	movs	r2, #32
 80012b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2203      	movs	r2, #3
 80012be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e015      	b.n	80012fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e4      	bne.n	80012a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e0:	223f      	movs	r2, #63	@ 0x3f
 80012e2:	409a      	lsls	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d004      	beq.n	8001320 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2280      	movs	r2, #128	@ 0x80
 800131a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e00c      	b.n	800133a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2205      	movs	r2, #5
 8001324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001354:	b2db      	uxtb	r3, r3
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e177      	b.n	8001670 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8166 	bne.w	800166a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80c0 	beq.w	800166a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <HAL_GPIO_Init+0x324>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a65      	ldr	r2, [pc, #404]	@ (8001688 <HAL_GPIO_Init+0x324>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b63      	ldr	r3, [pc, #396]	@ (8001688 <HAL_GPIO_Init+0x324>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001506:	4a61      	ldr	r2, [pc, #388]	@ (800168c <HAL_GPIO_Init+0x328>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a58      	ldr	r2, [pc, #352]	@ (8001690 <HAL_GPIO_Init+0x32c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d037      	beq.n	80015a2 <HAL_GPIO_Init+0x23e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a57      	ldr	r2, [pc, #348]	@ (8001694 <HAL_GPIO_Init+0x330>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d031      	beq.n	800159e <HAL_GPIO_Init+0x23a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a56      	ldr	r2, [pc, #344]	@ (8001698 <HAL_GPIO_Init+0x334>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d02b      	beq.n	800159a <HAL_GPIO_Init+0x236>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a55      	ldr	r2, [pc, #340]	@ (800169c <HAL_GPIO_Init+0x338>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d025      	beq.n	8001596 <HAL_GPIO_Init+0x232>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a54      	ldr	r2, [pc, #336]	@ (80016a0 <HAL_GPIO_Init+0x33c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d01f      	beq.n	8001592 <HAL_GPIO_Init+0x22e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a53      	ldr	r2, [pc, #332]	@ (80016a4 <HAL_GPIO_Init+0x340>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d019      	beq.n	800158e <HAL_GPIO_Init+0x22a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a52      	ldr	r2, [pc, #328]	@ (80016a8 <HAL_GPIO_Init+0x344>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x226>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a51      	ldr	r2, [pc, #324]	@ (80016ac <HAL_GPIO_Init+0x348>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x222>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a50      	ldr	r2, [pc, #320]	@ (80016b0 <HAL_GPIO_Init+0x34c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x21e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4f      	ldr	r2, [pc, #316]	@ (80016b4 <HAL_GPIO_Init+0x350>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x21a>
 800157a:	2309      	movs	r3, #9
 800157c:	e012      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800157e:	230a      	movs	r3, #10
 8001580:	e010      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001582:	2308      	movs	r3, #8
 8001584:	e00e      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001586:	2307      	movs	r3, #7
 8001588:	e00c      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800158a:	2306      	movs	r3, #6
 800158c:	e00a      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800158e:	2305      	movs	r3, #5
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001592:	2304      	movs	r3, #4
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	@ (800168c <HAL_GPIO_Init+0x328>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b3d      	ldr	r3, [pc, #244]	@ (80016b8 <HAL_GPIO_Init+0x354>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e6:	4a34      	ldr	r2, [pc, #208]	@ (80016b8 <HAL_GPIO_Init+0x354>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ec:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <HAL_GPIO_Init+0x354>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001610:	4a29      	ldr	r2, [pc, #164]	@ (80016b8 <HAL_GPIO_Init+0x354>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001616:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <HAL_GPIO_Init+0x354>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163a:	4a1f      	ldr	r2, [pc, #124]	@ (80016b8 <HAL_GPIO_Init+0x354>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001640:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <HAL_GPIO_Init+0x354>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <HAL_GPIO_Init+0x354>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f ae84 	bls.w	8001380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	@ 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021400 	.word	0x40021400
 80016a8:	40021800 	.word	0x40021800
 80016ac:	40021c00 	.word	0x40021c00
 80016b0:	40022000 	.word	0x40022000
 80016b4:	40022400 	.word	0x40022400
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e12b      	b.n	800195a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fa6a 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2224      	movs	r2, #36	@ 0x24
 8001720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001742:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001752:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001754:	f003 fa98 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 8001758:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a81      	ldr	r2, [pc, #516]	@ (8001964 <HAL_I2C_Init+0x274>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d807      	bhi.n	8001774 <HAL_I2C_Init+0x84>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a80      	ldr	r2, [pc, #512]	@ (8001968 <HAL_I2C_Init+0x278>)
 8001768:	4293      	cmp	r3, r2
 800176a:	bf94      	ite	ls
 800176c:	2301      	movls	r3, #1
 800176e:	2300      	movhi	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	e006      	b.n	8001782 <HAL_I2C_Init+0x92>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4a7d      	ldr	r2, [pc, #500]	@ (800196c <HAL_I2C_Init+0x27c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	bf94      	ite	ls
 800177c:	2301      	movls	r3, #1
 800177e:	2300      	movhi	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0e7      	b.n	800195a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a78      	ldr	r2, [pc, #480]	@ (8001970 <HAL_I2C_Init+0x280>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001964 <HAL_I2C_Init+0x274>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d802      	bhi.n	80017c4 <HAL_I2C_Init+0xd4>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	e009      	b.n	80017d8 <HAL_I2C_Init+0xe8>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	4a69      	ldr	r2, [pc, #420]	@ (8001974 <HAL_I2C_Init+0x284>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	3301      	adds	r3, #1
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	430b      	orrs	r3, r1
 80017de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	495c      	ldr	r1, [pc, #368]	@ (8001964 <HAL_I2C_Init+0x274>)
 80017f4:	428b      	cmp	r3, r1
 80017f6:	d819      	bhi.n	800182c <HAL_I2C_Init+0x13c>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e59      	subs	r1, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fbb1 f3f3 	udiv	r3, r1, r3
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800180c:	400b      	ands	r3, r1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00a      	beq.n	8001828 <HAL_I2C_Init+0x138>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1e59      	subs	r1, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001820:	3301      	adds	r3, #1
 8001822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001826:	e051      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 8001828:	2304      	movs	r3, #4
 800182a:	e04f      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d111      	bne.n	8001858 <HAL_I2C_Init+0x168>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e58      	subs	r0, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	440b      	add	r3, r1
 8001842:	fbb0 f3f3 	udiv	r3, r0, r3
 8001846:	3301      	adds	r3, #1
 8001848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e012      	b.n	800187e <HAL_I2C_Init+0x18e>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	0099      	lsls	r1, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Init+0x196>
 8001882:	2301      	movs	r3, #1
 8001884:	e022      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10e      	bne.n	80018ac <HAL_I2C_Init+0x1bc>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e58      	subs	r0, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	440b      	add	r3, r1
 800189c:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018aa:	e00f      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e58      	subs	r0, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	0099      	lsls	r1, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	6809      	ldr	r1, [r1, #0]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6911      	ldr	r1, [r2, #16]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68d2      	ldr	r2, [r2, #12]
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	430b      	orrs	r3, r1
 800190e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	000186a0 	.word	0x000186a0
 8001968:	001e847f 	.word	0x001e847f
 800196c:	003d08ff 	.word	0x003d08ff
 8001970:	431bde83 	.word	0x431bde83
 8001974:	10624dd3 	.word	0x10624dd3

08001978 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198a:	2b80      	cmp	r3, #128	@ 0x80
 800198c:	d103      	bne.n	8001996 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	817b      	strh	r3, [r7, #10]
 80019b6:	460b      	mov	r3, r1
 80019b8:	813b      	strh	r3, [r7, #8]
 80019ba:	4613      	mov	r3, r2
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019be:	f7ff fb13 	bl	8000fe8 <HAL_GetTick>
 80019c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	f040 80d9 	bne.w	8001b84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2319      	movs	r3, #25
 80019d8:	2201      	movs	r2, #1
 80019da:	496d      	ldr	r1, [pc, #436]	@ (8001b90 <HAL_I2C_Mem_Write+0x1ec>)
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f002 f9e5 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
 80019ea:	e0cc      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_Mem_Write+0x56>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e0c5      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d007      	beq.n	8001a20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2221      	movs	r2, #33	@ 0x21
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2240      	movs	r2, #64	@ 0x40
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001b94 <HAL_I2C_Mem_Write+0x1f0>)
 8001a60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a62:	88f8      	ldrh	r0, [r7, #6]
 8001a64:	893a      	ldrh	r2, [r7, #8]
 8001a66:	8979      	ldrh	r1, [r7, #10]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4603      	mov	r3, r0
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f001 ff74 	bl	8003960 <I2C_RequestMemoryWrite>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d052      	beq.n	8001b24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e081      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f002 faaa 	bl	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00d      	beq.n	8001aae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d107      	bne.n	8001aaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e06b      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d11b      	bne.n	8001b24 <HAL_I2C_Mem_Write+0x180>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d017      	beq.n	8001b24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1aa      	bne.n	8001a82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f002 fa9d 	bl	8004070 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00d      	beq.n	8001b58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d107      	bne.n	8001b54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e016      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e000      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b84:	2302      	movs	r3, #2
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	00100002 	.word	0x00100002
 8001b94:	ffff0000 	.word	0xffff0000

08001b98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	@ 0x30
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	817b      	strh	r3, [r7, #10]
 8001baa:	460b      	mov	r3, r1
 8001bac:	813b      	strh	r3, [r7, #8]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bb2:	f7ff fa19 	bl	8000fe8 <HAL_GetTick>
 8001bb6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	f040 8214 	bne.w	8001fee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2319      	movs	r3, #25
 8001bcc:	2201      	movs	r2, #1
 8001bce:	497b      	ldr	r1, [pc, #492]	@ (8001dbc <HAL_I2C_Mem_Read+0x224>)
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f002 f8eb 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e207      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_I2C_Mem_Read+0x56>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e200      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x458>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d007      	beq.n	8001c14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2222      	movs	r2, #34	@ 0x22
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2240      	movs	r2, #64	@ 0x40
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a5b      	ldr	r2, [pc, #364]	@ (8001dc0 <HAL_I2C_Mem_Read+0x228>)
 8001c54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c56:	88f8      	ldrh	r0, [r7, #6]
 8001c58:	893a      	ldrh	r2, [r7, #8]
 8001c5a:	8979      	ldrh	r1, [r7, #10]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	4603      	mov	r3, r0
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f001 ff10 	bl	8003a8c <I2C_RequestMemoryRead>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1bc      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d113      	bne.n	8001ca6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e190      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d11b      	bne.n	8001ce6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e170      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d11b      	bne.n	8001d26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	e150      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d3c:	e144      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	f200 80f1 	bhi.w	8001f2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d123      	bne.n	8001d98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f002 fa05 	bl	8004164 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e145      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d96:	e117      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d14e      	bne.n	8001e3e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da6:	2200      	movs	r2, #0
 8001da8:	4906      	ldr	r1, [pc, #24]	@ (8001dc4 <HAL_I2C_Mem_Read+0x22c>)
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f001 fffe 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d008      	beq.n	8001dc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e11a      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x458>
 8001dba:	bf00      	nop
 8001dbc:	00100002 	.word	0x00100002
 8001dc0:	ffff0000 	.word	0xffff0000
 8001dc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e3c:	e0c4      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e44:	2200      	movs	r2, #0
 8001e46:	496c      	ldr	r1, [pc, #432]	@ (8001ff8 <HAL_I2C_Mem_Read+0x460>)
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f001 ffaf 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0cb      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4955      	ldr	r1, [pc, #340]	@ (8001ff8 <HAL_I2C_Mem_Read+0x460>)
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f001 ff81 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e09d      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f28:	e04e      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f002 f918 	bl	8004164 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e058      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d124      	bne.n	8001fc8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d107      	bne.n	8001f96 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f94:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f aeb6 	bne.w	8001d3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
  }
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3728      	adds	r7, #40	@ 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	00010004 	.word	0x00010004

08001ffc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]
 800200e:	460b      	mov	r3, r1
 8002010:	813b      	strh	r3, [r7, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b20      	cmp	r3, #32
 8002024:	f040 8096 	bne.w	8002154 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002028:	4b4e      	ldr	r3, [pc, #312]	@ (8002164 <HAL_I2C_Mem_Read_IT+0x168>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	4a4e      	ldr	r2, [pc, #312]	@ (8002168 <HAL_I2C_Mem_Read_IT+0x16c>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	0a1a      	lsrs	r2, r3, #8
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009a      	lsls	r2, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3b01      	subs	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d112      	bne.n	8002074 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002070:	2302      	movs	r3, #2
 8002072:	e070      	b.n	8002156 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b02      	cmp	r3, #2
 8002080:	d0df      	beq.n	8002042 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Mem_Read_IT+0x94>
 800208c:	2302      	movs	r3, #2
 800208e:	e062      	b.n	8002156 <HAL_I2C_Mem_Read_IT+0x15a>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d007      	beq.n	80020b6 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2222      	movs	r2, #34	@ 0x22
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2240      	movs	r2, #64	@ 0x40
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a3a      	ldr	r2, [r7, #32]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_I2C_Mem_Read_IT+0x170>)
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80020f8:	897a      	ldrh	r2, [r7, #10]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80020fe:	893a      	ldrh	r2, [r7, #8]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800211e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800212e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800214e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e000      	b.n	8002156 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
  }
}
 8002156:	4618      	mov	r0, r3
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000
 8002168:	14f8b589 	.word	0x14f8b589
 800216c:	ffff0000 	.word	0xffff0000

08002170 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002190:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002198:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b10      	cmp	r3, #16
 800219e:	d003      	beq.n	80021a8 <HAL_I2C_EV_IRQHandler+0x38>
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b40      	cmp	r3, #64	@ 0x40
 80021a4:	f040 80c1 	bne.w	800232a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10d      	bne.n	80021de <HAL_I2C_EV_IRQHandler+0x6e>
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80021c8:	d003      	beq.n	80021d2 <HAL_I2C_EV_IRQHandler+0x62>
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80021d0:	d101      	bne.n	80021d6 <HAL_I2C_EV_IRQHandler+0x66>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_I2C_EV_IRQHandler+0x68>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f000 8132 	beq.w	8002442 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00c      	beq.n	8002202 <HAL_I2C_EV_IRQHandler+0x92>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	0a5b      	lsrs	r3, r3, #9
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f002 f841 	bl	800427c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fd91 	bl	8002d22 <I2C_Master_SB>
 8002200:	e092      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	08db      	lsrs	r3, r3, #3
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_I2C_EV_IRQHandler+0xb2>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	0a5b      	lsrs	r3, r3, #9
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fe07 	bl	8002e2e <I2C_Master_ADD10>
 8002220:	e082      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_I2C_EV_IRQHandler+0xd2>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	0a5b      	lsrs	r3, r3, #9
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fe21 	bl	8002e82 <I2C_Master_ADDR>
 8002240:	e072      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d03b      	beq.n	80022c6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800225c:	f000 80f3 	beq.w	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	09db      	lsrs	r3, r3, #7
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00f      	beq.n	800228c <HAL_I2C_EV_IRQHandler+0x11c>
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	0a9b      	lsrs	r3, r3, #10
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_I2C_EV_IRQHandler+0x11c>
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f9e9 	bl	800265c <I2C_MasterTransmit_TXE>
 800228a:	e04d      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80d6 	beq.w	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	0a5b      	lsrs	r3, r3, #9
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80cf 	beq.w	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	2b21      	cmp	r3, #33	@ 0x21
 80022ac:	d103      	bne.n	80022b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa70 	bl	8002794 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022b4:	e0c7      	b.n	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b40      	cmp	r3, #64	@ 0x40
 80022ba:	f040 80c4 	bne.w	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fade 	bl	8002880 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c4:	e0bf      	b.n	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022d4:	f000 80b7 	beq.w	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	099b      	lsrs	r3, r3, #6
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00f      	beq.n	8002304 <HAL_I2C_EV_IRQHandler+0x194>
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	0a9b      	lsrs	r3, r3, #10
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <HAL_I2C_EV_IRQHandler+0x194>
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d103      	bne.n	8002304 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fb57 	bl	80029b0 <I2C_MasterReceive_RXNE>
 8002302:	e011      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 809a 	beq.w	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	0a5b      	lsrs	r3, r3, #9
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8093 	beq.w	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fc0d 	bl	8002b40 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002326:	e08e      	b.n	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002328:	e08d      	b.n	8002446 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d004      	beq.n	800233c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e007      	b.n	800234c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	085b      	lsrs	r3, r3, #1
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d012      	beq.n	800237e <HAL_I2C_EV_IRQHandler+0x20e>
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00c      	beq.n	800237e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002374:	69b9      	ldr	r1, [r7, #24]
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 ffd2 	bl	8003320 <I2C_Slave_ADDR>
 800237c:	e066      	b.n	800244c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_I2C_EV_IRQHandler+0x22e>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	0a5b      	lsrs	r3, r3, #9
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f001 f80c 	bl	80033b4 <I2C_Slave_STOPF>
 800239c:	e056      	b.n	800244c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800239e:	7bbb      	ldrb	r3, [r7, #14]
 80023a0:	2b21      	cmp	r3, #33	@ 0x21
 80023a2:	d002      	beq.n	80023aa <HAL_I2C_EV_IRQHandler+0x23a>
 80023a4:	7bbb      	ldrb	r3, [r7, #14]
 80023a6:	2b29      	cmp	r3, #41	@ 0x29
 80023a8:	d125      	bne.n	80023f6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	09db      	lsrs	r3, r3, #7
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00f      	beq.n	80023d6 <HAL_I2C_EV_IRQHandler+0x266>
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	0a9b      	lsrs	r3, r3, #10
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_I2C_EV_IRQHandler+0x266>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fee8 	bl	80031a4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023d4:	e039      	b.n	800244a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d033      	beq.n	800244a <HAL_I2C_EV_IRQHandler+0x2da>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	0a5b      	lsrs	r3, r3, #9
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d02d      	beq.n	800244a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 ff15 	bl	800321e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023f4:	e029      	b.n	800244a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00f      	beq.n	8002422 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	0a9b      	lsrs	r3, r3, #10
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <HAL_I2C_EV_IRQHandler+0x2b2>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 ff20 	bl	8003260 <I2C_SlaveReceive_RXNE>
 8002420:	e014      	b.n	800244c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00e      	beq.n	800244c <HAL_I2C_EV_IRQHandler+0x2dc>
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	0a5b      	lsrs	r3, r3, #9
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 ff4e 	bl	80032dc <I2C_SlaveReceive_BTF>
 8002440:	e004      	b.n	800244c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002442:	bf00      	nop
 8002444:	e002      	b.n	800244c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800244a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b08a      	sub	sp, #40	@ 0x28
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002474:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00e      	beq.n	80024a0 <HAL_I2C_ER_IRQHandler+0x4e>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800249e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	0a5b      	lsrs	r3, r3, #9
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <HAL_I2C_ER_IRQHandler+0x78>
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80024c8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	0a9b      	lsrs	r3, r3, #10
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d03f      	beq.n	8002556 <HAL_I2C_ER_IRQHandler+0x104>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d039      	beq.n	8002556 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80024e2:	7efb      	ldrb	r3, [r7, #27]
 80024e4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80024fc:	7ebb      	ldrb	r3, [r7, #26]
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d112      	bne.n	8002528 <HAL_I2C_ER_IRQHandler+0xd6>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10f      	bne.n	8002528 <HAL_I2C_ER_IRQHandler+0xd6>
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b21      	cmp	r3, #33	@ 0x21
 800250c:	d008      	beq.n	8002520 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	2b29      	cmp	r3, #41	@ 0x29
 8002512:	d005      	beq.n	8002520 <HAL_I2C_ER_IRQHandler+0xce>
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b28      	cmp	r3, #40	@ 0x28
 8002518:	d106      	bne.n	8002528 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b21      	cmp	r3, #33	@ 0x21
 800251e:	d103      	bne.n	8002528 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f001 f877 	bl	8003614 <I2C_Slave_AF>
 8002526:	e016      	b.n	8002556 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002530:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800253a:	7efb      	ldrb	r3, [r7, #27]
 800253c:	2b10      	cmp	r3, #16
 800253e:	d002      	beq.n	8002546 <HAL_I2C_ER_IRQHandler+0xf4>
 8002540:	7efb      	ldrb	r3, [r7, #27]
 8002542:	2b40      	cmp	r3, #64	@ 0x40
 8002544:	d107      	bne.n	8002556 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002554:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	0adb      	lsrs	r3, r3, #11
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00e      	beq.n	8002580 <HAL_I2C_ER_IRQHandler+0x12e>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800257e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f001 f8b2 	bl	80036fc <I2C_ITError>
  }
}
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	@ 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
 80025fc:	4613      	mov	r3, r2
 80025fe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800266a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002672:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267e:	2b00      	cmp	r3, #0
 8002680:	d150      	bne.n	8002724 <I2C_MasterTransmit_TXE+0xc8>
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b21      	cmp	r3, #33	@ 0x21
 8002686:	d14d      	bne.n	8002724 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b08      	cmp	r3, #8
 800268c:	d01d      	beq.n	80026ca <I2C_MasterTransmit_TXE+0x6e>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b20      	cmp	r3, #32
 8002692:	d01a      	beq.n	80026ca <I2C_MasterTransmit_TXE+0x6e>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800269a:	d016      	beq.n	80026ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2211      	movs	r2, #17
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ff6c 	bl	80025a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026c8:	e060      	b.n	800278c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d107      	bne.n	8002714 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff87 	bl	8002620 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002712:	e03b      	b.n	800278c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff3f 	bl	80025a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002722:	e033      	b.n	800278c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b21      	cmp	r3, #33	@ 0x21
 8002728:	d005      	beq.n	8002736 <I2C_MasterTransmit_TXE+0xda>
 800272a:	7bbb      	ldrb	r3, [r7, #14]
 800272c:	2b40      	cmp	r3, #64	@ 0x40
 800272e:	d12d      	bne.n	800278c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b22      	cmp	r3, #34	@ 0x22
 8002734:	d12a      	bne.n	800278c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d108      	bne.n	8002752 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800274e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002750:	e01c      	b.n	800278c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b40      	cmp	r3, #64	@ 0x40
 800275c:	d103      	bne.n	8002766 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f88e 	bl	8002880 <I2C_MemoryTransmit_TXE_BTF>
}
 8002764:	e012      	b.n	800278c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800278a:	e7ff      	b.n	800278c <I2C_MasterTransmit_TXE+0x130>
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b21      	cmp	r3, #33	@ 0x21
 80027ac:	d164      	bne.n	8002878 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d012      	beq.n	80027de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80027dc:	e04c      	b.n	8002878 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d01d      	beq.n	8002820 <I2C_MasterTransmit_BTF+0x8c>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d01a      	beq.n	8002820 <I2C_MasterTransmit_BTF+0x8c>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027f0:	d016      	beq.n	8002820 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002800:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2211      	movs	r2, #17
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fec1 	bl	80025a0 <HAL_I2C_MasterTxCpltCallback>
}
 800281e:	e02b      	b.n	8002878 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800282e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b40      	cmp	r3, #64	@ 0x40
 8002858:	d107      	bne.n	800286a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fedc 	bl	8002620 <HAL_I2C_MemTxCpltCallback>
}
 8002868:	e006      	b.n	8002878 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fe94 	bl	80025a0 <HAL_I2C_MasterTxCpltCallback>
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800288e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002894:	2b00      	cmp	r3, #0
 8002896:	d11d      	bne.n	80028d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10b      	bne.n	80028b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b0:	1c9a      	adds	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80028b6:	e077      	b.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028bc:	b29b      	uxth	r3, r3
 80028be:	121b      	asrs	r3, r3, #8
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028d2:	e069      	b.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10b      	bne.n	80028f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028f2:	e059      	b.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d152      	bne.n	80029a2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b22      	cmp	r3, #34	@ 0x22
 8002900:	d10d      	bne.n	800291e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002910:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800291c:	e044      	b.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d015      	beq.n	8002954 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b21      	cmp	r3, #33	@ 0x21
 800292c:	d112      	bne.n	8002954 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002952:	e029      	b.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d124      	bne.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b21      	cmp	r3, #33	@ 0x21
 8002962:	d121      	bne.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002972:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002982:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fe40 	bl	8002620 <HAL_I2C_MemTxCpltCallback>
}
 80029a0:	e002      	b.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe ffe8 	bl	8001978 <I2C_Flush_DR>
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b22      	cmp	r3, #34	@ 0x22
 80029c2:	f040 80b9 	bne.w	8002b38 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d921      	bls.n	8002a1e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	f040 8096 	bne.w	8002b38 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a1a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002a1c:	e08c      	b.n	8002b38 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d07f      	beq.n	8002b26 <I2C_MasterReceive_RXNE+0x176>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d002      	beq.n	8002a32 <I2C_MasterReceive_RXNE+0x82>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d179      	bne.n	8002b26 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f001 fb64 	bl	8004100 <I2C_WaitOnSTOPRequestThroughIT>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d14c      	bne.n	8002ad8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a4c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a5c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b40      	cmp	r3, #64	@ 0x40
 8002a96:	d10a      	bne.n	8002aae <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fd fde0 	bl	800066c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002aac:	e044      	b.n	8002b38 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d002      	beq.n	8002ac2 <I2C_MasterReceive_RXNE+0x112>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d103      	bne.n	8002aca <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ac8:	e002      	b.n	8002ad0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2212      	movs	r2, #18
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fd6f 	bl	80025b4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ad6:	e02f      	b.n	8002b38 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ae6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff fd88 	bl	8002634 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b24:	e008      	b.n	8002b38 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b34:	605a      	str	r2, [r3, #4]
}
 8002b36:	e7ff      	b.n	8002b38 <I2C_MasterReceive_RXNE+0x188>
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d11b      	bne.n	8002b90 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b66:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002b8e:	e0c4      	b.n	8002d1a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d129      	bne.n	8002bee <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00a      	beq.n	8002bc6 <I2C_MasterReceive_BTF+0x86>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d007      	beq.n	8002bc6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002bec:	e095      	b.n	8002d1a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d17d      	bne.n	8002cf4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d002      	beq.n	8002c04 <I2C_MasterReceive_BTF+0xc4>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d108      	bne.n	8002c16 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e016      	b.n	8002c44 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d002      	beq.n	8002c22 <I2C_MasterReceive_BTF+0xe2>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d108      	bne.n	8002c34 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e007      	b.n	8002c44 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c42:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c9e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b40      	cmp	r3, #64	@ 0x40
 8002cb2:	d10a      	bne.n	8002cca <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fcd2 	bl	800066c <HAL_I2C_MemRxCpltCallback>
}
 8002cc8:	e027      	b.n	8002d1a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d002      	beq.n	8002cde <I2C_MasterReceive_BTF+0x19e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d103      	bne.n	8002ce6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ce4:	e002      	b.n	8002cec <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2212      	movs	r2, #18
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fc61 	bl	80025b4 <HAL_I2C_MasterRxCpltCallback>
}
 8002cf2:	e012      	b.n	8002d1a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b40      	cmp	r3, #64	@ 0x40
 8002d34:	d117      	bne.n	8002d66 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d4e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002d50:	e067      	b.n	8002e22 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]
}
 8002d64:	e05d      	b.n	8002e22 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d6e:	d133      	bne.n	8002dd8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b21      	cmp	r3, #33	@ 0x21
 8002d7a:	d109      	bne.n	8002d90 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d8c:	611a      	str	r2, [r3, #16]
 8002d8e:	e008      	b.n	8002da2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <I2C_Master_SB+0x92>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d108      	bne.n	8002dc6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d032      	beq.n	8002e22 <I2C_Master_SB+0x100>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d02d      	beq.n	8002e22 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dd4:	605a      	str	r2, [r3, #4]
}
 8002dd6:	e024      	b.n	8002e22 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10e      	bne.n	8002dfe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	11db      	asrs	r3, r3, #7
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0306 	and.w	r3, r3, #6
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f063 030f 	orn	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	611a      	str	r2, [r3, #16]
}
 8002dfc:	e011      	b.n	8002e22 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10d      	bne.n	8002e22 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	11db      	asrs	r3, r3, #7
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f003 0306 	and.w	r3, r3, #6
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f063 030e 	orn	r3, r3, #14
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	611a      	str	r2, [r3, #16]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <I2C_Master_ADD10+0x26>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00c      	beq.n	8002e76 <I2C_Master_ADD10+0x48>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e74:	605a      	str	r2, [r3, #4]
  }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b091      	sub	sp, #68	@ 0x44
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b22      	cmp	r3, #34	@ 0x22
 8002eaa:	f040 8169 	bne.w	8003180 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <I2C_Master_ADDR+0x54>
 8002eb6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002eba:	2b40      	cmp	r3, #64	@ 0x40
 8002ebc:	d10b      	bne.n	8002ed6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed4:	e160      	b.n	8003198 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11d      	bne.n	8002f1a <I2C_Master_ADDR+0x98>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002ee6:	d118      	bne.n	8002f1a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f18:	e13e      	b.n	8003198 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d113      	bne.n	8002f4c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f24:	2300      	movs	r3, #0
 8002f26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e115      	b.n	8003178 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	f040 808a 	bne.w	800306c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f5e:	d137      	bne.n	8002fd0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f6e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f7e:	d113      	bne.n	8002fa8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	e0e7      	b.n	8003178 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa8:	2300      	movs	r3, #0
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	623b      	str	r3, [r7, #32]
 8002fbc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e0d3      	b.n	8003178 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d02e      	beq.n	8003034 <I2C_Master_ADDR+0x1b2>
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d02b      	beq.n	8003034 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fde:	2b12      	cmp	r3, #18
 8002fe0:	d102      	bne.n	8002fe8 <I2C_Master_ADDR+0x166>
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d125      	bne.n	8003034 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d00e      	beq.n	800300c <I2C_Master_ADDR+0x18a>
 8002fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d00b      	beq.n	800300c <I2C_Master_ADDR+0x18a>
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d008      	beq.n	800300c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e007      	b.n	800301c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800301a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301c:	2300      	movs	r3, #0
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	e0a1      	b.n	8003178 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003042:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e085      	b.n	8003178 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d14d      	bne.n	8003112 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003078:	2b04      	cmp	r3, #4
 800307a:	d016      	beq.n	80030aa <I2C_Master_ADDR+0x228>
 800307c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307e:	2b02      	cmp	r3, #2
 8003080:	d013      	beq.n	80030aa <I2C_Master_ADDR+0x228>
 8003082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003084:	2b10      	cmp	r3, #16
 8003086:	d010      	beq.n	80030aa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003096:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e007      	b.n	80030ba <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030b8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030c8:	d117      	bne.n	80030fa <I2C_Master_ADDR+0x278>
 80030ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030d0:	d00b      	beq.n	80030ea <I2C_Master_ADDR+0x268>
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d008      	beq.n	80030ea <I2C_Master_ADDR+0x268>
 80030d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d005      	beq.n	80030ea <I2C_Master_ADDR+0x268>
 80030de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d002      	beq.n	80030ea <I2C_Master_ADDR+0x268>
 80030e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d107      	bne.n	80030fa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	e032      	b.n	8003178 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003120:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003130:	d117      	bne.n	8003162 <I2C_Master_ADDR+0x2e0>
 8003132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003134:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003138:	d00b      	beq.n	8003152 <I2C_Master_ADDR+0x2d0>
 800313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313c:	2b01      	cmp	r3, #1
 800313e:	d008      	beq.n	8003152 <I2C_Master_ADDR+0x2d0>
 8003140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003142:	2b08      	cmp	r3, #8
 8003144:	d005      	beq.n	8003152 <I2C_Master_ADDR+0x2d0>
 8003146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003148:	2b10      	cmp	r3, #16
 800314a:	d002      	beq.n	8003152 <I2C_Master_ADDR+0x2d0>
 800314c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314e:	2b20      	cmp	r3, #32
 8003150:	d107      	bne.n	8003162 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003160:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800317e:	e00b      	b.n	8003198 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
}
 8003196:	e7ff      	b.n	8003198 <I2C_Master_ADDR+0x316>
 8003198:	bf00      	nop
 800319a:	3744      	adds	r7, #68	@ 0x44
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d02b      	beq.n	8003216 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d114      	bne.n	8003216 <I2C_SlaveTransmit_TXE+0x72>
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b29      	cmp	r3, #41	@ 0x29
 80031f0:	d111      	bne.n	8003216 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003200:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2221      	movs	r2, #33	@ 0x21
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2228      	movs	r2, #40	@ 0x28
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff f9d9 	bl	80025c8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d011      	beq.n	8003254 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d02c      	beq.n	80032d4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d114      	bne.n	80032d4 <I2C_SlaveReceive_RXNE+0x74>
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ae:	d111      	bne.n	80032d4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2222      	movs	r2, #34	@ 0x22
 80032c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2228      	movs	r2, #40	@ 0x28
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff f984 	bl	80025dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800333a:	2b28      	cmp	r3, #40	@ 0x28
 800333c:	d127      	bne.n	800338e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800334c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	09db      	lsrs	r3, r3, #7
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	81bb      	strh	r3, [r7, #12]
 8003370:	e002      	b.n	8003378 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003380:	89ba      	ldrh	r2, [r7, #12]
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff f932 	bl	80025f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800338c:	e00e      	b.n	80033ac <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003400:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800340c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003410:	d172      	bne.n	80034f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b22      	cmp	r3, #34	@ 0x22
 8003416:	d002      	beq.n	800341e <I2C_Slave_STOPF+0x6a>
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2b2a      	cmp	r3, #42	@ 0x2a
 800341c:	d135      	bne.n	800348a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b29a      	uxth	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	f043 0204 	orr.w	r2, r3, #4
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003450:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd ff75 	bl	8001346 <HAL_DMA_GetState>
 800345c:	4603      	mov	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d049      	beq.n	80034f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	4a69      	ldr	r2, [pc, #420]	@ (800360c <I2C_Slave_STOPF+0x258>)
 8003468:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd ff47 	bl	8001302 <HAL_DMA_Abort_IT>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d03d      	beq.n	80034f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003484:	4610      	mov	r0, r2
 8003486:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003488:	e035      	b.n	80034f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	b29a      	uxth	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	f043 0204 	orr.w	r2, r3, #4
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd ff3f 	bl	8001346 <HAL_DMA_GetState>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d014      	beq.n	80034f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d2:	4a4e      	ldr	r2, [pc, #312]	@ (800360c <I2C_Slave_STOPF+0x258>)
 80034d4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd ff11 	bl	8001302 <HAL_DMA_Abort_IT>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034f0:	4610      	mov	r0, r2
 80034f2:	4798      	blx	r3
 80034f4:	e000      	b.n	80034f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d03e      	beq.n	8003580 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d112      	bne.n	8003536 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003540:	2b40      	cmp	r3, #64	@ 0x40
 8003542:	d112      	bne.n	800356a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	f043 0204 	orr.w	r2, r3, #4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8b7 	bl	80036fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800358e:	e039      	b.n	8003604 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b2a      	cmp	r3, #42	@ 0x2a
 8003594:	d109      	bne.n	80035aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2228      	movs	r2, #40	@ 0x28
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff f819 	bl	80025dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b28      	cmp	r3, #40	@ 0x28
 80035b4:	d111      	bne.n	80035da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a15      	ldr	r2, [pc, #84]	@ (8003610 <I2C_Slave_STOPF+0x25c>)
 80035ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff f81a 	bl	800260c <HAL_I2C_ListenCpltCallback>
}
 80035d8:	e014      	b.n	8003604 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	2b22      	cmp	r3, #34	@ 0x22
 80035e0:	d002      	beq.n	80035e8 <I2C_Slave_STOPF+0x234>
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b22      	cmp	r3, #34	@ 0x22
 80035e6:	d10d      	bne.n	8003604 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fe ffec 	bl	80025dc <HAL_I2C_SlaveRxCpltCallback>
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	08003c5d 	.word	0x08003c5d
 8003610:	ffff0000 	.word	0xffff0000

08003614 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d002      	beq.n	8003636 <I2C_Slave_AF+0x22>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b20      	cmp	r3, #32
 8003634:	d129      	bne.n	800368a <I2C_Slave_AF+0x76>
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b28      	cmp	r3, #40	@ 0x28
 800363a:	d126      	bne.n	800368a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a2e      	ldr	r2, [pc, #184]	@ (80036f8 <I2C_Slave_AF+0xe4>)
 8003640:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003650:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800365a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800366a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe ffc2 	bl	800260c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003688:	e031      	b.n	80036ee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b21      	cmp	r3, #33	@ 0x21
 800368e:	d129      	bne.n	80036e4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <I2C_Slave_AF+0xe4>)
 8003694:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2221      	movs	r2, #33	@ 0x21
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036ba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fe f94e 	bl	8001978 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fe ff73 	bl	80025c8 <HAL_I2C_SlaveTxCpltCallback>
}
 80036e2:	e004      	b.n	80036ee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ec:	615a      	str	r2, [r3, #20]
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	ffff0000 	.word	0xffff0000

080036fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003712:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003714:	7bbb      	ldrb	r3, [r7, #14]
 8003716:	2b10      	cmp	r3, #16
 8003718:	d002      	beq.n	8003720 <I2C_ITError+0x24>
 800371a:	7bbb      	ldrb	r3, [r7, #14]
 800371c:	2b40      	cmp	r3, #64	@ 0x40
 800371e:	d10a      	bne.n	8003736 <I2C_ITError+0x3a>
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b22      	cmp	r3, #34	@ 0x22
 8003724:	d107      	bne.n	8003736 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003734:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800373c:	2b28      	cmp	r3, #40	@ 0x28
 800373e:	d107      	bne.n	8003750 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2228      	movs	r2, #40	@ 0x28
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800374e:	e015      	b.n	800377c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800375a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800375e:	d00a      	beq.n	8003776 <I2C_ITError+0x7a>
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b60      	cmp	r3, #96	@ 0x60
 8003764:	d007      	beq.n	8003776 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800378a:	d162      	bne.n	8003852 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800379a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d020      	beq.n	80037ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ae:	4a6a      	ldr	r2, [pc, #424]	@ (8003958 <I2C_ITError+0x25c>)
 80037b0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fda3 	bl	8001302 <HAL_DMA_Abort_IT>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8089 	beq.w	80038d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037e6:	4610      	mov	r0, r2
 80037e8:	4798      	blx	r3
 80037ea:	e074      	b.n	80038d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	4a59      	ldr	r2, [pc, #356]	@ (8003958 <I2C_ITError+0x25c>)
 80037f2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd fd82 	bl	8001302 <HAL_DMA_Abort_IT>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d068      	beq.n	80038d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	d10b      	bne.n	800382a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800384c:	4610      	mov	r0, r2
 800384e:	4798      	blx	r3
 8003850:	e041      	b.n	80038d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b60      	cmp	r3, #96	@ 0x60
 800385c:	d125      	bne.n	80038aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003876:	2b40      	cmp	r3, #64	@ 0x40
 8003878:	d10b      	bne.n	8003892 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fe fed0 	bl	8002648 <HAL_I2C_AbortCpltCallback>
 80038a8:	e015      	b.n	80038d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b4:	2b40      	cmp	r3, #64	@ 0x40
 80038b6:	d10b      	bne.n	80038d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fe feaf 	bl	8002634 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10e      	bne.n	8003904 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d104      	bne.n	8003904 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003912:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800391a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d113      	bne.n	8003950 <I2C_ITError+0x254>
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b28      	cmp	r3, #40	@ 0x28
 800392c:	d110      	bne.n	8003950 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <I2C_ITError+0x260>)
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe fe5e 	bl	800260c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	08003c5d 	.word	0x08003c5d
 800395c:	ffff0000 	.word	0xffff0000

08003960 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	4608      	mov	r0, r1
 800396a:	4611      	mov	r1, r2
 800396c:	461a      	mov	r2, r3
 800396e:	4603      	mov	r3, r0
 8003970:	817b      	strh	r3, [r7, #10]
 8003972:	460b      	mov	r3, r1
 8003974:	813b      	strh	r3, [r7, #8]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	2200      	movs	r2, #0
 8003992:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fa08 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b0:	d103      	bne.n	80039ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e05f      	b.n	8003a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	492d      	ldr	r1, [pc, #180]	@ (8003a88 <I2C_RequestMemoryWrite+0x128>)
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fa63 	bl	8003ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e04c      	b.n	8003a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fc:	6a39      	ldr	r1, [r7, #32]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 faee 	bl	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d107      	bne.n	8003a22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e02b      	b.n	8003a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2c:	893b      	ldrh	r3, [r7, #8]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]
 8003a36:	e021      	b.n	8003a7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a38:	893b      	ldrh	r3, [r7, #8]
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fac8 	bl	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d107      	bne.n	8003a6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e005      	b.n	8003a7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a72:	893b      	ldrh	r3, [r7, #8]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	00010002 	.word	0x00010002

08003a8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	4608      	mov	r0, r1
 8003a96:	4611      	mov	r1, r2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	817b      	strh	r3, [r7, #10]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	813b      	strh	r3, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f96a 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aec:	d103      	bne.n	8003af6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0aa      	b.n	8003c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	4952      	ldr	r1, [pc, #328]	@ (8003c58 <I2C_RequestMemoryRead+0x1cc>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f9c5 	bl	8003ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e097      	b.n	8003c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b38:	6a39      	ldr	r1, [r7, #32]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa50 	bl	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d107      	bne.n	8003b5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e076      	b.n	8003c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d105      	bne.n	8003b74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b68:	893b      	ldrh	r3, [r7, #8]
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	e021      	b.n	8003bb8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b74:	893b      	ldrh	r3, [r7, #8]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b84:	6a39      	ldr	r1, [r7, #32]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fa2a 	bl	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d107      	bne.n	8003baa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e050      	b.n	8003c50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bae:	893b      	ldrh	r3, [r7, #8]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bba:	6a39      	ldr	r1, [r7, #32]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fa0f 	bl	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00d      	beq.n	8003be4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d107      	bne.n	8003be0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e035      	b.n	8003c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f8d3 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c1a:	d103      	bne.n	8003c24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e013      	b.n	8003c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c28:	897b      	ldrh	r3, [r7, #10]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	6a3a      	ldr	r2, [r7, #32]
 8003c3c:	4906      	ldr	r1, [pc, #24]	@ (8003c58 <I2C_RequestMemoryRead+0x1cc>)
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f92e 	bl	8003ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	00010002 	.word	0x00010002

08003c5c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c74:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c76:	4b4b      	ldr	r3, [pc, #300]	@ (8003da4 <I2C_DMAAbort+0x148>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003da8 <I2C_DMAAbort+0x14c>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	0a1a      	lsrs	r2, r3, #8
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	00da      	lsls	r2, r3, #3
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f043 0220 	orr.w	r2, r3, #32
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003ca2:	e00a      	b.n	8003cba <I2C_DMAAbort+0x5e>
    }
    count--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb8:	d0ea      	beq.n	8003c90 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b60      	cmp	r3, #96	@ 0x60
 8003d2a:	d10e      	bne.n	8003d4a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f7fe fc80 	bl	8002648 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d48:	e027      	b.n	8003d9a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d50:	2b28      	cmp	r3, #40	@ 0x28
 8003d52:	d117      	bne.n	8003d84 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2228      	movs	r2, #40	@ 0x28
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d82:	e007      	b.n	8003d94 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d94:	6978      	ldr	r0, [r7, #20]
 8003d96:	f7fe fc4d 	bl	8002634 <HAL_I2C_ErrorCallback>
}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000000 	.word	0x20000000
 8003da8:	14f8b589 	.word	0x14f8b589

08003dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dbc:	e048      	b.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d044      	beq.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7fd f90f 	bl	8000fe8 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d302      	bcc.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d139      	bne.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d10d      	bne.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	e00c      	b.n	8003e1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	43da      	mvns	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d116      	bne.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	f043 0220 	orr.w	r2, r3, #32
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e023      	b.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d10d      	bne.n	8003e76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	43da      	mvns	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4013      	ands	r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	e00c      	b.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d093      	beq.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eae:	e071      	b.n	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ebe:	d123      	bne.n	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ece:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	f043 0204 	orr.w	r2, r3, #4
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e067      	b.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0e:	d041      	beq.n	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fd f86a 	bl	8000fe8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d136      	bne.n	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d10c      	bne.n	8003f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	43da      	mvns	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf14      	ite	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	2300      	moveq	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	e00b      	b.n	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	43da      	mvns	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4013      	ands	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d016      	beq.n	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e021      	b.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	0c1b      	lsrs	r3, r3, #16
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d10c      	bne.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	43da      	mvns	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e00b      	b.n	8003fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bf14      	ite	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	2300      	moveq	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f47f af6d 	bne.w	8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fec:	e034      	b.n	8004058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f915 	bl	800421e <I2C_IsAcknowledgeFailed>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e034      	b.n	8004068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d028      	beq.n	8004058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7fc ffef 	bl	8000fe8 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d11d      	bne.n	8004058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	2b80      	cmp	r3, #128	@ 0x80
 8004028:	d016      	beq.n	8004058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e007      	b.n	8004068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004062:	2b80      	cmp	r3, #128	@ 0x80
 8004064:	d1c3      	bne.n	8003fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800407c:	e034      	b.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f8cd 	bl	800421e <I2C_IsAcknowledgeFailed>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e034      	b.n	80040f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d028      	beq.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fc ffa7 	bl	8000fe8 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d11d      	bne.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d016      	beq.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e007      	b.n	80040f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d1c3      	bne.n	800407e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800410c:	4b13      	ldr	r3, [pc, #76]	@ (800415c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	08db      	lsrs	r3, r3, #3
 8004112:	4a13      	ldr	r2, [pc, #76]	@ (8004160 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	0a1a      	lsrs	r2, r3, #8
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3b01      	subs	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d107      	bne.n	800413e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	f043 0220 	orr.w	r2, r3, #32
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e008      	b.n	8004150 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800414c:	d0e9      	beq.n	8004122 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	20000000 	.word	0x20000000
 8004160:	14f8b589 	.word	0x14f8b589

08004164 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004170:	e049      	b.n	8004206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b10      	cmp	r3, #16
 800417e:	d119      	bne.n	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0210 	mvn.w	r2, #16
 8004188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e030      	b.n	8004216 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b4:	f7fc ff18 	bl	8000fe8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d11d      	bne.n	8004206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d4:	2b40      	cmp	r3, #64	@ 0x40
 80041d6:	d016      	beq.n	8004206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e007      	b.n	8004216 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004210:	2b40      	cmp	r3, #64	@ 0x40
 8004212:	d1ae      	bne.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004234:	d11b      	bne.n	800426e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800423e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f043 0204 	orr.w	r2, r3, #4
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800428c:	d103      	bne.n	8004296 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004294:	e007      	b.n	80042a6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800429e:	d102      	bne.n	80042a6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2208      	movs	r2, #8
 80042a4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d129      	bne.n	800431c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	@ 0x24
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0210 	bic.w	r2, r2, #16
 80042ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800432a:	b480      	push	{r7}
 800432c:	b085      	sub	sp, #20
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b20      	cmp	r3, #32
 8004342:	d12a      	bne.n	800439a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	@ 0x24
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004364:	89fb      	ldrh	r3, [r7, #14]
 8004366:	f023 030f 	bic.w	r3, r3, #15
 800436a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	b29a      	uxth	r2, r3
 8004370:	89fb      	ldrh	r3, [r7, #14]
 8004372:	4313      	orrs	r3, r2
 8004374:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	89fa      	ldrh	r2, [r7, #14]
 800437c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
  }
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e267      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d075      	beq.n	80044b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043c6:	4b88      	ldr	r3, [pc, #544]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d00c      	beq.n	80043ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b85      	ldr	r3, [pc, #532]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d112      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043de:	4b82      	ldr	r3, [pc, #520]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ea:	d10b      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	4b7e      	ldr	r3, [pc, #504]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05b      	beq.n	80044b0 <HAL_RCC_OscConfig+0x108>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d157      	bne.n	80044b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e242      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x74>
 800440e:	4b76      	ldr	r3, [pc, #472]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a75      	ldr	r2, [pc, #468]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x98>
 8004426:	4b70      	ldr	r3, [pc, #448]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6f      	ldr	r2, [pc, #444]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b6d      	ldr	r3, [pc, #436]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a6c      	ldr	r2, [pc, #432]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 8004440:	4b69      	ldr	r3, [pc, #420]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a68      	ldr	r2, [pc, #416]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b66      	ldr	r3, [pc, #408]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a65      	ldr	r2, [pc, #404]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fc fdc2 	bl	8000fe8 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fc fdbe 	bl	8000fe8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	@ 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e207      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b5b      	ldr	r3, [pc, #364]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xc0>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fc fdae 	bl	8000fe8 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fc fdaa 	bl	8000fe8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	@ 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1f3      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b51      	ldr	r3, [pc, #324]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0xe8>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d063      	beq.n	8004586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044be:	4b4a      	ldr	r3, [pc, #296]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b47      	ldr	r3, [pc, #284]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d6:	4b44      	ldr	r3, [pc, #272]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	4b41      	ldr	r3, [pc, #260]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1c7      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b3b      	ldr	r3, [pc, #236]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4937      	ldr	r1, [pc, #220]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b34      	ldr	r3, [pc, #208]	@ (80045ec <HAL_RCC_OscConfig+0x244>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fc fd63 	bl	8000fe8 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004526:	f7fc fd5f 	bl	8000fe8 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e1a8      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	4b2b      	ldr	r3, [pc, #172]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b28      	ldr	r3, [pc, #160]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4925      	ldr	r1, [pc, #148]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <HAL_RCC_OscConfig+0x244>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fc fd42 	bl	8000fe8 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004568:	f7fc fd3e 	bl	8000fe8 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e187      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d036      	beq.n	8004600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <HAL_RCC_OscConfig+0x248>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fc fd22 	bl	8000fe8 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fc fd1e 	bl	8000fe8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e167      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <HAL_RCC_OscConfig+0x240>)
 80045bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x200>
 80045c6:	e01b      	b.n	8004600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c8:	4b09      	ldr	r3, [pc, #36]	@ (80045f0 <HAL_RCC_OscConfig+0x248>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fc fd0b 	bl	8000fe8 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	e00e      	b.n	80045f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fc fd07 	bl	8000fe8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d907      	bls.n	80045f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e150      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
 80045e8:	40023800 	.word	0x40023800
 80045ec:	42470000 	.word	0x42470000
 80045f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	4b88      	ldr	r3, [pc, #544]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1ea      	bne.n	80045d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8097 	beq.w	800473c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b81      	ldr	r3, [pc, #516]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b7d      	ldr	r3, [pc, #500]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	4a7c      	ldr	r2, [pc, #496]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800462c:	6413      	str	r3, [r2, #64]	@ 0x40
 800462e:	4b7a      	ldr	r3, [pc, #488]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463e:	4b77      	ldr	r3, [pc, #476]	@ (800481c <HAL_RCC_OscConfig+0x474>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464a:	4b74      	ldr	r3, [pc, #464]	@ (800481c <HAL_RCC_OscConfig+0x474>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a73      	ldr	r2, [pc, #460]	@ (800481c <HAL_RCC_OscConfig+0x474>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004656:	f7fc fcc7 	bl	8000fe8 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fc fcc3 	bl	8000fe8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e10c      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b6a      	ldr	r3, [pc, #424]	@ (800481c <HAL_RCC_OscConfig+0x474>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x2ea>
 8004684:	4b64      	ldr	r3, [pc, #400]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004688:	4a63      	ldr	r2, [pc, #396]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004690:	e01c      	b.n	80046cc <HAL_RCC_OscConfig+0x324>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b05      	cmp	r3, #5
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x30c>
 800469a:	4b5f      	ldr	r3, [pc, #380]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	4a5e      	ldr	r2, [pc, #376]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0x324>
 80046b4:	4b58      	ldr	r3, [pc, #352]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b8:	4a57      	ldr	r2, [pc, #348]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c0:	4b55      	ldr	r3, [pc, #340]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	4a54      	ldr	r2, [pc, #336]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046c6:	f023 0304 	bic.w	r3, r3, #4
 80046ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d015      	beq.n	8004700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fc fc88 	bl	8000fe8 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fc fc84 	bl	8000fe8 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0cb      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	4b49      	ldr	r3, [pc, #292]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ee      	beq.n	80046dc <HAL_RCC_OscConfig+0x334>
 80046fe:	e014      	b.n	800472a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004700:	f7fc fc72 	bl	8000fe8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004706:	e00a      	b.n	800471e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fc fc6e 	bl	8000fe8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0b5      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471e:	4b3e      	ldr	r3, [pc, #248]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ee      	bne.n	8004708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d105      	bne.n	800473c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004730:	4b39      	ldr	r3, [pc, #228]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	4a38      	ldr	r2, [pc, #224]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800473a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a1 	beq.w	8004888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004746:	4b34      	ldr	r3, [pc, #208]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b08      	cmp	r3, #8
 8004750:	d05c      	beq.n	800480c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d141      	bne.n	80047de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b31      	ldr	r3, [pc, #196]	@ (8004820 <HAL_RCC_OscConfig+0x478>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fc fc42 	bl	8000fe8 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004768:	f7fc fc3e 	bl	8000fe8 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e087      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	4b27      	ldr	r3, [pc, #156]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	019b      	lsls	r3, r3, #6
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	3b01      	subs	r3, #1
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a8:	061b      	lsls	r3, r3, #24
 80047aa:	491b      	ldr	r1, [pc, #108]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <HAL_RCC_OscConfig+0x478>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fc fc17 	bl	8000fe8 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047be:	f7fc fc13 	bl	8000fe8 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e05c      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d0:	4b11      	ldr	r3, [pc, #68]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x416>
 80047dc:	e054      	b.n	8004888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <HAL_RCC_OscConfig+0x478>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fc fc00 	bl	8000fe8 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fc fbfc 	bl	8000fe8 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e045      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <HAL_RCC_OscConfig+0x470>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x444>
 800480a:	e03d      	b.n	8004888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e038      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
 8004818:	40023800 	.word	0x40023800
 800481c:	40007000 	.word	0x40007000
 8004820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004824:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <HAL_RCC_OscConfig+0x4ec>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d028      	beq.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d121      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d11a      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004854:	4013      	ands	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800485a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800485c:	4293      	cmp	r3, r2
 800485e:	d111      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	3b01      	subs	r3, #1
 800486e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0cc      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b68      	ldr	r3, [pc, #416]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d90c      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b65      	ldr	r3, [pc, #404]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b63      	ldr	r3, [pc, #396]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b8      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a58      	ldr	r2, [pc, #352]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004904:	4b53      	ldr	r3, [pc, #332]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a52      	ldr	r2, [pc, #328]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800490e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b50      	ldr	r3, [pc, #320]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	494d      	ldr	r1, [pc, #308]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d044      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b47      	ldr	r3, [pc, #284]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d119      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d003      	beq.n	8004956 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004952:	2b03      	cmp	r3, #3
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b3f      	ldr	r3, [pc, #252]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e06f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	4b3b      	ldr	r3, [pc, #236]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e067      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004976:	4b37      	ldr	r3, [pc, #220]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4934      	ldr	r1, [pc, #208]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004988:	f7fc fb2e 	bl	8000fe8 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004990:	f7fc fb2a 	bl	8000fe8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e04f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 020c 	and.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1eb      	bne.n	8004990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b8:	4b25      	ldr	r3, [pc, #148]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d20c      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b22      	ldr	r3, [pc, #136]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e032      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b19      	ldr	r3, [pc, #100]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4916      	ldr	r1, [pc, #88]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0a:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490e      	ldr	r1, [pc, #56]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a1e:	f000 f821 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490a      	ldr	r1, [pc, #40]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a09      	ldr	r2, [pc, #36]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc fa8e 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023c00 	.word	0x40023c00
 8004a54:	40023800 	.word	0x40023800
 8004a58:	0800964c 	.word	0x0800964c
 8004a5c:	20000000 	.word	0x20000000
 8004a60:	20000004 	.word	0x20000004

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b094      	sub	sp, #80	@ 0x50
 8004a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7c:	4b79      	ldr	r3, [pc, #484]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d00d      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	f200 80e1 	bhi.w	8004c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x34>
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a96:	e0db      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a98:	4b73      	ldr	r3, [pc, #460]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a9c:	e0db      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9e:	4b73      	ldr	r3, [pc, #460]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8004aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aa2:	e0d8      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aae:	4b6d      	ldr	r3, [pc, #436]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d063      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b6a      	ldr	r3, [pc, #424]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ac4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ace:	2300      	movs	r3, #0
 8004ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	462b      	mov	r3, r5
 8004ada:	f04f 0000 	mov.w	r0, #0
 8004ade:	f04f 0100 	mov.w	r1, #0
 8004ae2:	0159      	lsls	r1, r3, #5
 8004ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae8:	0150      	lsls	r0, r2, #5
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4621      	mov	r1, r4
 8004af0:	1a51      	subs	r1, r2, r1
 8004af2:	6139      	str	r1, [r7, #16]
 8004af4:	4629      	mov	r1, r5
 8004af6:	eb63 0301 	sbc.w	r3, r3, r1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b08:	4659      	mov	r1, fp
 8004b0a:	018b      	lsls	r3, r1, #6
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b12:	4651      	mov	r1, sl
 8004b14:	018a      	lsls	r2, r1, #6
 8004b16:	4651      	mov	r1, sl
 8004b18:	ebb2 0801 	subs.w	r8, r2, r1
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b36:	4690      	mov	r8, r2
 8004b38:	4699      	mov	r9, r3
 8004b3a:	4623      	mov	r3, r4
 8004b3c:	eb18 0303 	adds.w	r3, r8, r3
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	462b      	mov	r3, r5
 8004b44:	eb49 0303 	adc.w	r3, r9, r3
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b56:	4629      	mov	r1, r5
 8004b58:	024b      	lsls	r3, r1, #9
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b60:	4621      	mov	r1, r4
 8004b62:	024a      	lsls	r2, r1, #9
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b74:	f7fb fb94 	bl	80002a0 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b80:	e058      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b82:	4b38      	ldr	r3, [pc, #224]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	2200      	movs	r2, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	2300      	movs	r3, #0
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	f04f 0000 	mov.w	r0, #0
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	0159      	lsls	r1, r3, #5
 8004baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bae:	0150      	lsls	r0, r2, #5
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bba:	4649      	mov	r1, r9
 8004bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	00eb      	lsls	r3, r5, #3
 8004be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bea:	00e2      	lsls	r2, r4, #3
 8004bec:	4614      	mov	r4, r2
 8004bee:	461d      	mov	r5, r3
 8004bf0:	4643      	mov	r3, r8
 8004bf2:	18e3      	adds	r3, r4, r3
 8004bf4:	603b      	str	r3, [r7, #0]
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	eb45 0303 	adc.w	r3, r5, r3
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	028b      	lsls	r3, r1, #10
 8004c0e:	4621      	mov	r1, r4
 8004c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c14:	4621      	mov	r1, r4
 8004c16:	028a      	lsls	r2, r1, #10
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c1e:	2200      	movs	r2, #0
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	61fa      	str	r2, [r7, #28]
 8004c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c28:	f7fb fb3a 	bl	80002a0 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4613      	mov	r3, r2
 8004c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c34:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c4e:	e002      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3750      	adds	r7, #80	@ 0x50
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800
 8004c68:	00f42400 	.word	0x00f42400
 8004c6c:	007a1200 	.word	0x007a1200

08004c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c74:	4b03      	ldr	r3, [pc, #12]	@ (8004c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000000 	.word	0x20000000

08004c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c8c:	f7ff fff0 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0a9b      	lsrs	r3, r3, #10
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4903      	ldr	r1, [pc, #12]	@ (8004cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	0800965c 	.word	0x0800965c

08004cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cb4:	f7ff ffdc 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0b5b      	lsrs	r3, r3, #13
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4903      	ldr	r1, [pc, #12]	@ (8004cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	0800965c 	.word	0x0800965c

08004cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e042      	b.n	8004d70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fb ffce 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2224      	movs	r2, #36	@ 0x24
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fd7f 	bl	8005820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	@ 0x28
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d175      	bne.n	8004e84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_UART_Transmit+0x2c>
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e06e      	b.n	8004e86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2221      	movs	r2, #33	@ 0x21
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db6:	f7fc f917 	bl	8000fe8 <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd0:	d108      	bne.n	8004de4 <HAL_UART_Transmit+0x6c>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	e003      	b.n	8004dec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dec:	e02e      	b.n	8004e4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	@ 0x80
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fb1d 	bl	8005438 <UART_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e03a      	b.n	8004e86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	3302      	adds	r3, #2
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e007      	b.n	8004e3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1cb      	bne.n	8004dee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2140      	movs	r1, #64	@ 0x40
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fae9 	bl	8005438 <UART_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e006      	b.n	8004e86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b0ba      	sub	sp, #232	@ 0xe8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x66>
 8004ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fbd7 	bl	80056a2 <UART_Receive_IT>
      return;
 8004ef4:	e273      	b.n	80053de <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80de 	beq.w	80050bc <HAL_UART_IRQHandler+0x22c>
 8004f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 80d1 	beq.w	80050bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_UART_IRQHandler+0xae>
 8004f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_UART_IRQHandler+0xd2>
 8004f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	f043 0202 	orr.w	r2, r3, #2
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <HAL_UART_IRQHandler+0xf6>
 8004f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7e:	f043 0204 	orr.w	r2, r3, #4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d011      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x126>
 8004f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d105      	bne.n	8004faa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	f043 0208 	orr.w	r2, r3, #8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 820a 	beq.w	80053d4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_UART_IRQHandler+0x14e>
 8004fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fb62 	bl	80056a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <HAL_UART_IRQHandler+0x17a>
 8005002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04f      	beq.n	80050aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fa6d 	bl	80054ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501a:	2b40      	cmp	r3, #64	@ 0x40
 800501c:	d141      	bne.n	80050a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3314      	adds	r3, #20
 8005024:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800503c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800504a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800504e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005056:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1d9      	bne.n	800501e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d013      	beq.n	800509a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	4a8a      	ldr	r2, [pc, #552]	@ (80052a0 <HAL_UART_IRQHandler+0x410>)
 8005078:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507e:	4618      	mov	r0, r3
 8005080:	f7fc f93f 	bl	8001302 <HAL_DMA_Abort_IT>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005094:	4610      	mov	r0, r2
 8005096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005098:	e00e      	b.n	80050b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f9b6 	bl	800540c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	e00a      	b.n	80050b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f9b2 	bl	800540c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a8:	e006      	b.n	80050b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f9ae 	bl	800540c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80050b6:	e18d      	b.n	80053d4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b8:	bf00      	nop
    return;
 80050ba:	e18b      	b.n	80053d4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	f040 8167 	bne.w	8005394 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8160 	beq.w	8005394 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8159 	beq.w	8005394 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60bb      	str	r3, [r7, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005102:	2b40      	cmp	r3, #64	@ 0x40
 8005104:	f040 80ce 	bne.w	80052a4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005114:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80a9 	beq.w	8005270 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005126:	429a      	cmp	r2, r3
 8005128:	f080 80a2 	bcs.w	8005270 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005132:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513e:	f000 8088 	beq.w	8005252 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005158:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800515c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800516e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800517a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1d9      	bne.n	8005142 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800519e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051a0:	f023 0301 	bic.w	r3, r3, #1
 80051a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3314      	adds	r3, #20
 80051ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e1      	bne.n	800518e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e3      	bne.n	80051ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005222:	f023 0310 	bic.w	r3, r3, #16
 8005226:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005234:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005236:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800523a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e3      	bne.n	8005210 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524c:	4618      	mov	r0, r3
 800524e:	f7fb ffe8 	bl	8001222 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005260:	b29b      	uxth	r3, r3
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	b29b      	uxth	r3, r3
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f8d9 	bl	8005420 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800526e:	e0b3      	b.n	80053d8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005274:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005278:	429a      	cmp	r2, r3
 800527a:	f040 80ad 	bne.w	80053d8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005288:	f040 80a6 	bne.w	80053d8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f8c1 	bl	8005420 <HAL_UARTEx_RxEventCallback>
      return;
 800529e:	e09b      	b.n	80053d8 <HAL_UART_IRQHandler+0x548>
 80052a0:	080055b1 	.word	0x080055b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 808e 	beq.w	80053dc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80052c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8089 	beq.w	80053dc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80052ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80052f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e3      	bne.n	80052ca <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	623b      	str	r3, [r7, #32]
   return(result);
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3314      	adds	r3, #20
 8005322:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005326:	633a      	str	r2, [r7, #48]	@ 0x30
 8005328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800532c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e3      	bne.n	8005302 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	60fb      	str	r3, [r7, #12]
   return(result);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800536c:	61fa      	str	r2, [r7, #28]
 800536e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	617b      	str	r3, [r7, #20]
   return(result);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e3      	bne.n	8005348 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f847 	bl	8005420 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005392:	e023      	b.n	80053dc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_UART_IRQHandler+0x524>
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f910 	bl	80055d2 <UART_Transmit_IT>
    return;
 80053b2:	e014      	b.n	80053de <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00e      	beq.n	80053de <HAL_UART_IRQHandler+0x54e>
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f950 	bl	8005672 <UART_EndTransmit_IT>
    return;
 80053d2:	e004      	b.n	80053de <HAL_UART_IRQHandler+0x54e>
    return;
 80053d4:	bf00      	nop
 80053d6:	e002      	b.n	80053de <HAL_UART_IRQHandler+0x54e>
      return;
 80053d8:	bf00      	nop
 80053da:	e000      	b.n	80053de <HAL_UART_IRQHandler+0x54e>
      return;
 80053dc:	bf00      	nop
  }
}
 80053de:	37e8      	adds	r7, #232	@ 0xe8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005448:	e03b      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d037      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7fb fdc9 	bl	8000fe8 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <UART_WaitOnFlagUntilTimeout+0x30>
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e03a      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d023      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b80      	cmp	r3, #128	@ 0x80
 800547e:	d020      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b40      	cmp	r3, #64	@ 0x40
 8005484:	d01d      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b08      	cmp	r3, #8
 8005492:	d116      	bne.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f81d 	bl	80054ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2208      	movs	r2, #8
 80054b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e00f      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d0b4      	beq.n	800544a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b095      	sub	sp, #84	@ 0x54
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005512:	643a      	str	r2, [r7, #64]	@ 0x40
 8005514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005518:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e5      	bne.n	80054f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3314      	adds	r3, #20
 800552c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	61fb      	str	r3, [r7, #28]
   return(result);
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800554c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e5      	bne.n	8005526 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555e:	2b01      	cmp	r3, #1
 8005560:	d119      	bne.n	8005596 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	60bb      	str	r3, [r7, #8]
   return(result);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f023 0310 	bic.w	r3, r3, #16
 8005578:	647b      	str	r3, [r7, #68]	@ 0x44
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005582:	61ba      	str	r2, [r7, #24]
 8005584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6979      	ldr	r1, [r7, #20]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	613b      	str	r3, [r7, #16]
   return(result);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055a4:	bf00      	nop
 80055a6:	3754      	adds	r7, #84	@ 0x54
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff ff21 	bl	800540c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b21      	cmp	r3, #33	@ 0x21
 80055e4:	d13e      	bne.n	8005664 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ee:	d114      	bne.n	800561a <UART_Transmit_IT+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d110      	bne.n	800561a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800560c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	1c9a      	adds	r2, r3, #2
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	621a      	str	r2, [r3, #32]
 8005618:	e008      	b.n	800562c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6211      	str	r1, [r2, #32]
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29b      	uxth	r3, r3
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4619      	mov	r1, r3
 800563a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800564e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800565e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005688:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fea6 	bl	80053e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b08c      	sub	sp, #48	@ 0x30
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b22      	cmp	r3, #34	@ 0x22
 80056bc:	f040 80aa 	bne.w	8005814 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c8:	d115      	bne.n	80056f6 <UART_Receive_IT+0x54>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d111      	bne.n	80056f6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	1c9a      	adds	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80056f4:	e024      	b.n	8005740 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005704:	d007      	beq.n	8005716 <UART_Receive_IT+0x74>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <UART_Receive_IT+0x82>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e008      	b.n	8005736 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005730:	b2da      	uxtb	r2, r3
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	4619      	mov	r1, r3
 800574e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005750:	2b00      	cmp	r3, #0
 8005752:	d15d      	bne.n	8005810 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0220 	bic.w	r2, r2, #32
 8005762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005796:	2b01      	cmp	r3, #1
 8005798:	d135      	bne.n	8005806 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	613b      	str	r3, [r7, #16]
   return(result);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 0310 	bic.w	r3, r3, #16
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c0:	623a      	str	r2, [r7, #32]
 80057c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	69f9      	ldr	r1, [r7, #28]
 80057c6:	6a3a      	ldr	r2, [r7, #32]
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e5      	bne.n	80057a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d10a      	bne.n	80057f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fe0e 	bl	8005420 <HAL_UARTEx_RxEventCallback>
 8005804:	e002      	b.n	800580c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff fdf6 	bl	80053f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	e002      	b.n	8005816 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	e000      	b.n	8005816 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005814:	2302      	movs	r3, #2
  }
}
 8005816:	4618      	mov	r0, r3
 8005818:	3730      	adds	r7, #48	@ 0x30
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005824:	b0c0      	sub	sp, #256	@ 0x100
 8005826:	af00      	add	r7, sp, #0
 8005828:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583c:	68d9      	ldr	r1, [r3, #12]
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	ea40 0301 	orr.w	r3, r0, r1
 8005848:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	431a      	orrs	r2, r3
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	431a      	orrs	r2, r3
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005878:	f021 010c 	bic.w	r1, r1, #12
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005886:	430b      	orrs	r3, r1
 8005888:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589a:	6999      	ldr	r1, [r3, #24]
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	ea40 0301 	orr.w	r3, r0, r1
 80058a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b8f      	ldr	r3, [pc, #572]	@ (8005aec <UART_SetConfig+0x2cc>)
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d005      	beq.n	80058c0 <UART_SetConfig+0xa0>
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b8d      	ldr	r3, [pc, #564]	@ (8005af0 <UART_SetConfig+0x2d0>)
 80058bc:	429a      	cmp	r2, r3
 80058be:	d104      	bne.n	80058ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058c0:	f7ff f9f6 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 80058c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058c8:	e003      	b.n	80058d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ca:	f7ff f9dd 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 80058ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058dc:	f040 810c 	bne.w	8005af8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	1891      	adds	r1, r2, r2
 80058f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058fa:	415b      	adcs	r3, r3
 80058fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005902:	4621      	mov	r1, r4
 8005904:	eb12 0801 	adds.w	r8, r2, r1
 8005908:	4629      	mov	r1, r5
 800590a:	eb43 0901 	adc.w	r9, r3, r1
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800591a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800591e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005922:	4690      	mov	r8, r2
 8005924:	4699      	mov	r9, r3
 8005926:	4623      	mov	r3, r4
 8005928:	eb18 0303 	adds.w	r3, r8, r3
 800592c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005930:	462b      	mov	r3, r5
 8005932:	eb49 0303 	adc.w	r3, r9, r3
 8005936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005946:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800594a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800594e:	460b      	mov	r3, r1
 8005950:	18db      	adds	r3, r3, r3
 8005952:	653b      	str	r3, [r7, #80]	@ 0x50
 8005954:	4613      	mov	r3, r2
 8005956:	eb42 0303 	adc.w	r3, r2, r3
 800595a:	657b      	str	r3, [r7, #84]	@ 0x54
 800595c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005960:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005964:	f7fa fc9c 	bl	80002a0 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4b61      	ldr	r3, [pc, #388]	@ (8005af4 <UART_SetConfig+0x2d4>)
 800596e:	fba3 2302 	umull	r2, r3, r3, r2
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	011c      	lsls	r4, r3, #4
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597a:	2200      	movs	r2, #0
 800597c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005980:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005984:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005988:	4642      	mov	r2, r8
 800598a:	464b      	mov	r3, r9
 800598c:	1891      	adds	r1, r2, r2
 800598e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005990:	415b      	adcs	r3, r3
 8005992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005994:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005998:	4641      	mov	r1, r8
 800599a:	eb12 0a01 	adds.w	sl, r2, r1
 800599e:	4649      	mov	r1, r9
 80059a0:	eb43 0b01 	adc.w	fp, r3, r1
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b8:	4692      	mov	sl, r2
 80059ba:	469b      	mov	fp, r3
 80059bc:	4643      	mov	r3, r8
 80059be:	eb1a 0303 	adds.w	r3, sl, r3
 80059c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059c6:	464b      	mov	r3, r9
 80059c8:	eb4b 0303 	adc.w	r3, fp, r3
 80059cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059e4:	460b      	mov	r3, r1
 80059e6:	18db      	adds	r3, r3, r3
 80059e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ea:	4613      	mov	r3, r2
 80059ec:	eb42 0303 	adc.w	r3, r2, r3
 80059f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059fa:	f7fa fc51 	bl	80002a0 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	4b3b      	ldr	r3, [pc, #236]	@ (8005af4 <UART_SetConfig+0x2d4>)
 8005a06:	fba3 2301 	umull	r2, r3, r3, r1
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	2264      	movs	r2, #100	@ 0x64
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	1acb      	subs	r3, r1, r3
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a1a:	4b36      	ldr	r3, [pc, #216]	@ (8005af4 <UART_SetConfig+0x2d4>)
 8005a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a28:	441c      	add	r4, r3
 8005a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	1891      	adds	r1, r2, r2
 8005a42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a44:	415b      	adcs	r3, r3
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	1851      	adds	r1, r2, r1
 8005a50:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a52:	4649      	mov	r1, r9
 8005a54:	414b      	adcs	r3, r1
 8005a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a64:	4659      	mov	r1, fp
 8005a66:	00cb      	lsls	r3, r1, #3
 8005a68:	4651      	mov	r1, sl
 8005a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a6e:	4651      	mov	r1, sl
 8005a70:	00ca      	lsls	r2, r1, #3
 8005a72:	4610      	mov	r0, r2
 8005a74:	4619      	mov	r1, r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	4642      	mov	r2, r8
 8005a7a:	189b      	adds	r3, r3, r2
 8005a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a80:	464b      	mov	r3, r9
 8005a82:	460a      	mov	r2, r1
 8005a84:	eb42 0303 	adc.w	r3, r2, r3
 8005a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	18db      	adds	r3, r3, r3
 8005aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	eb42 0303 	adc.w	r3, r2, r3
 8005aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ab2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ab6:	f7fa fbf3 	bl	80002a0 <__aeabi_uldivmod>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <UART_SetConfig+0x2d4>)
 8005ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	2164      	movs	r1, #100	@ 0x64
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	3332      	adds	r3, #50	@ 0x32
 8005ad2:	4a08      	ldr	r2, [pc, #32]	@ (8005af4 <UART_SetConfig+0x2d4>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	f003 0207 	and.w	r2, r3, #7
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4422      	add	r2, r4
 8005ae6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae8:	e106      	b.n	8005cf8 <UART_SetConfig+0x4d8>
 8005aea:	bf00      	nop
 8005aec:	40011000 	.word	0x40011000
 8005af0:	40011400 	.word	0x40011400
 8005af4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	1891      	adds	r1, r2, r2
 8005b10:	6239      	str	r1, [r7, #32]
 8005b12:	415b      	adcs	r3, r3
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	1854      	adds	r4, r2, r1
 8005b1e:	4649      	mov	r1, r9
 8005b20:	eb43 0501 	adc.w	r5, r3, r1
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	00eb      	lsls	r3, r5, #3
 8005b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b32:	00e2      	lsls	r2, r4, #3
 8005b34:	4614      	mov	r4, r2
 8005b36:	461d      	mov	r5, r3
 8005b38:	4643      	mov	r3, r8
 8005b3a:	18e3      	adds	r3, r4, r3
 8005b3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b40:	464b      	mov	r3, r9
 8005b42:	eb45 0303 	adc.w	r3, r5, r3
 8005b46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b66:	4629      	mov	r1, r5
 8005b68:	008b      	lsls	r3, r1, #2
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b70:	4621      	mov	r1, r4
 8005b72:	008a      	lsls	r2, r1, #2
 8005b74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b78:	f7fa fb92 	bl	80002a0 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4b60      	ldr	r3, [pc, #384]	@ (8005d04 <UART_SetConfig+0x4e4>)
 8005b82:	fba3 2302 	umull	r2, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	011c      	lsls	r4, r3, #4
 8005b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	61b9      	str	r1, [r7, #24]
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bac:	4641      	mov	r1, r8
 8005bae:	1851      	adds	r1, r2, r1
 8005bb0:	6139      	str	r1, [r7, #16]
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	414b      	adcs	r3, r1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	00cb      	lsls	r3, r1, #3
 8005bc8:	4651      	mov	r1, sl
 8005bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bce:	4651      	mov	r1, sl
 8005bd0:	00ca      	lsls	r2, r1, #3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4642      	mov	r2, r8
 8005bda:	189b      	adds	r3, r3, r2
 8005bdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005be0:	464b      	mov	r3, r9
 8005be2:	460a      	mov	r2, r1
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c04:	4649      	mov	r1, r9
 8005c06:	008b      	lsls	r3, r1, #2
 8005c08:	4641      	mov	r1, r8
 8005c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c0e:	4641      	mov	r1, r8
 8005c10:	008a      	lsls	r2, r1, #2
 8005c12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c16:	f7fa fb43 	bl	80002a0 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4b38      	ldr	r3, [pc, #224]	@ (8005d04 <UART_SetConfig+0x4e4>)
 8005c22:	fba3 2301 	umull	r2, r3, r3, r1
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	2264      	movs	r2, #100	@ 0x64
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	1acb      	subs	r3, r1, r3
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	3332      	adds	r3, #50	@ 0x32
 8005c34:	4a33      	ldr	r2, [pc, #204]	@ (8005d04 <UART_SetConfig+0x4e4>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c40:	441c      	add	r4, r3
 8005c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c46:	2200      	movs	r2, #0
 8005c48:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	1891      	adds	r1, r2, r2
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	415b      	adcs	r3, r3
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c60:	4641      	mov	r1, r8
 8005c62:	1851      	adds	r1, r2, r1
 8005c64:	6039      	str	r1, [r7, #0]
 8005c66:	4649      	mov	r1, r9
 8005c68:	414b      	adcs	r3, r1
 8005c6a:	607b      	str	r3, [r7, #4]
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c78:	4659      	mov	r1, fp
 8005c7a:	00cb      	lsls	r3, r1, #3
 8005c7c:	4651      	mov	r1, sl
 8005c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c82:	4651      	mov	r1, sl
 8005c84:	00ca      	lsls	r2, r1, #3
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4642      	mov	r2, r8
 8005c8e:	189b      	adds	r3, r3, r2
 8005c90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c92:	464b      	mov	r3, r9
 8005c94:	460a      	mov	r2, r1
 8005c96:	eb42 0303 	adc.w	r3, r2, r3
 8005c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ca6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	008b      	lsls	r3, r1, #2
 8005cb8:	4641      	mov	r1, r8
 8005cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	008a      	lsls	r2, r1, #2
 8005cc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cc6:	f7fa faeb 	bl	80002a0 <__aeabi_uldivmod>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4b0d      	ldr	r3, [pc, #52]	@ (8005d04 <UART_SetConfig+0x4e4>)
 8005cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	2164      	movs	r1, #100	@ 0x64
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	3332      	adds	r3, #50	@ 0x32
 8005ce2:	4a08      	ldr	r2, [pc, #32]	@ (8005d04 <UART_SetConfig+0x4e4>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	f003 020f 	and.w	r2, r3, #15
 8005cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4422      	add	r2, r4
 8005cf6:	609a      	str	r2, [r3, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d04:	51eb851f 	.word	0x51eb851f

08005d08 <__NVIC_SetPriority>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	6039      	str	r1, [r7, #0]
 8005d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	db0a      	blt.n	8005d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	490c      	ldr	r1, [pc, #48]	@ (8005d54 <__NVIC_SetPriority+0x4c>)
 8005d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d26:	0112      	lsls	r2, r2, #4
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d30:	e00a      	b.n	8005d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	4908      	ldr	r1, [pc, #32]	@ (8005d58 <__NVIC_SetPriority+0x50>)
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	3b04      	subs	r3, #4
 8005d40:	0112      	lsls	r2, r2, #4
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	440b      	add	r3, r1
 8005d46:	761a      	strb	r2, [r3, #24]
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000e100 	.word	0xe000e100
 8005d58:	e000ed00 	.word	0xe000ed00

08005d5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d60:	2100      	movs	r1, #0
 8005d62:	f06f 0004 	mvn.w	r0, #4
 8005d66:	f7ff ffcf 	bl	8005d08 <__NVIC_SetPriority>
#endif
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d76:	f3ef 8305 	mrs	r3, IPSR
 8005d7a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d82:	f06f 0305 	mvn.w	r3, #5
 8005d86:	607b      	str	r3, [r7, #4]
 8005d88:	e00c      	b.n	8005da4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005db4 <osKernelInitialize+0x44>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d105      	bne.n	8005d9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d92:	4b08      	ldr	r3, [pc, #32]	@ (8005db4 <osKernelInitialize+0x44>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	607b      	str	r3, [r7, #4]
 8005d9c:	e002      	b.n	8005da4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005da2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005da4:	687b      	ldr	r3, [r7, #4]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000284 	.word	0x20000284

08005db8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dbe:	f3ef 8305 	mrs	r3, IPSR
 8005dc2:	603b      	str	r3, [r7, #0]
  return(result);
 8005dc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dca:	f06f 0305 	mvn.w	r3, #5
 8005dce:	607b      	str	r3, [r7, #4]
 8005dd0:	e010      	b.n	8005df4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e00 <osKernelStart+0x48>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d109      	bne.n	8005dee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dda:	f7ff ffbf 	bl	8005d5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dde:	4b08      	ldr	r3, [pc, #32]	@ (8005e00 <osKernelStart+0x48>)
 8005de0:	2202      	movs	r2, #2
 8005de2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005de4:	f001 fa68 	bl	80072b8 <vTaskStartScheduler>
      stat = osOK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	e002      	b.n	8005df4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dee:	f04f 33ff 	mov.w	r3, #4294967295
 8005df2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005df4:	687b      	ldr	r3, [r7, #4]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000284 	.word	0x20000284

08005e04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08e      	sub	sp, #56	@ 0x38
 8005e08:	af04      	add	r7, sp, #16
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e14:	f3ef 8305 	mrs	r3, IPSR
 8005e18:	617b      	str	r3, [r7, #20]
  return(result);
 8005e1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d17e      	bne.n	8005f1e <osThreadNew+0x11a>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d07b      	beq.n	8005f1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e26:	2380      	movs	r3, #128	@ 0x80
 8005e28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e2a:	2318      	movs	r3, #24
 8005e2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295
 8005e36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d045      	beq.n	8005eca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <osThreadNew+0x48>
        name = attr->name;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <osThreadNew+0x6e>
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b38      	cmp	r3, #56	@ 0x38
 8005e64:	d805      	bhi.n	8005e72 <osThreadNew+0x6e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <osThreadNew+0x72>
        return (NULL);
 8005e72:	2300      	movs	r3, #0
 8005e74:	e054      	b.n	8005f20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00e      	beq.n	8005eac <osThreadNew+0xa8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b5b      	cmp	r3, #91	@ 0x5b
 8005e94:	d90a      	bls.n	8005eac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d006      	beq.n	8005eac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <osThreadNew+0xa8>
        mem = 1;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	e010      	b.n	8005ece <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10c      	bne.n	8005ece <osThreadNew+0xca>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d108      	bne.n	8005ece <osThreadNew+0xca>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <osThreadNew+0xca>
          mem = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	e001      	b.n	8005ece <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d110      	bne.n	8005ef6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005edc:	9202      	str	r2, [sp, #8]
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6a3a      	ldr	r2, [r7, #32]
 8005ee8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f001 f808 	bl	8006f00 <xTaskCreateStatic>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	e013      	b.n	8005f1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d110      	bne.n	8005f1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f107 0310 	add.w	r3, r7, #16
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 f856 	bl	8006fc0 <xTaskCreate>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d001      	beq.n	8005f1e <osThreadNew+0x11a>
            hTask = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f1e:	693b      	ldr	r3, [r7, #16]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3728      	adds	r7, #40	@ 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f30:	f3ef 8305 	mrs	r3, IPSR
 8005f34:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <osDelay+0x1c>
    stat = osErrorISR;
 8005f3c:	f06f 0305 	mvn.w	r3, #5
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e007      	b.n	8005f54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 f97c 	bl	800724c <vTaskDelay>
    }
  }

  return (stat);
 8005f54:	68fb      	ldr	r3, [r7, #12]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b08a      	sub	sp, #40	@ 0x28
 8005f62:	af02      	add	r7, sp, #8
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f6e:	f3ef 8305 	mrs	r3, IPSR
 8005f72:	613b      	str	r3, [r7, #16]
  return(result);
 8005f74:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d15f      	bne.n	800603a <osMessageQueueNew+0xdc>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d05c      	beq.n	800603a <osMessageQueueNew+0xdc>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d059      	beq.n	800603a <osMessageQueueNew+0xdc>
    mem = -1;
 8005f86:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d029      	beq.n	8005fe6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d012      	beq.n	8005fc0 <osMessageQueueNew+0x62>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005fa0:	d90e      	bls.n	8005fc0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d302      	bcc.n	8005fc0 <osMessageQueueNew+0x62>
        mem = 1;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e014      	b.n	8005fea <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d110      	bne.n	8005fea <osMessageQueueNew+0x8c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10c      	bne.n	8005fea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d108      	bne.n	8005fea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d104      	bne.n	8005fea <osMessageQueueNew+0x8c>
          mem = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e001      	b.n	8005fea <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10b      	bne.n	8006008 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	9100      	str	r1, [sp, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fa30 	bl	8006464 <xQueueGenericCreateStatic>
 8006004:	61f8      	str	r0, [r7, #28]
 8006006:	e008      	b.n	800601a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800600e:	2200      	movs	r2, #0
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 faa3 	bl	800655e <xQueueGenericCreate>
 8006018:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00c      	beq.n	800603a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <osMessageQueueNew+0xd0>
        name = attr->name;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e001      	b.n	8006032 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006032:	6979      	ldr	r1, [r7, #20]
 8006034:	69f8      	ldr	r0, [r7, #28]
 8006036:	f000 ff05 	bl	8006e44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800603a:	69fb      	ldr	r3, [r7, #28]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006058:	2300      	movs	r3, #0
 800605a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800605c:	f3ef 8305 	mrs	r3, IPSR
 8006060:	617b      	str	r3, [r7, #20]
  return(result);
 8006062:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006064:	2b00      	cmp	r3, #0
 8006066:	d028      	beq.n	80060ba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <osMessageQueuePut+0x36>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <osMessageQueuePut+0x36>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800607a:	f06f 0303 	mvn.w	r3, #3
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e038      	b.n	80060f4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006086:	f107 0210 	add.w	r2, r7, #16
 800608a:	2300      	movs	r3, #0
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	69b8      	ldr	r0, [r7, #24]
 8006090:	f000 fbc6 	bl	8006820 <xQueueGenericSendFromISR>
 8006094:	4603      	mov	r3, r0
 8006096:	2b01      	cmp	r3, #1
 8006098:	d003      	beq.n	80060a2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800609a:	f06f 0302 	mvn.w	r3, #2
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	e028      	b.n	80060f4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d025      	beq.n	80060f4 <osMessageQueuePut+0xb0>
 80060a8:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <osMessageQueuePut+0xbc>)
 80060aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	e01c      	b.n	80060f4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <osMessageQueuePut+0x82>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d103      	bne.n	80060ce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80060c6:	f06f 0303 	mvn.w	r3, #3
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e012      	b.n	80060f4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80060ce:	2300      	movs	r3, #0
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	69b8      	ldr	r0, [r7, #24]
 80060d6:	f000 faa1 	bl	800661c <xQueueGenericSend>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d009      	beq.n	80060f4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80060e6:	f06f 0301 	mvn.w	r3, #1
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	e002      	b.n	80060f4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80060ee:	f06f 0302 	mvn.w	r3, #2
 80060f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80060f4:	69fb      	ldr	r3, [r7, #28]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800611a:	f3ef 8305 	mrs	r3, IPSR
 800611e:	617b      	str	r3, [r7, #20]
  return(result);
 8006120:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006122:	2b00      	cmp	r3, #0
 8006124:	d028      	beq.n	8006178 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <osMessageQueueGet+0x34>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <osMessageQueueGet+0x34>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006138:	f06f 0303 	mvn.w	r3, #3
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	e037      	b.n	80061b0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006144:	f107 0310 	add.w	r3, r7, #16
 8006148:	461a      	mov	r2, r3
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	69b8      	ldr	r0, [r7, #24]
 800614e:	f000 fce7 	bl	8006b20 <xQueueReceiveFromISR>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d003      	beq.n	8006160 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006158:	f06f 0302 	mvn.w	r3, #2
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	e027      	b.n	80061b0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d024      	beq.n	80061b0 <osMessageQueueGet+0xac>
 8006166:	4b15      	ldr	r3, [pc, #84]	@ (80061bc <osMessageQueueGet+0xb8>)
 8006168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	e01b      	b.n	80061b0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <osMessageQueueGet+0x80>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006184:	f06f 0303 	mvn.w	r3, #3
 8006188:	61fb      	str	r3, [r7, #28]
 800618a:	e011      	b.n	80061b0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	69b8      	ldr	r0, [r7, #24]
 8006192:	f000 fbe3 	bl	800695c <xQueueReceive>
 8006196:	4603      	mov	r3, r0
 8006198:	2b01      	cmp	r3, #1
 800619a:	d009      	beq.n	80061b0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80061a2:	f06f 0301 	mvn.w	r3, #1
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	e002      	b.n	80061b0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80061aa:	f06f 0302 	mvn.w	r3, #2
 80061ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80061b0:	69fb      	ldr	r3, [r7, #28]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	e000ed04 	.word	0xe000ed04

080061c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a07      	ldr	r2, [pc, #28]	@ (80061ec <vApplicationGetIdleTaskMemory+0x2c>)
 80061d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4a06      	ldr	r2, [pc, #24]	@ (80061f0 <vApplicationGetIdleTaskMemory+0x30>)
 80061d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2280      	movs	r2, #128	@ 0x80
 80061dc:	601a      	str	r2, [r3, #0]
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000288 	.word	0x20000288
 80061f0:	200002e4 	.word	0x200002e4

080061f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a07      	ldr	r2, [pc, #28]	@ (8006220 <vApplicationGetTimerTaskMemory+0x2c>)
 8006204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4a06      	ldr	r2, [pc, #24]	@ (8006224 <vApplicationGetTimerTaskMemory+0x30>)
 800620a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	200004e4 	.word	0x200004e4
 8006224:	20000540 	.word	0x20000540

08006228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f103 0208 	add.w	r2, r3, #8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f04f 32ff 	mov.w	r2, #4294967295
 8006240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f103 0208 	add.w	r2, r3, #8
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f103 0208 	add.w	r2, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d103      	bne.n	80062ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e00c      	b.n	8006304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3308      	adds	r3, #8
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e002      	b.n	80062f8 <vListInsert+0x2e>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	d2f6      	bcs.n	80062f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6892      	ldr	r2, [r2, #8]
 8006352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6852      	ldr	r2, [r2, #4]
 800635c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d103      	bne.n	8006370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	1e5a      	subs	r2, r3, #1
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80063bc:	f002 f934 	bl	8008628 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	441a      	add	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ec:	3b01      	subs	r3, #1
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80063f2:	fb01 f303 	mul.w	r3, r1, r3
 80063f6:	441a      	add	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	22ff      	movs	r2, #255	@ 0xff
 8006400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	22ff      	movs	r2, #255	@ 0xff
 8006408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d114      	bne.n	800643c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01a      	beq.n	8006450 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3310      	adds	r3, #16
 800641e:	4618      	mov	r0, r3
 8006420:	f001 f9d8 	bl	80077d4 <xTaskRemoveFromEventList>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d012      	beq.n	8006450 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800642a:	4b0d      	ldr	r3, [pc, #52]	@ (8006460 <xQueueGenericReset+0xd0>)
 800642c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	e009      	b.n	8006450 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3310      	adds	r3, #16
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff fef1 	bl	8006228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3324      	adds	r3, #36	@ 0x24
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff feec 	bl	8006228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006450:	f002 f91c 	bl	800868c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006454:	2301      	movs	r3, #1
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08e      	sub	sp, #56	@ 0x38
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10b      	bne.n	8006490 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800648a:	bf00      	nop
 800648c:	bf00      	nop
 800648e:	e7fd      	b.n	800648c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <xQueueGenericCreateStatic+0x56>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <xQueueGenericCreateStatic+0x5a>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <xQueueGenericCreateStatic+0x5c>
 80064be:	2300      	movs	r3, #0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10b      	bne.n	80064dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	623b      	str	r3, [r7, #32]
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d102      	bne.n	80064e8 <xQueueGenericCreateStatic+0x84>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <xQueueGenericCreateStatic+0x88>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <xQueueGenericCreateStatic+0x8a>
 80064ec:	2300      	movs	r3, #0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	61fb      	str	r3, [r7, #28]
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	e7fd      	b.n	8006506 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800650a:	2350      	movs	r3, #80	@ 0x50
 800650c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b50      	cmp	r3, #80	@ 0x50
 8006512:	d00b      	beq.n	800652c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	61bb      	str	r3, [r7, #24]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800652c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00d      	beq.n	8006554 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006540:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f840 	bl	80065d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006556:	4618      	mov	r0, r3
 8006558:	3730      	adds	r7, #48	@ 0x30
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800655e:	b580      	push	{r7, lr}
 8006560:	b08a      	sub	sp, #40	@ 0x28
 8006562:	af02      	add	r7, sp, #8
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	4613      	mov	r3, r2
 800656a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	613b      	str	r3, [r7, #16]
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	e7fd      	b.n	8006586 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3350      	adds	r3, #80	@ 0x50
 8006598:	4618      	mov	r0, r3
 800659a:	f002 f967 	bl	800886c <pvPortMalloc>
 800659e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d011      	beq.n	80065ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	3350      	adds	r3, #80	@ 0x50
 80065ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065b8:	79fa      	ldrb	r2, [r7, #7]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	4613      	mov	r3, r2
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f805 	bl	80065d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065ca:	69bb      	ldr	r3, [r7, #24]
	}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3720      	adds	r7, #32
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e002      	b.n	80065f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006602:	2101      	movs	r1, #1
 8006604:	69b8      	ldr	r0, [r7, #24]
 8006606:	f7ff fec3 	bl	8006390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08e      	sub	sp, #56	@ 0x38
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800662a:	2300      	movs	r3, #0
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10b      	bne.n	8006650 <xQueueGenericSend+0x34>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	e7fd      	b.n	800664c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d103      	bne.n	800665e <xQueueGenericSend+0x42>
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <xQueueGenericSend+0x46>
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <xQueueGenericSend+0x48>
 8006662:	2300      	movs	r3, #0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <xQueueGenericSend+0x64>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d103      	bne.n	800668e <xQueueGenericSend+0x72>
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <xQueueGenericSend+0x76>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <xQueueGenericSend+0x78>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10b      	bne.n	80066b0 <xQueueGenericSend+0x94>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	623b      	str	r3, [r7, #32]
}
 80066aa:	bf00      	nop
 80066ac:	bf00      	nop
 80066ae:	e7fd      	b.n	80066ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066b0:	f001 fa50 	bl	8007b54 <xTaskGetSchedulerState>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <xQueueGenericSend+0xa4>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <xQueueGenericSend+0xa8>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <xQueueGenericSend+0xaa>
 80066c4:	2300      	movs	r3, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	61fb      	str	r3, [r7, #28]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066e2:	f001 ffa1 	bl	8008628 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d302      	bcc.n	80066f8 <xQueueGenericSend+0xdc>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d129      	bne.n	800674c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066fe:	f000 fa91 	bl	8006c24 <prvCopyDataToQueue>
 8006702:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	d010      	beq.n	800672e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	3324      	adds	r3, #36	@ 0x24
 8006710:	4618      	mov	r0, r3
 8006712:	f001 f85f 	bl	80077d4 <xTaskRemoveFromEventList>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d013      	beq.n	8006744 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800671c:	4b3f      	ldr	r3, [pc, #252]	@ (800681c <xQueueGenericSend+0x200>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	e00a      	b.n	8006744 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800672e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006734:	4b39      	ldr	r3, [pc, #228]	@ (800681c <xQueueGenericSend+0x200>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006744:	f001 ffa2 	bl	800868c <vPortExitCritical>
				return pdPASS;
 8006748:	2301      	movs	r3, #1
 800674a:	e063      	b.n	8006814 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d103      	bne.n	800675a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006752:	f001 ff9b 	bl	800868c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006756:	2300      	movs	r3, #0
 8006758:	e05c      	b.n	8006814 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800675a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006760:	f107 0314 	add.w	r3, r7, #20
 8006764:	4618      	mov	r0, r3
 8006766:	f001 f899 	bl	800789c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800676e:	f001 ff8d 	bl	800868c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006772:	f000 fe09 	bl	8007388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006776:	f001 ff57 	bl	8008628 <vPortEnterCritical>
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006780:	b25b      	sxtb	r3, r3
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d103      	bne.n	8006790 <xQueueGenericSend+0x174>
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006792:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006796:	b25b      	sxtb	r3, r3
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d103      	bne.n	80067a6 <xQueueGenericSend+0x18a>
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067a6:	f001 ff71 	bl	800868c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067aa:	1d3a      	adds	r2, r7, #4
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 f888 	bl	80078c8 <xTaskCheckForTimeOut>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d124      	bne.n	8006808 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067c0:	f000 fb28 	bl	8006e14 <prvIsQueueFull>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d018      	beq.n	80067fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	3310      	adds	r3, #16
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4611      	mov	r1, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 ffac 	bl	8007730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067da:	f000 fab3 	bl	8006d44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067de:	f000 fde1 	bl	80073a4 <xTaskResumeAll>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f47f af7c 	bne.w	80066e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80067ea:	4b0c      	ldr	r3, [pc, #48]	@ (800681c <xQueueGenericSend+0x200>)
 80067ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	e772      	b.n	80066e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067fe:	f000 faa1 	bl	8006d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006802:	f000 fdcf 	bl	80073a4 <xTaskResumeAll>
 8006806:	e76c      	b.n	80066e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800680a:	f000 fa9b 	bl	8006d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800680e:	f000 fdc9 	bl	80073a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006812:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006814:	4618      	mov	r0, r3
 8006816:	3738      	adds	r7, #56	@ 0x38
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	e000ed04 	.word	0xe000ed04

08006820 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b090      	sub	sp, #64	@ 0x40
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d103      	bne.n	800685e <xQueueGenericSendFromISR+0x3e>
 8006856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <xQueueGenericSendFromISR+0x42>
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <xQueueGenericSendFromISR+0x44>
 8006862:	2300      	movs	r3, #0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d103      	bne.n	800688e <xQueueGenericSendFromISR+0x6e>
 8006886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <xQueueGenericSendFromISR+0x72>
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <xQueueGenericSendFromISR+0x74>
 8006892:	2300      	movs	r3, #0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	623b      	str	r3, [r7, #32]
}
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
 80068ae:	e7fd      	b.n	80068ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068b0:	f001 ff9a 	bl	80087e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068b4:	f3ef 8211 	mrs	r2, BASEPRI
 80068b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	61fa      	str	r2, [r7, #28]
 80068ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d8:	429a      	cmp	r2, r3
 80068da:	d302      	bcc.n	80068e2 <xQueueGenericSendFromISR+0xc2>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d12f      	bne.n	8006942 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80068f8:	f000 f994 	bl	8006c24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d112      	bne.n	800692c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690a:	2b00      	cmp	r3, #0
 800690c:	d016      	beq.n	800693c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800690e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006910:	3324      	adds	r3, #36	@ 0x24
 8006912:	4618      	mov	r0, r3
 8006914:	f000 ff5e 	bl	80077d4 <xTaskRemoveFromEventList>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00e      	beq.n	800693c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e007      	b.n	800693c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800692c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006930:	3301      	adds	r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	b25a      	sxtb	r2, r3
 8006936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800693c:	2301      	movs	r3, #1
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006940:	e001      	b.n	8006946 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006948:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006950:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006954:	4618      	mov	r0, r3
 8006956:	3740      	adds	r7, #64	@ 0x40
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08c      	sub	sp, #48	@ 0x30
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006968:	2300      	movs	r3, #0
 800696a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <xQueueReceive+0x32>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	623b      	str	r3, [r7, #32]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d103      	bne.n	800699c <xQueueReceive+0x40>
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <xQueueReceive+0x44>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <xQueueReceive+0x46>
 80069a0:	2300      	movs	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <xQueueReceive+0x62>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	61fb      	str	r3, [r7, #28]
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	e7fd      	b.n	80069ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069be:	f001 f8c9 	bl	8007b54 <xTaskGetSchedulerState>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <xQueueReceive+0x72>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <xQueueReceive+0x76>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <xQueueReceive+0x78>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10b      	bne.n	80069f0 <xQueueReceive+0x94>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	61bb      	str	r3, [r7, #24]
}
 80069ea:	bf00      	nop
 80069ec:	bf00      	nop
 80069ee:	e7fd      	b.n	80069ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069f0:	f001 fe1a 	bl	8008628 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01f      	beq.n	8006a40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a04:	f000 f978 	bl	8006cf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	1e5a      	subs	r2, r3, #1
 8006a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00f      	beq.n	8006a38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1a:	3310      	adds	r3, #16
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fed9 	bl	80077d4 <xTaskRemoveFromEventList>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a28:	4b3c      	ldr	r3, [pc, #240]	@ (8006b1c <xQueueReceive+0x1c0>)
 8006a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a38:	f001 fe28 	bl	800868c <vPortExitCritical>
				return pdPASS;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e069      	b.n	8006b14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a46:	f001 fe21 	bl	800868c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e062      	b.n	8006b14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d106      	bne.n	8006a62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a54:	f107 0310 	add.w	r3, r7, #16
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 ff1f 	bl	800789c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a62:	f001 fe13 	bl	800868c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a66:	f000 fc8f 	bl	8007388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a6a:	f001 fddd 	bl	8008628 <vPortEnterCritical>
 8006a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7a:	d103      	bne.n	8006a84 <xQueueReceive+0x128>
 8006a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a8a:	b25b      	sxtb	r3, r3
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d103      	bne.n	8006a9a <xQueueReceive+0x13e>
 8006a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a9a:	f001 fdf7 	bl	800868c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a9e:	1d3a      	adds	r2, r7, #4
 8006aa0:	f107 0310 	add.w	r3, r7, #16
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 ff0e 	bl	80078c8 <xTaskCheckForTimeOut>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d123      	bne.n	8006afa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ab4:	f000 f998 	bl	8006de8 <prvIsQueueEmpty>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d017      	beq.n	8006aee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	3324      	adds	r3, #36	@ 0x24
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fe32 	bl	8007730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006acc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ace:	f000 f939 	bl	8006d44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ad2:	f000 fc67 	bl	80073a4 <xTaskResumeAll>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d189      	bne.n	80069f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006adc:	4b0f      	ldr	r3, [pc, #60]	@ (8006b1c <xQueueReceive+0x1c0>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	e780      	b.n	80069f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af0:	f000 f928 	bl	8006d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006af4:	f000 fc56 	bl	80073a4 <xTaskResumeAll>
 8006af8:	e77a      	b.n	80069f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006afc:	f000 f922 	bl	8006d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b00:	f000 fc50 	bl	80073a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b06:	f000 f96f 	bl	8006de8 <prvIsQueueEmpty>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f43f af6f 	beq.w	80069f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3730      	adds	r7, #48	@ 0x30
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	@ 0x38
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	623b      	str	r3, [r7, #32]
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <xQueueReceiveFromISR+0x3c>
 8006b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <xQueueReceiveFromISR+0x40>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <xQueueReceiveFromISR+0x42>
 8006b60:	2300      	movs	r3, #0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	61fb      	str	r3, [r7, #28]
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	e7fd      	b.n	8006b7a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b7e:	f001 fe33 	bl	80087e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006b82:	f3ef 8211 	mrs	r2, BASEPRI
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	61ba      	str	r2, [r7, #24]
 8006b98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d02f      	beq.n	8006c0a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bb8:	f000 f89e 	bl	8006cf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	1e5a      	subs	r2, r3, #1
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006bc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bcc:	d112      	bne.n	8006bf4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d016      	beq.n	8006c04 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd8:	3310      	adds	r3, #16
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fdfa 	bl	80077d4 <xTaskRemoveFromEventList>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00e      	beq.n	8006c04 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e007      	b.n	8006c04 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	b25a      	sxtb	r2, r3
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006c04:	2301      	movs	r3, #1
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c08:	e001      	b.n	8006c0e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f383 8811 	msr	BASEPRI, r3
}
 8006c18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3738      	adds	r7, #56	@ 0x38
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10d      	bne.n	8006c5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d14d      	bne.n	8006ce6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 ff9e 	bl	8007b90 <xTaskPriorityDisinherit>
 8006c54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	609a      	str	r2, [r3, #8]
 8006c5c:	e043      	b.n	8006ce6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d119      	bne.n	8006c98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6858      	ldr	r0, [r3, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	f002 f840 	bl	8008cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7c:	441a      	add	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d32b      	bcc.n	8006ce6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	605a      	str	r2, [r3, #4]
 8006c96:	e026      	b.n	8006ce6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68d8      	ldr	r0, [r3, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	f002 f826 	bl	8008cf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb0:	425b      	negs	r3, r3
 8006cb2:	441a      	add	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d207      	bcs.n	8006cd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ccc:	425b      	negs	r3, r3
 8006cce:	441a      	add	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d105      	bne.n	8006ce6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006cee:	697b      	ldr	r3, [r7, #20]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d018      	beq.n	8006d3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d12:	441a      	add	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d303      	bcc.n	8006d2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68d9      	ldr	r1, [r3, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d34:	461a      	mov	r2, r3
 8006d36:	6838      	ldr	r0, [r7, #0]
 8006d38:	f001 ffdc 	bl	8008cf4 <memcpy>
	}
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d4c:	f001 fc6c 	bl	8008628 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d58:	e011      	b.n	8006d7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d012      	beq.n	8006d88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3324      	adds	r3, #36	@ 0x24
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fd34 	bl	80077d4 <xTaskRemoveFromEventList>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d72:	f000 fe0d 	bl	8007990 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	dce9      	bgt.n	8006d5a <prvUnlockQueue+0x16>
 8006d86:	e000      	b.n	8006d8a <prvUnlockQueue+0x46>
					break;
 8006d88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	22ff      	movs	r2, #255	@ 0xff
 8006d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006d92:	f001 fc7b 	bl	800868c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d96:	f001 fc47 	bl	8008628 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006da0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006da2:	e011      	b.n	8006dc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d012      	beq.n	8006dd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3310      	adds	r3, #16
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fd0f 	bl	80077d4 <xTaskRemoveFromEventList>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dbc:	f000 fde8 	bl	8007990 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dce9      	bgt.n	8006da4 <prvUnlockQueue+0x60>
 8006dd0:	e000      	b.n	8006dd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006dd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	22ff      	movs	r2, #255	@ 0xff
 8006dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ddc:	f001 fc56 	bl	800868c <vPortExitCritical>
}
 8006de0:	bf00      	nop
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006df0:	f001 fc1a 	bl	8008628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e001      	b.n	8006e06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e06:	f001 fc41 	bl	800868c <vPortExitCritical>

	return xReturn;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e1c:	f001 fc04 	bl	8008628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d102      	bne.n	8006e32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e001      	b.n	8006e36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e36:	f001 fc29 	bl	800868c <vPortExitCritical>

	return xReturn;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	e014      	b.n	8006e7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e54:	4a0f      	ldr	r2, [pc, #60]	@ (8006e94 <vQueueAddToRegistry+0x50>)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10b      	bne.n	8006e78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e60:	490c      	ldr	r1, [pc, #48]	@ (8006e94 <vQueueAddToRegistry+0x50>)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8006e94 <vQueueAddToRegistry+0x50>)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	4413      	add	r3, r2
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e76:	e006      	b.n	8006e86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b07      	cmp	r3, #7
 8006e82:	d9e7      	bls.n	8006e54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	20000940 	.word	0x20000940

08006e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ea8:	f001 fbbe 	bl	8008628 <vPortEnterCritical>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eb2:	b25b      	sxtb	r3, r3
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d103      	bne.n	8006ec2 <vQueueWaitForMessageRestricted+0x2a>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ec8:	b25b      	sxtb	r3, r3
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d103      	bne.n	8006ed8 <vQueueWaitForMessageRestricted+0x40>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ed8:	f001 fbd8 	bl	800868c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	3324      	adds	r3, #36	@ 0x24
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fc45 	bl	800777c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ef2:	6978      	ldr	r0, [r7, #20]
 8006ef4:	f7ff ff26 	bl	8006d44 <prvUnlockQueue>
	}
 8006ef8:	bf00      	nop
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08e      	sub	sp, #56	@ 0x38
 8006f04:	af04      	add	r7, sp, #16
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	623b      	str	r3, [r7, #32]
}
 8006f26:	bf00      	nop
 8006f28:	bf00      	nop
 8006f2a:	e7fd      	b.n	8006f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10b      	bne.n	8006f4a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61fb      	str	r3, [r7, #28]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f4a:	235c      	movs	r3, #92	@ 0x5c
 8006f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f52:	d00b      	beq.n	8006f6c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	61bb      	str	r3, [r7, #24]
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01e      	beq.n	8006fb2 <xTaskCreateStatic+0xb2>
 8006f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01b      	beq.n	8006fb2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f82:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	f107 0314 	add.w	r3, r7, #20
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f850 	bl	800704a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006faa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fac:	f000 f8de 	bl	800716c <prvAddNewTaskToReadyList>
 8006fb0:	e001      	b.n	8006fb6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fb6:	697b      	ldr	r3, [r7, #20]
	}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3728      	adds	r7, #40	@ 0x28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08c      	sub	sp, #48	@ 0x30
 8006fc4:	af04      	add	r7, sp, #16
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fc49 	bl	800886c <pvPortMalloc>
 8006fda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fe2:	205c      	movs	r0, #92	@ 0x5c
 8006fe4:	f001 fc42 	bl	800886c <pvPortMalloc>
 8006fe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ff6:	e005      	b.n	8007004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ff8:	6978      	ldr	r0, [r7, #20]
 8006ffa:	f001 fd05 	bl	8008a08 <vPortFree>
 8006ffe:	e001      	b.n	8007004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d017      	beq.n	800703a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007012:	88fa      	ldrh	r2, [r7, #6]
 8007014:	2300      	movs	r3, #0
 8007016:	9303      	str	r3, [sp, #12]
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	9302      	str	r3, [sp, #8]
 800701c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f80e 	bl	800704a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800702e:	69f8      	ldr	r0, [r7, #28]
 8007030:	f000 f89c 	bl	800716c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007034:	2301      	movs	r3, #1
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e002      	b.n	8007040 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800703a:	f04f 33ff 	mov.w	r3, #4294967295
 800703e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007040:	69bb      	ldr	r3, [r7, #24]
	}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b088      	sub	sp, #32
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
 8007056:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	461a      	mov	r2, r3
 8007062:	21a5      	movs	r1, #165	@ 0xa5
 8007064:	f001 fe12 	bl	8008c8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007072:	3b01      	subs	r3, #1
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	f023 0307 	bic.w	r3, r3, #7
 8007080:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	617b      	str	r3, [r7, #20]
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	e7fd      	b.n	80070a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d01f      	beq.n	80070ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070aa:	2300      	movs	r3, #0
 80070ac:	61fb      	str	r3, [r7, #28]
 80070ae:	e012      	b.n	80070d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	7819      	ldrb	r1, [r3, #0]
 80070b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	3334      	adds	r3, #52	@ 0x34
 80070c0:	460a      	mov	r2, r1
 80070c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d006      	beq.n	80070de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	3301      	adds	r3, #1
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2b0f      	cmp	r3, #15
 80070da:	d9e9      	bls.n	80070b0 <prvInitialiseNewTask+0x66>
 80070dc:	e000      	b.n	80070e0 <prvInitialiseNewTask+0x96>
			{
				break;
 80070de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070e8:	e003      	b.n	80070f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	2b37      	cmp	r3, #55	@ 0x37
 80070f6:	d901      	bls.n	80070fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070f8:	2337      	movs	r3, #55	@ 0x37
 80070fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007100:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007106:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	2200      	movs	r2, #0
 800710c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff f8a8 	bl	8006268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	3318      	adds	r3, #24
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff f8a3 	bl	8006268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007126:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007136:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	2200      	movs	r2, #0
 800713c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	68f9      	ldr	r1, [r7, #12]
 800714a:	69b8      	ldr	r0, [r7, #24]
 800714c:	f001 f93e 	bl	80083cc <pxPortInitialiseStack>
 8007150:	4602      	mov	r2, r0
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800715c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007162:	bf00      	nop
 8007164:	3720      	adds	r7, #32
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007174:	f001 fa58 	bl	8008628 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007178:	4b2d      	ldr	r3, [pc, #180]	@ (8007230 <prvAddNewTaskToReadyList+0xc4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	4a2c      	ldr	r2, [pc, #176]	@ (8007230 <prvAddNewTaskToReadyList+0xc4>)
 8007180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007182:	4b2c      	ldr	r3, [pc, #176]	@ (8007234 <prvAddNewTaskToReadyList+0xc8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800718a:	4a2a      	ldr	r2, [pc, #168]	@ (8007234 <prvAddNewTaskToReadyList+0xc8>)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007190:	4b27      	ldr	r3, [pc, #156]	@ (8007230 <prvAddNewTaskToReadyList+0xc4>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d110      	bne.n	80071ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007198:	f000 fc1e 	bl	80079d8 <prvInitialiseTaskLists>
 800719c:	e00d      	b.n	80071ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800719e:	4b26      	ldr	r3, [pc, #152]	@ (8007238 <prvAddNewTaskToReadyList+0xcc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d109      	bne.n	80071ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071a6:	4b23      	ldr	r3, [pc, #140]	@ (8007234 <prvAddNewTaskToReadyList+0xc8>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d802      	bhi.n	80071ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007234 <prvAddNewTaskToReadyList+0xc8>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071ba:	4b20      	ldr	r3, [pc, #128]	@ (800723c <prvAddNewTaskToReadyList+0xd0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	4a1e      	ldr	r2, [pc, #120]	@ (800723c <prvAddNewTaskToReadyList+0xd0>)
 80071c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071c4:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <prvAddNewTaskToReadyList+0xd0>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007240 <prvAddNewTaskToReadyList+0xd4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d903      	bls.n	80071e0 <prvAddNewTaskToReadyList+0x74>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	4a18      	ldr	r2, [pc, #96]	@ (8007240 <prvAddNewTaskToReadyList+0xd4>)
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4a15      	ldr	r2, [pc, #84]	@ (8007244 <prvAddNewTaskToReadyList+0xd8>)
 80071ee:	441a      	add	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4619      	mov	r1, r3
 80071f6:	4610      	mov	r0, r2
 80071f8:	f7ff f843 	bl	8006282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071fc:	f001 fa46 	bl	800868c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007200:	4b0d      	ldr	r3, [pc, #52]	@ (8007238 <prvAddNewTaskToReadyList+0xcc>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00e      	beq.n	8007226 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007208:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <prvAddNewTaskToReadyList+0xc8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	429a      	cmp	r2, r3
 8007214:	d207      	bcs.n	8007226 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007216:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <prvAddNewTaskToReadyList+0xdc>)
 8007218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000e54 	.word	0x20000e54
 8007234:	20000980 	.word	0x20000980
 8007238:	20000e60 	.word	0x20000e60
 800723c:	20000e70 	.word	0x20000e70
 8007240:	20000e5c 	.word	0x20000e5c
 8007244:	20000984 	.word	0x20000984
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d018      	beq.n	8007290 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800725e:	4b14      	ldr	r3, [pc, #80]	@ (80072b0 <vTaskDelay+0x64>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <vTaskDelay+0x32>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60bb      	str	r3, [r7, #8]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800727e:	f000 f883 	bl	8007388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007282:	2100      	movs	r1, #0
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fcf3 	bl	8007c70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800728a:	f000 f88b 	bl	80073a4 <xTaskResumeAll>
 800728e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d107      	bne.n	80072a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007296:	4b07      	ldr	r3, [pc, #28]	@ (80072b4 <vTaskDelay+0x68>)
 8007298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000e7c 	.word	0x20000e7c
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08a      	sub	sp, #40	@ 0x28
 80072bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072c6:	463a      	mov	r2, r7
 80072c8:	1d39      	adds	r1, r7, #4
 80072ca:	f107 0308 	add.w	r3, r7, #8
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe ff76 	bl	80061c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	9202      	str	r2, [sp, #8]
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	2300      	movs	r3, #0
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	2300      	movs	r3, #0
 80072e4:	460a      	mov	r2, r1
 80072e6:	4922      	ldr	r1, [pc, #136]	@ (8007370 <vTaskStartScheduler+0xb8>)
 80072e8:	4822      	ldr	r0, [pc, #136]	@ (8007374 <vTaskStartScheduler+0xbc>)
 80072ea:	f7ff fe09 	bl	8006f00 <xTaskCreateStatic>
 80072ee:	4603      	mov	r3, r0
 80072f0:	4a21      	ldr	r2, [pc, #132]	@ (8007378 <vTaskStartScheduler+0xc0>)
 80072f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072f4:	4b20      	ldr	r3, [pc, #128]	@ (8007378 <vTaskStartScheduler+0xc0>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072fc:	2301      	movs	r3, #1
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	e001      	b.n	8007306 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d102      	bne.n	8007312 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800730c:	f000 fd04 	bl	8007d18 <xTimerCreateTimerTask>
 8007310:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d116      	bne.n	8007346 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	613b      	str	r3, [r7, #16]
}
 800732a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800732c:	4b13      	ldr	r3, [pc, #76]	@ (800737c <vTaskStartScheduler+0xc4>)
 800732e:	f04f 32ff 	mov.w	r2, #4294967295
 8007332:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007334:	4b12      	ldr	r3, [pc, #72]	@ (8007380 <vTaskStartScheduler+0xc8>)
 8007336:	2201      	movs	r2, #1
 8007338:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800733a:	4b12      	ldr	r3, [pc, #72]	@ (8007384 <vTaskStartScheduler+0xcc>)
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007340:	f001 f8ce 	bl	80084e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007344:	e00f      	b.n	8007366 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734c:	d10b      	bne.n	8007366 <vTaskStartScheduler+0xae>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60fb      	str	r3, [r7, #12]
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	e7fd      	b.n	8007362 <vTaskStartScheduler+0xaa>
}
 8007366:	bf00      	nop
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	080095d4 	.word	0x080095d4
 8007374:	080079a9 	.word	0x080079a9
 8007378:	20000e78 	.word	0x20000e78
 800737c:	20000e74 	.word	0x20000e74
 8007380:	20000e60 	.word	0x20000e60
 8007384:	20000e58 	.word	0x20000e58

08007388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800738c:	4b04      	ldr	r3, [pc, #16]	@ (80073a0 <vTaskSuspendAll+0x18>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	4a03      	ldr	r2, [pc, #12]	@ (80073a0 <vTaskSuspendAll+0x18>)
 8007394:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007396:	bf00      	nop
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	20000e7c 	.word	0x20000e7c

080073a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073b2:	4b42      	ldr	r3, [pc, #264]	@ (80074bc <xTaskResumeAll+0x118>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	603b      	str	r3, [r7, #0]
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	e7fd      	b.n	80073ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073d2:	f001 f929 	bl	8008628 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073d6:	4b39      	ldr	r3, [pc, #228]	@ (80074bc <xTaskResumeAll+0x118>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3b01      	subs	r3, #1
 80073dc:	4a37      	ldr	r2, [pc, #220]	@ (80074bc <xTaskResumeAll+0x118>)
 80073de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073e0:	4b36      	ldr	r3, [pc, #216]	@ (80074bc <xTaskResumeAll+0x118>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d162      	bne.n	80074ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073e8:	4b35      	ldr	r3, [pc, #212]	@ (80074c0 <xTaskResumeAll+0x11c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d05e      	beq.n	80074ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073f0:	e02f      	b.n	8007452 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f2:	4b34      	ldr	r3, [pc, #208]	@ (80074c4 <xTaskResumeAll+0x120>)
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3318      	adds	r3, #24
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe ff9c 	bl	800633c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3304      	adds	r3, #4
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe ff97 	bl	800633c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007412:	4b2d      	ldr	r3, [pc, #180]	@ (80074c8 <xTaskResumeAll+0x124>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d903      	bls.n	8007422 <xTaskResumeAll+0x7e>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	4a2a      	ldr	r2, [pc, #168]	@ (80074c8 <xTaskResumeAll+0x124>)
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4a27      	ldr	r2, [pc, #156]	@ (80074cc <xTaskResumeAll+0x128>)
 8007430:	441a      	add	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3304      	adds	r3, #4
 8007436:	4619      	mov	r1, r3
 8007438:	4610      	mov	r0, r2
 800743a:	f7fe ff22 	bl	8006282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007442:	4b23      	ldr	r3, [pc, #140]	@ (80074d0 <xTaskResumeAll+0x12c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007448:	429a      	cmp	r2, r3
 800744a:	d302      	bcc.n	8007452 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800744c:	4b21      	ldr	r3, [pc, #132]	@ (80074d4 <xTaskResumeAll+0x130>)
 800744e:	2201      	movs	r2, #1
 8007450:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007452:	4b1c      	ldr	r3, [pc, #112]	@ (80074c4 <xTaskResumeAll+0x120>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1cb      	bne.n	80073f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007460:	f000 fb58 	bl	8007b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007464:	4b1c      	ldr	r3, [pc, #112]	@ (80074d8 <xTaskResumeAll+0x134>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d010      	beq.n	8007492 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007470:	f000 f846 	bl	8007500 <xTaskIncrementTick>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800747a:	4b16      	ldr	r3, [pc, #88]	@ (80074d4 <xTaskResumeAll+0x130>)
 800747c:	2201      	movs	r2, #1
 800747e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3b01      	subs	r3, #1
 8007484:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f1      	bne.n	8007470 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800748c:	4b12      	ldr	r3, [pc, #72]	@ (80074d8 <xTaskResumeAll+0x134>)
 800748e:	2200      	movs	r2, #0
 8007490:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007492:	4b10      	ldr	r3, [pc, #64]	@ (80074d4 <xTaskResumeAll+0x130>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800749a:	2301      	movs	r3, #1
 800749c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800749e:	4b0f      	ldr	r3, [pc, #60]	@ (80074dc <xTaskResumeAll+0x138>)
 80074a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074ae:	f001 f8ed 	bl	800868c <vPortExitCritical>

	return xAlreadyYielded;
 80074b2:	68bb      	ldr	r3, [r7, #8]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000e7c 	.word	0x20000e7c
 80074c0:	20000e54 	.word	0x20000e54
 80074c4:	20000e14 	.word	0x20000e14
 80074c8:	20000e5c 	.word	0x20000e5c
 80074cc:	20000984 	.word	0x20000984
 80074d0:	20000980 	.word	0x20000980
 80074d4:	20000e68 	.word	0x20000e68
 80074d8:	20000e64 	.word	0x20000e64
 80074dc:	e000ed04 	.word	0xe000ed04

080074e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074e6:	4b05      	ldr	r3, [pc, #20]	@ (80074fc <xTaskGetTickCount+0x1c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074ec:	687b      	ldr	r3, [r7, #4]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20000e58 	.word	0x20000e58

08007500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800750a:	4b4f      	ldr	r3, [pc, #316]	@ (8007648 <xTaskIncrementTick+0x148>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f040 8090 	bne.w	8007634 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007514:	4b4d      	ldr	r3, [pc, #308]	@ (800764c <xTaskIncrementTick+0x14c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3301      	adds	r3, #1
 800751a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800751c:	4a4b      	ldr	r2, [pc, #300]	@ (800764c <xTaskIncrementTick+0x14c>)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d121      	bne.n	800756c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007528:	4b49      	ldr	r3, [pc, #292]	@ (8007650 <xTaskIncrementTick+0x150>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	603b      	str	r3, [r7, #0]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <xTaskIncrementTick+0x46>
 800754a:	4b41      	ldr	r3, [pc, #260]	@ (8007650 <xTaskIncrementTick+0x150>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	4b40      	ldr	r3, [pc, #256]	@ (8007654 <xTaskIncrementTick+0x154>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a3e      	ldr	r2, [pc, #248]	@ (8007650 <xTaskIncrementTick+0x150>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	4a3e      	ldr	r2, [pc, #248]	@ (8007654 <xTaskIncrementTick+0x154>)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	4b3e      	ldr	r3, [pc, #248]	@ (8007658 <xTaskIncrementTick+0x158>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	4a3c      	ldr	r2, [pc, #240]	@ (8007658 <xTaskIncrementTick+0x158>)
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	f000 fad4 	bl	8007b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800756c:	4b3b      	ldr	r3, [pc, #236]	@ (800765c <xTaskIncrementTick+0x15c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	429a      	cmp	r2, r3
 8007574:	d349      	bcc.n	800760a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007576:	4b36      	ldr	r3, [pc, #216]	@ (8007650 <xTaskIncrementTick+0x150>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d104      	bne.n	800758a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007580:	4b36      	ldr	r3, [pc, #216]	@ (800765c <xTaskIncrementTick+0x15c>)
 8007582:	f04f 32ff 	mov.w	r2, #4294967295
 8007586:	601a      	str	r2, [r3, #0]
					break;
 8007588:	e03f      	b.n	800760a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800758a:	4b31      	ldr	r3, [pc, #196]	@ (8007650 <xTaskIncrementTick+0x150>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d203      	bcs.n	80075aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075a2:	4a2e      	ldr	r2, [pc, #184]	@ (800765c <xTaskIncrementTick+0x15c>)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075a8:	e02f      	b.n	800760a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fec4 	bl	800633c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d004      	beq.n	80075c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3318      	adds	r3, #24
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe febb 	bl	800633c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ca:	4b25      	ldr	r3, [pc, #148]	@ (8007660 <xTaskIncrementTick+0x160>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d903      	bls.n	80075da <xTaskIncrementTick+0xda>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	4a22      	ldr	r2, [pc, #136]	@ (8007660 <xTaskIncrementTick+0x160>)
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007664 <xTaskIncrementTick+0x164>)
 80075e8:	441a      	add	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4619      	mov	r1, r3
 80075f0:	4610      	mov	r0, r2
 80075f2:	f7fe fe46 	bl	8006282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007668 <xTaskIncrementTick+0x168>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	429a      	cmp	r2, r3
 8007602:	d3b8      	bcc.n	8007576 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007608:	e7b5      	b.n	8007576 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800760a:	4b17      	ldr	r3, [pc, #92]	@ (8007668 <xTaskIncrementTick+0x168>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007610:	4914      	ldr	r1, [pc, #80]	@ (8007664 <xTaskIncrementTick+0x164>)
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d901      	bls.n	8007626 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007622:	2301      	movs	r3, #1
 8007624:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007626:	4b11      	ldr	r3, [pc, #68]	@ (800766c <xTaskIncrementTick+0x16c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	e004      	b.n	800763e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007634:	4b0e      	ldr	r3, [pc, #56]	@ (8007670 <xTaskIncrementTick+0x170>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3301      	adds	r3, #1
 800763a:	4a0d      	ldr	r2, [pc, #52]	@ (8007670 <xTaskIncrementTick+0x170>)
 800763c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800763e:	697b      	ldr	r3, [r7, #20]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20000e7c 	.word	0x20000e7c
 800764c:	20000e58 	.word	0x20000e58
 8007650:	20000e0c 	.word	0x20000e0c
 8007654:	20000e10 	.word	0x20000e10
 8007658:	20000e6c 	.word	0x20000e6c
 800765c:	20000e74 	.word	0x20000e74
 8007660:	20000e5c 	.word	0x20000e5c
 8007664:	20000984 	.word	0x20000984
 8007668:	20000980 	.word	0x20000980
 800766c:	20000e68 	.word	0x20000e68
 8007670:	20000e64 	.word	0x20000e64

08007674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800767a:	4b28      	ldr	r3, [pc, #160]	@ (800771c <vTaskSwitchContext+0xa8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007682:	4b27      	ldr	r3, [pc, #156]	@ (8007720 <vTaskSwitchContext+0xac>)
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007688:	e042      	b.n	8007710 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800768a:	4b25      	ldr	r3, [pc, #148]	@ (8007720 <vTaskSwitchContext+0xac>)
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007690:	4b24      	ldr	r3, [pc, #144]	@ (8007724 <vTaskSwitchContext+0xb0>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	e011      	b.n	80076bc <vTaskSwitchContext+0x48>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	607b      	str	r3, [r7, #4]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <vTaskSwitchContext+0x3e>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	491a      	ldr	r1, [pc, #104]	@ (8007728 <vTaskSwitchContext+0xb4>)
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0e3      	beq.n	8007698 <vTaskSwitchContext+0x24>
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4a13      	ldr	r2, [pc, #76]	@ (8007728 <vTaskSwitchContext+0xb4>)
 80076dc:	4413      	add	r3, r2
 80076de:	60bb      	str	r3, [r7, #8]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	605a      	str	r2, [r3, #4]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	3308      	adds	r3, #8
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d104      	bne.n	8007700 <vTaskSwitchContext+0x8c>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	605a      	str	r2, [r3, #4]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	4a09      	ldr	r2, [pc, #36]	@ (800772c <vTaskSwitchContext+0xb8>)
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	4a06      	ldr	r2, [pc, #24]	@ (8007724 <vTaskSwitchContext+0xb0>)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6013      	str	r3, [r2, #0]
}
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20000e7c 	.word	0x20000e7c
 8007720:	20000e68 	.word	0x20000e68
 8007724:	20000e5c 	.word	0x20000e5c
 8007728:	20000984 	.word	0x20000984
 800772c:	20000980 	.word	0x20000980

08007730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	60fb      	str	r3, [r7, #12]
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007758:	4b07      	ldr	r3, [pc, #28]	@ (8007778 <vTaskPlaceOnEventList+0x48>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3318      	adds	r3, #24
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7fe fdb2 	bl	80062ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007766:	2101      	movs	r1, #1
 8007768:	6838      	ldr	r0, [r7, #0]
 800776a:	f000 fa81 	bl	8007c70 <prvAddCurrentTaskToDelayedList>
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000980 	.word	0x20000980

0800777c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	617b      	str	r3, [r7, #20]
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077a6:	4b0a      	ldr	r3, [pc, #40]	@ (80077d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3318      	adds	r3, #24
 80077ac:	4619      	mov	r1, r3
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7fe fd67 	bl	8006282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80077ba:	f04f 33ff 	mov.w	r3, #4294967295
 80077be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	68b8      	ldr	r0, [r7, #8]
 80077c4:	f000 fa54 	bl	8007c70 <prvAddCurrentTaskToDelayedList>
	}
 80077c8:	bf00      	nop
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000980 	.word	0x20000980

080077d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10b      	bne.n	8007802 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	60fb      	str	r3, [r7, #12]
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	e7fd      	b.n	80077fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	3318      	adds	r3, #24
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fd98 	bl	800633c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800780c:	4b1d      	ldr	r3, [pc, #116]	@ (8007884 <xTaskRemoveFromEventList+0xb0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d11d      	bne.n	8007850 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	3304      	adds	r3, #4
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fd8f 	bl	800633c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007822:	4b19      	ldr	r3, [pc, #100]	@ (8007888 <xTaskRemoveFromEventList+0xb4>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d903      	bls.n	8007832 <xTaskRemoveFromEventList+0x5e>
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782e:	4a16      	ldr	r2, [pc, #88]	@ (8007888 <xTaskRemoveFromEventList+0xb4>)
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4a13      	ldr	r2, [pc, #76]	@ (800788c <xTaskRemoveFromEventList+0xb8>)
 8007840:	441a      	add	r2, r3
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3304      	adds	r3, #4
 8007846:	4619      	mov	r1, r3
 8007848:	4610      	mov	r0, r2
 800784a:	f7fe fd1a 	bl	8006282 <vListInsertEnd>
 800784e:	e005      	b.n	800785c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3318      	adds	r3, #24
 8007854:	4619      	mov	r1, r3
 8007856:	480e      	ldr	r0, [pc, #56]	@ (8007890 <xTaskRemoveFromEventList+0xbc>)
 8007858:	f7fe fd13 	bl	8006282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007860:	4b0c      	ldr	r3, [pc, #48]	@ (8007894 <xTaskRemoveFromEventList+0xc0>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007866:	429a      	cmp	r2, r3
 8007868:	d905      	bls.n	8007876 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800786a:	2301      	movs	r3, #1
 800786c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800786e:	4b0a      	ldr	r3, [pc, #40]	@ (8007898 <xTaskRemoveFromEventList+0xc4>)
 8007870:	2201      	movs	r2, #1
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	e001      	b.n	800787a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800787a:	697b      	ldr	r3, [r7, #20]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	20000e7c 	.word	0x20000e7c
 8007888:	20000e5c 	.word	0x20000e5c
 800788c:	20000984 	.word	0x20000984
 8007890:	20000e14 	.word	0x20000e14
 8007894:	20000980 	.word	0x20000980
 8007898:	20000e68 	.word	0x20000e68

0800789c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078a4:	4b06      	ldr	r3, [pc, #24]	@ (80078c0 <vTaskInternalSetTimeOutState+0x24>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078ac:	4b05      	ldr	r3, [pc, #20]	@ (80078c4 <vTaskInternalSetTimeOutState+0x28>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	605a      	str	r2, [r3, #4]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	20000e6c 	.word	0x20000e6c
 80078c4:	20000e58 	.word	0x20000e58

080078c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	613b      	str	r3, [r7, #16]
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	e7fd      	b.n	80078ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10b      	bne.n	800790e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	60fb      	str	r3, [r7, #12]
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	e7fd      	b.n	800790a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800790e:	f000 fe8b 	bl	8008628 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007912:	4b1d      	ldr	r3, [pc, #116]	@ (8007988 <xTaskCheckForTimeOut+0xc0>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d102      	bne.n	8007932 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800792c:	2300      	movs	r3, #0
 800792e:	61fb      	str	r3, [r7, #28]
 8007930:	e023      	b.n	800797a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	4b15      	ldr	r3, [pc, #84]	@ (800798c <xTaskCheckForTimeOut+0xc4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	429a      	cmp	r2, r3
 800793c:	d007      	beq.n	800794e <xTaskCheckForTimeOut+0x86>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	429a      	cmp	r2, r3
 8007946:	d302      	bcc.n	800794e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007948:	2301      	movs	r3, #1
 800794a:	61fb      	str	r3, [r7, #28]
 800794c:	e015      	b.n	800797a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	429a      	cmp	r2, r3
 8007956:	d20b      	bcs.n	8007970 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff ff99 	bl	800789c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]
 800796e:	e004      	b.n	800797a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800797a:	f000 fe87 	bl	800868c <vPortExitCritical>

	return xReturn;
 800797e:	69fb      	ldr	r3, [r7, #28]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3720      	adds	r7, #32
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000e58 	.word	0x20000e58
 800798c:	20000e6c 	.word	0x20000e6c

08007990 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007994:	4b03      	ldr	r3, [pc, #12]	@ (80079a4 <vTaskMissedYield+0x14>)
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]
}
 800799a:	bf00      	nop
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	20000e68 	.word	0x20000e68

080079a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079b0:	f000 f852 	bl	8007a58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079b4:	4b06      	ldr	r3, [pc, #24]	@ (80079d0 <prvIdleTask+0x28>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d9f9      	bls.n	80079b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079bc:	4b05      	ldr	r3, [pc, #20]	@ (80079d4 <prvIdleTask+0x2c>)
 80079be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079cc:	e7f0      	b.n	80079b0 <prvIdleTask+0x8>
 80079ce:	bf00      	nop
 80079d0:	20000984 	.word	0x20000984
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079de:	2300      	movs	r3, #0
 80079e0:	607b      	str	r3, [r7, #4]
 80079e2:	e00c      	b.n	80079fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4a12      	ldr	r2, [pc, #72]	@ (8007a38 <prvInitialiseTaskLists+0x60>)
 80079f0:	4413      	add	r3, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fc18 	bl	8006228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3301      	adds	r3, #1
 80079fc:	607b      	str	r3, [r7, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b37      	cmp	r3, #55	@ 0x37
 8007a02:	d9ef      	bls.n	80079e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a04:	480d      	ldr	r0, [pc, #52]	@ (8007a3c <prvInitialiseTaskLists+0x64>)
 8007a06:	f7fe fc0f 	bl	8006228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a0a:	480d      	ldr	r0, [pc, #52]	@ (8007a40 <prvInitialiseTaskLists+0x68>)
 8007a0c:	f7fe fc0c 	bl	8006228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a10:	480c      	ldr	r0, [pc, #48]	@ (8007a44 <prvInitialiseTaskLists+0x6c>)
 8007a12:	f7fe fc09 	bl	8006228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a16:	480c      	ldr	r0, [pc, #48]	@ (8007a48 <prvInitialiseTaskLists+0x70>)
 8007a18:	f7fe fc06 	bl	8006228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a1c:	480b      	ldr	r0, [pc, #44]	@ (8007a4c <prvInitialiseTaskLists+0x74>)
 8007a1e:	f7fe fc03 	bl	8006228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a22:	4b0b      	ldr	r3, [pc, #44]	@ (8007a50 <prvInitialiseTaskLists+0x78>)
 8007a24:	4a05      	ldr	r2, [pc, #20]	@ (8007a3c <prvInitialiseTaskLists+0x64>)
 8007a26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a28:	4b0a      	ldr	r3, [pc, #40]	@ (8007a54 <prvInitialiseTaskLists+0x7c>)
 8007a2a:	4a05      	ldr	r2, [pc, #20]	@ (8007a40 <prvInitialiseTaskLists+0x68>)
 8007a2c:	601a      	str	r2, [r3, #0]
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000984 	.word	0x20000984
 8007a3c:	20000de4 	.word	0x20000de4
 8007a40:	20000df8 	.word	0x20000df8
 8007a44:	20000e14 	.word	0x20000e14
 8007a48:	20000e28 	.word	0x20000e28
 8007a4c:	20000e40 	.word	0x20000e40
 8007a50:	20000e0c 	.word	0x20000e0c
 8007a54:	20000e10 	.word	0x20000e10

08007a58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a5e:	e019      	b.n	8007a94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a60:	f000 fde2 	bl	8008628 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a64:	4b10      	ldr	r3, [pc, #64]	@ (8007aa8 <prvCheckTasksWaitingTermination+0x50>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe fc63 	bl	800633c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a76:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <prvCheckTasksWaitingTermination+0x54>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8007aac <prvCheckTasksWaitingTermination+0x54>)
 8007a7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a80:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <prvCheckTasksWaitingTermination+0x58>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	4a0a      	ldr	r2, [pc, #40]	@ (8007ab0 <prvCheckTasksWaitingTermination+0x58>)
 8007a88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a8a:	f000 fdff 	bl	800868c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f810 	bl	8007ab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a94:	4b06      	ldr	r3, [pc, #24]	@ (8007ab0 <prvCheckTasksWaitingTermination+0x58>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e1      	bne.n	8007a60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000e28 	.word	0x20000e28
 8007aac:	20000e54 	.word	0x20000e54
 8007ab0:	20000e3c 	.word	0x20000e3c

08007ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d108      	bne.n	8007ad8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 ff9c 	bl	8008a08 <vPortFree>
				vPortFree( pxTCB );
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 ff99 	bl	8008a08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ad6:	e019      	b.n	8007b0c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d103      	bne.n	8007aea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 ff90 	bl	8008a08 <vPortFree>
	}
 8007ae8:	e010      	b.n	8007b0c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d00b      	beq.n	8007b0c <prvDeleteTCB+0x58>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	60fb      	str	r3, [r7, #12]
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	e7fd      	b.n	8007b08 <prvDeleteTCB+0x54>
	}
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b4c <prvResetNextTaskUnblockTime+0x38>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	@ (8007b50 <prvResetNextTaskUnblockTime+0x3c>)
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b2c:	e008      	b.n	8007b40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b2e:	4b07      	ldr	r3, [pc, #28]	@ (8007b4c <prvResetNextTaskUnblockTime+0x38>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	4a04      	ldr	r2, [pc, #16]	@ (8007b50 <prvResetNextTaskUnblockTime+0x3c>)
 8007b3e:	6013      	str	r3, [r2, #0]
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	20000e0c 	.word	0x20000e0c
 8007b50:	20000e74 	.word	0x20000e74

08007b54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b88 <xTaskGetSchedulerState+0x34>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d102      	bne.n	8007b68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b62:	2301      	movs	r3, #1
 8007b64:	607b      	str	r3, [r7, #4]
 8007b66:	e008      	b.n	8007b7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b68:	4b08      	ldr	r3, [pc, #32]	@ (8007b8c <xTaskGetSchedulerState+0x38>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b70:	2302      	movs	r3, #2
 8007b72:	607b      	str	r3, [r7, #4]
 8007b74:	e001      	b.n	8007b7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b76:	2300      	movs	r3, #0
 8007b78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b7a:	687b      	ldr	r3, [r7, #4]
	}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	20000e60 	.word	0x20000e60
 8007b8c:	20000e7c 	.word	0x20000e7c

08007b90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d058      	beq.n	8007c58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8007c64 <xTaskPriorityDisinherit+0xd4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d00b      	beq.n	8007bc8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	60fb      	str	r3, [r7, #12]
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	e7fd      	b.n	8007bc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10b      	bne.n	8007be8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	60bb      	str	r3, [r7, #8]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bec:	1e5a      	subs	r2, r3, #1
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d02c      	beq.n	8007c58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d128      	bne.n	8007c58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fb96 	bl	800633c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c28:	4b0f      	ldr	r3, [pc, #60]	@ (8007c68 <xTaskPriorityDisinherit+0xd8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d903      	bls.n	8007c38 <xTaskPriorityDisinherit+0xa8>
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c34:	4a0c      	ldr	r2, [pc, #48]	@ (8007c68 <xTaskPriorityDisinherit+0xd8>)
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4a09      	ldr	r2, [pc, #36]	@ (8007c6c <xTaskPriorityDisinherit+0xdc>)
 8007c46:	441a      	add	r2, r3
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	f7fe fb17 	bl	8006282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c58:	697b      	ldr	r3, [r7, #20]
	}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000980 	.word	0x20000980
 8007c68:	20000e5c 	.word	0x20000e5c
 8007c6c:	20000984 	.word	0x20000984

08007c70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c7a:	4b21      	ldr	r3, [pc, #132]	@ (8007d00 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c80:	4b20      	ldr	r3, [pc, #128]	@ (8007d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3304      	adds	r3, #4
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fb58 	bl	800633c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d10a      	bne.n	8007caa <prvAddCurrentTaskToDelayedList+0x3a>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8007d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4819      	ldr	r0, [pc, #100]	@ (8007d08 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ca4:	f7fe faed 	bl	8006282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ca8:	e026      	b.n	8007cf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4413      	add	r3, r2
 8007cb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cb2:	4b14      	ldr	r3, [pc, #80]	@ (8007d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d209      	bcs.n	8007cd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc2:	4b12      	ldr	r3, [pc, #72]	@ (8007d0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f7fe fafb 	bl	80062ca <vListInsert>
}
 8007cd4:	e010      	b.n	8007cf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b0a      	ldr	r3, [pc, #40]	@ (8007d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f7fe faf1 	bl	80062ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d202      	bcs.n	8007cf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007cf2:	4a08      	ldr	r2, [pc, #32]	@ (8007d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6013      	str	r3, [r2, #0]
}
 8007cf8:	bf00      	nop
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20000e58 	.word	0x20000e58
 8007d04:	20000980 	.word	0x20000980
 8007d08:	20000e40 	.word	0x20000e40
 8007d0c:	20000e10 	.word	0x20000e10
 8007d10:	20000e0c 	.word	0x20000e0c
 8007d14:	20000e74 	.word	0x20000e74

08007d18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08a      	sub	sp, #40	@ 0x28
 8007d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d22:	f000 fb13 	bl	800834c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d26:	4b1d      	ldr	r3, [pc, #116]	@ (8007d9c <xTimerCreateTimerTask+0x84>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d021      	beq.n	8007d72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d36:	1d3a      	adds	r2, r7, #4
 8007d38:	f107 0108 	add.w	r1, r7, #8
 8007d3c:	f107 030c 	add.w	r3, r7, #12
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fa57 	bl	80061f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	9202      	str	r2, [sp, #8]
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	2302      	movs	r3, #2
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	2300      	movs	r3, #0
 8007d56:	460a      	mov	r2, r1
 8007d58:	4911      	ldr	r1, [pc, #68]	@ (8007da0 <xTimerCreateTimerTask+0x88>)
 8007d5a:	4812      	ldr	r0, [pc, #72]	@ (8007da4 <xTimerCreateTimerTask+0x8c>)
 8007d5c:	f7ff f8d0 	bl	8006f00 <xTaskCreateStatic>
 8007d60:	4603      	mov	r3, r0
 8007d62:	4a11      	ldr	r2, [pc, #68]	@ (8007da8 <xTimerCreateTimerTask+0x90>)
 8007d64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d66:	4b10      	ldr	r3, [pc, #64]	@ (8007da8 <xTimerCreateTimerTask+0x90>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10b      	bne.n	8007d90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	613b      	str	r3, [r7, #16]
}
 8007d8a:	bf00      	nop
 8007d8c:	bf00      	nop
 8007d8e:	e7fd      	b.n	8007d8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d90:	697b      	ldr	r3, [r7, #20]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000eb0 	.word	0x20000eb0
 8007da0:	080095dc 	.word	0x080095dc
 8007da4:	08007ee5 	.word	0x08007ee5
 8007da8:	20000eb4 	.word	0x20000eb4

08007dac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	@ 0x28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <xTimerGenericCommand+0x30>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	623b      	str	r3, [r7, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ddc:	4b19      	ldr	r3, [pc, #100]	@ (8007e44 <xTimerGenericCommand+0x98>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d02a      	beq.n	8007e3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	dc18      	bgt.n	8007e28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007df6:	f7ff fead 	bl	8007b54 <xTaskGetSchedulerState>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d109      	bne.n	8007e14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e00:	4b10      	ldr	r3, [pc, #64]	@ (8007e44 <xTimerGenericCommand+0x98>)
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	f107 0110 	add.w	r1, r7, #16
 8007e08:	2300      	movs	r3, #0
 8007e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e0c:	f7fe fc06 	bl	800661c <xQueueGenericSend>
 8007e10:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e12:	e012      	b.n	8007e3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e14:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <xTimerGenericCommand+0x98>)
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	f107 0110 	add.w	r1, r7, #16
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f7fe fbfc 	bl	800661c <xQueueGenericSend>
 8007e24:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e26:	e008      	b.n	8007e3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e28:	4b06      	ldr	r3, [pc, #24]	@ (8007e44 <xTimerGenericCommand+0x98>)
 8007e2a:	6818      	ldr	r0, [r3, #0]
 8007e2c:	f107 0110 	add.w	r1, r7, #16
 8007e30:	2300      	movs	r3, #0
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	f7fe fcf4 	bl	8006820 <xQueueGenericSendFromISR>
 8007e38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3728      	adds	r7, #40	@ 0x28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000eb0 	.word	0x20000eb0

08007e48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e52:	4b23      	ldr	r3, [pc, #140]	@ (8007ee0 <prvProcessExpiredTimer+0x98>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe fa6b 	bl	800633c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d023      	beq.n	8007ebc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	699a      	ldr	r2, [r3, #24]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	18d1      	adds	r1, r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	6978      	ldr	r0, [r7, #20]
 8007e82:	f000 f8d5 	bl	8008030 <prvInsertTimerInActiveList>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d020      	beq.n	8007ece <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	2100      	movs	r1, #0
 8007e96:	6978      	ldr	r0, [r7, #20]
 8007e98:	f7ff ff88 	bl	8007dac <xTimerGenericCommand>
 8007e9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d114      	bne.n	8007ece <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	60fb      	str	r3, [r7, #12]
}
 8007eb6:	bf00      	nop
 8007eb8:	bf00      	nop
 8007eba:	e7fd      	b.n	8007eb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	4798      	blx	r3
}
 8007ed6:	bf00      	nop
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000ea8 	.word	0x20000ea8

08007ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007eec:	f107 0308 	add.w	r3, r7, #8
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 f859 	bl	8007fa8 <prvGetNextExpireTime>
 8007ef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4619      	mov	r1, r3
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f805 	bl	8007f0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f02:	f000 f8d7 	bl	80080b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f06:	bf00      	nop
 8007f08:	e7f0      	b.n	8007eec <prvTimerTask+0x8>
	...

08007f0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f16:	f7ff fa37 	bl	8007388 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f1a:	f107 0308 	add.w	r3, r7, #8
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f866 	bl	8007ff0 <prvSampleTimeNow>
 8007f24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d130      	bne.n	8007f8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <prvProcessTimerOrBlockTask+0x3c>
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d806      	bhi.n	8007f48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f3a:	f7ff fa33 	bl	80073a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f3e:	68f9      	ldr	r1, [r7, #12]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff ff81 	bl	8007e48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f46:	e024      	b.n	8007f92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d008      	beq.n	8007f60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f4e:	4b13      	ldr	r3, [pc, #76]	@ (8007f9c <prvProcessTimerOrBlockTask+0x90>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <prvProcessTimerOrBlockTask+0x50>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e000      	b.n	8007f5e <prvProcessTimerOrBlockTask+0x52>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f60:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa0 <prvProcessTimerOrBlockTask+0x94>)
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f7fe ff93 	bl	8006e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f72:	f7ff fa17 	bl	80073a4 <xTaskResumeAll>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f7c:	4b09      	ldr	r3, [pc, #36]	@ (8007fa4 <prvProcessTimerOrBlockTask+0x98>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	f3bf 8f6f 	isb	sy
}
 8007f8c:	e001      	b.n	8007f92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f8e:	f7ff fa09 	bl	80073a4 <xTaskResumeAll>
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000eac 	.word	0x20000eac
 8007fa0:	20000eb0 	.word	0x20000eb0
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8007fec <prvGetNextExpireTime+0x44>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <prvGetNextExpireTime+0x16>
 8007fba:	2201      	movs	r2, #1
 8007fbc:	e000      	b.n	8007fc0 <prvGetNextExpireTime+0x18>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d105      	bne.n	8007fd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fcc:	4b07      	ldr	r3, [pc, #28]	@ (8007fec <prvGetNextExpireTime+0x44>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	e001      	b.n	8007fdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000ea8 	.word	0x20000ea8

08007ff0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ff8:	f7ff fa72 	bl	80074e0 <xTaskGetTickCount>
 8007ffc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800802c <prvSampleTimeNow+0x3c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	429a      	cmp	r2, r3
 8008006:	d205      	bcs.n	8008014 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008008:	f000 f93a 	bl	8008280 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e002      	b.n	800801a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800801a:	4a04      	ldr	r2, [pc, #16]	@ (800802c <prvSampleTimeNow+0x3c>)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008020:	68fb      	ldr	r3, [r7, #12]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000eb8 	.word	0x20000eb8

08008030 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d812      	bhi.n	800807c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	1ad2      	subs	r2, r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	429a      	cmp	r2, r3
 8008062:	d302      	bcc.n	800806a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	e01b      	b.n	80080a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800806a:	4b10      	ldr	r3, [pc, #64]	@ (80080ac <prvInsertTimerInActiveList+0x7c>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f7fe f928 	bl	80062ca <vListInsert>
 800807a:	e012      	b.n	80080a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d206      	bcs.n	8008092 <prvInsertTimerInActiveList+0x62>
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d302      	bcc.n	8008092 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800808c:	2301      	movs	r3, #1
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	e007      	b.n	80080a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008092:	4b07      	ldr	r3, [pc, #28]	@ (80080b0 <prvInsertTimerInActiveList+0x80>)
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3304      	adds	r3, #4
 800809a:	4619      	mov	r1, r3
 800809c:	4610      	mov	r0, r2
 800809e:	f7fe f914 	bl	80062ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080a2:	697b      	ldr	r3, [r7, #20]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20000eac 	.word	0x20000eac
 80080b0:	20000ea8 	.word	0x20000ea8

080080b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08e      	sub	sp, #56	@ 0x38
 80080b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080ba:	e0ce      	b.n	800825a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	da19      	bge.n	80080f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080c2:	1d3b      	adds	r3, r7, #4
 80080c4:	3304      	adds	r3, #4
 80080c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10b      	bne.n	80080e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	61fb      	str	r3, [r7, #28]
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	e7fd      	b.n	80080e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ec:	6850      	ldr	r0, [r2, #4]
 80080ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080f0:	6892      	ldr	r2, [r2, #8]
 80080f2:	4611      	mov	r1, r2
 80080f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f2c0 80ae 	blt.w	800825a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810c:	3304      	adds	r3, #4
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe f914 	bl	800633c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008114:	463b      	mov	r3, r7
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff ff6a 	bl	8007ff0 <prvSampleTimeNow>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b09      	cmp	r3, #9
 8008122:	f200 8097 	bhi.w	8008254 <prvProcessReceivedCommands+0x1a0>
 8008126:	a201      	add	r2, pc, #4	@ (adr r2, 800812c <prvProcessReceivedCommands+0x78>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008155 	.word	0x08008155
 8008130:	08008155 	.word	0x08008155
 8008134:	08008155 	.word	0x08008155
 8008138:	080081cb 	.word	0x080081cb
 800813c:	080081df 	.word	0x080081df
 8008140:	0800822b 	.word	0x0800822b
 8008144:	08008155 	.word	0x08008155
 8008148:	08008155 	.word	0x08008155
 800814c:	080081cb 	.word	0x080081cb
 8008150:	080081df 	.word	0x080081df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008156:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800815a:	f043 0301 	orr.w	r3, r3, #1
 800815e:	b2da      	uxtb	r2, r3
 8008160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008162:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	18d1      	adds	r1, r2, r3
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008174:	f7ff ff5c 	bl	8008030 <prvInsertTimerInActiveList>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d06c      	beq.n	8008258 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800817e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008184:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d061      	beq.n	8008258 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	441a      	add	r2, r3
 800819c:	2300      	movs	r3, #0
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	2300      	movs	r3, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081a6:	f7ff fe01 	bl	8007dac <xTimerGenericCommand>
 80081aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d152      	bne.n	8008258 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	61bb      	str	r3, [r7, #24]
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
 80081c8:	e7fd      	b.n	80081c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081d0:	f023 0301 	bic.w	r3, r3, #1
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081dc:	e03d      	b.n	800825a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081e4:	f043 0301 	orr.w	r3, r3, #1
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10b      	bne.n	8008216 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	617b      	str	r3, [r7, #20]
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	e7fd      	b.n	8008212 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008218:	699a      	ldr	r2, [r3, #24]
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	18d1      	adds	r1, r2, r3
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008224:	f7ff ff04 	bl	8008030 <prvInsertTimerInActiveList>
					break;
 8008228:	e017      	b.n	800825a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800822a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d103      	bne.n	8008240 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008238:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800823a:	f000 fbe5 	bl	8008a08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800823e:	e00c      	b.n	800825a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008246:	f023 0301 	bic.w	r3, r3, #1
 800824a:	b2da      	uxtb	r2, r3
 800824c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008252:	e002      	b.n	800825a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008254:	bf00      	nop
 8008256:	e000      	b.n	800825a <prvProcessReceivedCommands+0x1a6>
					break;
 8008258:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800825a:	4b08      	ldr	r3, [pc, #32]	@ (800827c <prvProcessReceivedCommands+0x1c8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	1d39      	adds	r1, r7, #4
 8008260:	2200      	movs	r2, #0
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe fb7a 	bl	800695c <xQueueReceive>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	f47f af26 	bne.w	80080bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	3730      	adds	r7, #48	@ 0x30
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000eb0 	.word	0x20000eb0

08008280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008286:	e049      	b.n	800831c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008288:	4b2e      	ldr	r3, [pc, #184]	@ (8008344 <prvSwitchTimerLists+0xc4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008292:	4b2c      	ldr	r3, [pc, #176]	@ (8008344 <prvSwitchTimerLists+0xc4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3304      	adds	r3, #4
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fe f84b 	bl	800633c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d02f      	beq.n	800831c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4413      	add	r3, r2
 80082c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d90e      	bls.n	80082ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082da:	4b1a      	ldr	r3, [pc, #104]	@ (8008344 <prvSwitchTimerLists+0xc4>)
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3304      	adds	r3, #4
 80082e2:	4619      	mov	r1, r3
 80082e4:	4610      	mov	r0, r2
 80082e6:	f7fd fff0 	bl	80062ca <vListInsert>
 80082ea:	e017      	b.n	800831c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082ec:	2300      	movs	r3, #0
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	2300      	movs	r3, #0
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	2100      	movs	r1, #0
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f7ff fd58 	bl	8007dac <xTimerGenericCommand>
 80082fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10b      	bne.n	800831c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	603b      	str	r3, [r7, #0]
}
 8008316:	bf00      	nop
 8008318:	bf00      	nop
 800831a:	e7fd      	b.n	8008318 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800831c:	4b09      	ldr	r3, [pc, #36]	@ (8008344 <prvSwitchTimerLists+0xc4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1b0      	bne.n	8008288 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008326:	4b07      	ldr	r3, [pc, #28]	@ (8008344 <prvSwitchTimerLists+0xc4>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800832c:	4b06      	ldr	r3, [pc, #24]	@ (8008348 <prvSwitchTimerLists+0xc8>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a04      	ldr	r2, [pc, #16]	@ (8008344 <prvSwitchTimerLists+0xc4>)
 8008332:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008334:	4a04      	ldr	r2, [pc, #16]	@ (8008348 <prvSwitchTimerLists+0xc8>)
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	6013      	str	r3, [r2, #0]
}
 800833a:	bf00      	nop
 800833c:	3718      	adds	r7, #24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000ea8 	.word	0x20000ea8
 8008348:	20000eac 	.word	0x20000eac

0800834c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008352:	f000 f969 	bl	8008628 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008356:	4b15      	ldr	r3, [pc, #84]	@ (80083ac <prvCheckForValidListAndQueue+0x60>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d120      	bne.n	80083a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800835e:	4814      	ldr	r0, [pc, #80]	@ (80083b0 <prvCheckForValidListAndQueue+0x64>)
 8008360:	f7fd ff62 	bl	8006228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008364:	4813      	ldr	r0, [pc, #76]	@ (80083b4 <prvCheckForValidListAndQueue+0x68>)
 8008366:	f7fd ff5f 	bl	8006228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800836a:	4b13      	ldr	r3, [pc, #76]	@ (80083b8 <prvCheckForValidListAndQueue+0x6c>)
 800836c:	4a10      	ldr	r2, [pc, #64]	@ (80083b0 <prvCheckForValidListAndQueue+0x64>)
 800836e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008370:	4b12      	ldr	r3, [pc, #72]	@ (80083bc <prvCheckForValidListAndQueue+0x70>)
 8008372:	4a10      	ldr	r2, [pc, #64]	@ (80083b4 <prvCheckForValidListAndQueue+0x68>)
 8008374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008376:	2300      	movs	r3, #0
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	4b11      	ldr	r3, [pc, #68]	@ (80083c0 <prvCheckForValidListAndQueue+0x74>)
 800837c:	4a11      	ldr	r2, [pc, #68]	@ (80083c4 <prvCheckForValidListAndQueue+0x78>)
 800837e:	2110      	movs	r1, #16
 8008380:	200a      	movs	r0, #10
 8008382:	f7fe f86f 	bl	8006464 <xQueueGenericCreateStatic>
 8008386:	4603      	mov	r3, r0
 8008388:	4a08      	ldr	r2, [pc, #32]	@ (80083ac <prvCheckForValidListAndQueue+0x60>)
 800838a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800838c:	4b07      	ldr	r3, [pc, #28]	@ (80083ac <prvCheckForValidListAndQueue+0x60>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008394:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <prvCheckForValidListAndQueue+0x60>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	490b      	ldr	r1, [pc, #44]	@ (80083c8 <prvCheckForValidListAndQueue+0x7c>)
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fd52 	bl	8006e44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083a0:	f000 f974 	bl	800868c <vPortExitCritical>
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000eb0 	.word	0x20000eb0
 80083b0:	20000e80 	.word	0x20000e80
 80083b4:	20000e94 	.word	0x20000e94
 80083b8:	20000ea8 	.word	0x20000ea8
 80083bc:	20000eac 	.word	0x20000eac
 80083c0:	20000f5c 	.word	0x20000f5c
 80083c4:	20000ebc 	.word	0x20000ebc
 80083c8:	080095e4 	.word	0x080095e4

080083cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3b04      	subs	r3, #4
 80083dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80083e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3b04      	subs	r3, #4
 80083ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f023 0201 	bic.w	r2, r3, #1
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3b04      	subs	r3, #4
 80083fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008430 <pxPortInitialiseStack+0x64>)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3b14      	subs	r3, #20
 8008406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3b04      	subs	r3, #4
 8008412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f06f 0202 	mvn.w	r2, #2
 800841a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3b20      	subs	r3, #32
 8008420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008422:	68fb      	ldr	r3, [r7, #12]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	08008435 	.word	0x08008435

08008434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800843e:	4b13      	ldr	r3, [pc, #76]	@ (800848c <prvTaskExitError+0x58>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008446:	d00b      	beq.n	8008460 <prvTaskExitError+0x2c>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	60fb      	str	r3, [r7, #12]
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	e7fd      	b.n	800845c <prvTaskExitError+0x28>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	60bb      	str	r3, [r7, #8]
}
 8008472:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008474:	bf00      	nop
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0fc      	beq.n	8008476 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	2000000c 	.word	0x2000000c

08008490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008490:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <pxCurrentTCBConst2>)
 8008492:	6819      	ldr	r1, [r3, #0]
 8008494:	6808      	ldr	r0, [r1, #0]
 8008496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849a:	f380 8809 	msr	PSP, r0
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f04f 0000 	mov.w	r0, #0
 80084a6:	f380 8811 	msr	BASEPRI, r0
 80084aa:	4770      	bx	lr
 80084ac:	f3af 8000 	nop.w

080084b0 <pxCurrentTCBConst2>:
 80084b0:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop

080084b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084b8:	4808      	ldr	r0, [pc, #32]	@ (80084dc <prvPortStartFirstTask+0x24>)
 80084ba:	6800      	ldr	r0, [r0, #0]
 80084bc:	6800      	ldr	r0, [r0, #0]
 80084be:	f380 8808 	msr	MSP, r0
 80084c2:	f04f 0000 	mov.w	r0, #0
 80084c6:	f380 8814 	msr	CONTROL, r0
 80084ca:	b662      	cpsie	i
 80084cc:	b661      	cpsie	f
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	df00      	svc	0
 80084d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084da:	bf00      	nop
 80084dc:	e000ed08 	.word	0xe000ed08

080084e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084e6:	4b47      	ldr	r3, [pc, #284]	@ (8008604 <xPortStartScheduler+0x124>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a47      	ldr	r2, [pc, #284]	@ (8008608 <xPortStartScheduler+0x128>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d10b      	bne.n	8008508 <xPortStartScheduler+0x28>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	60fb      	str	r3, [r7, #12]
}
 8008502:	bf00      	nop
 8008504:	bf00      	nop
 8008506:	e7fd      	b.n	8008504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008508:	4b3e      	ldr	r3, [pc, #248]	@ (8008604 <xPortStartScheduler+0x124>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a3f      	ldr	r2, [pc, #252]	@ (800860c <xPortStartScheduler+0x12c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d10b      	bne.n	800852a <xPortStartScheduler+0x4a>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	613b      	str	r3, [r7, #16]
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	e7fd      	b.n	8008526 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800852a:	4b39      	ldr	r3, [pc, #228]	@ (8008610 <xPortStartScheduler+0x130>)
 800852c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	22ff      	movs	r2, #255	@ 0xff
 800853a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	b2db      	uxtb	r3, r3
 8008542:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800854c:	b2da      	uxtb	r2, r3
 800854e:	4b31      	ldr	r3, [pc, #196]	@ (8008614 <xPortStartScheduler+0x134>)
 8008550:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008552:	4b31      	ldr	r3, [pc, #196]	@ (8008618 <xPortStartScheduler+0x138>)
 8008554:	2207      	movs	r2, #7
 8008556:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008558:	e009      	b.n	800856e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800855a:	4b2f      	ldr	r3, [pc, #188]	@ (8008618 <xPortStartScheduler+0x138>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3b01      	subs	r3, #1
 8008560:	4a2d      	ldr	r2, [pc, #180]	@ (8008618 <xPortStartScheduler+0x138>)
 8008562:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	b2db      	uxtb	r3, r3
 800856c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008576:	2b80      	cmp	r3, #128	@ 0x80
 8008578:	d0ef      	beq.n	800855a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800857a:	4b27      	ldr	r3, [pc, #156]	@ (8008618 <xPortStartScheduler+0x138>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f1c3 0307 	rsb	r3, r3, #7
 8008582:	2b04      	cmp	r3, #4
 8008584:	d00b      	beq.n	800859e <xPortStartScheduler+0xbe>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60bb      	str	r3, [r7, #8]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800859e:	4b1e      	ldr	r3, [pc, #120]	@ (8008618 <xPortStartScheduler+0x138>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008618 <xPortStartScheduler+0x138>)
 80085a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008618 <xPortStartScheduler+0x138>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085b0:	4a19      	ldr	r2, [pc, #100]	@ (8008618 <xPortStartScheduler+0x138>)
 80085b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085bc:	4b17      	ldr	r3, [pc, #92]	@ (800861c <xPortStartScheduler+0x13c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a16      	ldr	r2, [pc, #88]	@ (800861c <xPortStartScheduler+0x13c>)
 80085c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085c8:	4b14      	ldr	r3, [pc, #80]	@ (800861c <xPortStartScheduler+0x13c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a13      	ldr	r2, [pc, #76]	@ (800861c <xPortStartScheduler+0x13c>)
 80085ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085d4:	f000 f8da 	bl	800878c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085d8:	4b11      	ldr	r3, [pc, #68]	@ (8008620 <xPortStartScheduler+0x140>)
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085de:	f000 f8f9 	bl	80087d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085e2:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <xPortStartScheduler+0x144>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008624 <xPortStartScheduler+0x144>)
 80085e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80085ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085ee:	f7ff ff63 	bl	80084b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085f2:	f7ff f83f 	bl	8007674 <vTaskSwitchContext>
	prvTaskExitError();
 80085f6:	f7ff ff1d 	bl	8008434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	e000ed00 	.word	0xe000ed00
 8008608:	410fc271 	.word	0x410fc271
 800860c:	410fc270 	.word	0x410fc270
 8008610:	e000e400 	.word	0xe000e400
 8008614:	20000fac 	.word	0x20000fac
 8008618:	20000fb0 	.word	0x20000fb0
 800861c:	e000ed20 	.word	0xe000ed20
 8008620:	2000000c 	.word	0x2000000c
 8008624:	e000ef34 	.word	0xe000ef34

08008628 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	607b      	str	r3, [r7, #4]
}
 8008640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008642:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <vPortEnterCritical+0x5c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3301      	adds	r3, #1
 8008648:	4a0e      	ldr	r2, [pc, #56]	@ (8008684 <vPortEnterCritical+0x5c>)
 800864a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800864c:	4b0d      	ldr	r3, [pc, #52]	@ (8008684 <vPortEnterCritical+0x5c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d110      	bne.n	8008676 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008654:	4b0c      	ldr	r3, [pc, #48]	@ (8008688 <vPortEnterCritical+0x60>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <vPortEnterCritical+0x4e>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	603b      	str	r3, [r7, #0]
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	e7fd      	b.n	8008672 <vPortEnterCritical+0x4a>
	}
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	2000000c 	.word	0x2000000c
 8008688:	e000ed04 	.word	0xe000ed04

0800868c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008692:	4b12      	ldr	r3, [pc, #72]	@ (80086dc <vPortExitCritical+0x50>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10b      	bne.n	80086b2 <vPortExitCritical+0x26>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	607b      	str	r3, [r7, #4]
}
 80086ac:	bf00      	nop
 80086ae:	bf00      	nop
 80086b0:	e7fd      	b.n	80086ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086b2:	4b0a      	ldr	r3, [pc, #40]	@ (80086dc <vPortExitCritical+0x50>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3b01      	subs	r3, #1
 80086b8:	4a08      	ldr	r2, [pc, #32]	@ (80086dc <vPortExitCritical+0x50>)
 80086ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086bc:	4b07      	ldr	r3, [pc, #28]	@ (80086dc <vPortExitCritical+0x50>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d105      	bne.n	80086d0 <vPortExitCritical+0x44>
 80086c4:	2300      	movs	r3, #0
 80086c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f383 8811 	msr	BASEPRI, r3
}
 80086ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	2000000c 	.word	0x2000000c

080086e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086e0:	f3ef 8009 	mrs	r0, PSP
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	4b15      	ldr	r3, [pc, #84]	@ (8008740 <pxCurrentTCBConst>)
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	f01e 0f10 	tst.w	lr, #16
 80086f0:	bf08      	it	eq
 80086f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	6010      	str	r0, [r2, #0]
 80086fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008700:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008704:	f380 8811 	msr	BASEPRI, r0
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f7fe ffb0 	bl	8007674 <vTaskSwitchContext>
 8008714:	f04f 0000 	mov.w	r0, #0
 8008718:	f380 8811 	msr	BASEPRI, r0
 800871c:	bc09      	pop	{r0, r3}
 800871e:	6819      	ldr	r1, [r3, #0]
 8008720:	6808      	ldr	r0, [r1, #0]
 8008722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008726:	f01e 0f10 	tst.w	lr, #16
 800872a:	bf08      	it	eq
 800872c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008730:	f380 8809 	msr	PSP, r0
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	f3af 8000 	nop.w

08008740 <pxCurrentTCBConst>:
 8008740:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop

08008748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	607b      	str	r3, [r7, #4]
}
 8008760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008762:	f7fe fecd 	bl	8007500 <xTaskIncrementTick>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800876c:	4b06      	ldr	r3, [pc, #24]	@ (8008788 <xPortSysTickHandler+0x40>)
 800876e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	2300      	movs	r3, #0
 8008776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f383 8811 	msr	BASEPRI, r3
}
 800877e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	e000ed04 	.word	0xe000ed04

0800878c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800878c:	b480      	push	{r7}
 800878e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008790:	4b0b      	ldr	r3, [pc, #44]	@ (80087c0 <vPortSetupTimerInterrupt+0x34>)
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008796:	4b0b      	ldr	r3, [pc, #44]	@ (80087c4 <vPortSetupTimerInterrupt+0x38>)
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800879c:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <vPortSetupTimerInterrupt+0x3c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a0a      	ldr	r2, [pc, #40]	@ (80087cc <vPortSetupTimerInterrupt+0x40>)
 80087a2:	fba2 2303 	umull	r2, r3, r2, r3
 80087a6:	099b      	lsrs	r3, r3, #6
 80087a8:	4a09      	ldr	r2, [pc, #36]	@ (80087d0 <vPortSetupTimerInterrupt+0x44>)
 80087aa:	3b01      	subs	r3, #1
 80087ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087ae:	4b04      	ldr	r3, [pc, #16]	@ (80087c0 <vPortSetupTimerInterrupt+0x34>)
 80087b0:	2207      	movs	r2, #7
 80087b2:	601a      	str	r2, [r3, #0]
}
 80087b4:	bf00      	nop
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	e000e010 	.word	0xe000e010
 80087c4:	e000e018 	.word	0xe000e018
 80087c8:	20000000 	.word	0x20000000
 80087cc:	10624dd3 	.word	0x10624dd3
 80087d0:	e000e014 	.word	0xe000e014

080087d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80087e4 <vPortEnableVFP+0x10>
 80087d8:	6801      	ldr	r1, [r0, #0]
 80087da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087de:	6001      	str	r1, [r0, #0]
 80087e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087e2:	bf00      	nop
 80087e4:	e000ed88 	.word	0xe000ed88

080087e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087ee:	f3ef 8305 	mrs	r3, IPSR
 80087f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b0f      	cmp	r3, #15
 80087f8:	d915      	bls.n	8008826 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087fa:	4a18      	ldr	r2, [pc, #96]	@ (800885c <vPortValidateInterruptPriority+0x74>)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008804:	4b16      	ldr	r3, [pc, #88]	@ (8008860 <vPortValidateInterruptPriority+0x78>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	7afa      	ldrb	r2, [r7, #11]
 800880a:	429a      	cmp	r2, r3
 800880c:	d20b      	bcs.n	8008826 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	607b      	str	r3, [r7, #4]
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	e7fd      	b.n	8008822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008826:	4b0f      	ldr	r3, [pc, #60]	@ (8008864 <vPortValidateInterruptPriority+0x7c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800882e:	4b0e      	ldr	r3, [pc, #56]	@ (8008868 <vPortValidateInterruptPriority+0x80>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d90b      	bls.n	800884e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	603b      	str	r3, [r7, #0]
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	e7fd      	b.n	800884a <vPortValidateInterruptPriority+0x62>
	}
 800884e:	bf00      	nop
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	e000e3f0 	.word	0xe000e3f0
 8008860:	20000fac 	.word	0x20000fac
 8008864:	e000ed0c 	.word	0xe000ed0c
 8008868:	20000fb0 	.word	0x20000fb0

0800886c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08a      	sub	sp, #40	@ 0x28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008874:	2300      	movs	r3, #0
 8008876:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008878:	f7fe fd86 	bl	8007388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800887c:	4b5c      	ldr	r3, [pc, #368]	@ (80089f0 <pvPortMalloc+0x184>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008884:	f000 f924 	bl	8008ad0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008888:	4b5a      	ldr	r3, [pc, #360]	@ (80089f4 <pvPortMalloc+0x188>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4013      	ands	r3, r2
 8008890:	2b00      	cmp	r3, #0
 8008892:	f040 8095 	bne.w	80089c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01e      	beq.n	80088da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800889c:	2208      	movs	r2, #8
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4413      	add	r3, r2
 80088a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d015      	beq.n	80088da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f023 0307 	bic.w	r3, r3, #7
 80088b4:	3308      	adds	r3, #8
 80088b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <pvPortMalloc+0x6e>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	617b      	str	r3, [r7, #20]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d06f      	beq.n	80089c0 <pvPortMalloc+0x154>
 80088e0:	4b45      	ldr	r3, [pc, #276]	@ (80089f8 <pvPortMalloc+0x18c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d86a      	bhi.n	80089c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088ea:	4b44      	ldr	r3, [pc, #272]	@ (80089fc <pvPortMalloc+0x190>)
 80088ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088ee:	4b43      	ldr	r3, [pc, #268]	@ (80089fc <pvPortMalloc+0x190>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088f4:	e004      	b.n	8008900 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d903      	bls.n	8008912 <pvPortMalloc+0xa6>
 800890a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1f1      	bne.n	80088f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008912:	4b37      	ldr	r3, [pc, #220]	@ (80089f0 <pvPortMalloc+0x184>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008918:	429a      	cmp	r2, r3
 800891a:	d051      	beq.n	80089c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2208      	movs	r2, #8
 8008922:	4413      	add	r3, r2
 8008924:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	1ad2      	subs	r2, r2, r3
 8008936:	2308      	movs	r3, #8
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	429a      	cmp	r2, r3
 800893c:	d920      	bls.n	8008980 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800893e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4413      	add	r3, r2
 8008944:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <pvPortMalloc+0xfc>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	613b      	str	r3, [r7, #16]
}
 8008962:	bf00      	nop
 8008964:	bf00      	nop
 8008966:	e7fd      	b.n	8008964 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800897a:	69b8      	ldr	r0, [r7, #24]
 800897c:	f000 f90a 	bl	8008b94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008980:	4b1d      	ldr	r3, [pc, #116]	@ (80089f8 <pvPortMalloc+0x18c>)
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	4a1b      	ldr	r2, [pc, #108]	@ (80089f8 <pvPortMalloc+0x18c>)
 800898c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800898e:	4b1a      	ldr	r3, [pc, #104]	@ (80089f8 <pvPortMalloc+0x18c>)
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	4b1b      	ldr	r3, [pc, #108]	@ (8008a00 <pvPortMalloc+0x194>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d203      	bcs.n	80089a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800899a:	4b17      	ldr	r3, [pc, #92]	@ (80089f8 <pvPortMalloc+0x18c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a18      	ldr	r2, [pc, #96]	@ (8008a00 <pvPortMalloc+0x194>)
 80089a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	4b13      	ldr	r3, [pc, #76]	@ (80089f4 <pvPortMalloc+0x188>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	431a      	orrs	r2, r3
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089b6:	4b13      	ldr	r3, [pc, #76]	@ (8008a04 <pvPortMalloc+0x198>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3301      	adds	r3, #1
 80089bc:	4a11      	ldr	r2, [pc, #68]	@ (8008a04 <pvPortMalloc+0x198>)
 80089be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089c0:	f7fe fcf0 	bl	80073a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f003 0307 	and.w	r3, r3, #7
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00b      	beq.n	80089e6 <pvPortMalloc+0x17a>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	60fb      	str	r3, [r7, #12]
}
 80089e0:	bf00      	nop
 80089e2:	bf00      	nop
 80089e4:	e7fd      	b.n	80089e2 <pvPortMalloc+0x176>
	return pvReturn;
 80089e6:	69fb      	ldr	r3, [r7, #28]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3728      	adds	r7, #40	@ 0x28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	20004bbc 	.word	0x20004bbc
 80089f4:	20004bd0 	.word	0x20004bd0
 80089f8:	20004bc0 	.word	0x20004bc0
 80089fc:	20004bb4 	.word	0x20004bb4
 8008a00:	20004bc4 	.word	0x20004bc4
 8008a04:	20004bc8 	.word	0x20004bc8

08008a08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d04f      	beq.n	8008aba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	425b      	negs	r3, r3
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4413      	add	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	4b25      	ldr	r3, [pc, #148]	@ (8008ac4 <vPortFree+0xbc>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4013      	ands	r3, r2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10b      	bne.n	8008a4e <vPortFree+0x46>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60fb      	str	r3, [r7, #12]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00b      	beq.n	8008a6e <vPortFree+0x66>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	60bb      	str	r3, [r7, #8]
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	e7fd      	b.n	8008a6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	4b14      	ldr	r3, [pc, #80]	@ (8008ac4 <vPortFree+0xbc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4013      	ands	r3, r2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01e      	beq.n	8008aba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d11a      	bne.n	8008aba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac4 <vPortFree+0xbc>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	401a      	ands	r2, r3
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a94:	f7fe fc78 	bl	8007388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac8 <vPortFree+0xc0>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	4a09      	ldr	r2, [pc, #36]	@ (8008ac8 <vPortFree+0xc0>)
 8008aa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008aa6:	6938      	ldr	r0, [r7, #16]
 8008aa8:	f000 f874 	bl	8008b94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008aac:	4b07      	ldr	r3, [pc, #28]	@ (8008acc <vPortFree+0xc4>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	4a06      	ldr	r2, [pc, #24]	@ (8008acc <vPortFree+0xc4>)
 8008ab4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ab6:	f7fe fc75 	bl	80073a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008aba:	bf00      	nop
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20004bd0 	.word	0x20004bd0
 8008ac8:	20004bc0 	.word	0x20004bc0
 8008acc:	20004bcc 	.word	0x20004bcc

08008ad0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ad6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008ada:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008adc:	4b27      	ldr	r3, [pc, #156]	@ (8008b7c <prvHeapInit+0xac>)
 8008ade:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00c      	beq.n	8008b04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3307      	adds	r3, #7
 8008aee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 0307 	bic.w	r3, r3, #7
 8008af6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	4a1f      	ldr	r2, [pc, #124]	@ (8008b7c <prvHeapInit+0xac>)
 8008b00:	4413      	add	r3, r2
 8008b02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b08:	4a1d      	ldr	r2, [pc, #116]	@ (8008b80 <prvHeapInit+0xb0>)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8008b80 <prvHeapInit+0xb0>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	4413      	add	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b1c:	2208      	movs	r2, #8
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0307 	bic.w	r3, r3, #7
 8008b2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4a15      	ldr	r2, [pc, #84]	@ (8008b84 <prvHeapInit+0xb4>)
 8008b30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b32:	4b14      	ldr	r3, [pc, #80]	@ (8008b84 <prvHeapInit+0xb4>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2200      	movs	r2, #0
 8008b38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b3a:	4b12      	ldr	r3, [pc, #72]	@ (8008b84 <prvHeapInit+0xb4>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	1ad2      	subs	r2, r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b50:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <prvHeapInit+0xb4>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b88 <prvHeapInit+0xb8>)
 8008b5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	4a09      	ldr	r2, [pc, #36]	@ (8008b8c <prvHeapInit+0xbc>)
 8008b66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b68:	4b09      	ldr	r3, [pc, #36]	@ (8008b90 <prvHeapInit+0xc0>)
 8008b6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b6e:	601a      	str	r2, [r3, #0]
}
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	20000fb4 	.word	0x20000fb4
 8008b80:	20004bb4 	.word	0x20004bb4
 8008b84:	20004bbc 	.word	0x20004bbc
 8008b88:	20004bc4 	.word	0x20004bc4
 8008b8c:	20004bc0 	.word	0x20004bc0
 8008b90:	20004bd0 	.word	0x20004bd0

08008b94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b9c:	4b28      	ldr	r3, [pc, #160]	@ (8008c40 <prvInsertBlockIntoFreeList+0xac>)
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e002      	b.n	8008ba8 <prvInsertBlockIntoFreeList+0x14>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d8f7      	bhi.n	8008ba2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d108      	bne.n	8008bd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	441a      	add	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	441a      	add	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d118      	bne.n	8008c1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	4b15      	ldr	r3, [pc, #84]	@ (8008c44 <prvInsertBlockIntoFreeList+0xb0>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d00d      	beq.n	8008c12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	441a      	add	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	e008      	b.n	8008c24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c12:	4b0c      	ldr	r3, [pc, #48]	@ (8008c44 <prvInsertBlockIntoFreeList+0xb0>)
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	e003      	b.n	8008c24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d002      	beq.n	8008c32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c32:	bf00      	nop
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20004bb4 	.word	0x20004bb4
 8008c44:	20004bbc 	.word	0x20004bbc

08008c48 <siprintf>:
 8008c48:	b40e      	push	{r1, r2, r3}
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	b09d      	sub	sp, #116	@ 0x74
 8008c4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008c50:	9002      	str	r0, [sp, #8]
 8008c52:	9006      	str	r0, [sp, #24]
 8008c54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c58:	480a      	ldr	r0, [pc, #40]	@ (8008c84 <siprintf+0x3c>)
 8008c5a:	9107      	str	r1, [sp, #28]
 8008c5c:	9104      	str	r1, [sp, #16]
 8008c5e:	490a      	ldr	r1, [pc, #40]	@ (8008c88 <siprintf+0x40>)
 8008c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c64:	9105      	str	r1, [sp, #20]
 8008c66:	2400      	movs	r4, #0
 8008c68:	a902      	add	r1, sp, #8
 8008c6a:	6800      	ldr	r0, [r0, #0]
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008c70:	f000 f9a2 	bl	8008fb8 <_svfiprintf_r>
 8008c74:	9b02      	ldr	r3, [sp, #8]
 8008c76:	701c      	strb	r4, [r3, #0]
 8008c78:	b01d      	add	sp, #116	@ 0x74
 8008c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c7e:	b003      	add	sp, #12
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20000010 	.word	0x20000010
 8008c88:	ffff0208 	.word	0xffff0208

08008c8c <memset>:
 8008c8c:	4402      	add	r2, r0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d100      	bne.n	8008c96 <memset+0xa>
 8008c94:	4770      	bx	lr
 8008c96:	f803 1b01 	strb.w	r1, [r3], #1
 8008c9a:	e7f9      	b.n	8008c90 <memset+0x4>

08008c9c <__errno>:
 8008c9c:	4b01      	ldr	r3, [pc, #4]	@ (8008ca4 <__errno+0x8>)
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	20000010 	.word	0x20000010

08008ca8 <__libc_init_array>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	4d0d      	ldr	r5, [pc, #52]	@ (8008ce0 <__libc_init_array+0x38>)
 8008cac:	4c0d      	ldr	r4, [pc, #52]	@ (8008ce4 <__libc_init_array+0x3c>)
 8008cae:	1b64      	subs	r4, r4, r5
 8008cb0:	10a4      	asrs	r4, r4, #2
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	42a6      	cmp	r6, r4
 8008cb6:	d109      	bne.n	8008ccc <__libc_init_array+0x24>
 8008cb8:	4d0b      	ldr	r5, [pc, #44]	@ (8008ce8 <__libc_init_array+0x40>)
 8008cba:	4c0c      	ldr	r4, [pc, #48]	@ (8008cec <__libc_init_array+0x44>)
 8008cbc:	f000 fc64 	bl	8009588 <_init>
 8008cc0:	1b64      	subs	r4, r4, r5
 8008cc2:	10a4      	asrs	r4, r4, #2
 8008cc4:	2600      	movs	r6, #0
 8008cc6:	42a6      	cmp	r6, r4
 8008cc8:	d105      	bne.n	8008cd6 <__libc_init_array+0x2e>
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
 8008ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd0:	4798      	blx	r3
 8008cd2:	3601      	adds	r6, #1
 8008cd4:	e7ee      	b.n	8008cb4 <__libc_init_array+0xc>
 8008cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cda:	4798      	blx	r3
 8008cdc:	3601      	adds	r6, #1
 8008cde:	e7f2      	b.n	8008cc6 <__libc_init_array+0x1e>
 8008ce0:	080096a0 	.word	0x080096a0
 8008ce4:	080096a0 	.word	0x080096a0
 8008ce8:	080096a0 	.word	0x080096a0
 8008cec:	080096a4 	.word	0x080096a4

08008cf0 <__retarget_lock_acquire_recursive>:
 8008cf0:	4770      	bx	lr

08008cf2 <__retarget_lock_release_recursive>:
 8008cf2:	4770      	bx	lr

08008cf4 <memcpy>:
 8008cf4:	440a      	add	r2, r1
 8008cf6:	4291      	cmp	r1, r2
 8008cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cfc:	d100      	bne.n	8008d00 <memcpy+0xc>
 8008cfe:	4770      	bx	lr
 8008d00:	b510      	push	{r4, lr}
 8008d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d0a:	4291      	cmp	r1, r2
 8008d0c:	d1f9      	bne.n	8008d02 <memcpy+0xe>
 8008d0e:	bd10      	pop	{r4, pc}

08008d10 <_free_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4605      	mov	r5, r0
 8008d14:	2900      	cmp	r1, #0
 8008d16:	d041      	beq.n	8008d9c <_free_r+0x8c>
 8008d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d1c:	1f0c      	subs	r4, r1, #4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bfb8      	it	lt
 8008d22:	18e4      	addlt	r4, r4, r3
 8008d24:	f000 f8e0 	bl	8008ee8 <__malloc_lock>
 8008d28:	4a1d      	ldr	r2, [pc, #116]	@ (8008da0 <_free_r+0x90>)
 8008d2a:	6813      	ldr	r3, [r2, #0]
 8008d2c:	b933      	cbnz	r3, 8008d3c <_free_r+0x2c>
 8008d2e:	6063      	str	r3, [r4, #4]
 8008d30:	6014      	str	r4, [r2, #0]
 8008d32:	4628      	mov	r0, r5
 8008d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d38:	f000 b8dc 	b.w	8008ef4 <__malloc_unlock>
 8008d3c:	42a3      	cmp	r3, r4
 8008d3e:	d908      	bls.n	8008d52 <_free_r+0x42>
 8008d40:	6820      	ldr	r0, [r4, #0]
 8008d42:	1821      	adds	r1, r4, r0
 8008d44:	428b      	cmp	r3, r1
 8008d46:	bf01      	itttt	eq
 8008d48:	6819      	ldreq	r1, [r3, #0]
 8008d4a:	685b      	ldreq	r3, [r3, #4]
 8008d4c:	1809      	addeq	r1, r1, r0
 8008d4e:	6021      	streq	r1, [r4, #0]
 8008d50:	e7ed      	b.n	8008d2e <_free_r+0x1e>
 8008d52:	461a      	mov	r2, r3
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	b10b      	cbz	r3, 8008d5c <_free_r+0x4c>
 8008d58:	42a3      	cmp	r3, r4
 8008d5a:	d9fa      	bls.n	8008d52 <_free_r+0x42>
 8008d5c:	6811      	ldr	r1, [r2, #0]
 8008d5e:	1850      	adds	r0, r2, r1
 8008d60:	42a0      	cmp	r0, r4
 8008d62:	d10b      	bne.n	8008d7c <_free_r+0x6c>
 8008d64:	6820      	ldr	r0, [r4, #0]
 8008d66:	4401      	add	r1, r0
 8008d68:	1850      	adds	r0, r2, r1
 8008d6a:	4283      	cmp	r3, r0
 8008d6c:	6011      	str	r1, [r2, #0]
 8008d6e:	d1e0      	bne.n	8008d32 <_free_r+0x22>
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	6053      	str	r3, [r2, #4]
 8008d76:	4408      	add	r0, r1
 8008d78:	6010      	str	r0, [r2, #0]
 8008d7a:	e7da      	b.n	8008d32 <_free_r+0x22>
 8008d7c:	d902      	bls.n	8008d84 <_free_r+0x74>
 8008d7e:	230c      	movs	r3, #12
 8008d80:	602b      	str	r3, [r5, #0]
 8008d82:	e7d6      	b.n	8008d32 <_free_r+0x22>
 8008d84:	6820      	ldr	r0, [r4, #0]
 8008d86:	1821      	adds	r1, r4, r0
 8008d88:	428b      	cmp	r3, r1
 8008d8a:	bf04      	itt	eq
 8008d8c:	6819      	ldreq	r1, [r3, #0]
 8008d8e:	685b      	ldreq	r3, [r3, #4]
 8008d90:	6063      	str	r3, [r4, #4]
 8008d92:	bf04      	itt	eq
 8008d94:	1809      	addeq	r1, r1, r0
 8008d96:	6021      	streq	r1, [r4, #0]
 8008d98:	6054      	str	r4, [r2, #4]
 8008d9a:	e7ca      	b.n	8008d32 <_free_r+0x22>
 8008d9c:	bd38      	pop	{r3, r4, r5, pc}
 8008d9e:	bf00      	nop
 8008da0:	20004d18 	.word	0x20004d18

08008da4 <sbrk_aligned>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	4e0f      	ldr	r6, [pc, #60]	@ (8008de4 <sbrk_aligned+0x40>)
 8008da8:	460c      	mov	r4, r1
 8008daa:	6831      	ldr	r1, [r6, #0]
 8008dac:	4605      	mov	r5, r0
 8008dae:	b911      	cbnz	r1, 8008db6 <sbrk_aligned+0x12>
 8008db0:	f000 fba4 	bl	80094fc <_sbrk_r>
 8008db4:	6030      	str	r0, [r6, #0]
 8008db6:	4621      	mov	r1, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 fb9f 	bl	80094fc <_sbrk_r>
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	d103      	bne.n	8008dca <sbrk_aligned+0x26>
 8008dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	1cc4      	adds	r4, r0, #3
 8008dcc:	f024 0403 	bic.w	r4, r4, #3
 8008dd0:	42a0      	cmp	r0, r4
 8008dd2:	d0f8      	beq.n	8008dc6 <sbrk_aligned+0x22>
 8008dd4:	1a21      	subs	r1, r4, r0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f000 fb90 	bl	80094fc <_sbrk_r>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d1f2      	bne.n	8008dc6 <sbrk_aligned+0x22>
 8008de0:	e7ef      	b.n	8008dc2 <sbrk_aligned+0x1e>
 8008de2:	bf00      	nop
 8008de4:	20004d14 	.word	0x20004d14

08008de8 <_malloc_r>:
 8008de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dec:	1ccd      	adds	r5, r1, #3
 8008dee:	f025 0503 	bic.w	r5, r5, #3
 8008df2:	3508      	adds	r5, #8
 8008df4:	2d0c      	cmp	r5, #12
 8008df6:	bf38      	it	cc
 8008df8:	250c      	movcc	r5, #12
 8008dfa:	2d00      	cmp	r5, #0
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	db01      	blt.n	8008e04 <_malloc_r+0x1c>
 8008e00:	42a9      	cmp	r1, r5
 8008e02:	d904      	bls.n	8008e0e <_malloc_r+0x26>
 8008e04:	230c      	movs	r3, #12
 8008e06:	6033      	str	r3, [r6, #0]
 8008e08:	2000      	movs	r0, #0
 8008e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ee4 <_malloc_r+0xfc>
 8008e12:	f000 f869 	bl	8008ee8 <__malloc_lock>
 8008e16:	f8d8 3000 	ldr.w	r3, [r8]
 8008e1a:	461c      	mov	r4, r3
 8008e1c:	bb44      	cbnz	r4, 8008e70 <_malloc_r+0x88>
 8008e1e:	4629      	mov	r1, r5
 8008e20:	4630      	mov	r0, r6
 8008e22:	f7ff ffbf 	bl	8008da4 <sbrk_aligned>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	4604      	mov	r4, r0
 8008e2a:	d158      	bne.n	8008ede <_malloc_r+0xf6>
 8008e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8008e30:	4627      	mov	r7, r4
 8008e32:	2f00      	cmp	r7, #0
 8008e34:	d143      	bne.n	8008ebe <_malloc_r+0xd6>
 8008e36:	2c00      	cmp	r4, #0
 8008e38:	d04b      	beq.n	8008ed2 <_malloc_r+0xea>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	4630      	mov	r0, r6
 8008e40:	eb04 0903 	add.w	r9, r4, r3
 8008e44:	f000 fb5a 	bl	80094fc <_sbrk_r>
 8008e48:	4581      	cmp	r9, r0
 8008e4a:	d142      	bne.n	8008ed2 <_malloc_r+0xea>
 8008e4c:	6821      	ldr	r1, [r4, #0]
 8008e4e:	1a6d      	subs	r5, r5, r1
 8008e50:	4629      	mov	r1, r5
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7ff ffa6 	bl	8008da4 <sbrk_aligned>
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d03a      	beq.n	8008ed2 <_malloc_r+0xea>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	442b      	add	r3, r5
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	f8d8 3000 	ldr.w	r3, [r8]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	bb62      	cbnz	r2, 8008ec4 <_malloc_r+0xdc>
 8008e6a:	f8c8 7000 	str.w	r7, [r8]
 8008e6e:	e00f      	b.n	8008e90 <_malloc_r+0xa8>
 8008e70:	6822      	ldr	r2, [r4, #0]
 8008e72:	1b52      	subs	r2, r2, r5
 8008e74:	d420      	bmi.n	8008eb8 <_malloc_r+0xd0>
 8008e76:	2a0b      	cmp	r2, #11
 8008e78:	d917      	bls.n	8008eaa <_malloc_r+0xc2>
 8008e7a:	1961      	adds	r1, r4, r5
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	6025      	str	r5, [r4, #0]
 8008e80:	bf18      	it	ne
 8008e82:	6059      	strne	r1, [r3, #4]
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	bf08      	it	eq
 8008e88:	f8c8 1000 	streq.w	r1, [r8]
 8008e8c:	5162      	str	r2, [r4, r5]
 8008e8e:	604b      	str	r3, [r1, #4]
 8008e90:	4630      	mov	r0, r6
 8008e92:	f000 f82f 	bl	8008ef4 <__malloc_unlock>
 8008e96:	f104 000b 	add.w	r0, r4, #11
 8008e9a:	1d23      	adds	r3, r4, #4
 8008e9c:	f020 0007 	bic.w	r0, r0, #7
 8008ea0:	1ac2      	subs	r2, r0, r3
 8008ea2:	bf1c      	itt	ne
 8008ea4:	1a1b      	subne	r3, r3, r0
 8008ea6:	50a3      	strne	r3, [r4, r2]
 8008ea8:	e7af      	b.n	8008e0a <_malloc_r+0x22>
 8008eaa:	6862      	ldr	r2, [r4, #4]
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	bf0c      	ite	eq
 8008eb0:	f8c8 2000 	streq.w	r2, [r8]
 8008eb4:	605a      	strne	r2, [r3, #4]
 8008eb6:	e7eb      	b.n	8008e90 <_malloc_r+0xa8>
 8008eb8:	4623      	mov	r3, r4
 8008eba:	6864      	ldr	r4, [r4, #4]
 8008ebc:	e7ae      	b.n	8008e1c <_malloc_r+0x34>
 8008ebe:	463c      	mov	r4, r7
 8008ec0:	687f      	ldr	r7, [r7, #4]
 8008ec2:	e7b6      	b.n	8008e32 <_malloc_r+0x4a>
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	d1fb      	bne.n	8008ec4 <_malloc_r+0xdc>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6053      	str	r3, [r2, #4]
 8008ed0:	e7de      	b.n	8008e90 <_malloc_r+0xa8>
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f000 f80c 	bl	8008ef4 <__malloc_unlock>
 8008edc:	e794      	b.n	8008e08 <_malloc_r+0x20>
 8008ede:	6005      	str	r5, [r0, #0]
 8008ee0:	e7d6      	b.n	8008e90 <_malloc_r+0xa8>
 8008ee2:	bf00      	nop
 8008ee4:	20004d18 	.word	0x20004d18

08008ee8 <__malloc_lock>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	@ (8008ef0 <__malloc_lock+0x8>)
 8008eea:	f7ff bf01 	b.w	8008cf0 <__retarget_lock_acquire_recursive>
 8008eee:	bf00      	nop
 8008ef0:	20004d10 	.word	0x20004d10

08008ef4 <__malloc_unlock>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	@ (8008efc <__malloc_unlock+0x8>)
 8008ef6:	f7ff befc 	b.w	8008cf2 <__retarget_lock_release_recursive>
 8008efa:	bf00      	nop
 8008efc:	20004d10 	.word	0x20004d10

08008f00 <__ssputs_r>:
 8008f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f04:	688e      	ldr	r6, [r1, #8]
 8008f06:	461f      	mov	r7, r3
 8008f08:	42be      	cmp	r6, r7
 8008f0a:	680b      	ldr	r3, [r1, #0]
 8008f0c:	4682      	mov	sl, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	4690      	mov	r8, r2
 8008f12:	d82d      	bhi.n	8008f70 <__ssputs_r+0x70>
 8008f14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f1c:	d026      	beq.n	8008f6c <__ssputs_r+0x6c>
 8008f1e:	6965      	ldr	r5, [r4, #20]
 8008f20:	6909      	ldr	r1, [r1, #16]
 8008f22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f26:	eba3 0901 	sub.w	r9, r3, r1
 8008f2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f2e:	1c7b      	adds	r3, r7, #1
 8008f30:	444b      	add	r3, r9
 8008f32:	106d      	asrs	r5, r5, #1
 8008f34:	429d      	cmp	r5, r3
 8008f36:	bf38      	it	cc
 8008f38:	461d      	movcc	r5, r3
 8008f3a:	0553      	lsls	r3, r2, #21
 8008f3c:	d527      	bpl.n	8008f8e <__ssputs_r+0x8e>
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7ff ff52 	bl	8008de8 <_malloc_r>
 8008f44:	4606      	mov	r6, r0
 8008f46:	b360      	cbz	r0, 8008fa2 <__ssputs_r+0xa2>
 8008f48:	6921      	ldr	r1, [r4, #16]
 8008f4a:	464a      	mov	r2, r9
 8008f4c:	f7ff fed2 	bl	8008cf4 <memcpy>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	6126      	str	r6, [r4, #16]
 8008f5e:	6165      	str	r5, [r4, #20]
 8008f60:	444e      	add	r6, r9
 8008f62:	eba5 0509 	sub.w	r5, r5, r9
 8008f66:	6026      	str	r6, [r4, #0]
 8008f68:	60a5      	str	r5, [r4, #8]
 8008f6a:	463e      	mov	r6, r7
 8008f6c:	42be      	cmp	r6, r7
 8008f6e:	d900      	bls.n	8008f72 <__ssputs_r+0x72>
 8008f70:	463e      	mov	r6, r7
 8008f72:	6820      	ldr	r0, [r4, #0]
 8008f74:	4632      	mov	r2, r6
 8008f76:	4641      	mov	r1, r8
 8008f78:	f000 faa6 	bl	80094c8 <memmove>
 8008f7c:	68a3      	ldr	r3, [r4, #8]
 8008f7e:	1b9b      	subs	r3, r3, r6
 8008f80:	60a3      	str	r3, [r4, #8]
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	4433      	add	r3, r6
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8e:	462a      	mov	r2, r5
 8008f90:	f000 fac4 	bl	800951c <_realloc_r>
 8008f94:	4606      	mov	r6, r0
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d1e0      	bne.n	8008f5c <__ssputs_r+0x5c>
 8008f9a:	6921      	ldr	r1, [r4, #16]
 8008f9c:	4650      	mov	r0, sl
 8008f9e:	f7ff feb7 	bl	8008d10 <_free_r>
 8008fa2:	230c      	movs	r3, #12
 8008fa4:	f8ca 3000 	str.w	r3, [sl]
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fae:	81a3      	strh	r3, [r4, #12]
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb4:	e7e9      	b.n	8008f8a <__ssputs_r+0x8a>
	...

08008fb8 <_svfiprintf_r>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	4698      	mov	r8, r3
 8008fbe:	898b      	ldrh	r3, [r1, #12]
 8008fc0:	061b      	lsls	r3, r3, #24
 8008fc2:	b09d      	sub	sp, #116	@ 0x74
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	4614      	mov	r4, r2
 8008fca:	d510      	bpl.n	8008fee <_svfiprintf_r+0x36>
 8008fcc:	690b      	ldr	r3, [r1, #16]
 8008fce:	b973      	cbnz	r3, 8008fee <_svfiprintf_r+0x36>
 8008fd0:	2140      	movs	r1, #64	@ 0x40
 8008fd2:	f7ff ff09 	bl	8008de8 <_malloc_r>
 8008fd6:	6028      	str	r0, [r5, #0]
 8008fd8:	6128      	str	r0, [r5, #16]
 8008fda:	b930      	cbnz	r0, 8008fea <_svfiprintf_r+0x32>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe4:	b01d      	add	sp, #116	@ 0x74
 8008fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fea:	2340      	movs	r3, #64	@ 0x40
 8008fec:	616b      	str	r3, [r5, #20]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff2:	2320      	movs	r3, #32
 8008ff4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ffc:	2330      	movs	r3, #48	@ 0x30
 8008ffe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800919c <_svfiprintf_r+0x1e4>
 8009002:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009006:	f04f 0901 	mov.w	r9, #1
 800900a:	4623      	mov	r3, r4
 800900c:	469a      	mov	sl, r3
 800900e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009012:	b10a      	cbz	r2, 8009018 <_svfiprintf_r+0x60>
 8009014:	2a25      	cmp	r2, #37	@ 0x25
 8009016:	d1f9      	bne.n	800900c <_svfiprintf_r+0x54>
 8009018:	ebba 0b04 	subs.w	fp, sl, r4
 800901c:	d00b      	beq.n	8009036 <_svfiprintf_r+0x7e>
 800901e:	465b      	mov	r3, fp
 8009020:	4622      	mov	r2, r4
 8009022:	4629      	mov	r1, r5
 8009024:	4638      	mov	r0, r7
 8009026:	f7ff ff6b 	bl	8008f00 <__ssputs_r>
 800902a:	3001      	adds	r0, #1
 800902c:	f000 80a7 	beq.w	800917e <_svfiprintf_r+0x1c6>
 8009030:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009032:	445a      	add	r2, fp
 8009034:	9209      	str	r2, [sp, #36]	@ 0x24
 8009036:	f89a 3000 	ldrb.w	r3, [sl]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 809f 	beq.w	800917e <_svfiprintf_r+0x1c6>
 8009040:	2300      	movs	r3, #0
 8009042:	f04f 32ff 	mov.w	r2, #4294967295
 8009046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800904a:	f10a 0a01 	add.w	sl, sl, #1
 800904e:	9304      	str	r3, [sp, #16]
 8009050:	9307      	str	r3, [sp, #28]
 8009052:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009056:	931a      	str	r3, [sp, #104]	@ 0x68
 8009058:	4654      	mov	r4, sl
 800905a:	2205      	movs	r2, #5
 800905c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009060:	484e      	ldr	r0, [pc, #312]	@ (800919c <_svfiprintf_r+0x1e4>)
 8009062:	f7f7 f8cd 	bl	8000200 <memchr>
 8009066:	9a04      	ldr	r2, [sp, #16]
 8009068:	b9d8      	cbnz	r0, 80090a2 <_svfiprintf_r+0xea>
 800906a:	06d0      	lsls	r0, r2, #27
 800906c:	bf44      	itt	mi
 800906e:	2320      	movmi	r3, #32
 8009070:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009074:	0711      	lsls	r1, r2, #28
 8009076:	bf44      	itt	mi
 8009078:	232b      	movmi	r3, #43	@ 0x2b
 800907a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800907e:	f89a 3000 	ldrb.w	r3, [sl]
 8009082:	2b2a      	cmp	r3, #42	@ 0x2a
 8009084:	d015      	beq.n	80090b2 <_svfiprintf_r+0xfa>
 8009086:	9a07      	ldr	r2, [sp, #28]
 8009088:	4654      	mov	r4, sl
 800908a:	2000      	movs	r0, #0
 800908c:	f04f 0c0a 	mov.w	ip, #10
 8009090:	4621      	mov	r1, r4
 8009092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009096:	3b30      	subs	r3, #48	@ 0x30
 8009098:	2b09      	cmp	r3, #9
 800909a:	d94b      	bls.n	8009134 <_svfiprintf_r+0x17c>
 800909c:	b1b0      	cbz	r0, 80090cc <_svfiprintf_r+0x114>
 800909e:	9207      	str	r2, [sp, #28]
 80090a0:	e014      	b.n	80090cc <_svfiprintf_r+0x114>
 80090a2:	eba0 0308 	sub.w	r3, r0, r8
 80090a6:	fa09 f303 	lsl.w	r3, r9, r3
 80090aa:	4313      	orrs	r3, r2
 80090ac:	9304      	str	r3, [sp, #16]
 80090ae:	46a2      	mov	sl, r4
 80090b0:	e7d2      	b.n	8009058 <_svfiprintf_r+0xa0>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	1d19      	adds	r1, r3, #4
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	9103      	str	r1, [sp, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bfbb      	ittet	lt
 80090be:	425b      	neglt	r3, r3
 80090c0:	f042 0202 	orrlt.w	r2, r2, #2
 80090c4:	9307      	strge	r3, [sp, #28]
 80090c6:	9307      	strlt	r3, [sp, #28]
 80090c8:	bfb8      	it	lt
 80090ca:	9204      	strlt	r2, [sp, #16]
 80090cc:	7823      	ldrb	r3, [r4, #0]
 80090ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80090d0:	d10a      	bne.n	80090e8 <_svfiprintf_r+0x130>
 80090d2:	7863      	ldrb	r3, [r4, #1]
 80090d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80090d6:	d132      	bne.n	800913e <_svfiprintf_r+0x186>
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	1d1a      	adds	r2, r3, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	9203      	str	r2, [sp, #12]
 80090e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090e4:	3402      	adds	r4, #2
 80090e6:	9305      	str	r3, [sp, #20]
 80090e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091ac <_svfiprintf_r+0x1f4>
 80090ec:	7821      	ldrb	r1, [r4, #0]
 80090ee:	2203      	movs	r2, #3
 80090f0:	4650      	mov	r0, sl
 80090f2:	f7f7 f885 	bl	8000200 <memchr>
 80090f6:	b138      	cbz	r0, 8009108 <_svfiprintf_r+0x150>
 80090f8:	9b04      	ldr	r3, [sp, #16]
 80090fa:	eba0 000a 	sub.w	r0, r0, sl
 80090fe:	2240      	movs	r2, #64	@ 0x40
 8009100:	4082      	lsls	r2, r0
 8009102:	4313      	orrs	r3, r2
 8009104:	3401      	adds	r4, #1
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910c:	4824      	ldr	r0, [pc, #144]	@ (80091a0 <_svfiprintf_r+0x1e8>)
 800910e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009112:	2206      	movs	r2, #6
 8009114:	f7f7 f874 	bl	8000200 <memchr>
 8009118:	2800      	cmp	r0, #0
 800911a:	d036      	beq.n	800918a <_svfiprintf_r+0x1d2>
 800911c:	4b21      	ldr	r3, [pc, #132]	@ (80091a4 <_svfiprintf_r+0x1ec>)
 800911e:	bb1b      	cbnz	r3, 8009168 <_svfiprintf_r+0x1b0>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	3307      	adds	r3, #7
 8009124:	f023 0307 	bic.w	r3, r3, #7
 8009128:	3308      	adds	r3, #8
 800912a:	9303      	str	r3, [sp, #12]
 800912c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912e:	4433      	add	r3, r6
 8009130:	9309      	str	r3, [sp, #36]	@ 0x24
 8009132:	e76a      	b.n	800900a <_svfiprintf_r+0x52>
 8009134:	fb0c 3202 	mla	r2, ip, r2, r3
 8009138:	460c      	mov	r4, r1
 800913a:	2001      	movs	r0, #1
 800913c:	e7a8      	b.n	8009090 <_svfiprintf_r+0xd8>
 800913e:	2300      	movs	r3, #0
 8009140:	3401      	adds	r4, #1
 8009142:	9305      	str	r3, [sp, #20]
 8009144:	4619      	mov	r1, r3
 8009146:	f04f 0c0a 	mov.w	ip, #10
 800914a:	4620      	mov	r0, r4
 800914c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009150:	3a30      	subs	r2, #48	@ 0x30
 8009152:	2a09      	cmp	r2, #9
 8009154:	d903      	bls.n	800915e <_svfiprintf_r+0x1a6>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0c6      	beq.n	80090e8 <_svfiprintf_r+0x130>
 800915a:	9105      	str	r1, [sp, #20]
 800915c:	e7c4      	b.n	80090e8 <_svfiprintf_r+0x130>
 800915e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009162:	4604      	mov	r4, r0
 8009164:	2301      	movs	r3, #1
 8009166:	e7f0      	b.n	800914a <_svfiprintf_r+0x192>
 8009168:	ab03      	add	r3, sp, #12
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	462a      	mov	r2, r5
 800916e:	4b0e      	ldr	r3, [pc, #56]	@ (80091a8 <_svfiprintf_r+0x1f0>)
 8009170:	a904      	add	r1, sp, #16
 8009172:	4638      	mov	r0, r7
 8009174:	f3af 8000 	nop.w
 8009178:	1c42      	adds	r2, r0, #1
 800917a:	4606      	mov	r6, r0
 800917c:	d1d6      	bne.n	800912c <_svfiprintf_r+0x174>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	065b      	lsls	r3, r3, #25
 8009182:	f53f af2d 	bmi.w	8008fe0 <_svfiprintf_r+0x28>
 8009186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009188:	e72c      	b.n	8008fe4 <_svfiprintf_r+0x2c>
 800918a:	ab03      	add	r3, sp, #12
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	462a      	mov	r2, r5
 8009190:	4b05      	ldr	r3, [pc, #20]	@ (80091a8 <_svfiprintf_r+0x1f0>)
 8009192:	a904      	add	r1, sp, #16
 8009194:	4638      	mov	r0, r7
 8009196:	f000 f879 	bl	800928c <_printf_i>
 800919a:	e7ed      	b.n	8009178 <_svfiprintf_r+0x1c0>
 800919c:	08009664 	.word	0x08009664
 80091a0:	0800966e 	.word	0x0800966e
 80091a4:	00000000 	.word	0x00000000
 80091a8:	08008f01 	.word	0x08008f01
 80091ac:	0800966a 	.word	0x0800966a

080091b0 <_printf_common>:
 80091b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b4:	4616      	mov	r6, r2
 80091b6:	4698      	mov	r8, r3
 80091b8:	688a      	ldr	r2, [r1, #8]
 80091ba:	690b      	ldr	r3, [r1, #16]
 80091bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	bfb8      	it	lt
 80091c4:	4613      	movlt	r3, r2
 80091c6:	6033      	str	r3, [r6, #0]
 80091c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091cc:	4607      	mov	r7, r0
 80091ce:	460c      	mov	r4, r1
 80091d0:	b10a      	cbz	r2, 80091d6 <_printf_common+0x26>
 80091d2:	3301      	adds	r3, #1
 80091d4:	6033      	str	r3, [r6, #0]
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	0699      	lsls	r1, r3, #26
 80091da:	bf42      	ittt	mi
 80091dc:	6833      	ldrmi	r3, [r6, #0]
 80091de:	3302      	addmi	r3, #2
 80091e0:	6033      	strmi	r3, [r6, #0]
 80091e2:	6825      	ldr	r5, [r4, #0]
 80091e4:	f015 0506 	ands.w	r5, r5, #6
 80091e8:	d106      	bne.n	80091f8 <_printf_common+0x48>
 80091ea:	f104 0a19 	add.w	sl, r4, #25
 80091ee:	68e3      	ldr	r3, [r4, #12]
 80091f0:	6832      	ldr	r2, [r6, #0]
 80091f2:	1a9b      	subs	r3, r3, r2
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	dc26      	bgt.n	8009246 <_printf_common+0x96>
 80091f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091fc:	6822      	ldr	r2, [r4, #0]
 80091fe:	3b00      	subs	r3, #0
 8009200:	bf18      	it	ne
 8009202:	2301      	movne	r3, #1
 8009204:	0692      	lsls	r2, r2, #26
 8009206:	d42b      	bmi.n	8009260 <_printf_common+0xb0>
 8009208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800920c:	4641      	mov	r1, r8
 800920e:	4638      	mov	r0, r7
 8009210:	47c8      	blx	r9
 8009212:	3001      	adds	r0, #1
 8009214:	d01e      	beq.n	8009254 <_printf_common+0xa4>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	6922      	ldr	r2, [r4, #16]
 800921a:	f003 0306 	and.w	r3, r3, #6
 800921e:	2b04      	cmp	r3, #4
 8009220:	bf02      	ittt	eq
 8009222:	68e5      	ldreq	r5, [r4, #12]
 8009224:	6833      	ldreq	r3, [r6, #0]
 8009226:	1aed      	subeq	r5, r5, r3
 8009228:	68a3      	ldr	r3, [r4, #8]
 800922a:	bf0c      	ite	eq
 800922c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009230:	2500      	movne	r5, #0
 8009232:	4293      	cmp	r3, r2
 8009234:	bfc4      	itt	gt
 8009236:	1a9b      	subgt	r3, r3, r2
 8009238:	18ed      	addgt	r5, r5, r3
 800923a:	2600      	movs	r6, #0
 800923c:	341a      	adds	r4, #26
 800923e:	42b5      	cmp	r5, r6
 8009240:	d11a      	bne.n	8009278 <_printf_common+0xc8>
 8009242:	2000      	movs	r0, #0
 8009244:	e008      	b.n	8009258 <_printf_common+0xa8>
 8009246:	2301      	movs	r3, #1
 8009248:	4652      	mov	r2, sl
 800924a:	4641      	mov	r1, r8
 800924c:	4638      	mov	r0, r7
 800924e:	47c8      	blx	r9
 8009250:	3001      	adds	r0, #1
 8009252:	d103      	bne.n	800925c <_printf_common+0xac>
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800925c:	3501      	adds	r5, #1
 800925e:	e7c6      	b.n	80091ee <_printf_common+0x3e>
 8009260:	18e1      	adds	r1, r4, r3
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	2030      	movs	r0, #48	@ 0x30
 8009266:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800926a:	4422      	add	r2, r4
 800926c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009274:	3302      	adds	r3, #2
 8009276:	e7c7      	b.n	8009208 <_printf_common+0x58>
 8009278:	2301      	movs	r3, #1
 800927a:	4622      	mov	r2, r4
 800927c:	4641      	mov	r1, r8
 800927e:	4638      	mov	r0, r7
 8009280:	47c8      	blx	r9
 8009282:	3001      	adds	r0, #1
 8009284:	d0e6      	beq.n	8009254 <_printf_common+0xa4>
 8009286:	3601      	adds	r6, #1
 8009288:	e7d9      	b.n	800923e <_printf_common+0x8e>
	...

0800928c <_printf_i>:
 800928c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	7e0f      	ldrb	r7, [r1, #24]
 8009292:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009294:	2f78      	cmp	r7, #120	@ 0x78
 8009296:	4691      	mov	r9, r2
 8009298:	4680      	mov	r8, r0
 800929a:	460c      	mov	r4, r1
 800929c:	469a      	mov	sl, r3
 800929e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092a2:	d807      	bhi.n	80092b4 <_printf_i+0x28>
 80092a4:	2f62      	cmp	r7, #98	@ 0x62
 80092a6:	d80a      	bhi.n	80092be <_printf_i+0x32>
 80092a8:	2f00      	cmp	r7, #0
 80092aa:	f000 80d1 	beq.w	8009450 <_printf_i+0x1c4>
 80092ae:	2f58      	cmp	r7, #88	@ 0x58
 80092b0:	f000 80b8 	beq.w	8009424 <_printf_i+0x198>
 80092b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092bc:	e03a      	b.n	8009334 <_printf_i+0xa8>
 80092be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092c2:	2b15      	cmp	r3, #21
 80092c4:	d8f6      	bhi.n	80092b4 <_printf_i+0x28>
 80092c6:	a101      	add	r1, pc, #4	@ (adr r1, 80092cc <_printf_i+0x40>)
 80092c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092cc:	08009325 	.word	0x08009325
 80092d0:	08009339 	.word	0x08009339
 80092d4:	080092b5 	.word	0x080092b5
 80092d8:	080092b5 	.word	0x080092b5
 80092dc:	080092b5 	.word	0x080092b5
 80092e0:	080092b5 	.word	0x080092b5
 80092e4:	08009339 	.word	0x08009339
 80092e8:	080092b5 	.word	0x080092b5
 80092ec:	080092b5 	.word	0x080092b5
 80092f0:	080092b5 	.word	0x080092b5
 80092f4:	080092b5 	.word	0x080092b5
 80092f8:	08009437 	.word	0x08009437
 80092fc:	08009363 	.word	0x08009363
 8009300:	080093f1 	.word	0x080093f1
 8009304:	080092b5 	.word	0x080092b5
 8009308:	080092b5 	.word	0x080092b5
 800930c:	08009459 	.word	0x08009459
 8009310:	080092b5 	.word	0x080092b5
 8009314:	08009363 	.word	0x08009363
 8009318:	080092b5 	.word	0x080092b5
 800931c:	080092b5 	.word	0x080092b5
 8009320:	080093f9 	.word	0x080093f9
 8009324:	6833      	ldr	r3, [r6, #0]
 8009326:	1d1a      	adds	r2, r3, #4
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6032      	str	r2, [r6, #0]
 800932c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009330:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009334:	2301      	movs	r3, #1
 8009336:	e09c      	b.n	8009472 <_printf_i+0x1e6>
 8009338:	6833      	ldr	r3, [r6, #0]
 800933a:	6820      	ldr	r0, [r4, #0]
 800933c:	1d19      	adds	r1, r3, #4
 800933e:	6031      	str	r1, [r6, #0]
 8009340:	0606      	lsls	r6, r0, #24
 8009342:	d501      	bpl.n	8009348 <_printf_i+0xbc>
 8009344:	681d      	ldr	r5, [r3, #0]
 8009346:	e003      	b.n	8009350 <_printf_i+0xc4>
 8009348:	0645      	lsls	r5, r0, #25
 800934a:	d5fb      	bpl.n	8009344 <_printf_i+0xb8>
 800934c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009350:	2d00      	cmp	r5, #0
 8009352:	da03      	bge.n	800935c <_printf_i+0xd0>
 8009354:	232d      	movs	r3, #45	@ 0x2d
 8009356:	426d      	negs	r5, r5
 8009358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800935c:	4858      	ldr	r0, [pc, #352]	@ (80094c0 <_printf_i+0x234>)
 800935e:	230a      	movs	r3, #10
 8009360:	e011      	b.n	8009386 <_printf_i+0xfa>
 8009362:	6821      	ldr	r1, [r4, #0]
 8009364:	6833      	ldr	r3, [r6, #0]
 8009366:	0608      	lsls	r0, r1, #24
 8009368:	f853 5b04 	ldr.w	r5, [r3], #4
 800936c:	d402      	bmi.n	8009374 <_printf_i+0xe8>
 800936e:	0649      	lsls	r1, r1, #25
 8009370:	bf48      	it	mi
 8009372:	b2ad      	uxthmi	r5, r5
 8009374:	2f6f      	cmp	r7, #111	@ 0x6f
 8009376:	4852      	ldr	r0, [pc, #328]	@ (80094c0 <_printf_i+0x234>)
 8009378:	6033      	str	r3, [r6, #0]
 800937a:	bf14      	ite	ne
 800937c:	230a      	movne	r3, #10
 800937e:	2308      	moveq	r3, #8
 8009380:	2100      	movs	r1, #0
 8009382:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009386:	6866      	ldr	r6, [r4, #4]
 8009388:	60a6      	str	r6, [r4, #8]
 800938a:	2e00      	cmp	r6, #0
 800938c:	db05      	blt.n	800939a <_printf_i+0x10e>
 800938e:	6821      	ldr	r1, [r4, #0]
 8009390:	432e      	orrs	r6, r5
 8009392:	f021 0104 	bic.w	r1, r1, #4
 8009396:	6021      	str	r1, [r4, #0]
 8009398:	d04b      	beq.n	8009432 <_printf_i+0x1a6>
 800939a:	4616      	mov	r6, r2
 800939c:	fbb5 f1f3 	udiv	r1, r5, r3
 80093a0:	fb03 5711 	mls	r7, r3, r1, r5
 80093a4:	5dc7      	ldrb	r7, [r0, r7]
 80093a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093aa:	462f      	mov	r7, r5
 80093ac:	42bb      	cmp	r3, r7
 80093ae:	460d      	mov	r5, r1
 80093b0:	d9f4      	bls.n	800939c <_printf_i+0x110>
 80093b2:	2b08      	cmp	r3, #8
 80093b4:	d10b      	bne.n	80093ce <_printf_i+0x142>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	07df      	lsls	r7, r3, #31
 80093ba:	d508      	bpl.n	80093ce <_printf_i+0x142>
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	6861      	ldr	r1, [r4, #4]
 80093c0:	4299      	cmp	r1, r3
 80093c2:	bfde      	ittt	le
 80093c4:	2330      	movle	r3, #48	@ 0x30
 80093c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093ce:	1b92      	subs	r2, r2, r6
 80093d0:	6122      	str	r2, [r4, #16]
 80093d2:	f8cd a000 	str.w	sl, [sp]
 80093d6:	464b      	mov	r3, r9
 80093d8:	aa03      	add	r2, sp, #12
 80093da:	4621      	mov	r1, r4
 80093dc:	4640      	mov	r0, r8
 80093de:	f7ff fee7 	bl	80091b0 <_printf_common>
 80093e2:	3001      	adds	r0, #1
 80093e4:	d14a      	bne.n	800947c <_printf_i+0x1f0>
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	b004      	add	sp, #16
 80093ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	f043 0320 	orr.w	r3, r3, #32
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	4832      	ldr	r0, [pc, #200]	@ (80094c4 <_printf_i+0x238>)
 80093fa:	2778      	movs	r7, #120	@ 0x78
 80093fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	6831      	ldr	r1, [r6, #0]
 8009404:	061f      	lsls	r7, r3, #24
 8009406:	f851 5b04 	ldr.w	r5, [r1], #4
 800940a:	d402      	bmi.n	8009412 <_printf_i+0x186>
 800940c:	065f      	lsls	r7, r3, #25
 800940e:	bf48      	it	mi
 8009410:	b2ad      	uxthmi	r5, r5
 8009412:	6031      	str	r1, [r6, #0]
 8009414:	07d9      	lsls	r1, r3, #31
 8009416:	bf44      	itt	mi
 8009418:	f043 0320 	orrmi.w	r3, r3, #32
 800941c:	6023      	strmi	r3, [r4, #0]
 800941e:	b11d      	cbz	r5, 8009428 <_printf_i+0x19c>
 8009420:	2310      	movs	r3, #16
 8009422:	e7ad      	b.n	8009380 <_printf_i+0xf4>
 8009424:	4826      	ldr	r0, [pc, #152]	@ (80094c0 <_printf_i+0x234>)
 8009426:	e7e9      	b.n	80093fc <_printf_i+0x170>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	f023 0320 	bic.w	r3, r3, #32
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	e7f6      	b.n	8009420 <_printf_i+0x194>
 8009432:	4616      	mov	r6, r2
 8009434:	e7bd      	b.n	80093b2 <_printf_i+0x126>
 8009436:	6833      	ldr	r3, [r6, #0]
 8009438:	6825      	ldr	r5, [r4, #0]
 800943a:	6961      	ldr	r1, [r4, #20]
 800943c:	1d18      	adds	r0, r3, #4
 800943e:	6030      	str	r0, [r6, #0]
 8009440:	062e      	lsls	r6, r5, #24
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	d501      	bpl.n	800944a <_printf_i+0x1be>
 8009446:	6019      	str	r1, [r3, #0]
 8009448:	e002      	b.n	8009450 <_printf_i+0x1c4>
 800944a:	0668      	lsls	r0, r5, #25
 800944c:	d5fb      	bpl.n	8009446 <_printf_i+0x1ba>
 800944e:	8019      	strh	r1, [r3, #0]
 8009450:	2300      	movs	r3, #0
 8009452:	6123      	str	r3, [r4, #16]
 8009454:	4616      	mov	r6, r2
 8009456:	e7bc      	b.n	80093d2 <_printf_i+0x146>
 8009458:	6833      	ldr	r3, [r6, #0]
 800945a:	1d1a      	adds	r2, r3, #4
 800945c:	6032      	str	r2, [r6, #0]
 800945e:	681e      	ldr	r6, [r3, #0]
 8009460:	6862      	ldr	r2, [r4, #4]
 8009462:	2100      	movs	r1, #0
 8009464:	4630      	mov	r0, r6
 8009466:	f7f6 fecb 	bl	8000200 <memchr>
 800946a:	b108      	cbz	r0, 8009470 <_printf_i+0x1e4>
 800946c:	1b80      	subs	r0, r0, r6
 800946e:	6060      	str	r0, [r4, #4]
 8009470:	6863      	ldr	r3, [r4, #4]
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	2300      	movs	r3, #0
 8009476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800947a:	e7aa      	b.n	80093d2 <_printf_i+0x146>
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	4632      	mov	r2, r6
 8009480:	4649      	mov	r1, r9
 8009482:	4640      	mov	r0, r8
 8009484:	47d0      	blx	sl
 8009486:	3001      	adds	r0, #1
 8009488:	d0ad      	beq.n	80093e6 <_printf_i+0x15a>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	079b      	lsls	r3, r3, #30
 800948e:	d413      	bmi.n	80094b8 <_printf_i+0x22c>
 8009490:	68e0      	ldr	r0, [r4, #12]
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	4298      	cmp	r0, r3
 8009496:	bfb8      	it	lt
 8009498:	4618      	movlt	r0, r3
 800949a:	e7a6      	b.n	80093ea <_printf_i+0x15e>
 800949c:	2301      	movs	r3, #1
 800949e:	4632      	mov	r2, r6
 80094a0:	4649      	mov	r1, r9
 80094a2:	4640      	mov	r0, r8
 80094a4:	47d0      	blx	sl
 80094a6:	3001      	adds	r0, #1
 80094a8:	d09d      	beq.n	80093e6 <_printf_i+0x15a>
 80094aa:	3501      	adds	r5, #1
 80094ac:	68e3      	ldr	r3, [r4, #12]
 80094ae:	9903      	ldr	r1, [sp, #12]
 80094b0:	1a5b      	subs	r3, r3, r1
 80094b2:	42ab      	cmp	r3, r5
 80094b4:	dcf2      	bgt.n	800949c <_printf_i+0x210>
 80094b6:	e7eb      	b.n	8009490 <_printf_i+0x204>
 80094b8:	2500      	movs	r5, #0
 80094ba:	f104 0619 	add.w	r6, r4, #25
 80094be:	e7f5      	b.n	80094ac <_printf_i+0x220>
 80094c0:	08009675 	.word	0x08009675
 80094c4:	08009686 	.word	0x08009686

080094c8 <memmove>:
 80094c8:	4288      	cmp	r0, r1
 80094ca:	b510      	push	{r4, lr}
 80094cc:	eb01 0402 	add.w	r4, r1, r2
 80094d0:	d902      	bls.n	80094d8 <memmove+0x10>
 80094d2:	4284      	cmp	r4, r0
 80094d4:	4623      	mov	r3, r4
 80094d6:	d807      	bhi.n	80094e8 <memmove+0x20>
 80094d8:	1e43      	subs	r3, r0, #1
 80094da:	42a1      	cmp	r1, r4
 80094dc:	d008      	beq.n	80094f0 <memmove+0x28>
 80094de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094e6:	e7f8      	b.n	80094da <memmove+0x12>
 80094e8:	4402      	add	r2, r0
 80094ea:	4601      	mov	r1, r0
 80094ec:	428a      	cmp	r2, r1
 80094ee:	d100      	bne.n	80094f2 <memmove+0x2a>
 80094f0:	bd10      	pop	{r4, pc}
 80094f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094fa:	e7f7      	b.n	80094ec <memmove+0x24>

080094fc <_sbrk_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d06      	ldr	r5, [pc, #24]	@ (8009518 <_sbrk_r+0x1c>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	f7f7 fc96 	bl	8000e38 <_sbrk>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_sbrk_r+0x1a>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	b103      	cbz	r3, 8009516 <_sbrk_r+0x1a>
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	20004d0c 	.word	0x20004d0c

0800951c <_realloc_r>:
 800951c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009520:	4607      	mov	r7, r0
 8009522:	4614      	mov	r4, r2
 8009524:	460d      	mov	r5, r1
 8009526:	b921      	cbnz	r1, 8009532 <_realloc_r+0x16>
 8009528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800952c:	4611      	mov	r1, r2
 800952e:	f7ff bc5b 	b.w	8008de8 <_malloc_r>
 8009532:	b92a      	cbnz	r2, 8009540 <_realloc_r+0x24>
 8009534:	f7ff fbec 	bl	8008d10 <_free_r>
 8009538:	4625      	mov	r5, r4
 800953a:	4628      	mov	r0, r5
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009540:	f000 f81a 	bl	8009578 <_malloc_usable_size_r>
 8009544:	4284      	cmp	r4, r0
 8009546:	4606      	mov	r6, r0
 8009548:	d802      	bhi.n	8009550 <_realloc_r+0x34>
 800954a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800954e:	d8f4      	bhi.n	800953a <_realloc_r+0x1e>
 8009550:	4621      	mov	r1, r4
 8009552:	4638      	mov	r0, r7
 8009554:	f7ff fc48 	bl	8008de8 <_malloc_r>
 8009558:	4680      	mov	r8, r0
 800955a:	b908      	cbnz	r0, 8009560 <_realloc_r+0x44>
 800955c:	4645      	mov	r5, r8
 800955e:	e7ec      	b.n	800953a <_realloc_r+0x1e>
 8009560:	42b4      	cmp	r4, r6
 8009562:	4622      	mov	r2, r4
 8009564:	4629      	mov	r1, r5
 8009566:	bf28      	it	cs
 8009568:	4632      	movcs	r2, r6
 800956a:	f7ff fbc3 	bl	8008cf4 <memcpy>
 800956e:	4629      	mov	r1, r5
 8009570:	4638      	mov	r0, r7
 8009572:	f7ff fbcd 	bl	8008d10 <_free_r>
 8009576:	e7f1      	b.n	800955c <_realloc_r+0x40>

08009578 <_malloc_usable_size_r>:
 8009578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957c:	1f18      	subs	r0, r3, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfbc      	itt	lt
 8009582:	580b      	ldrlt	r3, [r1, r0]
 8009584:	18c0      	addlt	r0, r0, r3
 8009586:	4770      	bx	lr

08009588 <_init>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr

08009594 <_fini>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr
