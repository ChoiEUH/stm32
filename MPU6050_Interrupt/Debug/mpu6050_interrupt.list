
mpu6050_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008978  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08008b28  08008b28  00018b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f2c  08008f2c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f34  08008f34  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f34  08008f34  00018f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f38  08008f38  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000001fc  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  200003d8  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c820  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c82  00000000  00000000  0002ca2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  0002f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b51  00000000  00000000  0002fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d614  00000000  00000000  00053671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d57e5  00000000  00000000  00060c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013646a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d0c  00000000  00000000  001364bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008b10 	.word	0x08008b10

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08008b10 	.word	0x08008b10

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <MPU_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU_init(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af04      	add	r7, sp, #16
	uint8_t c, v;

	HAL_I2C_Mem_Read(&hi2c1,DEV_ADDR,MPU_WHO,1,&c,1,1000);
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	2275      	movs	r2, #117	; 0x75
 8000ee4:	21d0      	movs	r1, #208	; 0xd0
 8000ee6:	4823      	ldr	r0, [pc, #140]	; (8000f74 <MPU_init+0xa8>)
 8000ee8:	f001 fb16 	bl	8002518 <HAL_I2C_Mem_Read>

	if(c == 104){
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b68      	cmp	r3, #104	; 0x68
 8000ef0:	d13b      	bne.n	8000f6a <MPU_init+0x9e>
		v = 0x00;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,DEV_ADDR,MPU_PWR,1,&v,1,1000);
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	226b      	movs	r2, #107	; 0x6b
 8000f08:	21d0      	movs	r1, #208	; 0xd0
 8000f0a:	481a      	ldr	r0, [pc, #104]	; (8000f74 <MPU_init+0xa8>)
 8000f0c:	f001 fa0a 	bl	8002324 <HAL_I2C_Mem_Write>

		v = 0x07;
 8000f10:	2307      	movs	r3, #7
 8000f12:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,DEV_ADDR,MPU_DIV,1,&v,1,1000);
 8000f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	1dbb      	adds	r3, r7, #6
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	2219      	movs	r2, #25
 8000f26:	21d0      	movs	r1, #208	; 0xd0
 8000f28:	4812      	ldr	r0, [pc, #72]	; (8000f74 <MPU_init+0xa8>)
 8000f2a:	f001 f9fb 	bl	8002324 <HAL_I2C_Mem_Write>

		v = 0x00;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,DEV_ADDR,MPU_GCONFIG,1,&v,1,1000);
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	221b      	movs	r2, #27
 8000f44:	21d0      	movs	r1, #208	; 0xd0
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <MPU_init+0xa8>)
 8000f48:	f001 f9ec 	bl	8002324 <HAL_I2C_Mem_Write>

		v = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,DEV_ADDR,MPU_ACONFIG,1,&v,1,1000);
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	1dbb      	adds	r3, r7, #6
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	221c      	movs	r2, #28
 8000f62:	21d0      	movs	r1, #208	; 0xd0
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MPU_init+0xa8>)
 8000f66:	f001 f9dd 	bl	8002324 <HAL_I2C_Mem_Write>
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000328 	.word	0x20000328

08000f78 <Read_Accel>:

void Read_Accel(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af02      	add	r7, sp, #8
	s = MPU_ACCEL;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <Read_Accel+0x28>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]

HAL_I2C_Mem_Read_IT(&hi2c1,DEV_ADDR,MPU_READ_H,1,data,6);
 8000f84:	2306      	movs	r3, #6
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <Read_Accel+0x2c>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	223b      	movs	r2, #59	; 0x3b
 8000f90:	21d0      	movs	r1, #208	; 0xd0
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <Read_Accel+0x30>)
 8000f94:	f001 fce6 	bl	8002964 <HAL_I2C_Mem_Read_IT>
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001f8 	.word	0x200001f8
 8000fa4:	20000320 	.word	0x20000320
 8000fa8:	20000328 	.word	0x20000328

08000fac <Read_Gyro>:

void Read_Gyro(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af02      	add	r7, sp, #8
	s = MPU_GYRO;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <Read_Gyro+0x28>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read_IT(&hi2c1,DEV_ADDR,MPU_READ_H,1,data,6);
 8000fb8:	2306      	movs	r3, #6
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <Read_Gyro+0x2c>)
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	223b      	movs	r2, #59	; 0x3b
 8000fc4:	21d0      	movs	r1, #208	; 0xd0
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <Read_Gyro+0x30>)
 8000fc8:	f001 fccc 	bl	8002964 <HAL_I2C_Mem_Read_IT>

}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001f8 	.word	0x200001f8
 8000fd8:	20000320 	.word	0x20000320
 8000fdc:	20000328 	.word	0x20000328

08000fe0 <Send_data>:

void Send_data(void){
 8000fe0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af04      	add	r7, sp, #16
	sprintf(buf,"%.2f %.2f %.2f\r\n,",GXR,GYR,GZR);
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <Send_data+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fabb 	bl	8000568 <__aeabi_f2d>
 8000ff2:	4680      	mov	r8, r0
 8000ff4:	4689      	mov	r9, r1
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <Send_data+0x68>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fab4 	bl	8000568 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <Send_data+0x6c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff faad 	bl	8000568 <__aeabi_f2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001016:	e9cd 4500 	strd	r4, r5, [sp]
 800101a:	4642      	mov	r2, r8
 800101c:	464b      	mov	r3, r9
 800101e:	490c      	ldr	r1, [pc, #48]	; (8001050 <Send_data+0x70>)
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <Send_data+0x74>)
 8001022:	f005 fafb 	bl	800661c <siprintf>

	HAL_UART_Transmit(&huart3,(uint8_t *)buf,strlen(buf),0xFFFF);
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <Send_data+0x74>)
 8001028:	f7ff f8e2 	bl	80001f0 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <Send_data+0x74>)
 8001036:	4808      	ldr	r0, [pc, #32]	; (8001058 <Send_data+0x78>)
 8001038:	f004 fadf 	bl	80055fa <HAL_UART_Transmit>
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001044:	20000314 	.word	0x20000314
 8001048:	20000318 	.word	0x20000318
 800104c:	2000031c 	.word	0x2000031c
 8001050:	08008b28 	.word	0x08008b28
 8001054:	200001fc 	.word	0x200001fc
 8001058:	2000037c 	.word	0x2000037c

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001060:	f000 fc7e 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001064:	f000 f81a 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001068:	f000 f8ec 	bl	8001244 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800106c:	f000 f8c0 	bl	80011f0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001070:	f000 f87e 	bl	8001170 <MX_I2C1_Init>

  MPU_init();
 8001074:	f7ff ff2a 	bl	8000ecc <MPU_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    Read_Accel();
 8001078:	f7ff ff7e 	bl	8000f78 <Read_Accel>
    HAL_Delay(10);
 800107c:	200a      	movs	r0, #10
 800107e:	f000 fce1 	bl	8001a44 <HAL_Delay>
    Read_Gyro();
 8001082:	f7ff ff93 	bl	8000fac <Read_Gyro>
    HAL_Delay(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f000 fcdc 	bl	8001a44 <HAL_Delay>
    Send_data();
 800108c:	f7ff ffa8 	bl	8000fe0 <Send_data>
    HAL_Delay(500);
 8001090:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001094:	f000 fcd6 	bl	8001a44 <HAL_Delay>
    Read_Accel();
 8001098:	e7ee      	b.n	8001078 <main+0x1c>
	...

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fe44 	bl	8005d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <SystemClock_Config+0xcc>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <SystemClock_Config+0xd0>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001110:	23a8      	movs	r3, #168	; 0xa8
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001118:	2307      	movs	r3, #7
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fd85 	bl	8004c30 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800112c:	f000 fa0a 	bl	8001544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2105      	movs	r1, #5
 800114e:	4618      	mov	r0, r3
 8001150:	f003 ffe6 	bl	8005120 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800115a:	f000 f9f3 	bl	8001544 <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3750      	adds	r7, #80	; 0x50
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_I2C1_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_I2C1_Init+0x74>)
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <MX_I2C1_Init+0x7c>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_I2C1_Init+0x74>)
 800118e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011ae:	f000 ff75 	bl	800209c <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 f9c4 	bl	8001544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011c0:	f003 fcba 	bl	8004b38 <HAL_I2CEx_ConfigAnalogFilter>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011ca:	f000 f9bb 	bl	8001544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011d2:	f003 fced 	bl	8004bb0 <HAL_I2CEx_ConfigDigitalFilter>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011dc:	f000 f9b2 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000328 	.word	0x20000328
 80011e8:	40005400 	.word	0x40005400
 80011ec:	000186a0 	.word	0x000186a0

080011f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART3_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <MX_USART3_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_USART3_UART_Init+0x4c>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART3_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART3_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001228:	f004 f99a 	bl	8005560 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001232:	f000 f987 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000037c 	.word	0x2000037c
 8001240:	40004800 	.word	0x40004800

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	; 0x30
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <MX_GPIO_Init+0x14c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <MX_GPIO_Init+0x14c>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b49      	ldr	r3, [pc, #292]	; (8001390 <MX_GPIO_Init+0x14c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <MX_GPIO_Init+0x14c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a44      	ldr	r2, [pc, #272]	; (8001390 <MX_GPIO_Init+0x14c>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <MX_GPIO_Init+0x14c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <MX_GPIO_Init+0x14c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a3d      	ldr	r2, [pc, #244]	; (8001390 <MX_GPIO_Init+0x14c>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a36      	ldr	r2, [pc, #216]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_GPIO_Init+0x14c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f244 0181 	movw	r1, #16513	; 0x4081
 8001308:	4822      	ldr	r0, [pc, #136]	; (8001394 <MX_GPIO_Init+0x150>)
 800130a:	f000 fead 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4821      	ldr	r0, [pc, #132]	; (8001398 <MX_GPIO_Init+0x154>)
 8001314:	f000 fea8 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800131e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	481b      	ldr	r0, [pc, #108]	; (800139c <MX_GPIO_Init+0x158>)
 8001330:	f000 fcee 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001334:	f244 0381 	movw	r3, #16513	; 0x4081
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <MX_GPIO_Init+0x150>)
 800134e:	f000 fcdf 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001352:	2340      	movs	r3, #64	; 0x40
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <MX_GPIO_Init+0x154>)
 800136a:	f000 fcd1 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_GPIO_Init+0x154>)
 8001382:	f000 fcc5 	bl	8001d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001386:	bf00      	nop
 8001388:	3730      	adds	r7, #48	; 0x30
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400
 8001398:	40021800 	.word	0x40021800
 800139c:	40020800 	.word	0x40020800

080013a0 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == hi2c1.Instance){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b54      	ldr	r3, [pc, #336]	; (8001500 <HAL_I2C_MemRxCpltCallback+0x160>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 809f 	bne.w	80014f4 <HAL_I2C_MemRxCpltCallback+0x154>
		if(s == MPU_ACCEL){
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_I2C_MemRxCpltCallback+0x164>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d14b      	bne.n	8001456 <HAL_I2C_MemRxCpltCallback+0xb6>
		ax = (int16_t)(data[0]<<8 | data[1]);
 80013be:	4b52      	ldr	r3, [pc, #328]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b4e      	ldr	r3, [pc, #312]	; (800150c <HAL_I2C_MemRxCpltCallback+0x16c>)
 80013d2:	801a      	strh	r2, [r3, #0]
		ay = (int16_t)(data[2]<<8 | data[3]);
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 80013de:	78db      	ldrb	r3, [r3, #3]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_I2C_MemRxCpltCallback+0x170>)
 80013e8:	801a      	strh	r2, [r3, #0]
		az = (int16_t)(data[4]<<8 | data[5]);
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 80013ec:	791b      	ldrb	r3, [r3, #4]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	4b45      	ldr	r3, [pc, #276]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 80013f4:	795b      	ldrb	r3, [r3, #5]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <HAL_I2C_MemRxCpltCallback+0x174>)
 80013fe:	801a      	strh	r2, [r3, #0]

		AXR = (float)ax/16384.0;
 8001400:	4b42      	ldr	r3, [pc, #264]	; (800150c <HAL_I2C_MemRxCpltCallback+0x16c>)
 8001402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140e:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001518 <HAL_I2C_MemRxCpltCallback+0x178>
 8001412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <HAL_I2C_MemRxCpltCallback+0x17c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
		AYR = (float)ay/16384.0;
 800141c:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <HAL_I2C_MemRxCpltCallback+0x170>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001518 <HAL_I2C_MemRxCpltCallback+0x178>
 800142e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <HAL_I2C_MemRxCpltCallback+0x180>)
 8001434:	edc3 7a00 	vstr	s15, [r3]
		AZR = (float)az/16384.0;
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <HAL_I2C_MemRxCpltCallback+0x174>)
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001446:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001518 <HAL_I2C_MemRxCpltCallback+0x178>
 800144a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144e:	4b35      	ldr	r3, [pc, #212]	; (8001524 <HAL_I2C_MemRxCpltCallback+0x184>)
 8001450:	edc3 7a00 	vstr	s15, [r3]
		GXR = (float)gx/131.0;
		GYR = (float)gy/131.0;
		GZR = (float)gz/131.0;
		}
	}
}
 8001454:	e04e      	b.n	80014f4 <HAL_I2C_MemRxCpltCallback+0x154>
	else if(s == MPU_GYRO){
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_I2C_MemRxCpltCallback+0x164>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d14a      	bne.n	80014f4 <HAL_I2C_MemRxCpltCallback+0x154>
		gx = (int16_t)(data[0]<<8 | data[1]);
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21a      	sxth	r2, r3
 8001470:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <HAL_I2C_MemRxCpltCallback+0x188>)
 8001472:	801a      	strh	r2, [r3, #0]
		gy = (int16_t)(data[2]<<8 | data[3]);
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 8001476:	789b      	ldrb	r3, [r3, #2]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 800147e:	78db      	ldrb	r3, [r3, #3]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <HAL_I2C_MemRxCpltCallback+0x18c>)
 8001488:	801a      	strh	r2, [r3, #0]
		gz = (int16_t)(data[4]<<8 | data[5]);
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 800148c:	791b      	ldrb	r3, [r3, #4]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_I2C_MemRxCpltCallback+0x168>)
 8001494:	795b      	ldrb	r3, [r3, #5]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21a      	sxth	r2, r3
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_I2C_MemRxCpltCallback+0x190>)
 800149e:	801a      	strh	r2, [r3, #0]
		GXR = (float)gx/131.0;
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_I2C_MemRxCpltCallback+0x188>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ae:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001534 <HAL_I2C_MemRxCpltCallback+0x194>
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_I2C_MemRxCpltCallback+0x198>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
		GYR = (float)gy/131.0;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_I2C_MemRxCpltCallback+0x18c>)
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001534 <HAL_I2C_MemRxCpltCallback+0x194>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_I2C_MemRxCpltCallback+0x19c>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
		GZR = (float)gz/131.0;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_I2C_MemRxCpltCallback+0x190>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001534 <HAL_I2C_MemRxCpltCallback+0x194>
 80014ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_I2C_MemRxCpltCallback+0x1a0>)
 80014f0:	edc3 7a00 	vstr	s15, [r3]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	20000328 	.word	0x20000328
 8001504:	200001f8 	.word	0x200001f8
 8001508:	20000320 	.word	0x20000320
 800150c:	200002fc 	.word	0x200002fc
 8001510:	200002fe 	.word	0x200002fe
 8001514:	20000300 	.word	0x20000300
 8001518:	46800000 	.word	0x46800000
 800151c:	20000308 	.word	0x20000308
 8001520:	2000030c 	.word	0x2000030c
 8001524:	20000310 	.word	0x20000310
 8001528:	20000302 	.word	0x20000302
 800152c:	20000304 	.word	0x20000304
 8001530:	20000306 	.word	0x20000306
 8001534:	43030000 	.word	0x43030000
 8001538:	20000314 	.word	0x20000314
 800153c:	20000318 	.word	0x20000318
 8001540:	2000031c 	.word	0x2000031c

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154c:	e7fe      	b.n	800154c <Error_Handler+0x8>
	...

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_MspInit+0x4c>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_MspInit+0x4c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x4c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x4c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a21      	ldr	r2, [pc, #132]	; (8001644 <HAL_I2C_MspInit+0xa4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d13c      	bne.n	800163c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_I2C_MspInit+0xa8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_I2C_MspInit+0xa8>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_I2C_MspInit+0xa8>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e4:	2312      	movs	r3, #18
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f0:	2304      	movs	r3, #4
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4814      	ldr	r0, [pc, #80]	; (800164c <HAL_I2C_MspInit+0xac>)
 80015fc:	f000 fb88 	bl	8001d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_I2C_MspInit+0xa8>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_I2C_MspInit+0xa8>)
 800160a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_I2C_MspInit+0xa8>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	201f      	movs	r0, #31
 8001622:	f000 fb0e 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001626:	201f      	movs	r0, #31
 8001628:	f000 fb27 	bl	8001c7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2020      	movs	r0, #32
 8001632:	f000 fb06 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001636:	2020      	movs	r0, #32
 8001638:	f000 fb1f 	bl	8001c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40005400 	.word	0x40005400
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_UART_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12c      	bne.n	80016cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_UART_MspInit+0x88>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_UART_MspInit+0x88>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_UART_MspInit+0x88>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_UART_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_UART_MspInit+0x88>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_UART_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016bc:	2307      	movs	r3, #7
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_UART_MspInit+0x8c>)
 80016c8:	f000 fb22 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40004800 	.word	0x40004800
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020c00 	.word	0x40020c00

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <NMI_Handler+0x4>

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 f96a 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <I2C1_EV_IRQHandler+0x10>)
 800173a:	f001 f9d1 	bl	8002ae0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000328 	.word	0x20000328

08001748 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <I2C1_ER_IRQHandler+0x10>)
 800174e:	f001 fb38 	bl	8002dc2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000328 	.word	0x20000328

0800175c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return 1;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_kill>:

int _kill(int pid, int sig)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001776:	f004 fab5 	bl	8005ce4 <__errno>
 800177a:	4603      	mov	r3, r0
 800177c:	2216      	movs	r2, #22
 800177e:	601a      	str	r2, [r3, #0]
  return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_exit>:

void _exit (int status)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ffe7 	bl	800176c <_kill>
  while (1) {}    /* Make sure we hang here */
 800179e:	e7fe      	b.n	800179e <_exit+0x12>

080017a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e00a      	b.n	80017c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017b2:	f3af 8000 	nop.w
 80017b6:	4601      	mov	r1, r0
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	60ba      	str	r2, [r7, #8]
 80017be:	b2ca      	uxtb	r2, r1
 80017c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbf0      	blt.n	80017b2 <_read+0x12>
  }

  return len;
 80017d0:	687b      	ldr	r3, [r7, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e009      	b.n	8001800 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf1      	blt.n	80017ec <_write+0x12>
  }
  return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_close>:

int _close(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183a:	605a      	str	r2, [r3, #4]
  return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_isatty>:

int _isatty(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f004 fa1a 	bl	8005ce4 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20030000 	.word	0x20030000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	200003c0 	.word	0x200003c0
 80018e4:	200003d8 	.word	0x200003d8

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001910:	480d      	ldr	r0, [pc, #52]	; (8001948 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001912:	490e      	ldr	r1, [pc, #56]	; (800194c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001928:	4c0b      	ldr	r4, [pc, #44]	; (8001958 <LoopFillZerobss+0x26>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001936:	f7ff ffd7 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f004 f9d9 	bl	8005cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7ff fb8d 	bl	800105c <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001944:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001950:	08008f3c 	.word	0x08008f3c
  ldr r2, =_sbss
 8001954:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001958:	200003d8 	.word	0x200003d8

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_Init+0x40>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_Init+0x40>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_Init+0x40>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f94f 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fddc 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f967 	bl	8001c96 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f92f 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008
 8001a28:	200003c4 	.word	0x200003c4

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200003c4 	.word	0x200003c4

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008

08001a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <__NVIC_EnableIRQ+0x38>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff8e 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff29 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff3e 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff8e 	bl	8001b80 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5d 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff31 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d004      	beq.n	8001ccc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e00c      	b.n	8001ce6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2205      	movs	r2, #5
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d00:	b2db      	uxtb	r3, r3
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e177      	b.n	800201c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8166 	bne.w	8002016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d005      	beq.n	8001d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d130      	bne.n	8001dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 0201 	and.w	r2, r3, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d017      	beq.n	8001e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d123      	bne.n	8001e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	220f      	movs	r2, #15
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	69b9      	ldr	r1, [r7, #24]
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80c0 	beq.w	8002016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b66      	ldr	r3, [pc, #408]	; (8002034 <HAL_GPIO_Init+0x324>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a65      	ldr	r2, [pc, #404]	; (8002034 <HAL_GPIO_Init+0x324>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_GPIO_Init+0x324>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a61      	ldr	r2, [pc, #388]	; (8002038 <HAL_GPIO_Init+0x328>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_GPIO_Init+0x32c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d037      	beq.n	8001f4e <HAL_GPIO_Init+0x23e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a57      	ldr	r2, [pc, #348]	; (8002040 <HAL_GPIO_Init+0x330>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_GPIO_Init+0x23a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a56      	ldr	r2, [pc, #344]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02b      	beq.n	8001f46 <HAL_GPIO_Init+0x236>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a55      	ldr	r2, [pc, #340]	; (8002048 <HAL_GPIO_Init+0x338>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x232>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_GPIO_Init+0x33c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x22e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a53      	ldr	r2, [pc, #332]	; (8002050 <HAL_GPIO_Init+0x340>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x22a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a52      	ldr	r2, [pc, #328]	; (8002054 <HAL_GPIO_Init+0x344>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a51      	ldr	r2, [pc, #324]	; (8002058 <HAL_GPIO_Init+0x348>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x222>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a50      	ldr	r2, [pc, #320]	; (800205c <HAL_GPIO_Init+0x34c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x21e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4f      	ldr	r2, [pc, #316]	; (8002060 <HAL_GPIO_Init+0x350>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x21a>
 8001f26:	2309      	movs	r3, #9
 8001f28:	e012      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	e010      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f2e:	2308      	movs	r3, #8
 8001f30:	e00e      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e00c      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e00a      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e008      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e004      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x240>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f002 0203 	and.w	r2, r2, #3
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f60:	4935      	ldr	r1, [pc, #212]	; (8002038 <HAL_GPIO_Init+0x328>)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_GPIO_Init+0x354>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f92:	4a34      	ldr	r2, [pc, #208]	; (8002064 <HAL_GPIO_Init+0x354>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f98:	4b32      	ldr	r3, [pc, #200]	; (8002064 <HAL_GPIO_Init+0x354>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fbc:	4a29      	ldr	r2, [pc, #164]	; (8002064 <HAL_GPIO_Init+0x354>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <HAL_GPIO_Init+0x354>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <HAL_GPIO_Init+0x354>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_GPIO_Init+0x354>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <HAL_GPIO_Init+0x354>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	f67f ae84 	bls.w	8001d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40013800 	.word	0x40013800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40020800 	.word	0x40020800
 8002048:	40020c00 	.word	0x40020c00
 800204c:	40021000 	.word	0x40021000
 8002050:	40021400 	.word	0x40021400
 8002054:	40021800 	.word	0x40021800
 8002058:	40021c00 	.word	0x40021c00
 800205c:	40022000 	.word	0x40022000
 8002060:	40022400 	.word	0x40022400
 8002064:	40013c00 	.word	0x40013c00

08002068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
 8002074:	4613      	mov	r3, r2
 8002076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002084:	e003      	b.n	800208e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	041a      	lsls	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	619a      	str	r2, [r3, #24]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e12b      	b.n	8002306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fa6c 	bl	80015a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2224      	movs	r2, #36	; 0x24
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002100:	f003 fa06 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 8002104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a81      	ldr	r2, [pc, #516]	; (8002310 <HAL_I2C_Init+0x274>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d807      	bhi.n	8002120 <HAL_I2C_Init+0x84>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a80      	ldr	r2, [pc, #512]	; (8002314 <HAL_I2C_Init+0x278>)
 8002114:	4293      	cmp	r3, r2
 8002116:	bf94      	ite	ls
 8002118:	2301      	movls	r3, #1
 800211a:	2300      	movhi	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e006      	b.n	800212e <HAL_I2C_Init+0x92>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a7d      	ldr	r2, [pc, #500]	; (8002318 <HAL_I2C_Init+0x27c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	bf94      	ite	ls
 8002128:	2301      	movls	r3, #1
 800212a:	2300      	movhi	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0e7      	b.n	8002306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a78      	ldr	r2, [pc, #480]	; (800231c <HAL_I2C_Init+0x280>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0c9b      	lsrs	r3, r3, #18
 8002140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <HAL_I2C_Init+0x274>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d802      	bhi.n	8002170 <HAL_I2C_Init+0xd4>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3301      	adds	r3, #1
 800216e:	e009      	b.n	8002184 <HAL_I2C_Init+0xe8>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	4a69      	ldr	r2, [pc, #420]	; (8002320 <HAL_I2C_Init+0x284>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	3301      	adds	r3, #1
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	430b      	orrs	r3, r1
 800218a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002196:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	495c      	ldr	r1, [pc, #368]	; (8002310 <HAL_I2C_Init+0x274>)
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d819      	bhi.n	80021d8 <HAL_I2C_Init+0x13c>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1e59      	subs	r1, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b2:	1c59      	adds	r1, r3, #1
 80021b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021b8:	400b      	ands	r3, r1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_I2C_Init+0x138>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1e59      	subs	r1, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d2:	e051      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 80021d4:	2304      	movs	r3, #4
 80021d6:	e04f      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d111      	bne.n	8002204 <HAL_I2C_Init+0x168>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1e58      	subs	r0, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	440b      	add	r3, r1
 80021ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e012      	b.n	800222a <HAL_I2C_Init+0x18e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Init+0x196>
 800222e:	2301      	movs	r3, #1
 8002230:	e022      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10e      	bne.n	8002258 <HAL_I2C_Init+0x1bc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1e58      	subs	r0, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	440b      	add	r3, r1
 8002248:	fbb0 f3f3 	udiv	r3, r0, r3
 800224c:	3301      	adds	r3, #1
 800224e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002256:	e00f      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1e58      	subs	r0, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	0099      	lsls	r1, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	fbb0 f3f3 	udiv	r3, r0, r3
 800226e:	3301      	adds	r3, #1
 8002270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	6809      	ldr	r1, [r1, #0]
 800227c:	4313      	orrs	r3, r2
 800227e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69da      	ldr	r2, [r3, #28]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6911      	ldr	r1, [r2, #16]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68d2      	ldr	r2, [r2, #12]
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	000186a0 	.word	0x000186a0
 8002314:	001e847f 	.word	0x001e847f
 8002318:	003d08ff 	.word	0x003d08ff
 800231c:	431bde83 	.word	0x431bde83
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	4603      	mov	r3, r0
 8002334:	817b      	strh	r3, [r7, #10]
 8002336:	460b      	mov	r3, r1
 8002338:	813b      	strh	r3, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800233e:	f7ff fb75 	bl	8001a2c <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	f040 80d9 	bne.w	8002504 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2319      	movs	r3, #25
 8002358:	2201      	movs	r2, #1
 800235a:	496d      	ldr	r1, [pc, #436]	; (8002510 <HAL_I2C_Mem_Write+0x1ec>)
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f002 f9c1 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
 800236a:	e0cc      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_I2C_Mem_Write+0x56>
 8002376:	2302      	movs	r3, #2
 8002378:	e0c5      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d007      	beq.n	80023a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2221      	movs	r2, #33	; 0x21
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a4d      	ldr	r2, [pc, #308]	; (8002514 <HAL_I2C_Mem_Write+0x1f0>)
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e2:	88f8      	ldrh	r0, [r7, #6]
 80023e4:	893a      	ldrh	r2, [r7, #8]
 80023e6:	8979      	ldrh	r1, [r7, #10]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	4603      	mov	r3, r0
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f001 ff50 	bl	8004298 <I2C_RequestMemoryWrite>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d052      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e081      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f002 fa42 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00d      	beq.n	800242e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b04      	cmp	r3, #4
 8002418:	d107      	bne.n	800242a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d11b      	bne.n	80024a4 <HAL_I2C_Mem_Write+0x180>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	d017      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1aa      	bne.n	8002402 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f002 fa2e 	bl	8004912 <I2C_WaitOnBTFFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d107      	bne.n	80024d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e016      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002504:	2302      	movs	r3, #2
  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	00100002 	.word	0x00100002
 8002514:	ffff0000 	.word	0xffff0000

08002518 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	817b      	strh	r3, [r7, #10]
 800252a:	460b      	mov	r3, r1
 800252c:	813b      	strh	r3, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002532:	f7ff fa7b 	bl	8001a2c <HAL_GetTick>
 8002536:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b20      	cmp	r3, #32
 8002542:	f040 8208 	bne.w	8002956 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2319      	movs	r3, #25
 800254c:	2201      	movs	r2, #1
 800254e:	497b      	ldr	r1, [pc, #492]	; (800273c <HAL_I2C_Mem_Read+0x224>)
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f002 f8c7 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	e1fb      	b.n	8002958 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_I2C_Mem_Read+0x56>
 800256a:	2302      	movs	r3, #2
 800256c:	e1f4      	b.n	8002958 <HAL_I2C_Mem_Read+0x440>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d007      	beq.n	8002594 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2222      	movs	r2, #34	; 0x22
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a5b      	ldr	r2, [pc, #364]	; (8002740 <HAL_I2C_Mem_Read+0x228>)
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025d6:	88f8      	ldrh	r0, [r7, #6]
 80025d8:	893a      	ldrh	r2, [r7, #8]
 80025da:	8979      	ldrh	r1, [r7, #10]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	4603      	mov	r3, r0
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f001 feec 	bl	80043c4 <I2C_RequestMemoryRead>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1b0      	b.n	8002958 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d113      	bne.n	8002626 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	623b      	str	r3, [r7, #32]
 8002612:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e184      	b.n	8002930 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	2b01      	cmp	r3, #1
 800262c:	d11b      	bne.n	8002666 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e164      	b.n	8002930 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	2b02      	cmp	r3, #2
 800266c:	d11b      	bne.n	80026a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	e144      	b.n	8002930 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026bc:	e138      	b.n	8002930 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	f200 80f1 	bhi.w	80028aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d123      	bne.n	8002718 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f002 f98f 	bl	80049f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e139      	b.n	8002958 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002716:	e10b      	b.n	8002930 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b02      	cmp	r3, #2
 800271e:	d14e      	bne.n	80027be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	2200      	movs	r2, #0
 8002728:	4906      	ldr	r1, [pc, #24]	; (8002744 <HAL_I2C_Mem_Read+0x22c>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f001 ffda 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e10e      	b.n	8002958 <HAL_I2C_Mem_Read+0x440>
 800273a:	bf00      	nop
 800273c:	00100002 	.word	0x00100002
 8002740:	ffff0000 	.word	0xffff0000
 8002744:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027bc:	e0b8      	b.n	8002930 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	2200      	movs	r2, #0
 80027c6:	4966      	ldr	r1, [pc, #408]	; (8002960 <HAL_I2C_Mem_Read+0x448>)
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f001 ff8b 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0bf      	b.n	8002958 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002820:	2200      	movs	r2, #0
 8002822:	494f      	ldr	r1, [pc, #316]	; (8002960 <HAL_I2C_Mem_Read+0x448>)
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f001 ff5d 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e091      	b.n	8002958 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a8:	e042      	b.n	8002930 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f002 f8a2 	bl	80049f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e04c      	b.n	8002958 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d118      	bne.n	8002930 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f aec2 	bne.w	80026be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	00010004 	.word	0x00010004

08002964 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4603      	mov	r3, r0
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	460b      	mov	r3, r1
 8002978:	813b      	strh	r3, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b20      	cmp	r3, #32
 800298c:	f040 809a 	bne.w	8002ac4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_I2C_Mem_Read_IT+0x170>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	08db      	lsrs	r3, r3, #3
 8002996:	4a50      	ldr	r2, [pc, #320]	; (8002ad8 <HAL_I2C_Mem_Read_IT+0x174>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	0a1a      	lsrs	r2, r3, #8
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	009a      	lsls	r2, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e070      	b.n	8002ac6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d0db      	beq.n	80029aa <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_I2C_Mem_Read_IT+0x9c>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e062      	b.n	8002ac6 <HAL_I2C_Mem_Read_IT+0x162>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d007      	beq.n	8002a26 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a34:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2222      	movs	r2, #34	; 0x22
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a3a      	ldr	r2, [r7, #32]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <HAL_I2C_Mem_Read_IT+0x178>)
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002a68:	897a      	ldrh	r2, [r7, #10]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002a6e:	893a      	ldrh	r2, [r7, #8]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002abe:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	14f8b589 	.word	0x14f8b589
 8002adc:	ffff0000 	.word	0xffff0000

08002ae0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d003      	beq.n	8002b18 <HAL_I2C_EV_IRQHandler+0x38>
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	f040 80c1 	bne.w	8002c9a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10d      	bne.n	8002b4e <HAL_I2C_EV_IRQHandler+0x6e>
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b38:	d003      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0x62>
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002b40:	d101      	bne.n	8002b46 <HAL_I2C_EV_IRQHandler+0x66>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_I2C_EV_IRQHandler+0x68>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	f000 8132 	beq.w	8002db2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00c      	beq.n	8002b72 <HAL_I2C_EV_IRQHandler+0x92>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	0a5b      	lsrs	r3, r3, #9
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f001 ffcc 	bl	8004b02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fd79 	bl	8003662 <I2C_Master_SB>
 8002b70:	e092      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	08db      	lsrs	r3, r3, #3
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_I2C_EV_IRQHandler+0xb2>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	0a5b      	lsrs	r3, r3, #9
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fdef 	bl	800376e <I2C_Master_ADD10>
 8002b90:	e082      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	0a5b      	lsrs	r3, r3, #9
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fe09 	bl	80037c2 <I2C_Master_ADDR>
 8002bb0:	e072      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d03b      	beq.n	8002c36 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bcc:	f000 80f3 	beq.w	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	09db      	lsrs	r3, r3, #7
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00f      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x11c>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	0a9b      	lsrs	r3, r3, #10
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x11c>
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f9e9 	bl	8002fcc <I2C_MasterTransmit_TXE>
 8002bfa:	e04d      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80d6 	beq.w	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	0a5b      	lsrs	r3, r3, #9
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80cf 	beq.w	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c18:	7bbb      	ldrb	r3, [r7, #14]
 8002c1a:	2b21      	cmp	r3, #33	; 0x21
 8002c1c:	d103      	bne.n	8002c26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fa70 	bl	8003104 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c24:	e0c7      	b.n	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	f040 80c4 	bne.w	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fade 	bl	80031f0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c34:	e0bf      	b.n	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c44:	f000 80b7 	beq.w	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	099b      	lsrs	r3, r3, #6
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00f      	beq.n	8002c74 <HAL_I2C_EV_IRQHandler+0x194>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	0a9b      	lsrs	r3, r3, #10
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <HAL_I2C_EV_IRQHandler+0x194>
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d103      	bne.n	8002c74 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fb53 	bl	8003318 <I2C_MasterReceive_RXNE>
 8002c72:	e011      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 809a 	beq.w	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	0a5b      	lsrs	r3, r3, #9
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8093 	beq.w	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fbfc 	bl	800348e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c96:	e08e      	b.n	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c98:	e08d      	b.n	8002db6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e007      	b.n	8002cbc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d012      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0x20e>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	0a5b      	lsrs	r3, r3, #9
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00c      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ce4:	69b9      	ldr	r1, [r7, #24]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 ffba 	bl	8003c60 <I2C_Slave_ADDR>
 8002cec:	e066      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x22e>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	0a5b      	lsrs	r3, r3, #9
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fff4 	bl	8003cf4 <I2C_Slave_STOPF>
 8002d0c:	e056      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d0e:	7bbb      	ldrb	r3, [r7, #14]
 8002d10:	2b21      	cmp	r3, #33	; 0x21
 8002d12:	d002      	beq.n	8002d1a <HAL_I2C_EV_IRQHandler+0x23a>
 8002d14:	7bbb      	ldrb	r3, [r7, #14]
 8002d16:	2b29      	cmp	r3, #41	; 0x29
 8002d18:	d125      	bne.n	8002d66 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	09db      	lsrs	r3, r3, #7
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00f      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x266>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	0a9b      	lsrs	r3, r3, #10
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x266>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fed0 	bl	8003ae4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d44:	e039      	b.n	8002dba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d033      	beq.n	8002dba <HAL_I2C_EV_IRQHandler+0x2da>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	0a5b      	lsrs	r3, r3, #9
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02d      	beq.n	8002dba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fefd 	bl	8003b5e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d64:	e029      	b.n	8002dba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00f      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	0a9b      	lsrs	r3, r3, #10
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 ff08 	bl	8003ba0 <I2C_SlaveReceive_RXNE>
 8002d90:	e014      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00e      	beq.n	8002dbc <HAL_I2C_EV_IRQHandler+0x2dc>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	0a5b      	lsrs	r3, r3, #9
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 ff36 	bl	8003c1c <I2C_SlaveReceive_BTF>
 8002db0:	e004      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b08a      	sub	sp, #40	; 0x28
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00e      	beq.n	8002e10 <HAL_I2C_ER_IRQHandler+0x4e>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e0e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	0a5b      	lsrs	r3, r3, #9
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00e      	beq.n	8002e3a <HAL_I2C_ER_IRQHandler+0x78>
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f043 0302 	orr.w	r3, r3, #2
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002e38:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	0a9b      	lsrs	r3, r3, #10
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d03f      	beq.n	8002ec6 <HAL_I2C_ER_IRQHandler+0x104>
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d039      	beq.n	8002ec6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002e52:	7efb      	ldrb	r3, [r7, #27]
 8002e54:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002e6c:	7ebb      	ldrb	r3, [r7, #26]
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d112      	bne.n	8002e98 <HAL_I2C_ER_IRQHandler+0xd6>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10f      	bne.n	8002e98 <HAL_I2C_ER_IRQHandler+0xd6>
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	2b21      	cmp	r3, #33	; 0x21
 8002e7c:	d008      	beq.n	8002e90 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002e7e:	7cfb      	ldrb	r3, [r7, #19]
 8002e80:	2b29      	cmp	r3, #41	; 0x29
 8002e82:	d005      	beq.n	8002e90 <HAL_I2C_ER_IRQHandler+0xce>
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b28      	cmp	r3, #40	; 0x28
 8002e88:	d106      	bne.n	8002e98 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b21      	cmp	r3, #33	; 0x21
 8002e8e:	d103      	bne.n	8002e98 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f001 f85f 	bl	8003f54 <I2C_Slave_AF>
 8002e96:	e016      	b.n	8002ec6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002eaa:	7efb      	ldrb	r3, [r7, #27]
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d002      	beq.n	8002eb6 <HAL_I2C_ER_IRQHandler+0xf4>
 8002eb0:	7efb      	ldrb	r3, [r7, #27]
 8002eb2:	2b40      	cmp	r3, #64	; 0x40
 8002eb4:	d107      	bne.n	8002ec6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	0adb      	lsrs	r3, r3, #11
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_I2C_ER_IRQHandler+0x12e>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002eee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f001 f896 	bl	8004034 <I2C_ITError>
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d150      	bne.n	8003094 <I2C_MasterTransmit_TXE+0xc8>
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b21      	cmp	r3, #33	; 0x21
 8002ff6:	d14d      	bne.n	8003094 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d01d      	beq.n	800303a <I2C_MasterTransmit_TXE+0x6e>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b20      	cmp	r3, #32
 8003002:	d01a      	beq.n	800303a <I2C_MasterTransmit_TXE+0x6e>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800300a:	d016      	beq.n	800303a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800301a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2211      	movs	r2, #17
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ff6c 	bl	8002f10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003038:	e060      	b.n	80030fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003048:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003058:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d107      	bne.n	8003084 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff87 	bl	8002f90 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003082:	e03b      	b.n	80030fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff3f 	bl	8002f10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003092:	e033      	b.n	80030fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b21      	cmp	r3, #33	; 0x21
 8003098:	d005      	beq.n	80030a6 <I2C_MasterTransmit_TXE+0xda>
 800309a:	7bbb      	ldrb	r3, [r7, #14]
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d12d      	bne.n	80030fc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b22      	cmp	r3, #34	; 0x22
 80030a4:	d12a      	bne.n	80030fc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d108      	bne.n	80030c2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030be:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80030c0:	e01c      	b.n	80030fc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d103      	bne.n	80030d6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f88e 	bl	80031f0 <I2C_MemoryTransmit_TXE_BTF>
}
 80030d4:	e012      	b.n	80030fc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030fa:	e7ff      	b.n	80030fc <I2C_MasterTransmit_TXE+0x130>
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b21      	cmp	r3, #33	; 0x21
 800311c:	d164      	bne.n	80031e8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d012      	beq.n	800314e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800314c:	e04c      	b.n	80031e8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d01d      	beq.n	8003190 <I2C_MasterTransmit_BTF+0x8c>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b20      	cmp	r3, #32
 8003158:	d01a      	beq.n	8003190 <I2C_MasterTransmit_BTF+0x8c>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003160:	d016      	beq.n	8003190 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003170:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2211      	movs	r2, #17
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff fec1 	bl	8002f10 <HAL_I2C_MasterTxCpltCallback>
}
 800318e:	e02b      	b.n	80031e8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800319e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d107      	bne.n	80031da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fedc 	bl	8002f90 <HAL_I2C_MemTxCpltCallback>
}
 80031d8:	e006      	b.n	80031e8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fe94 	bl	8002f10 <HAL_I2C_MasterTxCpltCallback>
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11d      	bne.n	8003244 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d10b      	bne.n	8003228 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	b2da      	uxtb	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003226:	e073      	b.n	8003310 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	b29b      	uxth	r3, r3
 800322e:	121b      	asrs	r3, r3, #8
 8003230:	b2da      	uxtb	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003242:	e065      	b.n	8003310 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003248:	2b01      	cmp	r3, #1
 800324a:	d10b      	bne.n	8003264 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	b2da      	uxtb	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003262:	e055      	b.n	8003310 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	2b02      	cmp	r3, #2
 800326a:	d151      	bne.n	8003310 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b22      	cmp	r3, #34	; 0x22
 8003270:	d10d      	bne.n	800328e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003280:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800328c:	e040      	b.n	8003310 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b21      	cmp	r3, #33	; 0x21
 800329c:	d112      	bne.n	80032c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032c2:	e025      	b.n	8003310 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d120      	bne.n	8003310 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b21      	cmp	r3, #33	; 0x21
 80032d2:	d11d      	bne.n	8003310 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fe40 	bl	8002f90 <HAL_I2C_MemTxCpltCallback>
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b22      	cmp	r3, #34	; 0x22
 800332a:	f040 80ac 	bne.w	8003486 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d921      	bls.n	8003380 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b03      	cmp	r3, #3
 800336a:	f040 808c 	bne.w	8003486 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800337e:	e082      	b.n	8003486 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	2b02      	cmp	r3, #2
 8003386:	d075      	beq.n	8003474 <I2C_MasterReceive_RXNE+0x15c>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d002      	beq.n	8003394 <I2C_MasterReceive_RXNE+0x7c>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d16f      	bne.n	8003474 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f001 fafd 	bl	8004994 <I2C_WaitOnSTOPRequestThroughIT>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d142      	bne.n	8003426 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d10a      	bne.n	8003410 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7fd ffc9 	bl	80013a0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800340e:	e03a      	b.n	8003486 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2212      	movs	r2, #18
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fd80 	bl	8002f24 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003424:	e02f      	b.n	8003486 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003434:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fd99 	bl	8002fa4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003472:	e008      	b.n	8003486 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003482:	605a      	str	r2, [r3, #4]
}
 8003484:	e7ff      	b.n	8003486 <I2C_MasterReceive_RXNE+0x16e>
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d11b      	bne.n	80034de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034dc:	e0bd      	b.n	800365a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d129      	bne.n	800353c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d00a      	beq.n	8003514 <I2C_MasterReceive_BTF+0x86>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d007      	beq.n	8003514 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003512:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800353a:	e08e      	b.n	800365a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d176      	bne.n	8003634 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d002      	beq.n	8003552 <I2C_MasterReceive_BTF+0xc4>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b10      	cmp	r3, #16
 8003550:	d108      	bne.n	8003564 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e019      	b.n	8003598 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b04      	cmp	r3, #4
 8003568:	d002      	beq.n	8003570 <I2C_MasterReceive_BTF+0xe2>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d108      	bne.n	8003582 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e00a      	b.n	8003598 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b10      	cmp	r3, #16
 8003586:	d007      	beq.n	8003598 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003596:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d10a      	bne.n	800361e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fec2 	bl	80013a0 <HAL_I2C_MemRxCpltCallback>
}
 800361c:	e01d      	b.n	800365a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2212      	movs	r2, #18
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fc79 	bl	8002f24 <HAL_I2C_MasterRxCpltCallback>
}
 8003632:	e012      	b.n	800365a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d117      	bne.n	80036a6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800368e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003690:	e067      	b.n	8003762 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	b2da      	uxtb	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]
}
 80036a4:	e05d      	b.n	8003762 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ae:	d133      	bne.n	8003718 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b21      	cmp	r3, #33	; 0x21
 80036ba:	d109      	bne.n	80036d0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036cc:	611a      	str	r2, [r3, #16]
 80036ce:	e008      	b.n	80036e2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <I2C_Master_SB+0x92>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d032      	beq.n	8003762 <I2C_Master_SB+0x100>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d02d      	beq.n	8003762 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003714:	605a      	str	r2, [r3, #4]
}
 8003716:	e024      	b.n	8003762 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10e      	bne.n	800373e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	b29b      	uxth	r3, r3
 8003726:	11db      	asrs	r3, r3, #7
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f003 0306 	and.w	r3, r3, #6
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f063 030f 	orn	r3, r3, #15
 8003734:	b2da      	uxtb	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	611a      	str	r2, [r3, #16]
}
 800373c:	e011      	b.n	8003762 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10d      	bne.n	8003762 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	b29b      	uxth	r3, r3
 800374c:	11db      	asrs	r3, r3, #7
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f003 0306 	and.w	r3, r3, #6
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f063 030e 	orn	r3, r3, #14
 800375a:	b2da      	uxtb	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	611a      	str	r2, [r3, #16]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	b2da      	uxtb	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <I2C_Master_ADD10+0x26>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d108      	bne.n	80037a6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00c      	beq.n	80037b6 <I2C_Master_ADD10+0x48>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b4:	605a      	str	r2, [r3, #4]
  }
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b091      	sub	sp, #68	; 0x44
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b22      	cmp	r3, #34	; 0x22
 80037ea:	f040 8169 	bne.w	8003ac0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <I2C_Master_ADDR+0x54>
 80037f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d10b      	bne.n	8003816 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fe:	2300      	movs	r3, #0
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	633b      	str	r3, [r7, #48]	; 0x30
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	633b      	str	r3, [r7, #48]	; 0x30
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	e160      	b.n	8003ad8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11d      	bne.n	800385a <I2C_Master_ADDR+0x98>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003826:	d118      	bne.n	800385a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	651a      	str	r2, [r3, #80]	; 0x50
 8003858:	e13e      	b.n	8003ad8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d113      	bne.n	800388c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003864:	2300      	movs	r3, #0
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e115      	b.n	8003ab8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	f040 808a 	bne.w	80039ac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800389e:	d137      	bne.n	8003910 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038be:	d113      	bne.n	80038e8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	e0e7      	b.n	8003ab8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e8:	2300      	movs	r3, #0
 80038ea:	623b      	str	r3, [r7, #32]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	623b      	str	r3, [r7, #32]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	623b      	str	r3, [r7, #32]
 80038fc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e0d3      	b.n	8003ab8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	2b08      	cmp	r3, #8
 8003914:	d02e      	beq.n	8003974 <I2C_Master_ADDR+0x1b2>
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	2b20      	cmp	r3, #32
 800391a:	d02b      	beq.n	8003974 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800391c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391e:	2b12      	cmp	r3, #18
 8003920:	d102      	bne.n	8003928 <I2C_Master_ADDR+0x166>
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	2b01      	cmp	r3, #1
 8003926:	d125      	bne.n	8003974 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	2b04      	cmp	r3, #4
 800392c:	d00e      	beq.n	800394c <I2C_Master_ADDR+0x18a>
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2b02      	cmp	r3, #2
 8003932:	d00b      	beq.n	800394c <I2C_Master_ADDR+0x18a>
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	2b10      	cmp	r3, #16
 8003938:	d008      	beq.n	800394c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e007      	b.n	800395c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800395a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	e0a1      	b.n	8003ab8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003982:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	61bb      	str	r3, [r7, #24]
 8003998:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e085      	b.n	8003ab8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d14d      	bne.n	8003a52 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d016      	beq.n	80039ea <I2C_Master_ADDR+0x228>
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d013      	beq.n	80039ea <I2C_Master_ADDR+0x228>
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d010      	beq.n	80039ea <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e007      	b.n	80039fa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a08:	d117      	bne.n	8003a3a <I2C_Master_ADDR+0x278>
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a10:	d00b      	beq.n	8003a2a <I2C_Master_ADDR+0x268>
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d008      	beq.n	8003a2a <I2C_Master_ADDR+0x268>
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d005      	beq.n	8003a2a <I2C_Master_ADDR+0x268>
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d002      	beq.n	8003a2a <I2C_Master_ADDR+0x268>
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d107      	bne.n	8003a3a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	e032      	b.n	8003ab8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a60:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a70:	d117      	bne.n	8003aa2 <I2C_Master_ADDR+0x2e0>
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a78:	d00b      	beq.n	8003a92 <I2C_Master_ADDR+0x2d0>
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d008      	beq.n	8003a92 <I2C_Master_ADDR+0x2d0>
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d005      	beq.n	8003a92 <I2C_Master_ADDR+0x2d0>
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d002      	beq.n	8003a92 <I2C_Master_ADDR+0x2d0>
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d107      	bne.n	8003aa2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aa0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003abe:	e00b      	b.n	8003ad8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
}
 8003ad6:	e7ff      	b.n	8003ad8 <I2C_Master_ADDR+0x316>
 8003ad8:	bf00      	nop
 8003ada:	3744      	adds	r7, #68	; 0x44
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d02b      	beq.n	8003b56 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d114      	bne.n	8003b56 <I2C_SlaveTransmit_TXE+0x72>
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b29      	cmp	r3, #41	; 0x29
 8003b30:	d111      	bne.n	8003b56 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2221      	movs	r2, #33	; 0x21
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2228      	movs	r2, #40	; 0x28
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff f9f1 	bl	8002f38 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d011      	beq.n	8003b94 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02c      	beq.n	8003c14 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d114      	bne.n	8003c14 <I2C_SlaveReceive_RXNE+0x74>
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	2b2a      	cmp	r3, #42	; 0x2a
 8003bee:	d111      	bne.n	8003c14 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2222      	movs	r2, #34	; 0x22
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2228      	movs	r2, #40	; 0x28
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff f99c 	bl	8002f4c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d012      	beq.n	8003c54 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c7a:	2b28      	cmp	r3, #40	; 0x28
 8003c7c:	d127      	bne.n	8003cce <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	09db      	lsrs	r3, r3, #7
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	81bb      	strh	r3, [r7, #12]
 8003cb0:	e002      	b.n	8003cb8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003cc0:	89ba      	ldrh	r2, [r7, #12]
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff f94a 	bl	8002f60 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ccc:	e00e      	b.n	8003cec <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d50:	d172      	bne.n	8003e38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b22      	cmp	r3, #34	; 0x22
 8003d56:	d002      	beq.n	8003d5e <I2C_Slave_STOPF+0x6a>
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d5c:	d135      	bne.n	8003dca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0204 	orr.w	r2, r3, #4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd ffab 	bl	8001cf2 <HAL_DMA_GetState>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d049      	beq.n	8003e36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	4a69      	ldr	r2, [pc, #420]	; (8003f4c <I2C_Slave_STOPF+0x258>)
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd ff7d 	bl	8001cae <HAL_DMA_Abort_IT>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03d      	beq.n	8003e36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dc8:	e035      	b.n	8003e36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd ff75 	bl	8001cf2 <HAL_DMA_GetState>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d014      	beq.n	8003e38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	4a4e      	ldr	r2, [pc, #312]	; (8003f4c <I2C_Slave_STOPF+0x258>)
 8003e14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fd ff47 	bl	8001cae <HAL_DMA_Abort_IT>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e30:	4610      	mov	r0, r2
 8003e32:	4798      	blx	r3
 8003e34:	e000      	b.n	8003e38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03e      	beq.n	8003ec0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d112      	bne.n	8003e76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d112      	bne.n	8003eaa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f043 0204 	orr.w	r2, r3, #4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f8b3 	bl	8004034 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003ece:	e039      	b.n	8003f44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed4:	d109      	bne.n	8003eea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2228      	movs	r2, #40	; 0x28
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff f831 	bl	8002f4c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b28      	cmp	r3, #40	; 0x28
 8003ef4:	d111      	bne.n	8003f1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <I2C_Slave_STOPF+0x25c>)
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff f832 	bl	8002f7c <HAL_I2C_ListenCpltCallback>
}
 8003f18:	e014      	b.n	8003f44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	2b22      	cmp	r3, #34	; 0x22
 8003f20:	d002      	beq.n	8003f28 <I2C_Slave_STOPF+0x234>
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b22      	cmp	r3, #34	; 0x22
 8003f26:	d10d      	bne.n	8003f44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff f804 	bl	8002f4c <HAL_I2C_SlaveRxCpltCallback>
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	08004595 	.word	0x08004595
 8003f50:	ffff0000 	.word	0xffff0000

08003f54 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f62:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d002      	beq.n	8003f76 <I2C_Slave_AF+0x22>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d129      	bne.n	8003fca <I2C_Slave_AF+0x76>
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b28      	cmp	r3, #40	; 0x28
 8003f7a:	d126      	bne.n	8003fca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <I2C_Slave_AF+0xdc>)
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f90:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f9a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fe ffda 	bl	8002f7c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003fc8:	e02e      	b.n	8004028 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	2b21      	cmp	r3, #33	; 0x21
 8003fce:	d126      	bne.n	800401e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a17      	ldr	r2, [pc, #92]	; (8004030 <I2C_Slave_AF+0xdc>)
 8003fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2221      	movs	r2, #33	; 0x21
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ffa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004004:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fe ff8e 	bl	8002f38 <HAL_I2C_SlaveTxCpltCallback>
}
 800401c:	e004      	b.n	8004028 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004026:	615a      	str	r2, [r3, #20]
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	ffff0000 	.word	0xffff0000

08004034 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800404c:	7bbb      	ldrb	r3, [r7, #14]
 800404e:	2b10      	cmp	r3, #16
 8004050:	d002      	beq.n	8004058 <I2C_ITError+0x24>
 8004052:	7bbb      	ldrb	r3, [r7, #14]
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d10a      	bne.n	800406e <I2C_ITError+0x3a>
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	2b22      	cmp	r3, #34	; 0x22
 800405c:	d107      	bne.n	800406e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800406c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004074:	2b28      	cmp	r3, #40	; 0x28
 8004076:	d107      	bne.n	8004088 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2228      	movs	r2, #40	; 0x28
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004086:	e015      	b.n	80040b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004096:	d00a      	beq.n	80040ae <I2C_ITError+0x7a>
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b60      	cmp	r3, #96	; 0x60
 800409c:	d007      	beq.n	80040ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c2:	d162      	bne.n	800418a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d020      	beq.n	8004124 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	4a6a      	ldr	r2, [pc, #424]	; (8004290 <I2C_ITError+0x25c>)
 80040e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fd fddd 	bl	8001cae <HAL_DMA_Abort_IT>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8089 	beq.w	800420e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800411e:	4610      	mov	r0, r2
 8004120:	4798      	blx	r3
 8004122:	e074      	b.n	800420e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	4a59      	ldr	r2, [pc, #356]	; (8004290 <I2C_ITError+0x25c>)
 800412a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	4618      	mov	r0, r3
 8004132:	f7fd fdbc 	bl	8001cae <HAL_DMA_Abort_IT>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d068      	beq.n	800420e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d10b      	bne.n	8004162 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004184:	4610      	mov	r0, r2
 8004186:	4798      	blx	r3
 8004188:	e041      	b.n	800420e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b60      	cmp	r3, #96	; 0x60
 8004194:	d125      	bne.n	80041e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d10b      	bne.n	80041ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fe feec 	bl	8002fb8 <HAL_I2C_AbortCpltCallback>
 80041e0:	e015      	b.n	800420e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d10b      	bne.n	8004208 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fe fecb 	bl	8002fa4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10e      	bne.n	800423c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b04      	cmp	r3, #4
 800425e:	d113      	bne.n	8004288 <I2C_ITError+0x254>
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b28      	cmp	r3, #40	; 0x28
 8004264:	d110      	bne.n	8004288 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <I2C_ITError+0x260>)
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fe fe7a 	bl	8002f7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	08004595 	.word	0x08004595
 8004294:	ffff0000 	.word	0xffff0000

08004298 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	817b      	strh	r3, [r7, #10]
 80042aa:	460b      	mov	r3, r1
 80042ac:	813b      	strh	r3, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fa08 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00d      	beq.n	80042f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e8:	d103      	bne.n	80042f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e05f      	b.n	80043b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042f6:	897b      	ldrh	r3, [r7, #10]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004304:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	6a3a      	ldr	r2, [r7, #32]
 800430a:	492d      	ldr	r1, [pc, #180]	; (80043c0 <I2C_RequestMemoryWrite+0x128>)
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fa40 	bl	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e04c      	b.n	80043b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004334:	6a39      	ldr	r1, [r7, #32]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 faaa 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00d      	beq.n	800435e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	2b04      	cmp	r3, #4
 8004348:	d107      	bne.n	800435a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004358:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e02b      	b.n	80043b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004364:	893b      	ldrh	r3, [r7, #8]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	611a      	str	r2, [r3, #16]
 800436e:	e021      	b.n	80043b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004370:	893b      	ldrh	r3, [r7, #8]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	b29b      	uxth	r3, r3
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004380:	6a39      	ldr	r1, [r7, #32]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fa84 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b04      	cmp	r3, #4
 8004394:	d107      	bne.n	80043a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e005      	b.n	80043b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043aa:	893b      	ldrh	r3, [r7, #8]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	00010002 	.word	0x00010002

080043c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	817b      	strh	r3, [r7, #10]
 80043d6:	460b      	mov	r3, r1
 80043d8:	813b      	strh	r3, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	2200      	movs	r2, #0
 8004406:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f96a 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004424:	d103      	bne.n	800442e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0aa      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004432:	897b      	ldrh	r3, [r7, #10]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004440:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	4952      	ldr	r1, [pc, #328]	; (8004590 <I2C_RequestMemoryRead+0x1cc>)
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f9a2 	bl	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e097      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004470:	6a39      	ldr	r1, [r7, #32]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fa0c 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2b04      	cmp	r3, #4
 8004484:	d107      	bne.n	8004496 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004494:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e076      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a0:	893b      	ldrh	r3, [r7, #8]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	611a      	str	r2, [r3, #16]
 80044aa:	e021      	b.n	80044f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044ac:	893b      	ldrh	r3, [r7, #8]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	6a39      	ldr	r1, [r7, #32]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f9e6 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d107      	bne.n	80044e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e050      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	6a39      	ldr	r1, [r7, #32]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f9cb 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00d      	beq.n	800451c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2b04      	cmp	r3, #4
 8004506:	d107      	bne.n	8004518 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004516:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e035      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	2200      	movs	r2, #0
 8004534:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f8d3 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004552:	d103      	bne.n	800455c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e013      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004560:	897b      	ldrh	r3, [r7, #10]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	6a3a      	ldr	r2, [r7, #32]
 8004574:	4906      	ldr	r1, [pc, #24]	; (8004590 <I2C_RequestMemoryRead+0x1cc>)
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f90b 	bl	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	00010002 	.word	0x00010002

08004594 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045ae:	4b4b      	ldr	r3, [pc, #300]	; (80046dc <I2C_DMAAbort+0x148>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	08db      	lsrs	r3, r3, #3
 80045b4:	4a4a      	ldr	r2, [pc, #296]	; (80046e0 <I2C_DMAAbort+0x14c>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	0a1a      	lsrs	r2, r3, #8
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	00da      	lsls	r2, r3, #3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80045da:	e00a      	b.n	80045f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3b01      	subs	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f0:	d0ea      	beq.n	80045c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	2200      	movs	r2, #0
 8004600:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	2200      	movs	r2, #0
 8004610:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004620:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2200      	movs	r2, #0
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004634:	2200      	movs	r2, #0
 8004636:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	2200      	movs	r2, #0
 8004646:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b60      	cmp	r3, #96	; 0x60
 8004662:	d10e      	bne.n	8004682 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2200      	movs	r2, #0
 8004678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7fe fc9c 	bl	8002fb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004680:	e027      	b.n	80046d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004688:	2b28      	cmp	r3, #40	; 0x28
 800468a:	d117      	bne.n	80046bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2228      	movs	r2, #40	; 0x28
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046ba:	e007      	b.n	80046cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80046cc:	6978      	ldr	r0, [r7, #20]
 80046ce:	f7fe fc69 	bl	8002fa4 <HAL_I2C_ErrorCallback>
}
 80046d2:	bf00      	nop
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000000 	.word	0x20000000
 80046e0:	14f8b589 	.word	0x14f8b589

080046e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f4:	e025      	b.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d021      	beq.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fd f995 	bl	8001a2c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d116      	bne.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e023      	b.n	800478a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d10d      	bne.n	8004768 <I2C_WaitOnFlagUntilTimeout+0x84>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	43da      	mvns	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	e00c      	b.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	43da      	mvns	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	d0b6      	beq.n	80046f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a0:	e051      	b.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b0:	d123      	bne.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e046      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d021      	beq.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fd f913 	bl	8001a2c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d116      	bne.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e020      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10c      	bne.n	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	e00b      	b.n	8004882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	43da      	mvns	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d18d      	bne.n	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489c:	e02d      	b.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f900 	bl	8004aa4 <I2C_IsAcknowledgeFailed>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e02d      	b.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d021      	beq.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fd f8b9 	bl	8001a2c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d116      	bne.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e007      	b.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d1ca      	bne.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800491e:	e02d      	b.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f8bf 	bl	8004aa4 <I2C_IsAcknowledgeFailed>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e02d      	b.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d021      	beq.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7fd f878 	bl	8001a2c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d116      	bne.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e007      	b.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d1ca      	bne.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80049a0:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	08db      	lsrs	r3, r3, #3
 80049a6:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	0a1a      	lsrs	r2, r3, #8
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d107      	bne.n	80049d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f043 0220 	orr.w	r2, r3, #32
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e008      	b.n	80049e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d0e9      	beq.n	80049b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	20000000 	.word	0x20000000
 80049f4:	14f8b589 	.word	0x14f8b589

080049f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a04:	e042      	b.n	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d119      	bne.n	8004a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0210 	mvn.w	r2, #16
 8004a1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e029      	b.n	8004a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a48:	f7fc fff0 	bl	8001a2c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d302      	bcc.n	8004a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d116      	bne.n	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	f043 0220 	orr.w	r2, r3, #32
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e007      	b.n	8004a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	d1b5      	bne.n	8004a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aba:	d11b      	bne.n	8004af4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ac4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f043 0204 	orr.w	r2, r3, #4
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b12:	d103      	bne.n	8004b1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b1a:	e007      	b.n	8004b2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b24:	d102      	bne.n	8004b2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2208      	movs	r2, #8
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d129      	bne.n	8004ba2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2224      	movs	r2, #36	; 0x24
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0210 	bic.w	r2, r2, #16
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d12a      	bne.n	8004c20 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2224      	movs	r2, #36	; 0x24
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004bea:	89fb      	ldrh	r3, [r7, #14]
 8004bec:	f023 030f 	bic.w	r3, r3, #15
 8004bf0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	89fb      	ldrh	r3, [r7, #14]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	89fa      	ldrh	r2, [r7, #14]
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e267      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d075      	beq.n	8004d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c4e:	4b88      	ldr	r3, [pc, #544]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d00c      	beq.n	8004c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c5a:	4b85      	ldr	r3, [pc, #532]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d112      	bne.n	8004c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c66:	4b82      	ldr	r3, [pc, #520]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c72:	d10b      	bne.n	8004c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c74:	4b7e      	ldr	r3, [pc, #504]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05b      	beq.n	8004d38 <HAL_RCC_OscConfig+0x108>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d157      	bne.n	8004d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e242      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d106      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x74>
 8004c96:	4b76      	ldr	r3, [pc, #472]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a75      	ldr	r2, [pc, #468]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e01d      	b.n	8004ce0 <HAL_RCC_OscConfig+0xb0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x98>
 8004cae:	4b70      	ldr	r3, [pc, #448]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a6f      	ldr	r2, [pc, #444]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b6d      	ldr	r3, [pc, #436]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a6c      	ldr	r2, [pc, #432]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e00b      	b.n	8004ce0 <HAL_RCC_OscConfig+0xb0>
 8004cc8:	4b69      	ldr	r3, [pc, #420]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a68      	ldr	r2, [pc, #416]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b66      	ldr	r3, [pc, #408]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a65      	ldr	r2, [pc, #404]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fc fea0 	bl	8001a2c <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fc fe9c 	bl	8001a2c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e207      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d02:	4b5b      	ldr	r3, [pc, #364]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0xc0>
 8004d0e:	e014      	b.n	8004d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fc fe8c 	bl	8001a2c <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fc fe88 	bl	8001a2c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e1f3      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2a:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0xe8>
 8004d36:	e000      	b.n	8004d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d063      	beq.n	8004e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d46:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d52:	4b47      	ldr	r3, [pc, #284]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d11c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5e:	4b44      	ldr	r3, [pc, #272]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d116      	bne.n	8004d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	4b41      	ldr	r3, [pc, #260]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_RCC_OscConfig+0x152>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d001      	beq.n	8004d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e1c7      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d82:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4937      	ldr	r1, [pc, #220]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d96:	e03a      	b.n	8004e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da0:	4b34      	ldr	r3, [pc, #208]	; (8004e74 <HAL_RCC_OscConfig+0x244>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fc fe41 	bl	8001a2c <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dae:	f7fc fe3d 	bl	8001a2c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e1a8      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4925      	ldr	r1, [pc, #148]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]
 8004de0:	e015      	b.n	8004e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <HAL_RCC_OscConfig+0x244>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fc fe20 	bl	8001a2c <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fc fe1c 	bl	8001a2c <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e187      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d036      	beq.n	8004e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d016      	beq.n	8004e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_RCC_OscConfig+0x248>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fc fe00 	bl	8001a2c <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e30:	f7fc fdfc 	bl	8001a2c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e167      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e42:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_OscConfig+0x240>)
 8004e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x200>
 8004e4e:	e01b      	b.n	8004e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_RCC_OscConfig+0x248>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e56:	f7fc fde9 	bl	8001a2c <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e5c:	e00e      	b.n	8004e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5e:	f7fc fde5 	bl	8001a2c <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d907      	bls.n	8004e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e150      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
 8004e70:	40023800 	.word	0x40023800
 8004e74:	42470000 	.word	0x42470000
 8004e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	4b88      	ldr	r3, [pc, #544]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1ea      	bne.n	8004e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8097 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9a:	4b81      	ldr	r3, [pc, #516]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10f      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	4b7d      	ldr	r3, [pc, #500]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	4a7c      	ldr	r2, [pc, #496]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb6:	4b7a      	ldr	r3, [pc, #488]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	4b77      	ldr	r3, [pc, #476]	; (80050a4 <HAL_RCC_OscConfig+0x474>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d118      	bne.n	8004f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ed2:	4b74      	ldr	r3, [pc, #464]	; (80050a4 <HAL_RCC_OscConfig+0x474>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a73      	ldr	r2, [pc, #460]	; (80050a4 <HAL_RCC_OscConfig+0x474>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ede:	f7fc fda5 	bl	8001a2c <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee6:	f7fc fda1 	bl	8001a2c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e10c      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef8:	4b6a      	ldr	r3, [pc, #424]	; (80050a4 <HAL_RCC_OscConfig+0x474>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d106      	bne.n	8004f1a <HAL_RCC_OscConfig+0x2ea>
 8004f0c:	4b64      	ldr	r3, [pc, #400]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	4a63      	ldr	r2, [pc, #396]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6713      	str	r3, [r2, #112]	; 0x70
 8004f18:	e01c      	b.n	8004f54 <HAL_RCC_OscConfig+0x324>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b05      	cmp	r3, #5
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x30c>
 8004f22:	4b5f      	ldr	r3, [pc, #380]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	4a5e      	ldr	r2, [pc, #376]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f28:	f043 0304 	orr.w	r3, r3, #4
 8004f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2e:	4b5c      	ldr	r3, [pc, #368]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	4a5b      	ldr	r2, [pc, #364]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCC_OscConfig+0x324>
 8004f3c:	4b58      	ldr	r3, [pc, #352]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4a57      	ldr	r2, [pc, #348]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	; 0x70
 8004f48:	4b55      	ldr	r3, [pc, #340]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	4a54      	ldr	r2, [pc, #336]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f4e:	f023 0304 	bic.w	r3, r3, #4
 8004f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5c:	f7fc fd66 	bl	8001a2c <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fc fd62 	bl	8001a2c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0cb      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7a:	4b49      	ldr	r3, [pc, #292]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0ee      	beq.n	8004f64 <HAL_RCC_OscConfig+0x334>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f88:	f7fc fd50 	bl	8001a2c <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fc fd4c 	bl	8001a2c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0b5      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa6:	4b3e      	ldr	r3, [pc, #248]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1ee      	bne.n	8004f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb8:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	4a38      	ldr	r2, [pc, #224]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80a1 	beq.w	8005110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fce:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d05c      	beq.n	8005094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d141      	bne.n	8005066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe2:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <HAL_RCC_OscConfig+0x478>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe8:	f7fc fd20 	bl	8001a2c <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fc fd1c 	bl	8001a2c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e087      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	4b27      	ldr	r3, [pc, #156]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	019b      	lsls	r3, r3, #6
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	3b01      	subs	r3, #1
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	491b      	ldr	r1, [pc, #108]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_RCC_OscConfig+0x478>)
 800503a:	2201      	movs	r2, #1
 800503c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503e:	f7fc fcf5 	bl	8001a2c <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005046:	f7fc fcf1 	bl	8001a2c <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e05c      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005058:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <HAL_RCC_OscConfig+0x416>
 8005064:	e054      	b.n	8005110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <HAL_RCC_OscConfig+0x478>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506c:	f7fc fcde 	bl	8001a2c <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005074:	f7fc fcda 	bl	8001a2c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e045      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_RCC_OscConfig+0x470>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0x444>
 8005092:	e03d      	b.n	8005110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d107      	bne.n	80050ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e038      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40007000 	.word	0x40007000
 80050a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <HAL_RCC_OscConfig+0x4ec>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d028      	beq.n	800510c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d121      	bne.n	800510c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d11a      	bne.n	800510c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050dc:	4013      	ands	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d111      	bne.n	800510c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	3b01      	subs	r3, #1
 80050f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d107      	bne.n	800510c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40023800 	.word	0x40023800

08005120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0cc      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005134:	4b68      	ldr	r3, [pc, #416]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d90c      	bls.n	800515c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b65      	ldr	r3, [pc, #404]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b63      	ldr	r3, [pc, #396]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0b8      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d020      	beq.n	80051aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005174:	4b59      	ldr	r3, [pc, #356]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4a58      	ldr	r2, [pc, #352]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800517e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800518c:	4b53      	ldr	r3, [pc, #332]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	4a52      	ldr	r2, [pc, #328]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005198:	4b50      	ldr	r3, [pc, #320]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	494d      	ldr	r1, [pc, #308]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d044      	beq.n	8005240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d107      	bne.n	80051ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051be:	4b47      	ldr	r3, [pc, #284]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d119      	bne.n	80051fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e07f      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d003      	beq.n	80051de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d107      	bne.n	80051ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051de:	4b3f      	ldr	r3, [pc, #252]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e06f      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ee:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e067      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051fe:	4b37      	ldr	r3, [pc, #220]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f023 0203 	bic.w	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4934      	ldr	r1, [pc, #208]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	4313      	orrs	r3, r2
 800520e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005210:	f7fc fc0c 	bl	8001a2c <HAL_GetTick>
 8005214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005216:	e00a      	b.n	800522e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005218:	f7fc fc08 	bl	8001a2c <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e04f      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522e:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 020c 	and.w	r2, r3, #12
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	429a      	cmp	r2, r3
 800523e:	d1eb      	bne.n	8005218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d20c      	bcs.n	8005268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e032      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005274:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4916      	ldr	r1, [pc, #88]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	490e      	ldr	r1, [pc, #56]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052a6:	f000 f821 	bl	80052ec <HAL_RCC_GetSysClockFreq>
 80052aa:	4602      	mov	r2, r0
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	091b      	lsrs	r3, r3, #4
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	490a      	ldr	r1, [pc, #40]	; (80052e0 <HAL_RCC_ClockConfig+0x1c0>)
 80052b8:	5ccb      	ldrb	r3, [r1, r3]
 80052ba:	fa22 f303 	lsr.w	r3, r2, r3
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_RCC_ClockConfig+0x1c8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fc fb6c 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40023c00 	.word	0x40023c00
 80052dc:	40023800 	.word	0x40023800
 80052e0:	08008b3c 	.word	0x08008b3c
 80052e4:	20000000 	.word	0x20000000
 80052e8:	20000004 	.word	0x20000004

080052ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f0:	b094      	sub	sp, #80	; 0x50
 80052f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
 80052f8:	2300      	movs	r3, #0
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052fc:	2300      	movs	r3, #0
 80052fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005304:	4b79      	ldr	r3, [pc, #484]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 030c 	and.w	r3, r3, #12
 800530c:	2b08      	cmp	r3, #8
 800530e:	d00d      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0x40>
 8005310:	2b08      	cmp	r3, #8
 8005312:	f200 80e1 	bhi.w	80054d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x34>
 800531a:	2b04      	cmp	r3, #4
 800531c:	d003      	beq.n	8005326 <HAL_RCC_GetSysClockFreq+0x3a>
 800531e:	e0db      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005320:	4b73      	ldr	r3, [pc, #460]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005322:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005324:	e0db      	b.n	80054de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005326:	4b73      	ldr	r3, [pc, #460]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800532a:	e0d8      	b.n	80054de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800532c:	4b6f      	ldr	r3, [pc, #444]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005334:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005336:	4b6d      	ldr	r3, [pc, #436]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d063      	beq.n	800540a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005342:	4b6a      	ldr	r3, [pc, #424]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	099b      	lsrs	r3, r3, #6
 8005348:	2200      	movs	r2, #0
 800534a:	63bb      	str	r3, [r7, #56]	; 0x38
 800534c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005354:	633b      	str	r3, [r7, #48]	; 0x30
 8005356:	2300      	movs	r3, #0
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
 800535a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800535e:	4622      	mov	r2, r4
 8005360:	462b      	mov	r3, r5
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	f04f 0100 	mov.w	r1, #0
 800536a:	0159      	lsls	r1, r3, #5
 800536c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005370:	0150      	lsls	r0, r2, #5
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4621      	mov	r1, r4
 8005378:	1a51      	subs	r1, r2, r1
 800537a:	6139      	str	r1, [r7, #16]
 800537c:	4629      	mov	r1, r5
 800537e:	eb63 0301 	sbc.w	r3, r3, r1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005390:	4659      	mov	r1, fp
 8005392:	018b      	lsls	r3, r1, #6
 8005394:	4651      	mov	r1, sl
 8005396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800539a:	4651      	mov	r1, sl
 800539c:	018a      	lsls	r2, r1, #6
 800539e:	4651      	mov	r1, sl
 80053a0:	ebb2 0801 	subs.w	r8, r2, r1
 80053a4:	4659      	mov	r1, fp
 80053a6:	eb63 0901 	sbc.w	r9, r3, r1
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053be:	4690      	mov	r8, r2
 80053c0:	4699      	mov	r9, r3
 80053c2:	4623      	mov	r3, r4
 80053c4:	eb18 0303 	adds.w	r3, r8, r3
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	462b      	mov	r3, r5
 80053cc:	eb49 0303 	adc.w	r3, r9, r3
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053de:	4629      	mov	r1, r5
 80053e0:	024b      	lsls	r3, r1, #9
 80053e2:	4621      	mov	r1, r4
 80053e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053e8:	4621      	mov	r1, r4
 80053ea:	024a      	lsls	r2, r1, #9
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f2:	2200      	movs	r2, #0
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053fc:	f7fb fbe4 	bl	8000bc8 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4613      	mov	r3, r2
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005408:	e058      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800540a:	4b38      	ldr	r3, [pc, #224]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	099b      	lsrs	r3, r3, #6
 8005410:	2200      	movs	r2, #0
 8005412:	4618      	mov	r0, r3
 8005414:	4611      	mov	r1, r2
 8005416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	2300      	movs	r3, #0
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
 8005420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005424:	4642      	mov	r2, r8
 8005426:	464b      	mov	r3, r9
 8005428:	f04f 0000 	mov.w	r0, #0
 800542c:	f04f 0100 	mov.w	r1, #0
 8005430:	0159      	lsls	r1, r3, #5
 8005432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005436:	0150      	lsls	r0, r2, #5
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4641      	mov	r1, r8
 800543e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005442:	4649      	mov	r1, r9
 8005444:	eb63 0b01 	sbc.w	fp, r3, r1
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800545c:	ebb2 040a 	subs.w	r4, r2, sl
 8005460:	eb63 050b 	sbc.w	r5, r3, fp
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	00eb      	lsls	r3, r5, #3
 800546e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005472:	00e2      	lsls	r2, r4, #3
 8005474:	4614      	mov	r4, r2
 8005476:	461d      	mov	r5, r3
 8005478:	4643      	mov	r3, r8
 800547a:	18e3      	adds	r3, r4, r3
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	464b      	mov	r3, r9
 8005480:	eb45 0303 	adc.w	r3, r5, r3
 8005484:	607b      	str	r3, [r7, #4]
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005492:	4629      	mov	r1, r5
 8005494:	028b      	lsls	r3, r1, #10
 8005496:	4621      	mov	r1, r4
 8005498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800549c:	4621      	mov	r1, r4
 800549e:	028a      	lsls	r2, r1, #10
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a6:	2200      	movs	r2, #0
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	61fa      	str	r2, [r7, #28]
 80054ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054b0:	f7fb fb8a 	bl	8000bc8 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4613      	mov	r3, r2
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	0c1b      	lsrs	r3, r3, #16
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	3301      	adds	r3, #1
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054d6:	e002      	b.n	80054de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3750      	adds	r7, #80	; 0x50
 80054e4:	46bd      	mov	sp, r7
 80054e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ea:	bf00      	nop
 80054ec:	40023800 	.word	0x40023800
 80054f0:	00f42400 	.word	0x00f42400
 80054f4:	007a1200 	.word	0x007a1200

080054f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054fc:	4b03      	ldr	r3, [pc, #12]	; (800550c <HAL_RCC_GetHCLKFreq+0x14>)
 80054fe:	681b      	ldr	r3, [r3, #0]
}
 8005500:	4618      	mov	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000000 	.word	0x20000000

08005510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005514:	f7ff fff0 	bl	80054f8 <HAL_RCC_GetHCLKFreq>
 8005518:	4602      	mov	r2, r0
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	0a9b      	lsrs	r3, r3, #10
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	4903      	ldr	r1, [pc, #12]	; (8005534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005526:	5ccb      	ldrb	r3, [r1, r3]
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800552c:	4618      	mov	r0, r3
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40023800 	.word	0x40023800
 8005534:	08008b4c 	.word	0x08008b4c

08005538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800553c:	f7ff ffdc 	bl	80054f8 <HAL_RCC_GetHCLKFreq>
 8005540:	4602      	mov	r2, r0
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	0b5b      	lsrs	r3, r3, #13
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	4903      	ldr	r1, [pc, #12]	; (800555c <HAL_RCC_GetPCLK2Freq+0x24>)
 800554e:	5ccb      	ldrb	r3, [r1, r3]
 8005550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005554:	4618      	mov	r0, r3
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40023800 	.word	0x40023800
 800555c:	08008b4c 	.word	0x08008b4c

08005560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e03f      	b.n	80055f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fc f862 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2224      	movs	r2, #36	; 0x24
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f929 	bl	80057fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b08a      	sub	sp, #40	; 0x28
 80055fe:	af02      	add	r7, sp, #8
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b20      	cmp	r3, #32
 8005618:	d17c      	bne.n	8005714 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_UART_Transmit+0x2c>
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e075      	b.n	8005716 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_UART_Transmit+0x3e>
 8005634:	2302      	movs	r3, #2
 8005636:	e06e      	b.n	8005716 <HAL_UART_Transmit+0x11c>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2221      	movs	r2, #33	; 0x21
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800564e:	f7fc f9ed 	bl	8001a2c <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005668:	d108      	bne.n	800567c <HAL_UART_Transmit+0x82>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e003      	b.n	8005684 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800568c:	e02a      	b.n	80056e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f840 	bl	800571e <UART_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e036      	b.n	8005716 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	3302      	adds	r3, #2
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	e007      	b.n	80056d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	3301      	adds	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1cf      	bne.n	800568e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2140      	movs	r1, #64	; 0x40
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f810 	bl	800571e <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b090      	sub	sp, #64	; 0x40
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	603b      	str	r3, [r7, #0]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572e:	e050      	b.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d04c      	beq.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0x30>
 800573e:	f7fc f975 	bl	8001a2c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800574a:	429a      	cmp	r2, r3
 800574c:	d241      	bcs.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800576e:	637a      	str	r2, [r7, #52]	; 0x34
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e5      	bne.n	800574e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3314      	adds	r3, #20
 8005788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	613b      	str	r3, [r7, #16]
   return(result);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	63bb      	str	r3, [r7, #56]	; 0x38
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3314      	adds	r3, #20
 80057a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057a2:	623a      	str	r2, [r7, #32]
 80057a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	69f9      	ldr	r1, [r7, #28]
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e5      	bne.n	8005782 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e00f      	b.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4013      	ands	r3, r2
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	429a      	cmp	r2, r3
 80057e0:	bf0c      	ite	eq
 80057e2:	2301      	moveq	r3, #1
 80057e4:	2300      	movne	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d09f      	beq.n	8005730 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3740      	adds	r7, #64	; 0x40
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005800:	b0c0      	sub	sp, #256	; 0x100
 8005802:	af00      	add	r7, sp, #0
 8005804:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	68d9      	ldr	r1, [r3, #12]
 800581a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	ea40 0301 	orr.w	r3, r0, r1
 8005824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	431a      	orrs	r2, r3
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	431a      	orrs	r2, r3
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005854:	f021 010c 	bic.w	r1, r1, #12
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005862:	430b      	orrs	r3, r1
 8005864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005876:	6999      	ldr	r1, [r3, #24]
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	ea40 0301 	orr.w	r3, r0, r1
 8005882:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b8f      	ldr	r3, [pc, #572]	; (8005ac8 <UART_SetConfig+0x2cc>)
 800588c:	429a      	cmp	r2, r3
 800588e:	d005      	beq.n	800589c <UART_SetConfig+0xa0>
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b8d      	ldr	r3, [pc, #564]	; (8005acc <UART_SetConfig+0x2d0>)
 8005898:	429a      	cmp	r2, r3
 800589a:	d104      	bne.n	80058a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800589c:	f7ff fe4c 	bl	8005538 <HAL_RCC_GetPCLK2Freq>
 80058a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058a4:	e003      	b.n	80058ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058a6:	f7ff fe33 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 80058aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b8:	f040 810c 	bne.w	8005ad4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058ce:	4622      	mov	r2, r4
 80058d0:	462b      	mov	r3, r5
 80058d2:	1891      	adds	r1, r2, r2
 80058d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80058d6:	415b      	adcs	r3, r3
 80058d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058de:	4621      	mov	r1, r4
 80058e0:	eb12 0801 	adds.w	r8, r2, r1
 80058e4:	4629      	mov	r1, r5
 80058e6:	eb43 0901 	adc.w	r9, r3, r1
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058fe:	4690      	mov	r8, r2
 8005900:	4699      	mov	r9, r3
 8005902:	4623      	mov	r3, r4
 8005904:	eb18 0303 	adds.w	r3, r8, r3
 8005908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800590c:	462b      	mov	r3, r5
 800590e:	eb49 0303 	adc.w	r3, r9, r3
 8005912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005922:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005926:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800592a:	460b      	mov	r3, r1
 800592c:	18db      	adds	r3, r3, r3
 800592e:	653b      	str	r3, [r7, #80]	; 0x50
 8005930:	4613      	mov	r3, r2
 8005932:	eb42 0303 	adc.w	r3, r2, r3
 8005936:	657b      	str	r3, [r7, #84]	; 0x54
 8005938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800593c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005940:	f7fb f942 	bl	8000bc8 <__aeabi_uldivmod>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4b61      	ldr	r3, [pc, #388]	; (8005ad0 <UART_SetConfig+0x2d4>)
 800594a:	fba3 2302 	umull	r2, r3, r3, r2
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	011c      	lsls	r4, r3, #4
 8005952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005956:	2200      	movs	r2, #0
 8005958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800595c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005960:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005964:	4642      	mov	r2, r8
 8005966:	464b      	mov	r3, r9
 8005968:	1891      	adds	r1, r2, r2
 800596a:	64b9      	str	r1, [r7, #72]	; 0x48
 800596c:	415b      	adcs	r3, r3
 800596e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005970:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005974:	4641      	mov	r1, r8
 8005976:	eb12 0a01 	adds.w	sl, r2, r1
 800597a:	4649      	mov	r1, r9
 800597c:	eb43 0b01 	adc.w	fp, r3, r1
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800598c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005994:	4692      	mov	sl, r2
 8005996:	469b      	mov	fp, r3
 8005998:	4643      	mov	r3, r8
 800599a:	eb1a 0303 	adds.w	r3, sl, r3
 800599e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059a2:	464b      	mov	r3, r9
 80059a4:	eb4b 0303 	adc.w	r3, fp, r3
 80059a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059c0:	460b      	mov	r3, r1
 80059c2:	18db      	adds	r3, r3, r3
 80059c4:	643b      	str	r3, [r7, #64]	; 0x40
 80059c6:	4613      	mov	r3, r2
 80059c8:	eb42 0303 	adc.w	r3, r2, r3
 80059cc:	647b      	str	r3, [r7, #68]	; 0x44
 80059ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059d6:	f7fb f8f7 	bl	8000bc8 <__aeabi_uldivmod>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4611      	mov	r1, r2
 80059e0:	4b3b      	ldr	r3, [pc, #236]	; (8005ad0 <UART_SetConfig+0x2d4>)
 80059e2:	fba3 2301 	umull	r2, r3, r3, r1
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	2264      	movs	r2, #100	; 0x64
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
 80059ee:	1acb      	subs	r3, r1, r3
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059f6:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <UART_SetConfig+0x2d4>)
 80059f8:	fba3 2302 	umull	r2, r3, r3, r2
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a04:	441c      	add	r4, r3
 8005a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a18:	4642      	mov	r2, r8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	1891      	adds	r1, r2, r2
 8005a1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a20:	415b      	adcs	r3, r3
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a28:	4641      	mov	r1, r8
 8005a2a:	1851      	adds	r1, r2, r1
 8005a2c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a2e:	4649      	mov	r1, r9
 8005a30:	414b      	adcs	r3, r1
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a40:	4659      	mov	r1, fp
 8005a42:	00cb      	lsls	r3, r1, #3
 8005a44:	4651      	mov	r1, sl
 8005a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a4a:	4651      	mov	r1, sl
 8005a4c:	00ca      	lsls	r2, r1, #3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4619      	mov	r1, r3
 8005a52:	4603      	mov	r3, r0
 8005a54:	4642      	mov	r2, r8
 8005a56:	189b      	adds	r3, r3, r2
 8005a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	460a      	mov	r2, r1
 8005a60:	eb42 0303 	adc.w	r3, r2, r3
 8005a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	18db      	adds	r3, r3, r3
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	4613      	mov	r3, r2
 8005a84:	eb42 0303 	adc.w	r3, r2, r3
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a92:	f7fb f899 	bl	8000bc8 <__aeabi_uldivmod>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <UART_SetConfig+0x2d4>)
 8005a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	2164      	movs	r1, #100	; 0x64
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	3332      	adds	r3, #50	; 0x32
 8005aae:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <UART_SetConfig+0x2d4>)
 8005ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f003 0207 	and.w	r2, r3, #7
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4422      	add	r2, r4
 8005ac2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ac4:	e105      	b.n	8005cd2 <UART_SetConfig+0x4d6>
 8005ac6:	bf00      	nop
 8005ac8:	40011000 	.word	0x40011000
 8005acc:	40011400 	.word	0x40011400
 8005ad0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ade:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ae2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ae6:	4642      	mov	r2, r8
 8005ae8:	464b      	mov	r3, r9
 8005aea:	1891      	adds	r1, r2, r2
 8005aec:	6239      	str	r1, [r7, #32]
 8005aee:	415b      	adcs	r3, r3
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
 8005af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005af6:	4641      	mov	r1, r8
 8005af8:	1854      	adds	r4, r2, r1
 8005afa:	4649      	mov	r1, r9
 8005afc:	eb43 0501 	adc.w	r5, r3, r1
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	00eb      	lsls	r3, r5, #3
 8005b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b0e:	00e2      	lsls	r2, r4, #3
 8005b10:	4614      	mov	r4, r2
 8005b12:	461d      	mov	r5, r3
 8005b14:	4643      	mov	r3, r8
 8005b16:	18e3      	adds	r3, r4, r3
 8005b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	eb45 0303 	adc.w	r3, r5, r3
 8005b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b42:	4629      	mov	r1, r5
 8005b44:	008b      	lsls	r3, r1, #2
 8005b46:	4621      	mov	r1, r4
 8005b48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	008a      	lsls	r2, r1, #2
 8005b50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b54:	f7fb f838 	bl	8000bc8 <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4b60      	ldr	r3, [pc, #384]	; (8005ce0 <UART_SetConfig+0x4e4>)
 8005b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	011c      	lsls	r4, r3, #4
 8005b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b78:	4642      	mov	r2, r8
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	1891      	adds	r1, r2, r2
 8005b7e:	61b9      	str	r1, [r7, #24]
 8005b80:	415b      	adcs	r3, r3
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b88:	4641      	mov	r1, r8
 8005b8a:	1851      	adds	r1, r2, r1
 8005b8c:	6139      	str	r1, [r7, #16]
 8005b8e:	4649      	mov	r1, r9
 8005b90:	414b      	adcs	r3, r1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	00cb      	lsls	r3, r1, #3
 8005ba4:	4651      	mov	r1, sl
 8005ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005baa:	4651      	mov	r1, sl
 8005bac:	00ca      	lsls	r2, r1, #3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	189b      	adds	r3, r3, r2
 8005bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	eb42 0303 	adc.w	r3, r2, r3
 8005bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005be0:	4649      	mov	r1, r9
 8005be2:	008b      	lsls	r3, r1, #2
 8005be4:	4641      	mov	r1, r8
 8005be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bea:	4641      	mov	r1, r8
 8005bec:	008a      	lsls	r2, r1, #2
 8005bee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bf2:	f7fa ffe9 	bl	8000bc8 <__aeabi_uldivmod>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4b39      	ldr	r3, [pc, #228]	; (8005ce0 <UART_SetConfig+0x4e4>)
 8005bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	2164      	movs	r1, #100	; 0x64
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	3332      	adds	r3, #50	; 0x32
 8005c0e:	4a34      	ldr	r2, [pc, #208]	; (8005ce0 <UART_SetConfig+0x4e4>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c1a:	441c      	add	r4, r3
 8005c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c20:	2200      	movs	r2, #0
 8005c22:	673b      	str	r3, [r7, #112]	; 0x70
 8005c24:	677a      	str	r2, [r7, #116]	; 0x74
 8005c26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	1891      	adds	r1, r2, r2
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	415b      	adcs	r3, r3
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c3a:	4641      	mov	r1, r8
 8005c3c:	1851      	adds	r1, r2, r1
 8005c3e:	6039      	str	r1, [r7, #0]
 8005c40:	4649      	mov	r1, r9
 8005c42:	414b      	adcs	r3, r1
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c52:	4659      	mov	r1, fp
 8005c54:	00cb      	lsls	r3, r1, #3
 8005c56:	4651      	mov	r1, sl
 8005c58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c5c:	4651      	mov	r1, sl
 8005c5e:	00ca      	lsls	r2, r1, #3
 8005c60:	4610      	mov	r0, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	4603      	mov	r3, r0
 8005c66:	4642      	mov	r2, r8
 8005c68:	189b      	adds	r3, r3, r2
 8005c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	460a      	mov	r2, r1
 8005c70:	eb42 0303 	adc.w	r3, r2, r3
 8005c74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c80:	667a      	str	r2, [r7, #100]	; 0x64
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c8e:	4649      	mov	r1, r9
 8005c90:	008b      	lsls	r3, r1, #2
 8005c92:	4641      	mov	r1, r8
 8005c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c98:	4641      	mov	r1, r8
 8005c9a:	008a      	lsls	r2, r1, #2
 8005c9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ca0:	f7fa ff92 	bl	8000bc8 <__aeabi_uldivmod>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <UART_SetConfig+0x4e4>)
 8005caa:	fba3 1302 	umull	r1, r3, r3, r2
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	2164      	movs	r1, #100	; 0x64
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	3332      	adds	r3, #50	; 0x32
 8005cbc:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <UART_SetConfig+0x4e4>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	f003 020f 	and.w	r2, r3, #15
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4422      	add	r2, r4
 8005cd0:	609a      	str	r2, [r3, #8]
}
 8005cd2:	bf00      	nop
 8005cd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cde:	bf00      	nop
 8005ce0:	51eb851f 	.word	0x51eb851f

08005ce4 <__errno>:
 8005ce4:	4b01      	ldr	r3, [pc, #4]	; (8005cec <__errno+0x8>)
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	2000000c 	.word	0x2000000c

08005cf0 <__libc_init_array>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	4d0d      	ldr	r5, [pc, #52]	; (8005d28 <__libc_init_array+0x38>)
 8005cf4:	4c0d      	ldr	r4, [pc, #52]	; (8005d2c <__libc_init_array+0x3c>)
 8005cf6:	1b64      	subs	r4, r4, r5
 8005cf8:	10a4      	asrs	r4, r4, #2
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	42a6      	cmp	r6, r4
 8005cfe:	d109      	bne.n	8005d14 <__libc_init_array+0x24>
 8005d00:	4d0b      	ldr	r5, [pc, #44]	; (8005d30 <__libc_init_array+0x40>)
 8005d02:	4c0c      	ldr	r4, [pc, #48]	; (8005d34 <__libc_init_array+0x44>)
 8005d04:	f002 ff04 	bl	8008b10 <_init>
 8005d08:	1b64      	subs	r4, r4, r5
 8005d0a:	10a4      	asrs	r4, r4, #2
 8005d0c:	2600      	movs	r6, #0
 8005d0e:	42a6      	cmp	r6, r4
 8005d10:	d105      	bne.n	8005d1e <__libc_init_array+0x2e>
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d18:	4798      	blx	r3
 8005d1a:	3601      	adds	r6, #1
 8005d1c:	e7ee      	b.n	8005cfc <__libc_init_array+0xc>
 8005d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d22:	4798      	blx	r3
 8005d24:	3601      	adds	r6, #1
 8005d26:	e7f2      	b.n	8005d0e <__libc_init_array+0x1e>
 8005d28:	08008f34 	.word	0x08008f34
 8005d2c:	08008f34 	.word	0x08008f34
 8005d30:	08008f34 	.word	0x08008f34
 8005d34:	08008f38 	.word	0x08008f38

08005d38 <memset>:
 8005d38:	4402      	add	r2, r0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d100      	bne.n	8005d42 <memset+0xa>
 8005d40:	4770      	bx	lr
 8005d42:	f803 1b01 	strb.w	r1, [r3], #1
 8005d46:	e7f9      	b.n	8005d3c <memset+0x4>

08005d48 <__cvt>:
 8005d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4c:	ec55 4b10 	vmov	r4, r5, d0
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	460e      	mov	r6, r1
 8005d54:	4619      	mov	r1, r3
 8005d56:	462b      	mov	r3, r5
 8005d58:	bfbb      	ittet	lt
 8005d5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d5e:	461d      	movlt	r5, r3
 8005d60:	2300      	movge	r3, #0
 8005d62:	232d      	movlt	r3, #45	; 0x2d
 8005d64:	700b      	strb	r3, [r1, #0]
 8005d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d6c:	4691      	mov	r9, r2
 8005d6e:	f023 0820 	bic.w	r8, r3, #32
 8005d72:	bfbc      	itt	lt
 8005d74:	4622      	movlt	r2, r4
 8005d76:	4614      	movlt	r4, r2
 8005d78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d7c:	d005      	beq.n	8005d8a <__cvt+0x42>
 8005d7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d82:	d100      	bne.n	8005d86 <__cvt+0x3e>
 8005d84:	3601      	adds	r6, #1
 8005d86:	2102      	movs	r1, #2
 8005d88:	e000      	b.n	8005d8c <__cvt+0x44>
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	ab03      	add	r3, sp, #12
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	ab02      	add	r3, sp, #8
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	ec45 4b10 	vmov	d0, r4, r5
 8005d98:	4653      	mov	r3, sl
 8005d9a:	4632      	mov	r2, r6
 8005d9c:	f000 fcec 	bl	8006778 <_dtoa_r>
 8005da0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005da4:	4607      	mov	r7, r0
 8005da6:	d102      	bne.n	8005dae <__cvt+0x66>
 8005da8:	f019 0f01 	tst.w	r9, #1
 8005dac:	d022      	beq.n	8005df4 <__cvt+0xac>
 8005dae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005db2:	eb07 0906 	add.w	r9, r7, r6
 8005db6:	d110      	bne.n	8005dda <__cvt+0x92>
 8005db8:	783b      	ldrb	r3, [r7, #0]
 8005dba:	2b30      	cmp	r3, #48	; 0x30
 8005dbc:	d10a      	bne.n	8005dd4 <__cvt+0x8c>
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f7fa fe8f 	bl	8000ae8 <__aeabi_dcmpeq>
 8005dca:	b918      	cbnz	r0, 8005dd4 <__cvt+0x8c>
 8005dcc:	f1c6 0601 	rsb	r6, r6, #1
 8005dd0:	f8ca 6000 	str.w	r6, [sl]
 8005dd4:	f8da 3000 	ldr.w	r3, [sl]
 8005dd8:	4499      	add	r9, r3
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4620      	mov	r0, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	f7fa fe81 	bl	8000ae8 <__aeabi_dcmpeq>
 8005de6:	b108      	cbz	r0, 8005dec <__cvt+0xa4>
 8005de8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dec:	2230      	movs	r2, #48	; 0x30
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	454b      	cmp	r3, r9
 8005df2:	d307      	bcc.n	8005e04 <__cvt+0xbc>
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005df8:	1bdb      	subs	r3, r3, r7
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	b004      	add	sp, #16
 8005e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e04:	1c59      	adds	r1, r3, #1
 8005e06:	9103      	str	r1, [sp, #12]
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	e7f0      	b.n	8005dee <__cvt+0xa6>

08005e0c <__exponent>:
 8005e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2900      	cmp	r1, #0
 8005e12:	bfb8      	it	lt
 8005e14:	4249      	neglt	r1, r1
 8005e16:	f803 2b02 	strb.w	r2, [r3], #2
 8005e1a:	bfb4      	ite	lt
 8005e1c:	222d      	movlt	r2, #45	; 0x2d
 8005e1e:	222b      	movge	r2, #43	; 0x2b
 8005e20:	2909      	cmp	r1, #9
 8005e22:	7042      	strb	r2, [r0, #1]
 8005e24:	dd2a      	ble.n	8005e7c <__exponent+0x70>
 8005e26:	f10d 0407 	add.w	r4, sp, #7
 8005e2a:	46a4      	mov	ip, r4
 8005e2c:	270a      	movs	r7, #10
 8005e2e:	46a6      	mov	lr, r4
 8005e30:	460a      	mov	r2, r1
 8005e32:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e36:	fb07 1516 	mls	r5, r7, r6, r1
 8005e3a:	3530      	adds	r5, #48	; 0x30
 8005e3c:	2a63      	cmp	r2, #99	; 0x63
 8005e3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e46:	4631      	mov	r1, r6
 8005e48:	dcf1      	bgt.n	8005e2e <__exponent+0x22>
 8005e4a:	3130      	adds	r1, #48	; 0x30
 8005e4c:	f1ae 0502 	sub.w	r5, lr, #2
 8005e50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e54:	1c44      	adds	r4, r0, #1
 8005e56:	4629      	mov	r1, r5
 8005e58:	4561      	cmp	r1, ip
 8005e5a:	d30a      	bcc.n	8005e72 <__exponent+0x66>
 8005e5c:	f10d 0209 	add.w	r2, sp, #9
 8005e60:	eba2 020e 	sub.w	r2, r2, lr
 8005e64:	4565      	cmp	r5, ip
 8005e66:	bf88      	it	hi
 8005e68:	2200      	movhi	r2, #0
 8005e6a:	4413      	add	r3, r2
 8005e6c:	1a18      	subs	r0, r3, r0
 8005e6e:	b003      	add	sp, #12
 8005e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e7a:	e7ed      	b.n	8005e58 <__exponent+0x4c>
 8005e7c:	2330      	movs	r3, #48	; 0x30
 8005e7e:	3130      	adds	r1, #48	; 0x30
 8005e80:	7083      	strb	r3, [r0, #2]
 8005e82:	70c1      	strb	r1, [r0, #3]
 8005e84:	1d03      	adds	r3, r0, #4
 8005e86:	e7f1      	b.n	8005e6c <__exponent+0x60>

08005e88 <_printf_float>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	ed2d 8b02 	vpush	{d8}
 8005e90:	b08d      	sub	sp, #52	; 0x34
 8005e92:	460c      	mov	r4, r1
 8005e94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e98:	4616      	mov	r6, r2
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	f001 fa59 	bl	8007354 <_localeconv_r>
 8005ea2:	f8d0 a000 	ldr.w	sl, [r0]
 8005ea6:	4650      	mov	r0, sl
 8005ea8:	f7fa f9a2 	bl	80001f0 <strlen>
 8005eac:	2300      	movs	r3, #0
 8005eae:	930a      	str	r3, [sp, #40]	; 0x28
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	9305      	str	r3, [sp, #20]
 8005eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ebc:	3307      	adds	r3, #7
 8005ebe:	f023 0307 	bic.w	r3, r3, #7
 8005ec2:	f103 0208 	add.w	r2, r3, #8
 8005ec6:	f8c8 2000 	str.w	r2, [r8]
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ed2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ed6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005eda:	9307      	str	r3, [sp, #28]
 8005edc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ee0:	ee08 0a10 	vmov	s16, r0
 8005ee4:	4b9f      	ldr	r3, [pc, #636]	; (8006164 <_printf_float+0x2dc>)
 8005ee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eea:	f04f 32ff 	mov.w	r2, #4294967295
 8005eee:	f7fa fe2d 	bl	8000b4c <__aeabi_dcmpun>
 8005ef2:	bb88      	cbnz	r0, 8005f58 <_printf_float+0xd0>
 8005ef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ef8:	4b9a      	ldr	r3, [pc, #616]	; (8006164 <_printf_float+0x2dc>)
 8005efa:	f04f 32ff 	mov.w	r2, #4294967295
 8005efe:	f7fa fe07 	bl	8000b10 <__aeabi_dcmple>
 8005f02:	bb48      	cbnz	r0, 8005f58 <_printf_float+0xd0>
 8005f04:	2200      	movs	r2, #0
 8005f06:	2300      	movs	r3, #0
 8005f08:	4640      	mov	r0, r8
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	f7fa fdf6 	bl	8000afc <__aeabi_dcmplt>
 8005f10:	b110      	cbz	r0, 8005f18 <_printf_float+0x90>
 8005f12:	232d      	movs	r3, #45	; 0x2d
 8005f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f18:	4b93      	ldr	r3, [pc, #588]	; (8006168 <_printf_float+0x2e0>)
 8005f1a:	4894      	ldr	r0, [pc, #592]	; (800616c <_printf_float+0x2e4>)
 8005f1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f20:	bf94      	ite	ls
 8005f22:	4698      	movls	r8, r3
 8005f24:	4680      	movhi	r8, r0
 8005f26:	2303      	movs	r3, #3
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	9b05      	ldr	r3, [sp, #20]
 8005f2c:	f023 0204 	bic.w	r2, r3, #4
 8005f30:	6022      	str	r2, [r4, #0]
 8005f32:	f04f 0900 	mov.w	r9, #0
 8005f36:	9700      	str	r7, [sp, #0]
 8005f38:	4633      	mov	r3, r6
 8005f3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 f9d8 	bl	80062f4 <_printf_common>
 8005f44:	3001      	adds	r0, #1
 8005f46:	f040 8090 	bne.w	800606a <_printf_float+0x1e2>
 8005f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4e:	b00d      	add	sp, #52	; 0x34
 8005f50:	ecbd 8b02 	vpop	{d8}
 8005f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	4649      	mov	r1, r9
 8005f60:	f7fa fdf4 	bl	8000b4c <__aeabi_dcmpun>
 8005f64:	b140      	cbz	r0, 8005f78 <_printf_float+0xf0>
 8005f66:	464b      	mov	r3, r9
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bfbc      	itt	lt
 8005f6c:	232d      	movlt	r3, #45	; 0x2d
 8005f6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f72:	487f      	ldr	r0, [pc, #508]	; (8006170 <_printf_float+0x2e8>)
 8005f74:	4b7f      	ldr	r3, [pc, #508]	; (8006174 <_printf_float+0x2ec>)
 8005f76:	e7d1      	b.n	8005f1c <_printf_float+0x94>
 8005f78:	6863      	ldr	r3, [r4, #4]
 8005f7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f7e:	9206      	str	r2, [sp, #24]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	d13f      	bne.n	8006004 <_printf_float+0x17c>
 8005f84:	2306      	movs	r3, #6
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	9b05      	ldr	r3, [sp, #20]
 8005f8a:	6861      	ldr	r1, [r4, #4]
 8005f8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f90:	2300      	movs	r3, #0
 8005f92:	9303      	str	r3, [sp, #12]
 8005f94:	ab0a      	add	r3, sp, #40	; 0x28
 8005f96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f9a:	ab09      	add	r3, sp, #36	; 0x24
 8005f9c:	ec49 8b10 	vmov	d0, r8, r9
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	6022      	str	r2, [r4, #0]
 8005fa4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f7ff fecd 	bl	8005d48 <__cvt>
 8005fae:	9b06      	ldr	r3, [sp, #24]
 8005fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fb2:	2b47      	cmp	r3, #71	; 0x47
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	d108      	bne.n	8005fca <_printf_float+0x142>
 8005fb8:	1cc8      	adds	r0, r1, #3
 8005fba:	db02      	blt.n	8005fc2 <_printf_float+0x13a>
 8005fbc:	6863      	ldr	r3, [r4, #4]
 8005fbe:	4299      	cmp	r1, r3
 8005fc0:	dd41      	ble.n	8006046 <_printf_float+0x1be>
 8005fc2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005fc6:	fa5f fb8b 	uxtb.w	fp, fp
 8005fca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fce:	d820      	bhi.n	8006012 <_printf_float+0x18a>
 8005fd0:	3901      	subs	r1, #1
 8005fd2:	465a      	mov	r2, fp
 8005fd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fd8:	9109      	str	r1, [sp, #36]	; 0x24
 8005fda:	f7ff ff17 	bl	8005e0c <__exponent>
 8005fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fe0:	1813      	adds	r3, r2, r0
 8005fe2:	2a01      	cmp	r2, #1
 8005fe4:	4681      	mov	r9, r0
 8005fe6:	6123      	str	r3, [r4, #16]
 8005fe8:	dc02      	bgt.n	8005ff0 <_printf_float+0x168>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	07d2      	lsls	r2, r2, #31
 8005fee:	d501      	bpl.n	8005ff4 <_printf_float+0x16c>
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	6123      	str	r3, [r4, #16]
 8005ff4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d09c      	beq.n	8005f36 <_printf_float+0xae>
 8005ffc:	232d      	movs	r3, #45	; 0x2d
 8005ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006002:	e798      	b.n	8005f36 <_printf_float+0xae>
 8006004:	9a06      	ldr	r2, [sp, #24]
 8006006:	2a47      	cmp	r2, #71	; 0x47
 8006008:	d1be      	bne.n	8005f88 <_printf_float+0x100>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1bc      	bne.n	8005f88 <_printf_float+0x100>
 800600e:	2301      	movs	r3, #1
 8006010:	e7b9      	b.n	8005f86 <_printf_float+0xfe>
 8006012:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006016:	d118      	bne.n	800604a <_printf_float+0x1c2>
 8006018:	2900      	cmp	r1, #0
 800601a:	6863      	ldr	r3, [r4, #4]
 800601c:	dd0b      	ble.n	8006036 <_printf_float+0x1ae>
 800601e:	6121      	str	r1, [r4, #16]
 8006020:	b913      	cbnz	r3, 8006028 <_printf_float+0x1a0>
 8006022:	6822      	ldr	r2, [r4, #0]
 8006024:	07d0      	lsls	r0, r2, #31
 8006026:	d502      	bpl.n	800602e <_printf_float+0x1a6>
 8006028:	3301      	adds	r3, #1
 800602a:	440b      	add	r3, r1
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006030:	f04f 0900 	mov.w	r9, #0
 8006034:	e7de      	b.n	8005ff4 <_printf_float+0x16c>
 8006036:	b913      	cbnz	r3, 800603e <_printf_float+0x1b6>
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	07d2      	lsls	r2, r2, #31
 800603c:	d501      	bpl.n	8006042 <_printf_float+0x1ba>
 800603e:	3302      	adds	r3, #2
 8006040:	e7f4      	b.n	800602c <_printf_float+0x1a4>
 8006042:	2301      	movs	r3, #1
 8006044:	e7f2      	b.n	800602c <_printf_float+0x1a4>
 8006046:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800604a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604c:	4299      	cmp	r1, r3
 800604e:	db05      	blt.n	800605c <_printf_float+0x1d4>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	6121      	str	r1, [r4, #16]
 8006054:	07d8      	lsls	r0, r3, #31
 8006056:	d5ea      	bpl.n	800602e <_printf_float+0x1a6>
 8006058:	1c4b      	adds	r3, r1, #1
 800605a:	e7e7      	b.n	800602c <_printf_float+0x1a4>
 800605c:	2900      	cmp	r1, #0
 800605e:	bfd4      	ite	le
 8006060:	f1c1 0202 	rsble	r2, r1, #2
 8006064:	2201      	movgt	r2, #1
 8006066:	4413      	add	r3, r2
 8006068:	e7e0      	b.n	800602c <_printf_float+0x1a4>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	055a      	lsls	r2, r3, #21
 800606e:	d407      	bmi.n	8006080 <_printf_float+0x1f8>
 8006070:	6923      	ldr	r3, [r4, #16]
 8006072:	4642      	mov	r2, r8
 8006074:	4631      	mov	r1, r6
 8006076:	4628      	mov	r0, r5
 8006078:	47b8      	blx	r7
 800607a:	3001      	adds	r0, #1
 800607c:	d12c      	bne.n	80060d8 <_printf_float+0x250>
 800607e:	e764      	b.n	8005f4a <_printf_float+0xc2>
 8006080:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006084:	f240 80e0 	bls.w	8006248 <_printf_float+0x3c0>
 8006088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800608c:	2200      	movs	r2, #0
 800608e:	2300      	movs	r3, #0
 8006090:	f7fa fd2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006094:	2800      	cmp	r0, #0
 8006096:	d034      	beq.n	8006102 <_printf_float+0x27a>
 8006098:	4a37      	ldr	r2, [pc, #220]	; (8006178 <_printf_float+0x2f0>)
 800609a:	2301      	movs	r3, #1
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af51 	beq.w	8005f4a <_printf_float+0xc2>
 80060a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060ac:	429a      	cmp	r2, r3
 80060ae:	db02      	blt.n	80060b6 <_printf_float+0x22e>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	07d8      	lsls	r0, r3, #31
 80060b4:	d510      	bpl.n	80060d8 <_printf_float+0x250>
 80060b6:	ee18 3a10 	vmov	r3, s16
 80060ba:	4652      	mov	r2, sl
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f af41 	beq.w	8005f4a <_printf_float+0xc2>
 80060c8:	f04f 0800 	mov.w	r8, #0
 80060cc:	f104 091a 	add.w	r9, r4, #26
 80060d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d2:	3b01      	subs	r3, #1
 80060d4:	4543      	cmp	r3, r8
 80060d6:	dc09      	bgt.n	80060ec <_printf_float+0x264>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	079b      	lsls	r3, r3, #30
 80060dc:	f100 8105 	bmi.w	80062ea <_printf_float+0x462>
 80060e0:	68e0      	ldr	r0, [r4, #12]
 80060e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e4:	4298      	cmp	r0, r3
 80060e6:	bfb8      	it	lt
 80060e8:	4618      	movlt	r0, r3
 80060ea:	e730      	b.n	8005f4e <_printf_float+0xc6>
 80060ec:	2301      	movs	r3, #1
 80060ee:	464a      	mov	r2, r9
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	f43f af27 	beq.w	8005f4a <_printf_float+0xc2>
 80060fc:	f108 0801 	add.w	r8, r8, #1
 8006100:	e7e6      	b.n	80060d0 <_printf_float+0x248>
 8006102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	dc39      	bgt.n	800617c <_printf_float+0x2f4>
 8006108:	4a1b      	ldr	r2, [pc, #108]	; (8006178 <_printf_float+0x2f0>)
 800610a:	2301      	movs	r3, #1
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f af19 	beq.w	8005f4a <_printf_float+0xc2>
 8006118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800611c:	4313      	orrs	r3, r2
 800611e:	d102      	bne.n	8006126 <_printf_float+0x29e>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	07d9      	lsls	r1, r3, #31
 8006124:	d5d8      	bpl.n	80060d8 <_printf_float+0x250>
 8006126:	ee18 3a10 	vmov	r3, s16
 800612a:	4652      	mov	r2, sl
 800612c:	4631      	mov	r1, r6
 800612e:	4628      	mov	r0, r5
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	f43f af09 	beq.w	8005f4a <_printf_float+0xc2>
 8006138:	f04f 0900 	mov.w	r9, #0
 800613c:	f104 0a1a 	add.w	sl, r4, #26
 8006140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006142:	425b      	negs	r3, r3
 8006144:	454b      	cmp	r3, r9
 8006146:	dc01      	bgt.n	800614c <_printf_float+0x2c4>
 8006148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614a:	e792      	b.n	8006072 <_printf_float+0x1ea>
 800614c:	2301      	movs	r3, #1
 800614e:	4652      	mov	r2, sl
 8006150:	4631      	mov	r1, r6
 8006152:	4628      	mov	r0, r5
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f aef7 	beq.w	8005f4a <_printf_float+0xc2>
 800615c:	f109 0901 	add.w	r9, r9, #1
 8006160:	e7ee      	b.n	8006140 <_printf_float+0x2b8>
 8006162:	bf00      	nop
 8006164:	7fefffff 	.word	0x7fefffff
 8006168:	08008b58 	.word	0x08008b58
 800616c:	08008b5c 	.word	0x08008b5c
 8006170:	08008b64 	.word	0x08008b64
 8006174:	08008b60 	.word	0x08008b60
 8006178:	08008b68 	.word	0x08008b68
 800617c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800617e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006180:	429a      	cmp	r2, r3
 8006182:	bfa8      	it	ge
 8006184:	461a      	movge	r2, r3
 8006186:	2a00      	cmp	r2, #0
 8006188:	4691      	mov	r9, r2
 800618a:	dc37      	bgt.n	80061fc <_printf_float+0x374>
 800618c:	f04f 0b00 	mov.w	fp, #0
 8006190:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006194:	f104 021a 	add.w	r2, r4, #26
 8006198:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800619a:	9305      	str	r3, [sp, #20]
 800619c:	eba3 0309 	sub.w	r3, r3, r9
 80061a0:	455b      	cmp	r3, fp
 80061a2:	dc33      	bgt.n	800620c <_printf_float+0x384>
 80061a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a8:	429a      	cmp	r2, r3
 80061aa:	db3b      	blt.n	8006224 <_printf_float+0x39c>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07da      	lsls	r2, r3, #31
 80061b0:	d438      	bmi.n	8006224 <_printf_float+0x39c>
 80061b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b4:	9a05      	ldr	r2, [sp, #20]
 80061b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061b8:	1a9a      	subs	r2, r3, r2
 80061ba:	eba3 0901 	sub.w	r9, r3, r1
 80061be:	4591      	cmp	r9, r2
 80061c0:	bfa8      	it	ge
 80061c2:	4691      	movge	r9, r2
 80061c4:	f1b9 0f00 	cmp.w	r9, #0
 80061c8:	dc35      	bgt.n	8006236 <_printf_float+0x3ae>
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061d2:	f104 0a1a 	add.w	sl, r4, #26
 80061d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	eba3 0309 	sub.w	r3, r3, r9
 80061e0:	4543      	cmp	r3, r8
 80061e2:	f77f af79 	ble.w	80060d8 <_printf_float+0x250>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4652      	mov	r2, sl
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f aeaa 	beq.w	8005f4a <_printf_float+0xc2>
 80061f6:	f108 0801 	add.w	r8, r8, #1
 80061fa:	e7ec      	b.n	80061d6 <_printf_float+0x34e>
 80061fc:	4613      	mov	r3, r2
 80061fe:	4631      	mov	r1, r6
 8006200:	4642      	mov	r2, r8
 8006202:	4628      	mov	r0, r5
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	d1c0      	bne.n	800618c <_printf_float+0x304>
 800620a:	e69e      	b.n	8005f4a <_printf_float+0xc2>
 800620c:	2301      	movs	r3, #1
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	9205      	str	r2, [sp, #20]
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	f43f ae97 	beq.w	8005f4a <_printf_float+0xc2>
 800621c:	9a05      	ldr	r2, [sp, #20]
 800621e:	f10b 0b01 	add.w	fp, fp, #1
 8006222:	e7b9      	b.n	8006198 <_printf_float+0x310>
 8006224:	ee18 3a10 	vmov	r3, s16
 8006228:	4652      	mov	r2, sl
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	d1be      	bne.n	80061b2 <_printf_float+0x32a>
 8006234:	e689      	b.n	8005f4a <_printf_float+0xc2>
 8006236:	9a05      	ldr	r2, [sp, #20]
 8006238:	464b      	mov	r3, r9
 800623a:	4442      	add	r2, r8
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	d1c1      	bne.n	80061ca <_printf_float+0x342>
 8006246:	e680      	b.n	8005f4a <_printf_float+0xc2>
 8006248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800624a:	2a01      	cmp	r2, #1
 800624c:	dc01      	bgt.n	8006252 <_printf_float+0x3ca>
 800624e:	07db      	lsls	r3, r3, #31
 8006250:	d538      	bpl.n	80062c4 <_printf_float+0x43c>
 8006252:	2301      	movs	r3, #1
 8006254:	4642      	mov	r2, r8
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	f43f ae74 	beq.w	8005f4a <_printf_float+0xc2>
 8006262:	ee18 3a10 	vmov	r3, s16
 8006266:	4652      	mov	r2, sl
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	f43f ae6b 	beq.w	8005f4a <_printf_float+0xc2>
 8006274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006278:	2200      	movs	r2, #0
 800627a:	2300      	movs	r3, #0
 800627c:	f7fa fc34 	bl	8000ae8 <__aeabi_dcmpeq>
 8006280:	b9d8      	cbnz	r0, 80062ba <_printf_float+0x432>
 8006282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006284:	f108 0201 	add.w	r2, r8, #1
 8006288:	3b01      	subs	r3, #1
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	d10e      	bne.n	80062b2 <_printf_float+0x42a>
 8006294:	e659      	b.n	8005f4a <_printf_float+0xc2>
 8006296:	2301      	movs	r3, #1
 8006298:	4652      	mov	r2, sl
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f ae52 	beq.w	8005f4a <_printf_float+0xc2>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ac:	3b01      	subs	r3, #1
 80062ae:	4543      	cmp	r3, r8
 80062b0:	dcf1      	bgt.n	8006296 <_printf_float+0x40e>
 80062b2:	464b      	mov	r3, r9
 80062b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062b8:	e6dc      	b.n	8006074 <_printf_float+0x1ec>
 80062ba:	f04f 0800 	mov.w	r8, #0
 80062be:	f104 0a1a 	add.w	sl, r4, #26
 80062c2:	e7f2      	b.n	80062aa <_printf_float+0x422>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4642      	mov	r2, r8
 80062c8:	e7df      	b.n	800628a <_printf_float+0x402>
 80062ca:	2301      	movs	r3, #1
 80062cc:	464a      	mov	r2, r9
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	f43f ae38 	beq.w	8005f4a <_printf_float+0xc2>
 80062da:	f108 0801 	add.w	r8, r8, #1
 80062de:	68e3      	ldr	r3, [r4, #12]
 80062e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062e2:	1a5b      	subs	r3, r3, r1
 80062e4:	4543      	cmp	r3, r8
 80062e6:	dcf0      	bgt.n	80062ca <_printf_float+0x442>
 80062e8:	e6fa      	b.n	80060e0 <_printf_float+0x258>
 80062ea:	f04f 0800 	mov.w	r8, #0
 80062ee:	f104 0919 	add.w	r9, r4, #25
 80062f2:	e7f4      	b.n	80062de <_printf_float+0x456>

080062f4 <_printf_common>:
 80062f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	4616      	mov	r6, r2
 80062fa:	4699      	mov	r9, r3
 80062fc:	688a      	ldr	r2, [r1, #8]
 80062fe:	690b      	ldr	r3, [r1, #16]
 8006300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006304:	4293      	cmp	r3, r2
 8006306:	bfb8      	it	lt
 8006308:	4613      	movlt	r3, r2
 800630a:	6033      	str	r3, [r6, #0]
 800630c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006310:	4607      	mov	r7, r0
 8006312:	460c      	mov	r4, r1
 8006314:	b10a      	cbz	r2, 800631a <_printf_common+0x26>
 8006316:	3301      	adds	r3, #1
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	0699      	lsls	r1, r3, #26
 800631e:	bf42      	ittt	mi
 8006320:	6833      	ldrmi	r3, [r6, #0]
 8006322:	3302      	addmi	r3, #2
 8006324:	6033      	strmi	r3, [r6, #0]
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	f015 0506 	ands.w	r5, r5, #6
 800632c:	d106      	bne.n	800633c <_printf_common+0x48>
 800632e:	f104 0a19 	add.w	sl, r4, #25
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	6832      	ldr	r2, [r6, #0]
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	42ab      	cmp	r3, r5
 800633a:	dc26      	bgt.n	800638a <_printf_common+0x96>
 800633c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006340:	1e13      	subs	r3, r2, #0
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	bf18      	it	ne
 8006346:	2301      	movne	r3, #1
 8006348:	0692      	lsls	r2, r2, #26
 800634a:	d42b      	bmi.n	80063a4 <_printf_common+0xb0>
 800634c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006350:	4649      	mov	r1, r9
 8006352:	4638      	mov	r0, r7
 8006354:	47c0      	blx	r8
 8006356:	3001      	adds	r0, #1
 8006358:	d01e      	beq.n	8006398 <_printf_common+0xa4>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	68e5      	ldr	r5, [r4, #12]
 800635e:	6832      	ldr	r2, [r6, #0]
 8006360:	f003 0306 	and.w	r3, r3, #6
 8006364:	2b04      	cmp	r3, #4
 8006366:	bf08      	it	eq
 8006368:	1aad      	subeq	r5, r5, r2
 800636a:	68a3      	ldr	r3, [r4, #8]
 800636c:	6922      	ldr	r2, [r4, #16]
 800636e:	bf0c      	ite	eq
 8006370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006374:	2500      	movne	r5, #0
 8006376:	4293      	cmp	r3, r2
 8006378:	bfc4      	itt	gt
 800637a:	1a9b      	subgt	r3, r3, r2
 800637c:	18ed      	addgt	r5, r5, r3
 800637e:	2600      	movs	r6, #0
 8006380:	341a      	adds	r4, #26
 8006382:	42b5      	cmp	r5, r6
 8006384:	d11a      	bne.n	80063bc <_printf_common+0xc8>
 8006386:	2000      	movs	r0, #0
 8006388:	e008      	b.n	800639c <_printf_common+0xa8>
 800638a:	2301      	movs	r3, #1
 800638c:	4652      	mov	r2, sl
 800638e:	4649      	mov	r1, r9
 8006390:	4638      	mov	r0, r7
 8006392:	47c0      	blx	r8
 8006394:	3001      	adds	r0, #1
 8006396:	d103      	bne.n	80063a0 <_printf_common+0xac>
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a0:	3501      	adds	r5, #1
 80063a2:	e7c6      	b.n	8006332 <_printf_common+0x3e>
 80063a4:	18e1      	adds	r1, r4, r3
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	2030      	movs	r0, #48	; 0x30
 80063aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ae:	4422      	add	r2, r4
 80063b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063b8:	3302      	adds	r3, #2
 80063ba:	e7c7      	b.n	800634c <_printf_common+0x58>
 80063bc:	2301      	movs	r3, #1
 80063be:	4622      	mov	r2, r4
 80063c0:	4649      	mov	r1, r9
 80063c2:	4638      	mov	r0, r7
 80063c4:	47c0      	blx	r8
 80063c6:	3001      	adds	r0, #1
 80063c8:	d0e6      	beq.n	8006398 <_printf_common+0xa4>
 80063ca:	3601      	adds	r6, #1
 80063cc:	e7d9      	b.n	8006382 <_printf_common+0x8e>
	...

080063d0 <_printf_i>:
 80063d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	7e0f      	ldrb	r7, [r1, #24]
 80063d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063d8:	2f78      	cmp	r7, #120	; 0x78
 80063da:	4691      	mov	r9, r2
 80063dc:	4680      	mov	r8, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	469a      	mov	sl, r3
 80063e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063e6:	d807      	bhi.n	80063f8 <_printf_i+0x28>
 80063e8:	2f62      	cmp	r7, #98	; 0x62
 80063ea:	d80a      	bhi.n	8006402 <_printf_i+0x32>
 80063ec:	2f00      	cmp	r7, #0
 80063ee:	f000 80d8 	beq.w	80065a2 <_printf_i+0x1d2>
 80063f2:	2f58      	cmp	r7, #88	; 0x58
 80063f4:	f000 80a3 	beq.w	800653e <_printf_i+0x16e>
 80063f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006400:	e03a      	b.n	8006478 <_printf_i+0xa8>
 8006402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006406:	2b15      	cmp	r3, #21
 8006408:	d8f6      	bhi.n	80063f8 <_printf_i+0x28>
 800640a:	a101      	add	r1, pc, #4	; (adr r1, 8006410 <_printf_i+0x40>)
 800640c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006410:	08006469 	.word	0x08006469
 8006414:	0800647d 	.word	0x0800647d
 8006418:	080063f9 	.word	0x080063f9
 800641c:	080063f9 	.word	0x080063f9
 8006420:	080063f9 	.word	0x080063f9
 8006424:	080063f9 	.word	0x080063f9
 8006428:	0800647d 	.word	0x0800647d
 800642c:	080063f9 	.word	0x080063f9
 8006430:	080063f9 	.word	0x080063f9
 8006434:	080063f9 	.word	0x080063f9
 8006438:	080063f9 	.word	0x080063f9
 800643c:	08006589 	.word	0x08006589
 8006440:	080064ad 	.word	0x080064ad
 8006444:	0800656b 	.word	0x0800656b
 8006448:	080063f9 	.word	0x080063f9
 800644c:	080063f9 	.word	0x080063f9
 8006450:	080065ab 	.word	0x080065ab
 8006454:	080063f9 	.word	0x080063f9
 8006458:	080064ad 	.word	0x080064ad
 800645c:	080063f9 	.word	0x080063f9
 8006460:	080063f9 	.word	0x080063f9
 8006464:	08006573 	.word	0x08006573
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	602a      	str	r2, [r5, #0]
 8006470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006478:	2301      	movs	r3, #1
 800647a:	e0a3      	b.n	80065c4 <_printf_i+0x1f4>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	6829      	ldr	r1, [r5, #0]
 8006480:	0606      	lsls	r6, r0, #24
 8006482:	f101 0304 	add.w	r3, r1, #4
 8006486:	d50a      	bpl.n	800649e <_printf_i+0xce>
 8006488:	680e      	ldr	r6, [r1, #0]
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	2e00      	cmp	r6, #0
 800648e:	da03      	bge.n	8006498 <_printf_i+0xc8>
 8006490:	232d      	movs	r3, #45	; 0x2d
 8006492:	4276      	negs	r6, r6
 8006494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006498:	485e      	ldr	r0, [pc, #376]	; (8006614 <_printf_i+0x244>)
 800649a:	230a      	movs	r3, #10
 800649c:	e019      	b.n	80064d2 <_printf_i+0x102>
 800649e:	680e      	ldr	r6, [r1, #0]
 80064a0:	602b      	str	r3, [r5, #0]
 80064a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064a6:	bf18      	it	ne
 80064a8:	b236      	sxthne	r6, r6
 80064aa:	e7ef      	b.n	800648c <_printf_i+0xbc>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	6820      	ldr	r0, [r4, #0]
 80064b0:	1d19      	adds	r1, r3, #4
 80064b2:	6029      	str	r1, [r5, #0]
 80064b4:	0601      	lsls	r1, r0, #24
 80064b6:	d501      	bpl.n	80064bc <_printf_i+0xec>
 80064b8:	681e      	ldr	r6, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <_printf_i+0xf2>
 80064bc:	0646      	lsls	r6, r0, #25
 80064be:	d5fb      	bpl.n	80064b8 <_printf_i+0xe8>
 80064c0:	881e      	ldrh	r6, [r3, #0]
 80064c2:	4854      	ldr	r0, [pc, #336]	; (8006614 <_printf_i+0x244>)
 80064c4:	2f6f      	cmp	r7, #111	; 0x6f
 80064c6:	bf0c      	ite	eq
 80064c8:	2308      	moveq	r3, #8
 80064ca:	230a      	movne	r3, #10
 80064cc:	2100      	movs	r1, #0
 80064ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064d2:	6865      	ldr	r5, [r4, #4]
 80064d4:	60a5      	str	r5, [r4, #8]
 80064d6:	2d00      	cmp	r5, #0
 80064d8:	bfa2      	ittt	ge
 80064da:	6821      	ldrge	r1, [r4, #0]
 80064dc:	f021 0104 	bicge.w	r1, r1, #4
 80064e0:	6021      	strge	r1, [r4, #0]
 80064e2:	b90e      	cbnz	r6, 80064e8 <_printf_i+0x118>
 80064e4:	2d00      	cmp	r5, #0
 80064e6:	d04d      	beq.n	8006584 <_printf_i+0x1b4>
 80064e8:	4615      	mov	r5, r2
 80064ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80064ee:	fb03 6711 	mls	r7, r3, r1, r6
 80064f2:	5dc7      	ldrb	r7, [r0, r7]
 80064f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064f8:	4637      	mov	r7, r6
 80064fa:	42bb      	cmp	r3, r7
 80064fc:	460e      	mov	r6, r1
 80064fe:	d9f4      	bls.n	80064ea <_printf_i+0x11a>
 8006500:	2b08      	cmp	r3, #8
 8006502:	d10b      	bne.n	800651c <_printf_i+0x14c>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	07de      	lsls	r6, r3, #31
 8006508:	d508      	bpl.n	800651c <_printf_i+0x14c>
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	6861      	ldr	r1, [r4, #4]
 800650e:	4299      	cmp	r1, r3
 8006510:	bfde      	ittt	le
 8006512:	2330      	movle	r3, #48	; 0x30
 8006514:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006518:	f105 35ff 	addle.w	r5, r5, #4294967295
 800651c:	1b52      	subs	r2, r2, r5
 800651e:	6122      	str	r2, [r4, #16]
 8006520:	f8cd a000 	str.w	sl, [sp]
 8006524:	464b      	mov	r3, r9
 8006526:	aa03      	add	r2, sp, #12
 8006528:	4621      	mov	r1, r4
 800652a:	4640      	mov	r0, r8
 800652c:	f7ff fee2 	bl	80062f4 <_printf_common>
 8006530:	3001      	adds	r0, #1
 8006532:	d14c      	bne.n	80065ce <_printf_i+0x1fe>
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	b004      	add	sp, #16
 800653a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653e:	4835      	ldr	r0, [pc, #212]	; (8006614 <_printf_i+0x244>)
 8006540:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006544:	6829      	ldr	r1, [r5, #0]
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	f851 6b04 	ldr.w	r6, [r1], #4
 800654c:	6029      	str	r1, [r5, #0]
 800654e:	061d      	lsls	r5, r3, #24
 8006550:	d514      	bpl.n	800657c <_printf_i+0x1ac>
 8006552:	07df      	lsls	r7, r3, #31
 8006554:	bf44      	itt	mi
 8006556:	f043 0320 	orrmi.w	r3, r3, #32
 800655a:	6023      	strmi	r3, [r4, #0]
 800655c:	b91e      	cbnz	r6, 8006566 <_printf_i+0x196>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	f023 0320 	bic.w	r3, r3, #32
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	2310      	movs	r3, #16
 8006568:	e7b0      	b.n	80064cc <_printf_i+0xfc>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	f043 0320 	orr.w	r3, r3, #32
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	2378      	movs	r3, #120	; 0x78
 8006574:	4828      	ldr	r0, [pc, #160]	; (8006618 <_printf_i+0x248>)
 8006576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800657a:	e7e3      	b.n	8006544 <_printf_i+0x174>
 800657c:	0659      	lsls	r1, r3, #25
 800657e:	bf48      	it	mi
 8006580:	b2b6      	uxthmi	r6, r6
 8006582:	e7e6      	b.n	8006552 <_printf_i+0x182>
 8006584:	4615      	mov	r5, r2
 8006586:	e7bb      	b.n	8006500 <_printf_i+0x130>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	6826      	ldr	r6, [r4, #0]
 800658c:	6961      	ldr	r1, [r4, #20]
 800658e:	1d18      	adds	r0, r3, #4
 8006590:	6028      	str	r0, [r5, #0]
 8006592:	0635      	lsls	r5, r6, #24
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	d501      	bpl.n	800659c <_printf_i+0x1cc>
 8006598:	6019      	str	r1, [r3, #0]
 800659a:	e002      	b.n	80065a2 <_printf_i+0x1d2>
 800659c:	0670      	lsls	r0, r6, #25
 800659e:	d5fb      	bpl.n	8006598 <_printf_i+0x1c8>
 80065a0:	8019      	strh	r1, [r3, #0]
 80065a2:	2300      	movs	r3, #0
 80065a4:	6123      	str	r3, [r4, #16]
 80065a6:	4615      	mov	r5, r2
 80065a8:	e7ba      	b.n	8006520 <_printf_i+0x150>
 80065aa:	682b      	ldr	r3, [r5, #0]
 80065ac:	1d1a      	adds	r2, r3, #4
 80065ae:	602a      	str	r2, [r5, #0]
 80065b0:	681d      	ldr	r5, [r3, #0]
 80065b2:	6862      	ldr	r2, [r4, #4]
 80065b4:	2100      	movs	r1, #0
 80065b6:	4628      	mov	r0, r5
 80065b8:	f7f9 fe22 	bl	8000200 <memchr>
 80065bc:	b108      	cbz	r0, 80065c2 <_printf_i+0x1f2>
 80065be:	1b40      	subs	r0, r0, r5
 80065c0:	6060      	str	r0, [r4, #4]
 80065c2:	6863      	ldr	r3, [r4, #4]
 80065c4:	6123      	str	r3, [r4, #16]
 80065c6:	2300      	movs	r3, #0
 80065c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065cc:	e7a8      	b.n	8006520 <_printf_i+0x150>
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	462a      	mov	r2, r5
 80065d2:	4649      	mov	r1, r9
 80065d4:	4640      	mov	r0, r8
 80065d6:	47d0      	blx	sl
 80065d8:	3001      	adds	r0, #1
 80065da:	d0ab      	beq.n	8006534 <_printf_i+0x164>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	079b      	lsls	r3, r3, #30
 80065e0:	d413      	bmi.n	800660a <_printf_i+0x23a>
 80065e2:	68e0      	ldr	r0, [r4, #12]
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	4298      	cmp	r0, r3
 80065e8:	bfb8      	it	lt
 80065ea:	4618      	movlt	r0, r3
 80065ec:	e7a4      	b.n	8006538 <_printf_i+0x168>
 80065ee:	2301      	movs	r3, #1
 80065f0:	4632      	mov	r2, r6
 80065f2:	4649      	mov	r1, r9
 80065f4:	4640      	mov	r0, r8
 80065f6:	47d0      	blx	sl
 80065f8:	3001      	adds	r0, #1
 80065fa:	d09b      	beq.n	8006534 <_printf_i+0x164>
 80065fc:	3501      	adds	r5, #1
 80065fe:	68e3      	ldr	r3, [r4, #12]
 8006600:	9903      	ldr	r1, [sp, #12]
 8006602:	1a5b      	subs	r3, r3, r1
 8006604:	42ab      	cmp	r3, r5
 8006606:	dcf2      	bgt.n	80065ee <_printf_i+0x21e>
 8006608:	e7eb      	b.n	80065e2 <_printf_i+0x212>
 800660a:	2500      	movs	r5, #0
 800660c:	f104 0619 	add.w	r6, r4, #25
 8006610:	e7f5      	b.n	80065fe <_printf_i+0x22e>
 8006612:	bf00      	nop
 8006614:	08008b6a 	.word	0x08008b6a
 8006618:	08008b7b 	.word	0x08008b7b

0800661c <siprintf>:
 800661c:	b40e      	push	{r1, r2, r3}
 800661e:	b500      	push	{lr}
 8006620:	b09c      	sub	sp, #112	; 0x70
 8006622:	ab1d      	add	r3, sp, #116	; 0x74
 8006624:	9002      	str	r0, [sp, #8]
 8006626:	9006      	str	r0, [sp, #24]
 8006628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800662c:	4809      	ldr	r0, [pc, #36]	; (8006654 <siprintf+0x38>)
 800662e:	9107      	str	r1, [sp, #28]
 8006630:	9104      	str	r1, [sp, #16]
 8006632:	4909      	ldr	r1, [pc, #36]	; (8006658 <siprintf+0x3c>)
 8006634:	f853 2b04 	ldr.w	r2, [r3], #4
 8006638:	9105      	str	r1, [sp, #20]
 800663a:	6800      	ldr	r0, [r0, #0]
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	a902      	add	r1, sp, #8
 8006640:	f001 fb78 	bl	8007d34 <_svfiprintf_r>
 8006644:	9b02      	ldr	r3, [sp, #8]
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	b01c      	add	sp, #112	; 0x70
 800664c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006650:	b003      	add	sp, #12
 8006652:	4770      	bx	lr
 8006654:	2000000c 	.word	0x2000000c
 8006658:	ffff0208 	.word	0xffff0208

0800665c <quorem>:
 800665c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	6903      	ldr	r3, [r0, #16]
 8006662:	690c      	ldr	r4, [r1, #16]
 8006664:	42a3      	cmp	r3, r4
 8006666:	4607      	mov	r7, r0
 8006668:	f2c0 8081 	blt.w	800676e <quorem+0x112>
 800666c:	3c01      	subs	r4, #1
 800666e:	f101 0814 	add.w	r8, r1, #20
 8006672:	f100 0514 	add.w	r5, r0, #20
 8006676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006680:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006684:	3301      	adds	r3, #1
 8006686:	429a      	cmp	r2, r3
 8006688:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800668c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006690:	fbb2 f6f3 	udiv	r6, r2, r3
 8006694:	d331      	bcc.n	80066fa <quorem+0x9e>
 8006696:	f04f 0e00 	mov.w	lr, #0
 800669a:	4640      	mov	r0, r8
 800669c:	46ac      	mov	ip, r5
 800669e:	46f2      	mov	sl, lr
 80066a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80066a4:	b293      	uxth	r3, r2
 80066a6:	fb06 e303 	mla	r3, r6, r3, lr
 80066aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ebaa 0303 	sub.w	r3, sl, r3
 80066b4:	f8dc a000 	ldr.w	sl, [ip]
 80066b8:	0c12      	lsrs	r2, r2, #16
 80066ba:	fa13 f38a 	uxtah	r3, r3, sl
 80066be:	fb06 e202 	mla	r2, r6, r2, lr
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	9b00      	ldr	r3, [sp, #0]
 80066c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066ca:	b292      	uxth	r2, r2
 80066cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80066d8:	4581      	cmp	r9, r0
 80066da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066de:	f84c 3b04 	str.w	r3, [ip], #4
 80066e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066e6:	d2db      	bcs.n	80066a0 <quorem+0x44>
 80066e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80066ec:	b92b      	cbnz	r3, 80066fa <quorem+0x9e>
 80066ee:	9b01      	ldr	r3, [sp, #4]
 80066f0:	3b04      	subs	r3, #4
 80066f2:	429d      	cmp	r5, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	d32e      	bcc.n	8006756 <quorem+0xfa>
 80066f8:	613c      	str	r4, [r7, #16]
 80066fa:	4638      	mov	r0, r7
 80066fc:	f001 f8c6 	bl	800788c <__mcmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	db24      	blt.n	800674e <quorem+0xf2>
 8006704:	3601      	adds	r6, #1
 8006706:	4628      	mov	r0, r5
 8006708:	f04f 0c00 	mov.w	ip, #0
 800670c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006710:	f8d0 e000 	ldr.w	lr, [r0]
 8006714:	b293      	uxth	r3, r2
 8006716:	ebac 0303 	sub.w	r3, ip, r3
 800671a:	0c12      	lsrs	r2, r2, #16
 800671c:	fa13 f38e 	uxtah	r3, r3, lr
 8006720:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006728:	b29b      	uxth	r3, r3
 800672a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800672e:	45c1      	cmp	r9, r8
 8006730:	f840 3b04 	str.w	r3, [r0], #4
 8006734:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006738:	d2e8      	bcs.n	800670c <quorem+0xb0>
 800673a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800673e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006742:	b922      	cbnz	r2, 800674e <quorem+0xf2>
 8006744:	3b04      	subs	r3, #4
 8006746:	429d      	cmp	r5, r3
 8006748:	461a      	mov	r2, r3
 800674a:	d30a      	bcc.n	8006762 <quorem+0x106>
 800674c:	613c      	str	r4, [r7, #16]
 800674e:	4630      	mov	r0, r6
 8006750:	b003      	add	sp, #12
 8006752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	3b04      	subs	r3, #4
 800675a:	2a00      	cmp	r2, #0
 800675c:	d1cc      	bne.n	80066f8 <quorem+0x9c>
 800675e:	3c01      	subs	r4, #1
 8006760:	e7c7      	b.n	80066f2 <quorem+0x96>
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	3b04      	subs	r3, #4
 8006766:	2a00      	cmp	r2, #0
 8006768:	d1f0      	bne.n	800674c <quorem+0xf0>
 800676a:	3c01      	subs	r4, #1
 800676c:	e7eb      	b.n	8006746 <quorem+0xea>
 800676e:	2000      	movs	r0, #0
 8006770:	e7ee      	b.n	8006750 <quorem+0xf4>
 8006772:	0000      	movs	r0, r0
 8006774:	0000      	movs	r0, r0
	...

08006778 <_dtoa_r>:
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	ed2d 8b04 	vpush	{d8-d9}
 8006780:	ec57 6b10 	vmov	r6, r7, d0
 8006784:	b093      	sub	sp, #76	; 0x4c
 8006786:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006788:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800678c:	9106      	str	r1, [sp, #24]
 800678e:	ee10 aa10 	vmov	sl, s0
 8006792:	4604      	mov	r4, r0
 8006794:	9209      	str	r2, [sp, #36]	; 0x24
 8006796:	930c      	str	r3, [sp, #48]	; 0x30
 8006798:	46bb      	mov	fp, r7
 800679a:	b975      	cbnz	r5, 80067ba <_dtoa_r+0x42>
 800679c:	2010      	movs	r0, #16
 800679e:	f000 fddd 	bl	800735c <malloc>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6260      	str	r0, [r4, #36]	; 0x24
 80067a6:	b920      	cbnz	r0, 80067b2 <_dtoa_r+0x3a>
 80067a8:	4ba7      	ldr	r3, [pc, #668]	; (8006a48 <_dtoa_r+0x2d0>)
 80067aa:	21ea      	movs	r1, #234	; 0xea
 80067ac:	48a7      	ldr	r0, [pc, #668]	; (8006a4c <_dtoa_r+0x2d4>)
 80067ae:	f001 fbd1 	bl	8007f54 <__assert_func>
 80067b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067b6:	6005      	str	r5, [r0, #0]
 80067b8:	60c5      	str	r5, [r0, #12]
 80067ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067bc:	6819      	ldr	r1, [r3, #0]
 80067be:	b151      	cbz	r1, 80067d6 <_dtoa_r+0x5e>
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	604a      	str	r2, [r1, #4]
 80067c4:	2301      	movs	r3, #1
 80067c6:	4093      	lsls	r3, r2
 80067c8:	608b      	str	r3, [r1, #8]
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 fe1c 	bl	8007408 <_Bfree>
 80067d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	1e3b      	subs	r3, r7, #0
 80067d8:	bfaa      	itet	ge
 80067da:	2300      	movge	r3, #0
 80067dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80067e0:	f8c8 3000 	strge.w	r3, [r8]
 80067e4:	4b9a      	ldr	r3, [pc, #616]	; (8006a50 <_dtoa_r+0x2d8>)
 80067e6:	bfbc      	itt	lt
 80067e8:	2201      	movlt	r2, #1
 80067ea:	f8c8 2000 	strlt.w	r2, [r8]
 80067ee:	ea33 030b 	bics.w	r3, r3, fp
 80067f2:	d11b      	bne.n	800682c <_dtoa_r+0xb4>
 80067f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006800:	4333      	orrs	r3, r6
 8006802:	f000 8592 	beq.w	800732a <_dtoa_r+0xbb2>
 8006806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006808:	b963      	cbnz	r3, 8006824 <_dtoa_r+0xac>
 800680a:	4b92      	ldr	r3, [pc, #584]	; (8006a54 <_dtoa_r+0x2dc>)
 800680c:	e022      	b.n	8006854 <_dtoa_r+0xdc>
 800680e:	4b92      	ldr	r3, [pc, #584]	; (8006a58 <_dtoa_r+0x2e0>)
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	3308      	adds	r3, #8
 8006814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	9801      	ldr	r0, [sp, #4]
 800681a:	b013      	add	sp, #76	; 0x4c
 800681c:	ecbd 8b04 	vpop	{d8-d9}
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006824:	4b8b      	ldr	r3, [pc, #556]	; (8006a54 <_dtoa_r+0x2dc>)
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	3303      	adds	r3, #3
 800682a:	e7f3      	b.n	8006814 <_dtoa_r+0x9c>
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	4650      	mov	r0, sl
 8006832:	4659      	mov	r1, fp
 8006834:	f7fa f958 	bl	8000ae8 <__aeabi_dcmpeq>
 8006838:	ec4b ab19 	vmov	d9, sl, fp
 800683c:	4680      	mov	r8, r0
 800683e:	b158      	cbz	r0, 8006858 <_dtoa_r+0xe0>
 8006840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006842:	2301      	movs	r3, #1
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 856b 	beq.w	8007324 <_dtoa_r+0xbac>
 800684e:	4883      	ldr	r0, [pc, #524]	; (8006a5c <_dtoa_r+0x2e4>)
 8006850:	6018      	str	r0, [r3, #0]
 8006852:	1e43      	subs	r3, r0, #1
 8006854:	9301      	str	r3, [sp, #4]
 8006856:	e7df      	b.n	8006818 <_dtoa_r+0xa0>
 8006858:	ec4b ab10 	vmov	d0, sl, fp
 800685c:	aa10      	add	r2, sp, #64	; 0x40
 800685e:	a911      	add	r1, sp, #68	; 0x44
 8006860:	4620      	mov	r0, r4
 8006862:	f001 f8b9 	bl	80079d8 <__d2b>
 8006866:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800686a:	ee08 0a10 	vmov	s16, r0
 800686e:	2d00      	cmp	r5, #0
 8006870:	f000 8084 	beq.w	800697c <_dtoa_r+0x204>
 8006874:	ee19 3a90 	vmov	r3, s19
 8006878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800687c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006880:	4656      	mov	r6, sl
 8006882:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800688a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800688e:	4b74      	ldr	r3, [pc, #464]	; (8006a60 <_dtoa_r+0x2e8>)
 8006890:	2200      	movs	r2, #0
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	f7f9 fd07 	bl	80002a8 <__aeabi_dsub>
 800689a:	a365      	add	r3, pc, #404	; (adr r3, 8006a30 <_dtoa_r+0x2b8>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f7f9 feba 	bl	8000618 <__aeabi_dmul>
 80068a4:	a364      	add	r3, pc, #400	; (adr r3, 8006a38 <_dtoa_r+0x2c0>)
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	f7f9 fcff 	bl	80002ac <__adddf3>
 80068ae:	4606      	mov	r6, r0
 80068b0:	4628      	mov	r0, r5
 80068b2:	460f      	mov	r7, r1
 80068b4:	f7f9 fe46 	bl	8000544 <__aeabi_i2d>
 80068b8:	a361      	add	r3, pc, #388	; (adr r3, 8006a40 <_dtoa_r+0x2c8>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	f7f9 feab 	bl	8000618 <__aeabi_dmul>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4630      	mov	r0, r6
 80068c8:	4639      	mov	r1, r7
 80068ca:	f7f9 fcef 	bl	80002ac <__adddf3>
 80068ce:	4606      	mov	r6, r0
 80068d0:	460f      	mov	r7, r1
 80068d2:	f7fa f951 	bl	8000b78 <__aeabi_d2iz>
 80068d6:	2200      	movs	r2, #0
 80068d8:	9000      	str	r0, [sp, #0]
 80068da:	2300      	movs	r3, #0
 80068dc:	4630      	mov	r0, r6
 80068de:	4639      	mov	r1, r7
 80068e0:	f7fa f90c 	bl	8000afc <__aeabi_dcmplt>
 80068e4:	b150      	cbz	r0, 80068fc <_dtoa_r+0x184>
 80068e6:	9800      	ldr	r0, [sp, #0]
 80068e8:	f7f9 fe2c 	bl	8000544 <__aeabi_i2d>
 80068ec:	4632      	mov	r2, r6
 80068ee:	463b      	mov	r3, r7
 80068f0:	f7fa f8fa 	bl	8000ae8 <__aeabi_dcmpeq>
 80068f4:	b910      	cbnz	r0, 80068fc <_dtoa_r+0x184>
 80068f6:	9b00      	ldr	r3, [sp, #0]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	9b00      	ldr	r3, [sp, #0]
 80068fe:	2b16      	cmp	r3, #22
 8006900:	d85a      	bhi.n	80069b8 <_dtoa_r+0x240>
 8006902:	9a00      	ldr	r2, [sp, #0]
 8006904:	4b57      	ldr	r3, [pc, #348]	; (8006a64 <_dtoa_r+0x2ec>)
 8006906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	ec51 0b19 	vmov	r0, r1, d9
 8006912:	f7fa f8f3 	bl	8000afc <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	d050      	beq.n	80069bc <_dtoa_r+0x244>
 800691a:	9b00      	ldr	r3, [sp, #0]
 800691c:	3b01      	subs	r3, #1
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	2300      	movs	r3, #0
 8006922:	930b      	str	r3, [sp, #44]	; 0x2c
 8006924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006926:	1b5d      	subs	r5, r3, r5
 8006928:	1e6b      	subs	r3, r5, #1
 800692a:	9305      	str	r3, [sp, #20]
 800692c:	bf45      	ittet	mi
 800692e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006932:	9304      	strmi	r3, [sp, #16]
 8006934:	2300      	movpl	r3, #0
 8006936:	2300      	movmi	r3, #0
 8006938:	bf4c      	ite	mi
 800693a:	9305      	strmi	r3, [sp, #20]
 800693c:	9304      	strpl	r3, [sp, #16]
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	db3d      	blt.n	80069c0 <_dtoa_r+0x248>
 8006944:	9b05      	ldr	r3, [sp, #20]
 8006946:	9a00      	ldr	r2, [sp, #0]
 8006948:	920a      	str	r2, [sp, #40]	; 0x28
 800694a:	4413      	add	r3, r2
 800694c:	9305      	str	r3, [sp, #20]
 800694e:	2300      	movs	r3, #0
 8006950:	9307      	str	r3, [sp, #28]
 8006952:	9b06      	ldr	r3, [sp, #24]
 8006954:	2b09      	cmp	r3, #9
 8006956:	f200 8089 	bhi.w	8006a6c <_dtoa_r+0x2f4>
 800695a:	2b05      	cmp	r3, #5
 800695c:	bfc4      	itt	gt
 800695e:	3b04      	subgt	r3, #4
 8006960:	9306      	strgt	r3, [sp, #24]
 8006962:	9b06      	ldr	r3, [sp, #24]
 8006964:	f1a3 0302 	sub.w	r3, r3, #2
 8006968:	bfcc      	ite	gt
 800696a:	2500      	movgt	r5, #0
 800696c:	2501      	movle	r5, #1
 800696e:	2b03      	cmp	r3, #3
 8006970:	f200 8087 	bhi.w	8006a82 <_dtoa_r+0x30a>
 8006974:	e8df f003 	tbb	[pc, r3]
 8006978:	59383a2d 	.word	0x59383a2d
 800697c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006980:	441d      	add	r5, r3
 8006982:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006986:	2b20      	cmp	r3, #32
 8006988:	bfc1      	itttt	gt
 800698a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800698e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006992:	fa0b f303 	lslgt.w	r3, fp, r3
 8006996:	fa26 f000 	lsrgt.w	r0, r6, r0
 800699a:	bfda      	itte	le
 800699c:	f1c3 0320 	rsble	r3, r3, #32
 80069a0:	fa06 f003 	lslle.w	r0, r6, r3
 80069a4:	4318      	orrgt	r0, r3
 80069a6:	f7f9 fdbd 	bl	8000524 <__aeabi_ui2d>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4606      	mov	r6, r0
 80069ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80069b2:	3d01      	subs	r5, #1
 80069b4:	930e      	str	r3, [sp, #56]	; 0x38
 80069b6:	e76a      	b.n	800688e <_dtoa_r+0x116>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e7b2      	b.n	8006922 <_dtoa_r+0x1aa>
 80069bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80069be:	e7b1      	b.n	8006924 <_dtoa_r+0x1ac>
 80069c0:	9b04      	ldr	r3, [sp, #16]
 80069c2:	9a00      	ldr	r2, [sp, #0]
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	9304      	str	r3, [sp, #16]
 80069c8:	4253      	negs	r3, r2
 80069ca:	9307      	str	r3, [sp, #28]
 80069cc:	2300      	movs	r3, #0
 80069ce:	930a      	str	r3, [sp, #40]	; 0x28
 80069d0:	e7bf      	b.n	8006952 <_dtoa_r+0x1da>
 80069d2:	2300      	movs	r3, #0
 80069d4:	9308      	str	r3, [sp, #32]
 80069d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	dc55      	bgt.n	8006a88 <_dtoa_r+0x310>
 80069dc:	2301      	movs	r3, #1
 80069de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069e2:	461a      	mov	r2, r3
 80069e4:	9209      	str	r2, [sp, #36]	; 0x24
 80069e6:	e00c      	b.n	8006a02 <_dtoa_r+0x28a>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e7f3      	b.n	80069d4 <_dtoa_r+0x25c>
 80069ec:	2300      	movs	r3, #0
 80069ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f0:	9308      	str	r3, [sp, #32]
 80069f2:	9b00      	ldr	r3, [sp, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	9302      	str	r3, [sp, #8]
 80069f8:	3301      	adds	r3, #1
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	9303      	str	r3, [sp, #12]
 80069fe:	bfb8      	it	lt
 8006a00:	2301      	movlt	r3, #1
 8006a02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a04:	2200      	movs	r2, #0
 8006a06:	6042      	str	r2, [r0, #4]
 8006a08:	2204      	movs	r2, #4
 8006a0a:	f102 0614 	add.w	r6, r2, #20
 8006a0e:	429e      	cmp	r6, r3
 8006a10:	6841      	ldr	r1, [r0, #4]
 8006a12:	d93d      	bls.n	8006a90 <_dtoa_r+0x318>
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 fcb7 	bl	8007388 <_Balloc>
 8006a1a:	9001      	str	r0, [sp, #4]
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d13b      	bne.n	8006a98 <_dtoa_r+0x320>
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <_dtoa_r+0x2f0>)
 8006a22:	4602      	mov	r2, r0
 8006a24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a28:	e6c0      	b.n	80067ac <_dtoa_r+0x34>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e7df      	b.n	80069ee <_dtoa_r+0x276>
 8006a2e:	bf00      	nop
 8006a30:	636f4361 	.word	0x636f4361
 8006a34:	3fd287a7 	.word	0x3fd287a7
 8006a38:	8b60c8b3 	.word	0x8b60c8b3
 8006a3c:	3fc68a28 	.word	0x3fc68a28
 8006a40:	509f79fb 	.word	0x509f79fb
 8006a44:	3fd34413 	.word	0x3fd34413
 8006a48:	08008b99 	.word	0x08008b99
 8006a4c:	08008bb0 	.word	0x08008bb0
 8006a50:	7ff00000 	.word	0x7ff00000
 8006a54:	08008b95 	.word	0x08008b95
 8006a58:	08008b8c 	.word	0x08008b8c
 8006a5c:	08008b69 	.word	0x08008b69
 8006a60:	3ff80000 	.word	0x3ff80000
 8006a64:	08008ca0 	.word	0x08008ca0
 8006a68:	08008c0b 	.word	0x08008c0b
 8006a6c:	2501      	movs	r5, #1
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9306      	str	r3, [sp, #24]
 8006a72:	9508      	str	r5, [sp, #32]
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2312      	movs	r3, #18
 8006a80:	e7b0      	b.n	80069e4 <_dtoa_r+0x26c>
 8006a82:	2301      	movs	r3, #1
 8006a84:	9308      	str	r3, [sp, #32]
 8006a86:	e7f5      	b.n	8006a74 <_dtoa_r+0x2fc>
 8006a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a8e:	e7b8      	b.n	8006a02 <_dtoa_r+0x28a>
 8006a90:	3101      	adds	r1, #1
 8006a92:	6041      	str	r1, [r0, #4]
 8006a94:	0052      	lsls	r2, r2, #1
 8006a96:	e7b8      	b.n	8006a0a <_dtoa_r+0x292>
 8006a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a9a:	9a01      	ldr	r2, [sp, #4]
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	2b0e      	cmp	r3, #14
 8006aa2:	f200 809d 	bhi.w	8006be0 <_dtoa_r+0x468>
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	f000 809a 	beq.w	8006be0 <_dtoa_r+0x468>
 8006aac:	9b00      	ldr	r3, [sp, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dd32      	ble.n	8006b18 <_dtoa_r+0x3a0>
 8006ab2:	4ab7      	ldr	r2, [pc, #732]	; (8006d90 <_dtoa_r+0x618>)
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006abc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ac0:	9b00      	ldr	r3, [sp, #0]
 8006ac2:	05d8      	lsls	r0, r3, #23
 8006ac4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ac8:	d516      	bpl.n	8006af8 <_dtoa_r+0x380>
 8006aca:	4bb2      	ldr	r3, [pc, #712]	; (8006d94 <_dtoa_r+0x61c>)
 8006acc:	ec51 0b19 	vmov	r0, r1, d9
 8006ad0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ad4:	f7f9 feca 	bl	800086c <__aeabi_ddiv>
 8006ad8:	f007 070f 	and.w	r7, r7, #15
 8006adc:	4682      	mov	sl, r0
 8006ade:	468b      	mov	fp, r1
 8006ae0:	2503      	movs	r5, #3
 8006ae2:	4eac      	ldr	r6, [pc, #688]	; (8006d94 <_dtoa_r+0x61c>)
 8006ae4:	b957      	cbnz	r7, 8006afc <_dtoa_r+0x384>
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	464b      	mov	r3, r9
 8006aea:	4650      	mov	r0, sl
 8006aec:	4659      	mov	r1, fp
 8006aee:	f7f9 febd 	bl	800086c <__aeabi_ddiv>
 8006af2:	4682      	mov	sl, r0
 8006af4:	468b      	mov	fp, r1
 8006af6:	e028      	b.n	8006b4a <_dtoa_r+0x3d2>
 8006af8:	2502      	movs	r5, #2
 8006afa:	e7f2      	b.n	8006ae2 <_dtoa_r+0x36a>
 8006afc:	07f9      	lsls	r1, r7, #31
 8006afe:	d508      	bpl.n	8006b12 <_dtoa_r+0x39a>
 8006b00:	4640      	mov	r0, r8
 8006b02:	4649      	mov	r1, r9
 8006b04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b08:	f7f9 fd86 	bl	8000618 <__aeabi_dmul>
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4689      	mov	r9, r1
 8006b12:	107f      	asrs	r7, r7, #1
 8006b14:	3608      	adds	r6, #8
 8006b16:	e7e5      	b.n	8006ae4 <_dtoa_r+0x36c>
 8006b18:	f000 809b 	beq.w	8006c52 <_dtoa_r+0x4da>
 8006b1c:	9b00      	ldr	r3, [sp, #0]
 8006b1e:	4f9d      	ldr	r7, [pc, #628]	; (8006d94 <_dtoa_r+0x61c>)
 8006b20:	425e      	negs	r6, r3
 8006b22:	4b9b      	ldr	r3, [pc, #620]	; (8006d90 <_dtoa_r+0x618>)
 8006b24:	f006 020f 	and.w	r2, r6, #15
 8006b28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	ec51 0b19 	vmov	r0, r1, d9
 8006b34:	f7f9 fd70 	bl	8000618 <__aeabi_dmul>
 8006b38:	1136      	asrs	r6, r6, #4
 8006b3a:	4682      	mov	sl, r0
 8006b3c:	468b      	mov	fp, r1
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2502      	movs	r5, #2
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	d17a      	bne.n	8006c3c <_dtoa_r+0x4c4>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1d3      	bne.n	8006af2 <_dtoa_r+0x37a>
 8006b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8082 	beq.w	8006c56 <_dtoa_r+0x4de>
 8006b52:	4b91      	ldr	r3, [pc, #580]	; (8006d98 <_dtoa_r+0x620>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	4650      	mov	r0, sl
 8006b58:	4659      	mov	r1, fp
 8006b5a:	f7f9 ffcf 	bl	8000afc <__aeabi_dcmplt>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d079      	beq.n	8006c56 <_dtoa_r+0x4de>
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d076      	beq.n	8006c56 <_dtoa_r+0x4de>
 8006b68:	9b02      	ldr	r3, [sp, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	dd36      	ble.n	8006bdc <_dtoa_r+0x464>
 8006b6e:	9b00      	ldr	r3, [sp, #0]
 8006b70:	4650      	mov	r0, sl
 8006b72:	4659      	mov	r1, fp
 8006b74:	1e5f      	subs	r7, r3, #1
 8006b76:	2200      	movs	r2, #0
 8006b78:	4b88      	ldr	r3, [pc, #544]	; (8006d9c <_dtoa_r+0x624>)
 8006b7a:	f7f9 fd4d 	bl	8000618 <__aeabi_dmul>
 8006b7e:	9e02      	ldr	r6, [sp, #8]
 8006b80:	4682      	mov	sl, r0
 8006b82:	468b      	mov	fp, r1
 8006b84:	3501      	adds	r5, #1
 8006b86:	4628      	mov	r0, r5
 8006b88:	f7f9 fcdc 	bl	8000544 <__aeabi_i2d>
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	465b      	mov	r3, fp
 8006b90:	f7f9 fd42 	bl	8000618 <__aeabi_dmul>
 8006b94:	4b82      	ldr	r3, [pc, #520]	; (8006da0 <_dtoa_r+0x628>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	f7f9 fb88 	bl	80002ac <__adddf3>
 8006b9c:	46d0      	mov	r8, sl
 8006b9e:	46d9      	mov	r9, fp
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ba6:	2e00      	cmp	r6, #0
 8006ba8:	d158      	bne.n	8006c5c <_dtoa_r+0x4e4>
 8006baa:	4b7e      	ldr	r3, [pc, #504]	; (8006da4 <_dtoa_r+0x62c>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7f9 fb79 	bl	80002a8 <__aeabi_dsub>
 8006bb6:	4652      	mov	r2, sl
 8006bb8:	465b      	mov	r3, fp
 8006bba:	4680      	mov	r8, r0
 8006bbc:	4689      	mov	r9, r1
 8006bbe:	f7f9 ffbb 	bl	8000b38 <__aeabi_dcmpgt>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f040 8295 	bne.w	80070f2 <_dtoa_r+0x97a>
 8006bc8:	4652      	mov	r2, sl
 8006bca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006bce:	4640      	mov	r0, r8
 8006bd0:	4649      	mov	r1, r9
 8006bd2:	f7f9 ff93 	bl	8000afc <__aeabi_dcmplt>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f040 8289 	bne.w	80070ee <_dtoa_r+0x976>
 8006bdc:	ec5b ab19 	vmov	sl, fp, d9
 8006be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f2c0 8148 	blt.w	8006e78 <_dtoa_r+0x700>
 8006be8:	9a00      	ldr	r2, [sp, #0]
 8006bea:	2a0e      	cmp	r2, #14
 8006bec:	f300 8144 	bgt.w	8006e78 <_dtoa_r+0x700>
 8006bf0:	4b67      	ldr	r3, [pc, #412]	; (8006d90 <_dtoa_r+0x618>)
 8006bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f280 80d5 	bge.w	8006dac <_dtoa_r+0x634>
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f300 80d1 	bgt.w	8006dac <_dtoa_r+0x634>
 8006c0a:	f040 826f 	bne.w	80070ec <_dtoa_r+0x974>
 8006c0e:	4b65      	ldr	r3, [pc, #404]	; (8006da4 <_dtoa_r+0x62c>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	f7f9 fcff 	bl	8000618 <__aeabi_dmul>
 8006c1a:	4652      	mov	r2, sl
 8006c1c:	465b      	mov	r3, fp
 8006c1e:	f7f9 ff81 	bl	8000b24 <__aeabi_dcmpge>
 8006c22:	9e03      	ldr	r6, [sp, #12]
 8006c24:	4637      	mov	r7, r6
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f040 8245 	bne.w	80070b6 <_dtoa_r+0x93e>
 8006c2c:	9d01      	ldr	r5, [sp, #4]
 8006c2e:	2331      	movs	r3, #49	; 0x31
 8006c30:	f805 3b01 	strb.w	r3, [r5], #1
 8006c34:	9b00      	ldr	r3, [sp, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	e240      	b.n	80070be <_dtoa_r+0x946>
 8006c3c:	07f2      	lsls	r2, r6, #31
 8006c3e:	d505      	bpl.n	8006c4c <_dtoa_r+0x4d4>
 8006c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c44:	f7f9 fce8 	bl	8000618 <__aeabi_dmul>
 8006c48:	3501      	adds	r5, #1
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	1076      	asrs	r6, r6, #1
 8006c4e:	3708      	adds	r7, #8
 8006c50:	e777      	b.n	8006b42 <_dtoa_r+0x3ca>
 8006c52:	2502      	movs	r5, #2
 8006c54:	e779      	b.n	8006b4a <_dtoa_r+0x3d2>
 8006c56:	9f00      	ldr	r7, [sp, #0]
 8006c58:	9e03      	ldr	r6, [sp, #12]
 8006c5a:	e794      	b.n	8006b86 <_dtoa_r+0x40e>
 8006c5c:	9901      	ldr	r1, [sp, #4]
 8006c5e:	4b4c      	ldr	r3, [pc, #304]	; (8006d90 <_dtoa_r+0x618>)
 8006c60:	4431      	add	r1, r6
 8006c62:	910d      	str	r1, [sp, #52]	; 0x34
 8006c64:	9908      	ldr	r1, [sp, #32]
 8006c66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c6e:	2900      	cmp	r1, #0
 8006c70:	d043      	beq.n	8006cfa <_dtoa_r+0x582>
 8006c72:	494d      	ldr	r1, [pc, #308]	; (8006da8 <_dtoa_r+0x630>)
 8006c74:	2000      	movs	r0, #0
 8006c76:	f7f9 fdf9 	bl	800086c <__aeabi_ddiv>
 8006c7a:	4652      	mov	r2, sl
 8006c7c:	465b      	mov	r3, fp
 8006c7e:	f7f9 fb13 	bl	80002a8 <__aeabi_dsub>
 8006c82:	9d01      	ldr	r5, [sp, #4]
 8006c84:	4682      	mov	sl, r0
 8006c86:	468b      	mov	fp, r1
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	f7f9 ff74 	bl	8000b78 <__aeabi_d2iz>
 8006c90:	4606      	mov	r6, r0
 8006c92:	f7f9 fc57 	bl	8000544 <__aeabi_i2d>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f7f9 fb03 	bl	80002a8 <__aeabi_dsub>
 8006ca2:	3630      	adds	r6, #48	; 0x30
 8006ca4:	f805 6b01 	strb.w	r6, [r5], #1
 8006ca8:	4652      	mov	r2, sl
 8006caa:	465b      	mov	r3, fp
 8006cac:	4680      	mov	r8, r0
 8006cae:	4689      	mov	r9, r1
 8006cb0:	f7f9 ff24 	bl	8000afc <__aeabi_dcmplt>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d163      	bne.n	8006d80 <_dtoa_r+0x608>
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	4936      	ldr	r1, [pc, #216]	; (8006d98 <_dtoa_r+0x620>)
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f7f9 faf2 	bl	80002a8 <__aeabi_dsub>
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	465b      	mov	r3, fp
 8006cc8:	f7f9 ff18 	bl	8000afc <__aeabi_dcmplt>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	f040 80b5 	bne.w	8006e3c <_dtoa_r+0x6c4>
 8006cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cd4:	429d      	cmp	r5, r3
 8006cd6:	d081      	beq.n	8006bdc <_dtoa_r+0x464>
 8006cd8:	4b30      	ldr	r3, [pc, #192]	; (8006d9c <_dtoa_r+0x624>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4650      	mov	r0, sl
 8006cde:	4659      	mov	r1, fp
 8006ce0:	f7f9 fc9a 	bl	8000618 <__aeabi_dmul>
 8006ce4:	4b2d      	ldr	r3, [pc, #180]	; (8006d9c <_dtoa_r+0x624>)
 8006ce6:	4682      	mov	sl, r0
 8006ce8:	468b      	mov	fp, r1
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f7f9 fc92 	bl	8000618 <__aeabi_dmul>
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	4689      	mov	r9, r1
 8006cf8:	e7c6      	b.n	8006c88 <_dtoa_r+0x510>
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	4659      	mov	r1, fp
 8006cfe:	f7f9 fc8b 	bl	8000618 <__aeabi_dmul>
 8006d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d04:	9d01      	ldr	r5, [sp, #4]
 8006d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d08:	4682      	mov	sl, r0
 8006d0a:	468b      	mov	fp, r1
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	4640      	mov	r0, r8
 8006d10:	f7f9 ff32 	bl	8000b78 <__aeabi_d2iz>
 8006d14:	4606      	mov	r6, r0
 8006d16:	f7f9 fc15 	bl	8000544 <__aeabi_i2d>
 8006d1a:	3630      	adds	r6, #48	; 0x30
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4640      	mov	r0, r8
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 fac0 	bl	80002a8 <__aeabi_dsub>
 8006d28:	f805 6b01 	strb.w	r6, [r5], #1
 8006d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d2e:	429d      	cmp	r5, r3
 8006d30:	4680      	mov	r8, r0
 8006d32:	4689      	mov	r9, r1
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	d124      	bne.n	8006d84 <_dtoa_r+0x60c>
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <_dtoa_r+0x630>)
 8006d3c:	4650      	mov	r0, sl
 8006d3e:	4659      	mov	r1, fp
 8006d40:	f7f9 fab4 	bl	80002ac <__adddf3>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4640      	mov	r0, r8
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	f7f9 fef4 	bl	8000b38 <__aeabi_dcmpgt>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d173      	bne.n	8006e3c <_dtoa_r+0x6c4>
 8006d54:	4652      	mov	r2, sl
 8006d56:	465b      	mov	r3, fp
 8006d58:	4913      	ldr	r1, [pc, #76]	; (8006da8 <_dtoa_r+0x630>)
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f7f9 faa4 	bl	80002a8 <__aeabi_dsub>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4640      	mov	r0, r8
 8006d66:	4649      	mov	r1, r9
 8006d68:	f7f9 fec8 	bl	8000afc <__aeabi_dcmplt>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	f43f af35 	beq.w	8006bdc <_dtoa_r+0x464>
 8006d72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d74:	1e6b      	subs	r3, r5, #1
 8006d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d7c:	2b30      	cmp	r3, #48	; 0x30
 8006d7e:	d0f8      	beq.n	8006d72 <_dtoa_r+0x5fa>
 8006d80:	9700      	str	r7, [sp, #0]
 8006d82:	e049      	b.n	8006e18 <_dtoa_r+0x6a0>
 8006d84:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <_dtoa_r+0x624>)
 8006d86:	f7f9 fc47 	bl	8000618 <__aeabi_dmul>
 8006d8a:	4680      	mov	r8, r0
 8006d8c:	4689      	mov	r9, r1
 8006d8e:	e7bd      	b.n	8006d0c <_dtoa_r+0x594>
 8006d90:	08008ca0 	.word	0x08008ca0
 8006d94:	08008c78 	.word	0x08008c78
 8006d98:	3ff00000 	.word	0x3ff00000
 8006d9c:	40240000 	.word	0x40240000
 8006da0:	401c0000 	.word	0x401c0000
 8006da4:	40140000 	.word	0x40140000
 8006da8:	3fe00000 	.word	0x3fe00000
 8006dac:	9d01      	ldr	r5, [sp, #4]
 8006dae:	4656      	mov	r6, sl
 8006db0:	465f      	mov	r7, fp
 8006db2:	4642      	mov	r2, r8
 8006db4:	464b      	mov	r3, r9
 8006db6:	4630      	mov	r0, r6
 8006db8:	4639      	mov	r1, r7
 8006dba:	f7f9 fd57 	bl	800086c <__aeabi_ddiv>
 8006dbe:	f7f9 fedb 	bl	8000b78 <__aeabi_d2iz>
 8006dc2:	4682      	mov	sl, r0
 8006dc4:	f7f9 fbbe 	bl	8000544 <__aeabi_i2d>
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	f7f9 fc24 	bl	8000618 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ddc:	f7f9 fa64 	bl	80002a8 <__aeabi_dsub>
 8006de0:	f805 6b01 	strb.w	r6, [r5], #1
 8006de4:	9e01      	ldr	r6, [sp, #4]
 8006de6:	9f03      	ldr	r7, [sp, #12]
 8006de8:	1bae      	subs	r6, r5, r6
 8006dea:	42b7      	cmp	r7, r6
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	d135      	bne.n	8006e5e <_dtoa_r+0x6e6>
 8006df2:	f7f9 fa5b 	bl	80002ac <__adddf3>
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	460f      	mov	r7, r1
 8006dfe:	f7f9 fe9b 	bl	8000b38 <__aeabi_dcmpgt>
 8006e02:	b9d0      	cbnz	r0, 8006e3a <_dtoa_r+0x6c2>
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	4630      	mov	r0, r6
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	f7f9 fe6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e10:	b110      	cbz	r0, 8006e18 <_dtoa_r+0x6a0>
 8006e12:	f01a 0f01 	tst.w	sl, #1
 8006e16:	d110      	bne.n	8006e3a <_dtoa_r+0x6c2>
 8006e18:	4620      	mov	r0, r4
 8006e1a:	ee18 1a10 	vmov	r1, s16
 8006e1e:	f000 faf3 	bl	8007408 <_Bfree>
 8006e22:	2300      	movs	r3, #0
 8006e24:	9800      	ldr	r0, [sp, #0]
 8006e26:	702b      	strb	r3, [r5, #0]
 8006e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	6018      	str	r0, [r3, #0]
 8006e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f43f acf1 	beq.w	8006818 <_dtoa_r+0xa0>
 8006e36:	601d      	str	r5, [r3, #0]
 8006e38:	e4ee      	b.n	8006818 <_dtoa_r+0xa0>
 8006e3a:	9f00      	ldr	r7, [sp, #0]
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	461d      	mov	r5, r3
 8006e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e44:	2a39      	cmp	r2, #57	; 0x39
 8006e46:	d106      	bne.n	8006e56 <_dtoa_r+0x6de>
 8006e48:	9a01      	ldr	r2, [sp, #4]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d1f7      	bne.n	8006e3e <_dtoa_r+0x6c6>
 8006e4e:	9901      	ldr	r1, [sp, #4]
 8006e50:	2230      	movs	r2, #48	; 0x30
 8006e52:	3701      	adds	r7, #1
 8006e54:	700a      	strb	r2, [r1, #0]
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	3201      	adds	r2, #1
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e790      	b.n	8006d80 <_dtoa_r+0x608>
 8006e5e:	4ba6      	ldr	r3, [pc, #664]	; (80070f8 <_dtoa_r+0x980>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	f7f9 fbd9 	bl	8000618 <__aeabi_dmul>
 8006e66:	2200      	movs	r2, #0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	f7f9 fe3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d09d      	beq.n	8006db2 <_dtoa_r+0x63a>
 8006e76:	e7cf      	b.n	8006e18 <_dtoa_r+0x6a0>
 8006e78:	9a08      	ldr	r2, [sp, #32]
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	f000 80d7 	beq.w	800702e <_dtoa_r+0x8b6>
 8006e80:	9a06      	ldr	r2, [sp, #24]
 8006e82:	2a01      	cmp	r2, #1
 8006e84:	f300 80ba 	bgt.w	8006ffc <_dtoa_r+0x884>
 8006e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e8a:	2a00      	cmp	r2, #0
 8006e8c:	f000 80b2 	beq.w	8006ff4 <_dtoa_r+0x87c>
 8006e90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e94:	9e07      	ldr	r6, [sp, #28]
 8006e96:	9d04      	ldr	r5, [sp, #16]
 8006e98:	9a04      	ldr	r2, [sp, #16]
 8006e9a:	441a      	add	r2, r3
 8006e9c:	9204      	str	r2, [sp, #16]
 8006e9e:	9a05      	ldr	r2, [sp, #20]
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	441a      	add	r2, r3
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	9205      	str	r2, [sp, #20]
 8006ea8:	f000 fb66 	bl	8007578 <__i2b>
 8006eac:	4607      	mov	r7, r0
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	dd0c      	ble.n	8006ecc <_dtoa_r+0x754>
 8006eb2:	9b05      	ldr	r3, [sp, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dd09      	ble.n	8006ecc <_dtoa_r+0x754>
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	9a04      	ldr	r2, [sp, #16]
 8006ebc:	bfa8      	it	ge
 8006ebe:	462b      	movge	r3, r5
 8006ec0:	1ad2      	subs	r2, r2, r3
 8006ec2:	9204      	str	r2, [sp, #16]
 8006ec4:	9a05      	ldr	r2, [sp, #20]
 8006ec6:	1aed      	subs	r5, r5, r3
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	b31b      	cbz	r3, 8006f18 <_dtoa_r+0x7a0>
 8006ed0:	9b08      	ldr	r3, [sp, #32]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80af 	beq.w	8007036 <_dtoa_r+0x8be>
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	dd13      	ble.n	8006f04 <_dtoa_r+0x78c>
 8006edc:	4639      	mov	r1, r7
 8006ede:	4632      	mov	r2, r6
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 fc09 	bl	80076f8 <__pow5mult>
 8006ee6:	ee18 2a10 	vmov	r2, s16
 8006eea:	4601      	mov	r1, r0
 8006eec:	4607      	mov	r7, r0
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 fb58 	bl	80075a4 <__multiply>
 8006ef4:	ee18 1a10 	vmov	r1, s16
 8006ef8:	4680      	mov	r8, r0
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 fa84 	bl	8007408 <_Bfree>
 8006f00:	ee08 8a10 	vmov	s16, r8
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	1b9a      	subs	r2, r3, r6
 8006f08:	d006      	beq.n	8006f18 <_dtoa_r+0x7a0>
 8006f0a:	ee18 1a10 	vmov	r1, s16
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fbf2 	bl	80076f8 <__pow5mult>
 8006f14:	ee08 0a10 	vmov	s16, r0
 8006f18:	2101      	movs	r1, #1
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 fb2c 	bl	8007578 <__i2b>
 8006f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	4606      	mov	r6, r0
 8006f26:	f340 8088 	ble.w	800703a <_dtoa_r+0x8c2>
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4601      	mov	r1, r0
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 fbe2 	bl	80076f8 <__pow5mult>
 8006f34:	9b06      	ldr	r3, [sp, #24]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	4606      	mov	r6, r0
 8006f3a:	f340 8081 	ble.w	8007040 <_dtoa_r+0x8c8>
 8006f3e:	f04f 0800 	mov.w	r8, #0
 8006f42:	6933      	ldr	r3, [r6, #16]
 8006f44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f48:	6918      	ldr	r0, [r3, #16]
 8006f4a:	f000 fac5 	bl	80074d8 <__hi0bits>
 8006f4e:	f1c0 0020 	rsb	r0, r0, #32
 8006f52:	9b05      	ldr	r3, [sp, #20]
 8006f54:	4418      	add	r0, r3
 8006f56:	f010 001f 	ands.w	r0, r0, #31
 8006f5a:	f000 8092 	beq.w	8007082 <_dtoa_r+0x90a>
 8006f5e:	f1c0 0320 	rsb	r3, r0, #32
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	f340 808a 	ble.w	800707c <_dtoa_r+0x904>
 8006f68:	f1c0 001c 	rsb	r0, r0, #28
 8006f6c:	9b04      	ldr	r3, [sp, #16]
 8006f6e:	4403      	add	r3, r0
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	9b05      	ldr	r3, [sp, #20]
 8006f74:	4403      	add	r3, r0
 8006f76:	4405      	add	r5, r0
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dd07      	ble.n	8006f90 <_dtoa_r+0x818>
 8006f80:	ee18 1a10 	vmov	r1, s16
 8006f84:	461a      	mov	r2, r3
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 fc10 	bl	80077ac <__lshift>
 8006f8c:	ee08 0a10 	vmov	s16, r0
 8006f90:	9b05      	ldr	r3, [sp, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	dd05      	ble.n	8006fa2 <_dtoa_r+0x82a>
 8006f96:	4631      	mov	r1, r6
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 fc06 	bl	80077ac <__lshift>
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d06e      	beq.n	8007086 <_dtoa_r+0x90e>
 8006fa8:	ee18 0a10 	vmov	r0, s16
 8006fac:	4631      	mov	r1, r6
 8006fae:	f000 fc6d 	bl	800788c <__mcmp>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	da67      	bge.n	8007086 <_dtoa_r+0x90e>
 8006fb6:	9b00      	ldr	r3, [sp, #0]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	ee18 1a10 	vmov	r1, s16
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 fa41 	bl	800744c <__multadd>
 8006fca:	9b08      	ldr	r3, [sp, #32]
 8006fcc:	ee08 0a10 	vmov	s16, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 81b1 	beq.w	8007338 <_dtoa_r+0xbc0>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4639      	mov	r1, r7
 8006fda:	220a      	movs	r2, #10
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fa35 	bl	800744c <__multadd>
 8006fe2:	9b02      	ldr	r3, [sp, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	f300 808e 	bgt.w	8007108 <_dtoa_r+0x990>
 8006fec:	9b06      	ldr	r3, [sp, #24]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	dc51      	bgt.n	8007096 <_dtoa_r+0x91e>
 8006ff2:	e089      	b.n	8007108 <_dtoa_r+0x990>
 8006ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ffa:	e74b      	b.n	8006e94 <_dtoa_r+0x71c>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	1e5e      	subs	r6, r3, #1
 8007000:	9b07      	ldr	r3, [sp, #28]
 8007002:	42b3      	cmp	r3, r6
 8007004:	bfbf      	itttt	lt
 8007006:	9b07      	ldrlt	r3, [sp, #28]
 8007008:	9607      	strlt	r6, [sp, #28]
 800700a:	1af2      	sublt	r2, r6, r3
 800700c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800700e:	bfb6      	itet	lt
 8007010:	189b      	addlt	r3, r3, r2
 8007012:	1b9e      	subge	r6, r3, r6
 8007014:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007016:	9b03      	ldr	r3, [sp, #12]
 8007018:	bfb8      	it	lt
 800701a:	2600      	movlt	r6, #0
 800701c:	2b00      	cmp	r3, #0
 800701e:	bfb7      	itett	lt
 8007020:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007024:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007028:	1a9d      	sublt	r5, r3, r2
 800702a:	2300      	movlt	r3, #0
 800702c:	e734      	b.n	8006e98 <_dtoa_r+0x720>
 800702e:	9e07      	ldr	r6, [sp, #28]
 8007030:	9d04      	ldr	r5, [sp, #16]
 8007032:	9f08      	ldr	r7, [sp, #32]
 8007034:	e73b      	b.n	8006eae <_dtoa_r+0x736>
 8007036:	9a07      	ldr	r2, [sp, #28]
 8007038:	e767      	b.n	8006f0a <_dtoa_r+0x792>
 800703a:	9b06      	ldr	r3, [sp, #24]
 800703c:	2b01      	cmp	r3, #1
 800703e:	dc18      	bgt.n	8007072 <_dtoa_r+0x8fa>
 8007040:	f1ba 0f00 	cmp.w	sl, #0
 8007044:	d115      	bne.n	8007072 <_dtoa_r+0x8fa>
 8007046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800704a:	b993      	cbnz	r3, 8007072 <_dtoa_r+0x8fa>
 800704c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007050:	0d1b      	lsrs	r3, r3, #20
 8007052:	051b      	lsls	r3, r3, #20
 8007054:	b183      	cbz	r3, 8007078 <_dtoa_r+0x900>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	3301      	adds	r3, #1
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	9b05      	ldr	r3, [sp, #20]
 800705e:	3301      	adds	r3, #1
 8007060:	9305      	str	r3, [sp, #20]
 8007062:	f04f 0801 	mov.w	r8, #1
 8007066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007068:	2b00      	cmp	r3, #0
 800706a:	f47f af6a 	bne.w	8006f42 <_dtoa_r+0x7ca>
 800706e:	2001      	movs	r0, #1
 8007070:	e76f      	b.n	8006f52 <_dtoa_r+0x7da>
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	e7f6      	b.n	8007066 <_dtoa_r+0x8ee>
 8007078:	4698      	mov	r8, r3
 800707a:	e7f4      	b.n	8007066 <_dtoa_r+0x8ee>
 800707c:	f43f af7d 	beq.w	8006f7a <_dtoa_r+0x802>
 8007080:	4618      	mov	r0, r3
 8007082:	301c      	adds	r0, #28
 8007084:	e772      	b.n	8006f6c <_dtoa_r+0x7f4>
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	dc37      	bgt.n	80070fc <_dtoa_r+0x984>
 800708c:	9b06      	ldr	r3, [sp, #24]
 800708e:	2b02      	cmp	r3, #2
 8007090:	dd34      	ble.n	80070fc <_dtoa_r+0x984>
 8007092:	9b03      	ldr	r3, [sp, #12]
 8007094:	9302      	str	r3, [sp, #8]
 8007096:	9b02      	ldr	r3, [sp, #8]
 8007098:	b96b      	cbnz	r3, 80070b6 <_dtoa_r+0x93e>
 800709a:	4631      	mov	r1, r6
 800709c:	2205      	movs	r2, #5
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 f9d4 	bl	800744c <__multadd>
 80070a4:	4601      	mov	r1, r0
 80070a6:	4606      	mov	r6, r0
 80070a8:	ee18 0a10 	vmov	r0, s16
 80070ac:	f000 fbee 	bl	800788c <__mcmp>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f73f adbb 	bgt.w	8006c2c <_dtoa_r+0x4b4>
 80070b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b8:	9d01      	ldr	r5, [sp, #4]
 80070ba:	43db      	mvns	r3, r3
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	f04f 0800 	mov.w	r8, #0
 80070c2:	4631      	mov	r1, r6
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 f99f 	bl	8007408 <_Bfree>
 80070ca:	2f00      	cmp	r7, #0
 80070cc:	f43f aea4 	beq.w	8006e18 <_dtoa_r+0x6a0>
 80070d0:	f1b8 0f00 	cmp.w	r8, #0
 80070d4:	d005      	beq.n	80070e2 <_dtoa_r+0x96a>
 80070d6:	45b8      	cmp	r8, r7
 80070d8:	d003      	beq.n	80070e2 <_dtoa_r+0x96a>
 80070da:	4641      	mov	r1, r8
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 f993 	bl	8007408 <_Bfree>
 80070e2:	4639      	mov	r1, r7
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 f98f 	bl	8007408 <_Bfree>
 80070ea:	e695      	b.n	8006e18 <_dtoa_r+0x6a0>
 80070ec:	2600      	movs	r6, #0
 80070ee:	4637      	mov	r7, r6
 80070f0:	e7e1      	b.n	80070b6 <_dtoa_r+0x93e>
 80070f2:	9700      	str	r7, [sp, #0]
 80070f4:	4637      	mov	r7, r6
 80070f6:	e599      	b.n	8006c2c <_dtoa_r+0x4b4>
 80070f8:	40240000 	.word	0x40240000
 80070fc:	9b08      	ldr	r3, [sp, #32]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80ca 	beq.w	8007298 <_dtoa_r+0xb20>
 8007104:	9b03      	ldr	r3, [sp, #12]
 8007106:	9302      	str	r3, [sp, #8]
 8007108:	2d00      	cmp	r5, #0
 800710a:	dd05      	ble.n	8007118 <_dtoa_r+0x9a0>
 800710c:	4639      	mov	r1, r7
 800710e:	462a      	mov	r2, r5
 8007110:	4620      	mov	r0, r4
 8007112:	f000 fb4b 	bl	80077ac <__lshift>
 8007116:	4607      	mov	r7, r0
 8007118:	f1b8 0f00 	cmp.w	r8, #0
 800711c:	d05b      	beq.n	80071d6 <_dtoa_r+0xa5e>
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4620      	mov	r0, r4
 8007122:	f000 f931 	bl	8007388 <_Balloc>
 8007126:	4605      	mov	r5, r0
 8007128:	b928      	cbnz	r0, 8007136 <_dtoa_r+0x9be>
 800712a:	4b87      	ldr	r3, [pc, #540]	; (8007348 <_dtoa_r+0xbd0>)
 800712c:	4602      	mov	r2, r0
 800712e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007132:	f7ff bb3b 	b.w	80067ac <_dtoa_r+0x34>
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	3202      	adds	r2, #2
 800713a:	0092      	lsls	r2, r2, #2
 800713c:	f107 010c 	add.w	r1, r7, #12
 8007140:	300c      	adds	r0, #12
 8007142:	f000 f913 	bl	800736c <memcpy>
 8007146:	2201      	movs	r2, #1
 8007148:	4629      	mov	r1, r5
 800714a:	4620      	mov	r0, r4
 800714c:	f000 fb2e 	bl	80077ac <__lshift>
 8007150:	9b01      	ldr	r3, [sp, #4]
 8007152:	f103 0901 	add.w	r9, r3, #1
 8007156:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800715a:	4413      	add	r3, r2
 800715c:	9305      	str	r3, [sp, #20]
 800715e:	f00a 0301 	and.w	r3, sl, #1
 8007162:	46b8      	mov	r8, r7
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	4607      	mov	r7, r0
 8007168:	4631      	mov	r1, r6
 800716a:	ee18 0a10 	vmov	r0, s16
 800716e:	f7ff fa75 	bl	800665c <quorem>
 8007172:	4641      	mov	r1, r8
 8007174:	9002      	str	r0, [sp, #8]
 8007176:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800717a:	ee18 0a10 	vmov	r0, s16
 800717e:	f000 fb85 	bl	800788c <__mcmp>
 8007182:	463a      	mov	r2, r7
 8007184:	9003      	str	r0, [sp, #12]
 8007186:	4631      	mov	r1, r6
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fb9b 	bl	80078c4 <__mdiff>
 800718e:	68c2      	ldr	r2, [r0, #12]
 8007190:	f109 3bff 	add.w	fp, r9, #4294967295
 8007194:	4605      	mov	r5, r0
 8007196:	bb02      	cbnz	r2, 80071da <_dtoa_r+0xa62>
 8007198:	4601      	mov	r1, r0
 800719a:	ee18 0a10 	vmov	r0, s16
 800719e:	f000 fb75 	bl	800788c <__mcmp>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4629      	mov	r1, r5
 80071a6:	4620      	mov	r0, r4
 80071a8:	9207      	str	r2, [sp, #28]
 80071aa:	f000 f92d 	bl	8007408 <_Bfree>
 80071ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80071b2:	ea43 0102 	orr.w	r1, r3, r2
 80071b6:	9b04      	ldr	r3, [sp, #16]
 80071b8:	430b      	orrs	r3, r1
 80071ba:	464d      	mov	r5, r9
 80071bc:	d10f      	bne.n	80071de <_dtoa_r+0xa66>
 80071be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071c2:	d02a      	beq.n	800721a <_dtoa_r+0xaa2>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dd02      	ble.n	80071d0 <_dtoa_r+0xa58>
 80071ca:	9b02      	ldr	r3, [sp, #8]
 80071cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80071d0:	f88b a000 	strb.w	sl, [fp]
 80071d4:	e775      	b.n	80070c2 <_dtoa_r+0x94a>
 80071d6:	4638      	mov	r0, r7
 80071d8:	e7ba      	b.n	8007150 <_dtoa_r+0x9d8>
 80071da:	2201      	movs	r2, #1
 80071dc:	e7e2      	b.n	80071a4 <_dtoa_r+0xa2c>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	db04      	blt.n	80071ee <_dtoa_r+0xa76>
 80071e4:	9906      	ldr	r1, [sp, #24]
 80071e6:	430b      	orrs	r3, r1
 80071e8:	9904      	ldr	r1, [sp, #16]
 80071ea:	430b      	orrs	r3, r1
 80071ec:	d122      	bne.n	8007234 <_dtoa_r+0xabc>
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	ddee      	ble.n	80071d0 <_dtoa_r+0xa58>
 80071f2:	ee18 1a10 	vmov	r1, s16
 80071f6:	2201      	movs	r2, #1
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 fad7 	bl	80077ac <__lshift>
 80071fe:	4631      	mov	r1, r6
 8007200:	ee08 0a10 	vmov	s16, r0
 8007204:	f000 fb42 	bl	800788c <__mcmp>
 8007208:	2800      	cmp	r0, #0
 800720a:	dc03      	bgt.n	8007214 <_dtoa_r+0xa9c>
 800720c:	d1e0      	bne.n	80071d0 <_dtoa_r+0xa58>
 800720e:	f01a 0f01 	tst.w	sl, #1
 8007212:	d0dd      	beq.n	80071d0 <_dtoa_r+0xa58>
 8007214:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007218:	d1d7      	bne.n	80071ca <_dtoa_r+0xa52>
 800721a:	2339      	movs	r3, #57	; 0x39
 800721c:	f88b 3000 	strb.w	r3, [fp]
 8007220:	462b      	mov	r3, r5
 8007222:	461d      	mov	r5, r3
 8007224:	3b01      	subs	r3, #1
 8007226:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800722a:	2a39      	cmp	r2, #57	; 0x39
 800722c:	d071      	beq.n	8007312 <_dtoa_r+0xb9a>
 800722e:	3201      	adds	r2, #1
 8007230:	701a      	strb	r2, [r3, #0]
 8007232:	e746      	b.n	80070c2 <_dtoa_r+0x94a>
 8007234:	2a00      	cmp	r2, #0
 8007236:	dd07      	ble.n	8007248 <_dtoa_r+0xad0>
 8007238:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800723c:	d0ed      	beq.n	800721a <_dtoa_r+0xaa2>
 800723e:	f10a 0301 	add.w	r3, sl, #1
 8007242:	f88b 3000 	strb.w	r3, [fp]
 8007246:	e73c      	b.n	80070c2 <_dtoa_r+0x94a>
 8007248:	9b05      	ldr	r3, [sp, #20]
 800724a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800724e:	4599      	cmp	r9, r3
 8007250:	d047      	beq.n	80072e2 <_dtoa_r+0xb6a>
 8007252:	ee18 1a10 	vmov	r1, s16
 8007256:	2300      	movs	r3, #0
 8007258:	220a      	movs	r2, #10
 800725a:	4620      	mov	r0, r4
 800725c:	f000 f8f6 	bl	800744c <__multadd>
 8007260:	45b8      	cmp	r8, r7
 8007262:	ee08 0a10 	vmov	s16, r0
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	f04f 020a 	mov.w	r2, #10
 800726e:	4641      	mov	r1, r8
 8007270:	4620      	mov	r0, r4
 8007272:	d106      	bne.n	8007282 <_dtoa_r+0xb0a>
 8007274:	f000 f8ea 	bl	800744c <__multadd>
 8007278:	4680      	mov	r8, r0
 800727a:	4607      	mov	r7, r0
 800727c:	f109 0901 	add.w	r9, r9, #1
 8007280:	e772      	b.n	8007168 <_dtoa_r+0x9f0>
 8007282:	f000 f8e3 	bl	800744c <__multadd>
 8007286:	4639      	mov	r1, r7
 8007288:	4680      	mov	r8, r0
 800728a:	2300      	movs	r3, #0
 800728c:	220a      	movs	r2, #10
 800728e:	4620      	mov	r0, r4
 8007290:	f000 f8dc 	bl	800744c <__multadd>
 8007294:	4607      	mov	r7, r0
 8007296:	e7f1      	b.n	800727c <_dtoa_r+0xb04>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	9302      	str	r3, [sp, #8]
 800729c:	9d01      	ldr	r5, [sp, #4]
 800729e:	ee18 0a10 	vmov	r0, s16
 80072a2:	4631      	mov	r1, r6
 80072a4:	f7ff f9da 	bl	800665c <quorem>
 80072a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072ac:	9b01      	ldr	r3, [sp, #4]
 80072ae:	f805 ab01 	strb.w	sl, [r5], #1
 80072b2:	1aea      	subs	r2, r5, r3
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	4293      	cmp	r3, r2
 80072b8:	dd09      	ble.n	80072ce <_dtoa_r+0xb56>
 80072ba:	ee18 1a10 	vmov	r1, s16
 80072be:	2300      	movs	r3, #0
 80072c0:	220a      	movs	r2, #10
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 f8c2 	bl	800744c <__multadd>
 80072c8:	ee08 0a10 	vmov	s16, r0
 80072cc:	e7e7      	b.n	800729e <_dtoa_r+0xb26>
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfc8      	it	gt
 80072d4:	461d      	movgt	r5, r3
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	bfd8      	it	le
 80072da:	2501      	movle	r5, #1
 80072dc:	441d      	add	r5, r3
 80072de:	f04f 0800 	mov.w	r8, #0
 80072e2:	ee18 1a10 	vmov	r1, s16
 80072e6:	2201      	movs	r2, #1
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 fa5f 	bl	80077ac <__lshift>
 80072ee:	4631      	mov	r1, r6
 80072f0:	ee08 0a10 	vmov	s16, r0
 80072f4:	f000 faca 	bl	800788c <__mcmp>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	dc91      	bgt.n	8007220 <_dtoa_r+0xaa8>
 80072fc:	d102      	bne.n	8007304 <_dtoa_r+0xb8c>
 80072fe:	f01a 0f01 	tst.w	sl, #1
 8007302:	d18d      	bne.n	8007220 <_dtoa_r+0xaa8>
 8007304:	462b      	mov	r3, r5
 8007306:	461d      	mov	r5, r3
 8007308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800730c:	2a30      	cmp	r2, #48	; 0x30
 800730e:	d0fa      	beq.n	8007306 <_dtoa_r+0xb8e>
 8007310:	e6d7      	b.n	80070c2 <_dtoa_r+0x94a>
 8007312:	9a01      	ldr	r2, [sp, #4]
 8007314:	429a      	cmp	r2, r3
 8007316:	d184      	bne.n	8007222 <_dtoa_r+0xaaa>
 8007318:	9b00      	ldr	r3, [sp, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	2331      	movs	r3, #49	; 0x31
 8007320:	7013      	strb	r3, [r2, #0]
 8007322:	e6ce      	b.n	80070c2 <_dtoa_r+0x94a>
 8007324:	4b09      	ldr	r3, [pc, #36]	; (800734c <_dtoa_r+0xbd4>)
 8007326:	f7ff ba95 	b.w	8006854 <_dtoa_r+0xdc>
 800732a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800732c:	2b00      	cmp	r3, #0
 800732e:	f47f aa6e 	bne.w	800680e <_dtoa_r+0x96>
 8007332:	4b07      	ldr	r3, [pc, #28]	; (8007350 <_dtoa_r+0xbd8>)
 8007334:	f7ff ba8e 	b.w	8006854 <_dtoa_r+0xdc>
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	dcae      	bgt.n	800729c <_dtoa_r+0xb24>
 800733e:	9b06      	ldr	r3, [sp, #24]
 8007340:	2b02      	cmp	r3, #2
 8007342:	f73f aea8 	bgt.w	8007096 <_dtoa_r+0x91e>
 8007346:	e7a9      	b.n	800729c <_dtoa_r+0xb24>
 8007348:	08008c0b 	.word	0x08008c0b
 800734c:	08008b68 	.word	0x08008b68
 8007350:	08008b8c 	.word	0x08008b8c

08007354 <_localeconv_r>:
 8007354:	4800      	ldr	r0, [pc, #0]	; (8007358 <_localeconv_r+0x4>)
 8007356:	4770      	bx	lr
 8007358:	20000160 	.word	0x20000160

0800735c <malloc>:
 800735c:	4b02      	ldr	r3, [pc, #8]	; (8007368 <malloc+0xc>)
 800735e:	4601      	mov	r1, r0
 8007360:	6818      	ldr	r0, [r3, #0]
 8007362:	f000 bc17 	b.w	8007b94 <_malloc_r>
 8007366:	bf00      	nop
 8007368:	2000000c 	.word	0x2000000c

0800736c <memcpy>:
 800736c:	440a      	add	r2, r1
 800736e:	4291      	cmp	r1, r2
 8007370:	f100 33ff 	add.w	r3, r0, #4294967295
 8007374:	d100      	bne.n	8007378 <memcpy+0xc>
 8007376:	4770      	bx	lr
 8007378:	b510      	push	{r4, lr}
 800737a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800737e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007382:	4291      	cmp	r1, r2
 8007384:	d1f9      	bne.n	800737a <memcpy+0xe>
 8007386:	bd10      	pop	{r4, pc}

08007388 <_Balloc>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800738c:	4604      	mov	r4, r0
 800738e:	460d      	mov	r5, r1
 8007390:	b976      	cbnz	r6, 80073b0 <_Balloc+0x28>
 8007392:	2010      	movs	r0, #16
 8007394:	f7ff ffe2 	bl	800735c <malloc>
 8007398:	4602      	mov	r2, r0
 800739a:	6260      	str	r0, [r4, #36]	; 0x24
 800739c:	b920      	cbnz	r0, 80073a8 <_Balloc+0x20>
 800739e:	4b18      	ldr	r3, [pc, #96]	; (8007400 <_Balloc+0x78>)
 80073a0:	4818      	ldr	r0, [pc, #96]	; (8007404 <_Balloc+0x7c>)
 80073a2:	2166      	movs	r1, #102	; 0x66
 80073a4:	f000 fdd6 	bl	8007f54 <__assert_func>
 80073a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073ac:	6006      	str	r6, [r0, #0]
 80073ae:	60c6      	str	r6, [r0, #12]
 80073b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80073b2:	68f3      	ldr	r3, [r6, #12]
 80073b4:	b183      	cbz	r3, 80073d8 <_Balloc+0x50>
 80073b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073be:	b9b8      	cbnz	r0, 80073f0 <_Balloc+0x68>
 80073c0:	2101      	movs	r1, #1
 80073c2:	fa01 f605 	lsl.w	r6, r1, r5
 80073c6:	1d72      	adds	r2, r6, #5
 80073c8:	0092      	lsls	r2, r2, #2
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fb60 	bl	8007a90 <_calloc_r>
 80073d0:	b160      	cbz	r0, 80073ec <_Balloc+0x64>
 80073d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073d6:	e00e      	b.n	80073f6 <_Balloc+0x6e>
 80073d8:	2221      	movs	r2, #33	; 0x21
 80073da:	2104      	movs	r1, #4
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 fb57 	bl	8007a90 <_calloc_r>
 80073e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073e4:	60f0      	str	r0, [r6, #12]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e4      	bne.n	80073b6 <_Balloc+0x2e>
 80073ec:	2000      	movs	r0, #0
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	6802      	ldr	r2, [r0, #0]
 80073f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073f6:	2300      	movs	r3, #0
 80073f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073fc:	e7f7      	b.n	80073ee <_Balloc+0x66>
 80073fe:	bf00      	nop
 8007400:	08008b99 	.word	0x08008b99
 8007404:	08008c1c 	.word	0x08008c1c

08007408 <_Bfree>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800740c:	4605      	mov	r5, r0
 800740e:	460c      	mov	r4, r1
 8007410:	b976      	cbnz	r6, 8007430 <_Bfree+0x28>
 8007412:	2010      	movs	r0, #16
 8007414:	f7ff ffa2 	bl	800735c <malloc>
 8007418:	4602      	mov	r2, r0
 800741a:	6268      	str	r0, [r5, #36]	; 0x24
 800741c:	b920      	cbnz	r0, 8007428 <_Bfree+0x20>
 800741e:	4b09      	ldr	r3, [pc, #36]	; (8007444 <_Bfree+0x3c>)
 8007420:	4809      	ldr	r0, [pc, #36]	; (8007448 <_Bfree+0x40>)
 8007422:	218a      	movs	r1, #138	; 0x8a
 8007424:	f000 fd96 	bl	8007f54 <__assert_func>
 8007428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800742c:	6006      	str	r6, [r0, #0]
 800742e:	60c6      	str	r6, [r0, #12]
 8007430:	b13c      	cbz	r4, 8007442 <_Bfree+0x3a>
 8007432:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007434:	6862      	ldr	r2, [r4, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800743c:	6021      	str	r1, [r4, #0]
 800743e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	08008b99 	.word	0x08008b99
 8007448:	08008c1c 	.word	0x08008c1c

0800744c <__multadd>:
 800744c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007450:	690d      	ldr	r5, [r1, #16]
 8007452:	4607      	mov	r7, r0
 8007454:	460c      	mov	r4, r1
 8007456:	461e      	mov	r6, r3
 8007458:	f101 0c14 	add.w	ip, r1, #20
 800745c:	2000      	movs	r0, #0
 800745e:	f8dc 3000 	ldr.w	r3, [ip]
 8007462:	b299      	uxth	r1, r3
 8007464:	fb02 6101 	mla	r1, r2, r1, r6
 8007468:	0c1e      	lsrs	r6, r3, #16
 800746a:	0c0b      	lsrs	r3, r1, #16
 800746c:	fb02 3306 	mla	r3, r2, r6, r3
 8007470:	b289      	uxth	r1, r1
 8007472:	3001      	adds	r0, #1
 8007474:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007478:	4285      	cmp	r5, r0
 800747a:	f84c 1b04 	str.w	r1, [ip], #4
 800747e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007482:	dcec      	bgt.n	800745e <__multadd+0x12>
 8007484:	b30e      	cbz	r6, 80074ca <__multadd+0x7e>
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	42ab      	cmp	r3, r5
 800748a:	dc19      	bgt.n	80074c0 <__multadd+0x74>
 800748c:	6861      	ldr	r1, [r4, #4]
 800748e:	4638      	mov	r0, r7
 8007490:	3101      	adds	r1, #1
 8007492:	f7ff ff79 	bl	8007388 <_Balloc>
 8007496:	4680      	mov	r8, r0
 8007498:	b928      	cbnz	r0, 80074a6 <__multadd+0x5a>
 800749a:	4602      	mov	r2, r0
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <__multadd+0x84>)
 800749e:	480d      	ldr	r0, [pc, #52]	; (80074d4 <__multadd+0x88>)
 80074a0:	21b5      	movs	r1, #181	; 0xb5
 80074a2:	f000 fd57 	bl	8007f54 <__assert_func>
 80074a6:	6922      	ldr	r2, [r4, #16]
 80074a8:	3202      	adds	r2, #2
 80074aa:	f104 010c 	add.w	r1, r4, #12
 80074ae:	0092      	lsls	r2, r2, #2
 80074b0:	300c      	adds	r0, #12
 80074b2:	f7ff ff5b 	bl	800736c <memcpy>
 80074b6:	4621      	mov	r1, r4
 80074b8:	4638      	mov	r0, r7
 80074ba:	f7ff ffa5 	bl	8007408 <_Bfree>
 80074be:	4644      	mov	r4, r8
 80074c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074c4:	3501      	adds	r5, #1
 80074c6:	615e      	str	r6, [r3, #20]
 80074c8:	6125      	str	r5, [r4, #16]
 80074ca:	4620      	mov	r0, r4
 80074cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074d0:	08008c0b 	.word	0x08008c0b
 80074d4:	08008c1c 	.word	0x08008c1c

080074d8 <__hi0bits>:
 80074d8:	0c03      	lsrs	r3, r0, #16
 80074da:	041b      	lsls	r3, r3, #16
 80074dc:	b9d3      	cbnz	r3, 8007514 <__hi0bits+0x3c>
 80074de:	0400      	lsls	r0, r0, #16
 80074e0:	2310      	movs	r3, #16
 80074e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074e6:	bf04      	itt	eq
 80074e8:	0200      	lsleq	r0, r0, #8
 80074ea:	3308      	addeq	r3, #8
 80074ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074f0:	bf04      	itt	eq
 80074f2:	0100      	lsleq	r0, r0, #4
 80074f4:	3304      	addeq	r3, #4
 80074f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074fa:	bf04      	itt	eq
 80074fc:	0080      	lsleq	r0, r0, #2
 80074fe:	3302      	addeq	r3, #2
 8007500:	2800      	cmp	r0, #0
 8007502:	db05      	blt.n	8007510 <__hi0bits+0x38>
 8007504:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007508:	f103 0301 	add.w	r3, r3, #1
 800750c:	bf08      	it	eq
 800750e:	2320      	moveq	r3, #32
 8007510:	4618      	mov	r0, r3
 8007512:	4770      	bx	lr
 8007514:	2300      	movs	r3, #0
 8007516:	e7e4      	b.n	80074e2 <__hi0bits+0xa>

08007518 <__lo0bits>:
 8007518:	6803      	ldr	r3, [r0, #0]
 800751a:	f013 0207 	ands.w	r2, r3, #7
 800751e:	4601      	mov	r1, r0
 8007520:	d00b      	beq.n	800753a <__lo0bits+0x22>
 8007522:	07da      	lsls	r2, r3, #31
 8007524:	d423      	bmi.n	800756e <__lo0bits+0x56>
 8007526:	0798      	lsls	r0, r3, #30
 8007528:	bf49      	itett	mi
 800752a:	085b      	lsrmi	r3, r3, #1
 800752c:	089b      	lsrpl	r3, r3, #2
 800752e:	2001      	movmi	r0, #1
 8007530:	600b      	strmi	r3, [r1, #0]
 8007532:	bf5c      	itt	pl
 8007534:	600b      	strpl	r3, [r1, #0]
 8007536:	2002      	movpl	r0, #2
 8007538:	4770      	bx	lr
 800753a:	b298      	uxth	r0, r3
 800753c:	b9a8      	cbnz	r0, 800756a <__lo0bits+0x52>
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	2010      	movs	r0, #16
 8007542:	b2da      	uxtb	r2, r3
 8007544:	b90a      	cbnz	r2, 800754a <__lo0bits+0x32>
 8007546:	3008      	adds	r0, #8
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	071a      	lsls	r2, r3, #28
 800754c:	bf04      	itt	eq
 800754e:	091b      	lsreq	r3, r3, #4
 8007550:	3004      	addeq	r0, #4
 8007552:	079a      	lsls	r2, r3, #30
 8007554:	bf04      	itt	eq
 8007556:	089b      	lsreq	r3, r3, #2
 8007558:	3002      	addeq	r0, #2
 800755a:	07da      	lsls	r2, r3, #31
 800755c:	d403      	bmi.n	8007566 <__lo0bits+0x4e>
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	f100 0001 	add.w	r0, r0, #1
 8007564:	d005      	beq.n	8007572 <__lo0bits+0x5a>
 8007566:	600b      	str	r3, [r1, #0]
 8007568:	4770      	bx	lr
 800756a:	4610      	mov	r0, r2
 800756c:	e7e9      	b.n	8007542 <__lo0bits+0x2a>
 800756e:	2000      	movs	r0, #0
 8007570:	4770      	bx	lr
 8007572:	2020      	movs	r0, #32
 8007574:	4770      	bx	lr
	...

08007578 <__i2b>:
 8007578:	b510      	push	{r4, lr}
 800757a:	460c      	mov	r4, r1
 800757c:	2101      	movs	r1, #1
 800757e:	f7ff ff03 	bl	8007388 <_Balloc>
 8007582:	4602      	mov	r2, r0
 8007584:	b928      	cbnz	r0, 8007592 <__i2b+0x1a>
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <__i2b+0x24>)
 8007588:	4805      	ldr	r0, [pc, #20]	; (80075a0 <__i2b+0x28>)
 800758a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800758e:	f000 fce1 	bl	8007f54 <__assert_func>
 8007592:	2301      	movs	r3, #1
 8007594:	6144      	str	r4, [r0, #20]
 8007596:	6103      	str	r3, [r0, #16]
 8007598:	bd10      	pop	{r4, pc}
 800759a:	bf00      	nop
 800759c:	08008c0b 	.word	0x08008c0b
 80075a0:	08008c1c 	.word	0x08008c1c

080075a4 <__multiply>:
 80075a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a8:	4691      	mov	r9, r2
 80075aa:	690a      	ldr	r2, [r1, #16]
 80075ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	bfb8      	it	lt
 80075b4:	460b      	movlt	r3, r1
 80075b6:	460c      	mov	r4, r1
 80075b8:	bfbc      	itt	lt
 80075ba:	464c      	movlt	r4, r9
 80075bc:	4699      	movlt	r9, r3
 80075be:	6927      	ldr	r7, [r4, #16]
 80075c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075c4:	68a3      	ldr	r3, [r4, #8]
 80075c6:	6861      	ldr	r1, [r4, #4]
 80075c8:	eb07 060a 	add.w	r6, r7, sl
 80075cc:	42b3      	cmp	r3, r6
 80075ce:	b085      	sub	sp, #20
 80075d0:	bfb8      	it	lt
 80075d2:	3101      	addlt	r1, #1
 80075d4:	f7ff fed8 	bl	8007388 <_Balloc>
 80075d8:	b930      	cbnz	r0, 80075e8 <__multiply+0x44>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b44      	ldr	r3, [pc, #272]	; (80076f0 <__multiply+0x14c>)
 80075de:	4845      	ldr	r0, [pc, #276]	; (80076f4 <__multiply+0x150>)
 80075e0:	f240 115d 	movw	r1, #349	; 0x15d
 80075e4:	f000 fcb6 	bl	8007f54 <__assert_func>
 80075e8:	f100 0514 	add.w	r5, r0, #20
 80075ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075f0:	462b      	mov	r3, r5
 80075f2:	2200      	movs	r2, #0
 80075f4:	4543      	cmp	r3, r8
 80075f6:	d321      	bcc.n	800763c <__multiply+0x98>
 80075f8:	f104 0314 	add.w	r3, r4, #20
 80075fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007600:	f109 0314 	add.w	r3, r9, #20
 8007604:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	1b3a      	subs	r2, r7, r4
 800760c:	3a15      	subs	r2, #21
 800760e:	f022 0203 	bic.w	r2, r2, #3
 8007612:	3204      	adds	r2, #4
 8007614:	f104 0115 	add.w	r1, r4, #21
 8007618:	428f      	cmp	r7, r1
 800761a:	bf38      	it	cc
 800761c:	2204      	movcc	r2, #4
 800761e:	9201      	str	r2, [sp, #4]
 8007620:	9a02      	ldr	r2, [sp, #8]
 8007622:	9303      	str	r3, [sp, #12]
 8007624:	429a      	cmp	r2, r3
 8007626:	d80c      	bhi.n	8007642 <__multiply+0x9e>
 8007628:	2e00      	cmp	r6, #0
 800762a:	dd03      	ble.n	8007634 <__multiply+0x90>
 800762c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007630:	2b00      	cmp	r3, #0
 8007632:	d05a      	beq.n	80076ea <__multiply+0x146>
 8007634:	6106      	str	r6, [r0, #16]
 8007636:	b005      	add	sp, #20
 8007638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763c:	f843 2b04 	str.w	r2, [r3], #4
 8007640:	e7d8      	b.n	80075f4 <__multiply+0x50>
 8007642:	f8b3 a000 	ldrh.w	sl, [r3]
 8007646:	f1ba 0f00 	cmp.w	sl, #0
 800764a:	d024      	beq.n	8007696 <__multiply+0xf2>
 800764c:	f104 0e14 	add.w	lr, r4, #20
 8007650:	46a9      	mov	r9, r5
 8007652:	f04f 0c00 	mov.w	ip, #0
 8007656:	f85e 2b04 	ldr.w	r2, [lr], #4
 800765a:	f8d9 1000 	ldr.w	r1, [r9]
 800765e:	fa1f fb82 	uxth.w	fp, r2
 8007662:	b289      	uxth	r1, r1
 8007664:	fb0a 110b 	mla	r1, sl, fp, r1
 8007668:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800766c:	f8d9 2000 	ldr.w	r2, [r9]
 8007670:	4461      	add	r1, ip
 8007672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007676:	fb0a c20b 	mla	r2, sl, fp, ip
 800767a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800767e:	b289      	uxth	r1, r1
 8007680:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007684:	4577      	cmp	r7, lr
 8007686:	f849 1b04 	str.w	r1, [r9], #4
 800768a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800768e:	d8e2      	bhi.n	8007656 <__multiply+0xb2>
 8007690:	9a01      	ldr	r2, [sp, #4]
 8007692:	f845 c002 	str.w	ip, [r5, r2]
 8007696:	9a03      	ldr	r2, [sp, #12]
 8007698:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800769c:	3304      	adds	r3, #4
 800769e:	f1b9 0f00 	cmp.w	r9, #0
 80076a2:	d020      	beq.n	80076e6 <__multiply+0x142>
 80076a4:	6829      	ldr	r1, [r5, #0]
 80076a6:	f104 0c14 	add.w	ip, r4, #20
 80076aa:	46ae      	mov	lr, r5
 80076ac:	f04f 0a00 	mov.w	sl, #0
 80076b0:	f8bc b000 	ldrh.w	fp, [ip]
 80076b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80076b8:	fb09 220b 	mla	r2, r9, fp, r2
 80076bc:	4492      	add	sl, r2
 80076be:	b289      	uxth	r1, r1
 80076c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80076c4:	f84e 1b04 	str.w	r1, [lr], #4
 80076c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80076cc:	f8be 1000 	ldrh.w	r1, [lr]
 80076d0:	0c12      	lsrs	r2, r2, #16
 80076d2:	fb09 1102 	mla	r1, r9, r2, r1
 80076d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80076da:	4567      	cmp	r7, ip
 80076dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076e0:	d8e6      	bhi.n	80076b0 <__multiply+0x10c>
 80076e2:	9a01      	ldr	r2, [sp, #4]
 80076e4:	50a9      	str	r1, [r5, r2]
 80076e6:	3504      	adds	r5, #4
 80076e8:	e79a      	b.n	8007620 <__multiply+0x7c>
 80076ea:	3e01      	subs	r6, #1
 80076ec:	e79c      	b.n	8007628 <__multiply+0x84>
 80076ee:	bf00      	nop
 80076f0:	08008c0b 	.word	0x08008c0b
 80076f4:	08008c1c 	.word	0x08008c1c

080076f8 <__pow5mult>:
 80076f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076fc:	4615      	mov	r5, r2
 80076fe:	f012 0203 	ands.w	r2, r2, #3
 8007702:	4606      	mov	r6, r0
 8007704:	460f      	mov	r7, r1
 8007706:	d007      	beq.n	8007718 <__pow5mult+0x20>
 8007708:	4c25      	ldr	r4, [pc, #148]	; (80077a0 <__pow5mult+0xa8>)
 800770a:	3a01      	subs	r2, #1
 800770c:	2300      	movs	r3, #0
 800770e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007712:	f7ff fe9b 	bl	800744c <__multadd>
 8007716:	4607      	mov	r7, r0
 8007718:	10ad      	asrs	r5, r5, #2
 800771a:	d03d      	beq.n	8007798 <__pow5mult+0xa0>
 800771c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800771e:	b97c      	cbnz	r4, 8007740 <__pow5mult+0x48>
 8007720:	2010      	movs	r0, #16
 8007722:	f7ff fe1b 	bl	800735c <malloc>
 8007726:	4602      	mov	r2, r0
 8007728:	6270      	str	r0, [r6, #36]	; 0x24
 800772a:	b928      	cbnz	r0, 8007738 <__pow5mult+0x40>
 800772c:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <__pow5mult+0xac>)
 800772e:	481e      	ldr	r0, [pc, #120]	; (80077a8 <__pow5mult+0xb0>)
 8007730:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007734:	f000 fc0e 	bl	8007f54 <__assert_func>
 8007738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800773c:	6004      	str	r4, [r0, #0]
 800773e:	60c4      	str	r4, [r0, #12]
 8007740:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007748:	b94c      	cbnz	r4, 800775e <__pow5mult+0x66>
 800774a:	f240 2171 	movw	r1, #625	; 0x271
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff ff12 	bl	8007578 <__i2b>
 8007754:	2300      	movs	r3, #0
 8007756:	f8c8 0008 	str.w	r0, [r8, #8]
 800775a:	4604      	mov	r4, r0
 800775c:	6003      	str	r3, [r0, #0]
 800775e:	f04f 0900 	mov.w	r9, #0
 8007762:	07eb      	lsls	r3, r5, #31
 8007764:	d50a      	bpl.n	800777c <__pow5mult+0x84>
 8007766:	4639      	mov	r1, r7
 8007768:	4622      	mov	r2, r4
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff ff1a 	bl	80075a4 <__multiply>
 8007770:	4639      	mov	r1, r7
 8007772:	4680      	mov	r8, r0
 8007774:	4630      	mov	r0, r6
 8007776:	f7ff fe47 	bl	8007408 <_Bfree>
 800777a:	4647      	mov	r7, r8
 800777c:	106d      	asrs	r5, r5, #1
 800777e:	d00b      	beq.n	8007798 <__pow5mult+0xa0>
 8007780:	6820      	ldr	r0, [r4, #0]
 8007782:	b938      	cbnz	r0, 8007794 <__pow5mult+0x9c>
 8007784:	4622      	mov	r2, r4
 8007786:	4621      	mov	r1, r4
 8007788:	4630      	mov	r0, r6
 800778a:	f7ff ff0b 	bl	80075a4 <__multiply>
 800778e:	6020      	str	r0, [r4, #0]
 8007790:	f8c0 9000 	str.w	r9, [r0]
 8007794:	4604      	mov	r4, r0
 8007796:	e7e4      	b.n	8007762 <__pow5mult+0x6a>
 8007798:	4638      	mov	r0, r7
 800779a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779e:	bf00      	nop
 80077a0:	08008d68 	.word	0x08008d68
 80077a4:	08008b99 	.word	0x08008b99
 80077a8:	08008c1c 	.word	0x08008c1c

080077ac <__lshift>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	460c      	mov	r4, r1
 80077b2:	6849      	ldr	r1, [r1, #4]
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077ba:	68a3      	ldr	r3, [r4, #8]
 80077bc:	4607      	mov	r7, r0
 80077be:	4691      	mov	r9, r2
 80077c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077c4:	f108 0601 	add.w	r6, r8, #1
 80077c8:	42b3      	cmp	r3, r6
 80077ca:	db0b      	blt.n	80077e4 <__lshift+0x38>
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff fddb 	bl	8007388 <_Balloc>
 80077d2:	4605      	mov	r5, r0
 80077d4:	b948      	cbnz	r0, 80077ea <__lshift+0x3e>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b2a      	ldr	r3, [pc, #168]	; (8007884 <__lshift+0xd8>)
 80077da:	482b      	ldr	r0, [pc, #172]	; (8007888 <__lshift+0xdc>)
 80077dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80077e0:	f000 fbb8 	bl	8007f54 <__assert_func>
 80077e4:	3101      	adds	r1, #1
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	e7ee      	b.n	80077c8 <__lshift+0x1c>
 80077ea:	2300      	movs	r3, #0
 80077ec:	f100 0114 	add.w	r1, r0, #20
 80077f0:	f100 0210 	add.w	r2, r0, #16
 80077f4:	4618      	mov	r0, r3
 80077f6:	4553      	cmp	r3, sl
 80077f8:	db37      	blt.n	800786a <__lshift+0xbe>
 80077fa:	6920      	ldr	r0, [r4, #16]
 80077fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007800:	f104 0314 	add.w	r3, r4, #20
 8007804:	f019 091f 	ands.w	r9, r9, #31
 8007808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800780c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007810:	d02f      	beq.n	8007872 <__lshift+0xc6>
 8007812:	f1c9 0e20 	rsb	lr, r9, #32
 8007816:	468a      	mov	sl, r1
 8007818:	f04f 0c00 	mov.w	ip, #0
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	fa02 f209 	lsl.w	r2, r2, r9
 8007822:	ea42 020c 	orr.w	r2, r2, ip
 8007826:	f84a 2b04 	str.w	r2, [sl], #4
 800782a:	f853 2b04 	ldr.w	r2, [r3], #4
 800782e:	4298      	cmp	r0, r3
 8007830:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007834:	d8f2      	bhi.n	800781c <__lshift+0x70>
 8007836:	1b03      	subs	r3, r0, r4
 8007838:	3b15      	subs	r3, #21
 800783a:	f023 0303 	bic.w	r3, r3, #3
 800783e:	3304      	adds	r3, #4
 8007840:	f104 0215 	add.w	r2, r4, #21
 8007844:	4290      	cmp	r0, r2
 8007846:	bf38      	it	cc
 8007848:	2304      	movcc	r3, #4
 800784a:	f841 c003 	str.w	ip, [r1, r3]
 800784e:	f1bc 0f00 	cmp.w	ip, #0
 8007852:	d001      	beq.n	8007858 <__lshift+0xac>
 8007854:	f108 0602 	add.w	r6, r8, #2
 8007858:	3e01      	subs	r6, #1
 800785a:	4638      	mov	r0, r7
 800785c:	612e      	str	r6, [r5, #16]
 800785e:	4621      	mov	r1, r4
 8007860:	f7ff fdd2 	bl	8007408 <_Bfree>
 8007864:	4628      	mov	r0, r5
 8007866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786a:	f842 0f04 	str.w	r0, [r2, #4]!
 800786e:	3301      	adds	r3, #1
 8007870:	e7c1      	b.n	80077f6 <__lshift+0x4a>
 8007872:	3904      	subs	r1, #4
 8007874:	f853 2b04 	ldr.w	r2, [r3], #4
 8007878:	f841 2f04 	str.w	r2, [r1, #4]!
 800787c:	4298      	cmp	r0, r3
 800787e:	d8f9      	bhi.n	8007874 <__lshift+0xc8>
 8007880:	e7ea      	b.n	8007858 <__lshift+0xac>
 8007882:	bf00      	nop
 8007884:	08008c0b 	.word	0x08008c0b
 8007888:	08008c1c 	.word	0x08008c1c

0800788c <__mcmp>:
 800788c:	b530      	push	{r4, r5, lr}
 800788e:	6902      	ldr	r2, [r0, #16]
 8007890:	690c      	ldr	r4, [r1, #16]
 8007892:	1b12      	subs	r2, r2, r4
 8007894:	d10e      	bne.n	80078b4 <__mcmp+0x28>
 8007896:	f100 0314 	add.w	r3, r0, #20
 800789a:	3114      	adds	r1, #20
 800789c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80078a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80078a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80078a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80078ac:	42a5      	cmp	r5, r4
 80078ae:	d003      	beq.n	80078b8 <__mcmp+0x2c>
 80078b0:	d305      	bcc.n	80078be <__mcmp+0x32>
 80078b2:	2201      	movs	r2, #1
 80078b4:	4610      	mov	r0, r2
 80078b6:	bd30      	pop	{r4, r5, pc}
 80078b8:	4283      	cmp	r3, r0
 80078ba:	d3f3      	bcc.n	80078a4 <__mcmp+0x18>
 80078bc:	e7fa      	b.n	80078b4 <__mcmp+0x28>
 80078be:	f04f 32ff 	mov.w	r2, #4294967295
 80078c2:	e7f7      	b.n	80078b4 <__mcmp+0x28>

080078c4 <__mdiff>:
 80078c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	460c      	mov	r4, r1
 80078ca:	4606      	mov	r6, r0
 80078cc:	4611      	mov	r1, r2
 80078ce:	4620      	mov	r0, r4
 80078d0:	4690      	mov	r8, r2
 80078d2:	f7ff ffdb 	bl	800788c <__mcmp>
 80078d6:	1e05      	subs	r5, r0, #0
 80078d8:	d110      	bne.n	80078fc <__mdiff+0x38>
 80078da:	4629      	mov	r1, r5
 80078dc:	4630      	mov	r0, r6
 80078de:	f7ff fd53 	bl	8007388 <_Balloc>
 80078e2:	b930      	cbnz	r0, 80078f2 <__mdiff+0x2e>
 80078e4:	4b3a      	ldr	r3, [pc, #232]	; (80079d0 <__mdiff+0x10c>)
 80078e6:	4602      	mov	r2, r0
 80078e8:	f240 2132 	movw	r1, #562	; 0x232
 80078ec:	4839      	ldr	r0, [pc, #228]	; (80079d4 <__mdiff+0x110>)
 80078ee:	f000 fb31 	bl	8007f54 <__assert_func>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fc:	bfa4      	itt	ge
 80078fe:	4643      	movge	r3, r8
 8007900:	46a0      	movge	r8, r4
 8007902:	4630      	mov	r0, r6
 8007904:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007908:	bfa6      	itte	ge
 800790a:	461c      	movge	r4, r3
 800790c:	2500      	movge	r5, #0
 800790e:	2501      	movlt	r5, #1
 8007910:	f7ff fd3a 	bl	8007388 <_Balloc>
 8007914:	b920      	cbnz	r0, 8007920 <__mdiff+0x5c>
 8007916:	4b2e      	ldr	r3, [pc, #184]	; (80079d0 <__mdiff+0x10c>)
 8007918:	4602      	mov	r2, r0
 800791a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800791e:	e7e5      	b.n	80078ec <__mdiff+0x28>
 8007920:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007924:	6926      	ldr	r6, [r4, #16]
 8007926:	60c5      	str	r5, [r0, #12]
 8007928:	f104 0914 	add.w	r9, r4, #20
 800792c:	f108 0514 	add.w	r5, r8, #20
 8007930:	f100 0e14 	add.w	lr, r0, #20
 8007934:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007938:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800793c:	f108 0210 	add.w	r2, r8, #16
 8007940:	46f2      	mov	sl, lr
 8007942:	2100      	movs	r1, #0
 8007944:	f859 3b04 	ldr.w	r3, [r9], #4
 8007948:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800794c:	fa1f f883 	uxth.w	r8, r3
 8007950:	fa11 f18b 	uxtah	r1, r1, fp
 8007954:	0c1b      	lsrs	r3, r3, #16
 8007956:	eba1 0808 	sub.w	r8, r1, r8
 800795a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800795e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007962:	fa1f f888 	uxth.w	r8, r8
 8007966:	1419      	asrs	r1, r3, #16
 8007968:	454e      	cmp	r6, r9
 800796a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800796e:	f84a 3b04 	str.w	r3, [sl], #4
 8007972:	d8e7      	bhi.n	8007944 <__mdiff+0x80>
 8007974:	1b33      	subs	r3, r6, r4
 8007976:	3b15      	subs	r3, #21
 8007978:	f023 0303 	bic.w	r3, r3, #3
 800797c:	3304      	adds	r3, #4
 800797e:	3415      	adds	r4, #21
 8007980:	42a6      	cmp	r6, r4
 8007982:	bf38      	it	cc
 8007984:	2304      	movcc	r3, #4
 8007986:	441d      	add	r5, r3
 8007988:	4473      	add	r3, lr
 800798a:	469e      	mov	lr, r3
 800798c:	462e      	mov	r6, r5
 800798e:	4566      	cmp	r6, ip
 8007990:	d30e      	bcc.n	80079b0 <__mdiff+0xec>
 8007992:	f10c 0203 	add.w	r2, ip, #3
 8007996:	1b52      	subs	r2, r2, r5
 8007998:	f022 0203 	bic.w	r2, r2, #3
 800799c:	3d03      	subs	r5, #3
 800799e:	45ac      	cmp	ip, r5
 80079a0:	bf38      	it	cc
 80079a2:	2200      	movcc	r2, #0
 80079a4:	441a      	add	r2, r3
 80079a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80079aa:	b17b      	cbz	r3, 80079cc <__mdiff+0x108>
 80079ac:	6107      	str	r7, [r0, #16]
 80079ae:	e7a3      	b.n	80078f8 <__mdiff+0x34>
 80079b0:	f856 8b04 	ldr.w	r8, [r6], #4
 80079b4:	fa11 f288 	uxtah	r2, r1, r8
 80079b8:	1414      	asrs	r4, r2, #16
 80079ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80079be:	b292      	uxth	r2, r2
 80079c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80079c4:	f84e 2b04 	str.w	r2, [lr], #4
 80079c8:	1421      	asrs	r1, r4, #16
 80079ca:	e7e0      	b.n	800798e <__mdiff+0xca>
 80079cc:	3f01      	subs	r7, #1
 80079ce:	e7ea      	b.n	80079a6 <__mdiff+0xe2>
 80079d0:	08008c0b 	.word	0x08008c0b
 80079d4:	08008c1c 	.word	0x08008c1c

080079d8 <__d2b>:
 80079d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	4689      	mov	r9, r1
 80079de:	2101      	movs	r1, #1
 80079e0:	ec57 6b10 	vmov	r6, r7, d0
 80079e4:	4690      	mov	r8, r2
 80079e6:	f7ff fccf 	bl	8007388 <_Balloc>
 80079ea:	4604      	mov	r4, r0
 80079ec:	b930      	cbnz	r0, 80079fc <__d2b+0x24>
 80079ee:	4602      	mov	r2, r0
 80079f0:	4b25      	ldr	r3, [pc, #148]	; (8007a88 <__d2b+0xb0>)
 80079f2:	4826      	ldr	r0, [pc, #152]	; (8007a8c <__d2b+0xb4>)
 80079f4:	f240 310a 	movw	r1, #778	; 0x30a
 80079f8:	f000 faac 	bl	8007f54 <__assert_func>
 80079fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a04:	bb35      	cbnz	r5, 8007a54 <__d2b+0x7c>
 8007a06:	2e00      	cmp	r6, #0
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	d028      	beq.n	8007a5e <__d2b+0x86>
 8007a0c:	4668      	mov	r0, sp
 8007a0e:	9600      	str	r6, [sp, #0]
 8007a10:	f7ff fd82 	bl	8007518 <__lo0bits>
 8007a14:	9900      	ldr	r1, [sp, #0]
 8007a16:	b300      	cbz	r0, 8007a5a <__d2b+0x82>
 8007a18:	9a01      	ldr	r2, [sp, #4]
 8007a1a:	f1c0 0320 	rsb	r3, r0, #32
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	430b      	orrs	r3, r1
 8007a24:	40c2      	lsrs	r2, r0
 8007a26:	6163      	str	r3, [r4, #20]
 8007a28:	9201      	str	r2, [sp, #4]
 8007a2a:	9b01      	ldr	r3, [sp, #4]
 8007a2c:	61a3      	str	r3, [r4, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bf14      	ite	ne
 8007a32:	2202      	movne	r2, #2
 8007a34:	2201      	moveq	r2, #1
 8007a36:	6122      	str	r2, [r4, #16]
 8007a38:	b1d5      	cbz	r5, 8007a70 <__d2b+0x98>
 8007a3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a3e:	4405      	add	r5, r0
 8007a40:	f8c9 5000 	str.w	r5, [r9]
 8007a44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a48:	f8c8 0000 	str.w	r0, [r8]
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	b003      	add	sp, #12
 8007a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a58:	e7d5      	b.n	8007a06 <__d2b+0x2e>
 8007a5a:	6161      	str	r1, [r4, #20]
 8007a5c:	e7e5      	b.n	8007a2a <__d2b+0x52>
 8007a5e:	a801      	add	r0, sp, #4
 8007a60:	f7ff fd5a 	bl	8007518 <__lo0bits>
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	6163      	str	r3, [r4, #20]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	6122      	str	r2, [r4, #16]
 8007a6c:	3020      	adds	r0, #32
 8007a6e:	e7e3      	b.n	8007a38 <__d2b+0x60>
 8007a70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a78:	f8c9 0000 	str.w	r0, [r9]
 8007a7c:	6918      	ldr	r0, [r3, #16]
 8007a7e:	f7ff fd2b 	bl	80074d8 <__hi0bits>
 8007a82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a86:	e7df      	b.n	8007a48 <__d2b+0x70>
 8007a88:	08008c0b 	.word	0x08008c0b
 8007a8c:	08008c1c 	.word	0x08008c1c

08007a90 <_calloc_r>:
 8007a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a92:	fba1 2402 	umull	r2, r4, r1, r2
 8007a96:	b94c      	cbnz	r4, 8007aac <_calloc_r+0x1c>
 8007a98:	4611      	mov	r1, r2
 8007a9a:	9201      	str	r2, [sp, #4]
 8007a9c:	f000 f87a 	bl	8007b94 <_malloc_r>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	b930      	cbnz	r0, 8007ab4 <_calloc_r+0x24>
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	b003      	add	sp, #12
 8007aaa:	bd30      	pop	{r4, r5, pc}
 8007aac:	220c      	movs	r2, #12
 8007aae:	6002      	str	r2, [r0, #0]
 8007ab0:	2500      	movs	r5, #0
 8007ab2:	e7f8      	b.n	8007aa6 <_calloc_r+0x16>
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	f7fe f93f 	bl	8005d38 <memset>
 8007aba:	e7f4      	b.n	8007aa6 <_calloc_r+0x16>

08007abc <_free_r>:
 8007abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	d044      	beq.n	8007b4c <_free_r+0x90>
 8007ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ac6:	9001      	str	r0, [sp, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f1a1 0404 	sub.w	r4, r1, #4
 8007ace:	bfb8      	it	lt
 8007ad0:	18e4      	addlt	r4, r4, r3
 8007ad2:	f000 fa9b 	bl	800800c <__malloc_lock>
 8007ad6:	4a1e      	ldr	r2, [pc, #120]	; (8007b50 <_free_r+0x94>)
 8007ad8:	9801      	ldr	r0, [sp, #4]
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	b933      	cbnz	r3, 8007aec <_free_r+0x30>
 8007ade:	6063      	str	r3, [r4, #4]
 8007ae0:	6014      	str	r4, [r2, #0]
 8007ae2:	b003      	add	sp, #12
 8007ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ae8:	f000 ba96 	b.w	8008018 <__malloc_unlock>
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d908      	bls.n	8007b02 <_free_r+0x46>
 8007af0:	6825      	ldr	r5, [r4, #0]
 8007af2:	1961      	adds	r1, r4, r5
 8007af4:	428b      	cmp	r3, r1
 8007af6:	bf01      	itttt	eq
 8007af8:	6819      	ldreq	r1, [r3, #0]
 8007afa:	685b      	ldreq	r3, [r3, #4]
 8007afc:	1949      	addeq	r1, r1, r5
 8007afe:	6021      	streq	r1, [r4, #0]
 8007b00:	e7ed      	b.n	8007ade <_free_r+0x22>
 8007b02:	461a      	mov	r2, r3
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	b10b      	cbz	r3, 8007b0c <_free_r+0x50>
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	d9fa      	bls.n	8007b02 <_free_r+0x46>
 8007b0c:	6811      	ldr	r1, [r2, #0]
 8007b0e:	1855      	adds	r5, r2, r1
 8007b10:	42a5      	cmp	r5, r4
 8007b12:	d10b      	bne.n	8007b2c <_free_r+0x70>
 8007b14:	6824      	ldr	r4, [r4, #0]
 8007b16:	4421      	add	r1, r4
 8007b18:	1854      	adds	r4, r2, r1
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	6011      	str	r1, [r2, #0]
 8007b1e:	d1e0      	bne.n	8007ae2 <_free_r+0x26>
 8007b20:	681c      	ldr	r4, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	6053      	str	r3, [r2, #4]
 8007b26:	4421      	add	r1, r4
 8007b28:	6011      	str	r1, [r2, #0]
 8007b2a:	e7da      	b.n	8007ae2 <_free_r+0x26>
 8007b2c:	d902      	bls.n	8007b34 <_free_r+0x78>
 8007b2e:	230c      	movs	r3, #12
 8007b30:	6003      	str	r3, [r0, #0]
 8007b32:	e7d6      	b.n	8007ae2 <_free_r+0x26>
 8007b34:	6825      	ldr	r5, [r4, #0]
 8007b36:	1961      	adds	r1, r4, r5
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	bf04      	itt	eq
 8007b3c:	6819      	ldreq	r1, [r3, #0]
 8007b3e:	685b      	ldreq	r3, [r3, #4]
 8007b40:	6063      	str	r3, [r4, #4]
 8007b42:	bf04      	itt	eq
 8007b44:	1949      	addeq	r1, r1, r5
 8007b46:	6021      	streq	r1, [r4, #0]
 8007b48:	6054      	str	r4, [r2, #4]
 8007b4a:	e7ca      	b.n	8007ae2 <_free_r+0x26>
 8007b4c:	b003      	add	sp, #12
 8007b4e:	bd30      	pop	{r4, r5, pc}
 8007b50:	200003c8 	.word	0x200003c8

08007b54 <sbrk_aligned>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	4e0e      	ldr	r6, [pc, #56]	; (8007b90 <sbrk_aligned+0x3c>)
 8007b58:	460c      	mov	r4, r1
 8007b5a:	6831      	ldr	r1, [r6, #0]
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	b911      	cbnz	r1, 8007b66 <sbrk_aligned+0x12>
 8007b60:	f000 f9e8 	bl	8007f34 <_sbrk_r>
 8007b64:	6030      	str	r0, [r6, #0]
 8007b66:	4621      	mov	r1, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f000 f9e3 	bl	8007f34 <_sbrk_r>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	d00a      	beq.n	8007b88 <sbrk_aligned+0x34>
 8007b72:	1cc4      	adds	r4, r0, #3
 8007b74:	f024 0403 	bic.w	r4, r4, #3
 8007b78:	42a0      	cmp	r0, r4
 8007b7a:	d007      	beq.n	8007b8c <sbrk_aligned+0x38>
 8007b7c:	1a21      	subs	r1, r4, r0
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 f9d8 	bl	8007f34 <_sbrk_r>
 8007b84:	3001      	adds	r0, #1
 8007b86:	d101      	bne.n	8007b8c <sbrk_aligned+0x38>
 8007b88:	f04f 34ff 	mov.w	r4, #4294967295
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	200003cc 	.word	0x200003cc

08007b94 <_malloc_r>:
 8007b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b98:	1ccd      	adds	r5, r1, #3
 8007b9a:	f025 0503 	bic.w	r5, r5, #3
 8007b9e:	3508      	adds	r5, #8
 8007ba0:	2d0c      	cmp	r5, #12
 8007ba2:	bf38      	it	cc
 8007ba4:	250c      	movcc	r5, #12
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	4607      	mov	r7, r0
 8007baa:	db01      	blt.n	8007bb0 <_malloc_r+0x1c>
 8007bac:	42a9      	cmp	r1, r5
 8007bae:	d905      	bls.n	8007bbc <_malloc_r+0x28>
 8007bb0:	230c      	movs	r3, #12
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bbc:	4e2e      	ldr	r6, [pc, #184]	; (8007c78 <_malloc_r+0xe4>)
 8007bbe:	f000 fa25 	bl	800800c <__malloc_lock>
 8007bc2:	6833      	ldr	r3, [r6, #0]
 8007bc4:	461c      	mov	r4, r3
 8007bc6:	bb34      	cbnz	r4, 8007c16 <_malloc_r+0x82>
 8007bc8:	4629      	mov	r1, r5
 8007bca:	4638      	mov	r0, r7
 8007bcc:	f7ff ffc2 	bl	8007b54 <sbrk_aligned>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	d14d      	bne.n	8007c72 <_malloc_r+0xde>
 8007bd6:	6834      	ldr	r4, [r6, #0]
 8007bd8:	4626      	mov	r6, r4
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	d140      	bne.n	8007c60 <_malloc_r+0xcc>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	4631      	mov	r1, r6
 8007be2:	4638      	mov	r0, r7
 8007be4:	eb04 0803 	add.w	r8, r4, r3
 8007be8:	f000 f9a4 	bl	8007f34 <_sbrk_r>
 8007bec:	4580      	cmp	r8, r0
 8007bee:	d13a      	bne.n	8007c66 <_malloc_r+0xd2>
 8007bf0:	6821      	ldr	r1, [r4, #0]
 8007bf2:	3503      	adds	r5, #3
 8007bf4:	1a6d      	subs	r5, r5, r1
 8007bf6:	f025 0503 	bic.w	r5, r5, #3
 8007bfa:	3508      	adds	r5, #8
 8007bfc:	2d0c      	cmp	r5, #12
 8007bfe:	bf38      	it	cc
 8007c00:	250c      	movcc	r5, #12
 8007c02:	4629      	mov	r1, r5
 8007c04:	4638      	mov	r0, r7
 8007c06:	f7ff ffa5 	bl	8007b54 <sbrk_aligned>
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d02b      	beq.n	8007c66 <_malloc_r+0xd2>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	442b      	add	r3, r5
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	e00e      	b.n	8007c34 <_malloc_r+0xa0>
 8007c16:	6822      	ldr	r2, [r4, #0]
 8007c18:	1b52      	subs	r2, r2, r5
 8007c1a:	d41e      	bmi.n	8007c5a <_malloc_r+0xc6>
 8007c1c:	2a0b      	cmp	r2, #11
 8007c1e:	d916      	bls.n	8007c4e <_malloc_r+0xba>
 8007c20:	1961      	adds	r1, r4, r5
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	6025      	str	r5, [r4, #0]
 8007c26:	bf18      	it	ne
 8007c28:	6059      	strne	r1, [r3, #4]
 8007c2a:	6863      	ldr	r3, [r4, #4]
 8007c2c:	bf08      	it	eq
 8007c2e:	6031      	streq	r1, [r6, #0]
 8007c30:	5162      	str	r2, [r4, r5]
 8007c32:	604b      	str	r3, [r1, #4]
 8007c34:	4638      	mov	r0, r7
 8007c36:	f104 060b 	add.w	r6, r4, #11
 8007c3a:	f000 f9ed 	bl	8008018 <__malloc_unlock>
 8007c3e:	f026 0607 	bic.w	r6, r6, #7
 8007c42:	1d23      	adds	r3, r4, #4
 8007c44:	1af2      	subs	r2, r6, r3
 8007c46:	d0b6      	beq.n	8007bb6 <_malloc_r+0x22>
 8007c48:	1b9b      	subs	r3, r3, r6
 8007c4a:	50a3      	str	r3, [r4, r2]
 8007c4c:	e7b3      	b.n	8007bb6 <_malloc_r+0x22>
 8007c4e:	6862      	ldr	r2, [r4, #4]
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	bf0c      	ite	eq
 8007c54:	6032      	streq	r2, [r6, #0]
 8007c56:	605a      	strne	r2, [r3, #4]
 8007c58:	e7ec      	b.n	8007c34 <_malloc_r+0xa0>
 8007c5a:	4623      	mov	r3, r4
 8007c5c:	6864      	ldr	r4, [r4, #4]
 8007c5e:	e7b2      	b.n	8007bc6 <_malloc_r+0x32>
 8007c60:	4634      	mov	r4, r6
 8007c62:	6876      	ldr	r6, [r6, #4]
 8007c64:	e7b9      	b.n	8007bda <_malloc_r+0x46>
 8007c66:	230c      	movs	r3, #12
 8007c68:	603b      	str	r3, [r7, #0]
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f000 f9d4 	bl	8008018 <__malloc_unlock>
 8007c70:	e7a1      	b.n	8007bb6 <_malloc_r+0x22>
 8007c72:	6025      	str	r5, [r4, #0]
 8007c74:	e7de      	b.n	8007c34 <_malloc_r+0xa0>
 8007c76:	bf00      	nop
 8007c78:	200003c8 	.word	0x200003c8

08007c7c <__ssputs_r>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	688e      	ldr	r6, [r1, #8]
 8007c82:	429e      	cmp	r6, r3
 8007c84:	4682      	mov	sl, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	4690      	mov	r8, r2
 8007c8a:	461f      	mov	r7, r3
 8007c8c:	d838      	bhi.n	8007d00 <__ssputs_r+0x84>
 8007c8e:	898a      	ldrh	r2, [r1, #12]
 8007c90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c94:	d032      	beq.n	8007cfc <__ssputs_r+0x80>
 8007c96:	6825      	ldr	r5, [r4, #0]
 8007c98:	6909      	ldr	r1, [r1, #16]
 8007c9a:	eba5 0901 	sub.w	r9, r5, r1
 8007c9e:	6965      	ldr	r5, [r4, #20]
 8007ca0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ca8:	3301      	adds	r3, #1
 8007caa:	444b      	add	r3, r9
 8007cac:	106d      	asrs	r5, r5, #1
 8007cae:	429d      	cmp	r5, r3
 8007cb0:	bf38      	it	cc
 8007cb2:	461d      	movcc	r5, r3
 8007cb4:	0553      	lsls	r3, r2, #21
 8007cb6:	d531      	bpl.n	8007d1c <__ssputs_r+0xa0>
 8007cb8:	4629      	mov	r1, r5
 8007cba:	f7ff ff6b 	bl	8007b94 <_malloc_r>
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	b950      	cbnz	r0, 8007cd8 <__ssputs_r+0x5c>
 8007cc2:	230c      	movs	r3, #12
 8007cc4:	f8ca 3000 	str.w	r3, [sl]
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cce:	81a3      	strh	r3, [r4, #12]
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd8:	6921      	ldr	r1, [r4, #16]
 8007cda:	464a      	mov	r2, r9
 8007cdc:	f7ff fb46 	bl	800736c <memcpy>
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cea:	81a3      	strh	r3, [r4, #12]
 8007cec:	6126      	str	r6, [r4, #16]
 8007cee:	6165      	str	r5, [r4, #20]
 8007cf0:	444e      	add	r6, r9
 8007cf2:	eba5 0509 	sub.w	r5, r5, r9
 8007cf6:	6026      	str	r6, [r4, #0]
 8007cf8:	60a5      	str	r5, [r4, #8]
 8007cfa:	463e      	mov	r6, r7
 8007cfc:	42be      	cmp	r6, r7
 8007cfe:	d900      	bls.n	8007d02 <__ssputs_r+0x86>
 8007d00:	463e      	mov	r6, r7
 8007d02:	6820      	ldr	r0, [r4, #0]
 8007d04:	4632      	mov	r2, r6
 8007d06:	4641      	mov	r1, r8
 8007d08:	f000 f966 	bl	8007fd8 <memmove>
 8007d0c:	68a3      	ldr	r3, [r4, #8]
 8007d0e:	1b9b      	subs	r3, r3, r6
 8007d10:	60a3      	str	r3, [r4, #8]
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	4433      	add	r3, r6
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e7db      	b.n	8007cd4 <__ssputs_r+0x58>
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	f000 f981 	bl	8008024 <_realloc_r>
 8007d22:	4606      	mov	r6, r0
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d1e1      	bne.n	8007cec <__ssputs_r+0x70>
 8007d28:	6921      	ldr	r1, [r4, #16]
 8007d2a:	4650      	mov	r0, sl
 8007d2c:	f7ff fec6 	bl	8007abc <_free_r>
 8007d30:	e7c7      	b.n	8007cc2 <__ssputs_r+0x46>
	...

08007d34 <_svfiprintf_r>:
 8007d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	4698      	mov	r8, r3
 8007d3a:	898b      	ldrh	r3, [r1, #12]
 8007d3c:	061b      	lsls	r3, r3, #24
 8007d3e:	b09d      	sub	sp, #116	; 0x74
 8007d40:	4607      	mov	r7, r0
 8007d42:	460d      	mov	r5, r1
 8007d44:	4614      	mov	r4, r2
 8007d46:	d50e      	bpl.n	8007d66 <_svfiprintf_r+0x32>
 8007d48:	690b      	ldr	r3, [r1, #16]
 8007d4a:	b963      	cbnz	r3, 8007d66 <_svfiprintf_r+0x32>
 8007d4c:	2140      	movs	r1, #64	; 0x40
 8007d4e:	f7ff ff21 	bl	8007b94 <_malloc_r>
 8007d52:	6028      	str	r0, [r5, #0]
 8007d54:	6128      	str	r0, [r5, #16]
 8007d56:	b920      	cbnz	r0, 8007d62 <_svfiprintf_r+0x2e>
 8007d58:	230c      	movs	r3, #12
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d60:	e0d1      	b.n	8007f06 <_svfiprintf_r+0x1d2>
 8007d62:	2340      	movs	r3, #64	; 0x40
 8007d64:	616b      	str	r3, [r5, #20]
 8007d66:	2300      	movs	r3, #0
 8007d68:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6a:	2320      	movs	r3, #32
 8007d6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d74:	2330      	movs	r3, #48	; 0x30
 8007d76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f20 <_svfiprintf_r+0x1ec>
 8007d7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d7e:	f04f 0901 	mov.w	r9, #1
 8007d82:	4623      	mov	r3, r4
 8007d84:	469a      	mov	sl, r3
 8007d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d8a:	b10a      	cbz	r2, 8007d90 <_svfiprintf_r+0x5c>
 8007d8c:	2a25      	cmp	r2, #37	; 0x25
 8007d8e:	d1f9      	bne.n	8007d84 <_svfiprintf_r+0x50>
 8007d90:	ebba 0b04 	subs.w	fp, sl, r4
 8007d94:	d00b      	beq.n	8007dae <_svfiprintf_r+0x7a>
 8007d96:	465b      	mov	r3, fp
 8007d98:	4622      	mov	r2, r4
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f7ff ff6d 	bl	8007c7c <__ssputs_r>
 8007da2:	3001      	adds	r0, #1
 8007da4:	f000 80aa 	beq.w	8007efc <_svfiprintf_r+0x1c8>
 8007da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007daa:	445a      	add	r2, fp
 8007dac:	9209      	str	r2, [sp, #36]	; 0x24
 8007dae:	f89a 3000 	ldrb.w	r3, [sl]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 80a2 	beq.w	8007efc <_svfiprintf_r+0x1c8>
 8007db8:	2300      	movs	r3, #0
 8007dba:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dc2:	f10a 0a01 	add.w	sl, sl, #1
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	9307      	str	r3, [sp, #28]
 8007dca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dce:	931a      	str	r3, [sp, #104]	; 0x68
 8007dd0:	4654      	mov	r4, sl
 8007dd2:	2205      	movs	r2, #5
 8007dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd8:	4851      	ldr	r0, [pc, #324]	; (8007f20 <_svfiprintf_r+0x1ec>)
 8007dda:	f7f8 fa11 	bl	8000200 <memchr>
 8007dde:	9a04      	ldr	r2, [sp, #16]
 8007de0:	b9d8      	cbnz	r0, 8007e1a <_svfiprintf_r+0xe6>
 8007de2:	06d0      	lsls	r0, r2, #27
 8007de4:	bf44      	itt	mi
 8007de6:	2320      	movmi	r3, #32
 8007de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dec:	0711      	lsls	r1, r2, #28
 8007dee:	bf44      	itt	mi
 8007df0:	232b      	movmi	r3, #43	; 0x2b
 8007df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8007dfc:	d015      	beq.n	8007e2a <_svfiprintf_r+0xf6>
 8007dfe:	9a07      	ldr	r2, [sp, #28]
 8007e00:	4654      	mov	r4, sl
 8007e02:	2000      	movs	r0, #0
 8007e04:	f04f 0c0a 	mov.w	ip, #10
 8007e08:	4621      	mov	r1, r4
 8007e0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e0e:	3b30      	subs	r3, #48	; 0x30
 8007e10:	2b09      	cmp	r3, #9
 8007e12:	d94e      	bls.n	8007eb2 <_svfiprintf_r+0x17e>
 8007e14:	b1b0      	cbz	r0, 8007e44 <_svfiprintf_r+0x110>
 8007e16:	9207      	str	r2, [sp, #28]
 8007e18:	e014      	b.n	8007e44 <_svfiprintf_r+0x110>
 8007e1a:	eba0 0308 	sub.w	r3, r0, r8
 8007e1e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e22:	4313      	orrs	r3, r2
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	46a2      	mov	sl, r4
 8007e28:	e7d2      	b.n	8007dd0 <_svfiprintf_r+0x9c>
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	1d19      	adds	r1, r3, #4
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	9103      	str	r1, [sp, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bfbb      	ittet	lt
 8007e36:	425b      	neglt	r3, r3
 8007e38:	f042 0202 	orrlt.w	r2, r2, #2
 8007e3c:	9307      	strge	r3, [sp, #28]
 8007e3e:	9307      	strlt	r3, [sp, #28]
 8007e40:	bfb8      	it	lt
 8007e42:	9204      	strlt	r2, [sp, #16]
 8007e44:	7823      	ldrb	r3, [r4, #0]
 8007e46:	2b2e      	cmp	r3, #46	; 0x2e
 8007e48:	d10c      	bne.n	8007e64 <_svfiprintf_r+0x130>
 8007e4a:	7863      	ldrb	r3, [r4, #1]
 8007e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e4e:	d135      	bne.n	8007ebc <_svfiprintf_r+0x188>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	1d1a      	adds	r2, r3, #4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	9203      	str	r2, [sp, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bfb8      	it	lt
 8007e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e60:	3402      	adds	r4, #2
 8007e62:	9305      	str	r3, [sp, #20]
 8007e64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f30 <_svfiprintf_r+0x1fc>
 8007e68:	7821      	ldrb	r1, [r4, #0]
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	f7f8 f9c7 	bl	8000200 <memchr>
 8007e72:	b140      	cbz	r0, 8007e86 <_svfiprintf_r+0x152>
 8007e74:	2340      	movs	r3, #64	; 0x40
 8007e76:	eba0 000a 	sub.w	r0, r0, sl
 8007e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e7e:	9b04      	ldr	r3, [sp, #16]
 8007e80:	4303      	orrs	r3, r0
 8007e82:	3401      	adds	r4, #1
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8a:	4826      	ldr	r0, [pc, #152]	; (8007f24 <_svfiprintf_r+0x1f0>)
 8007e8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e90:	2206      	movs	r2, #6
 8007e92:	f7f8 f9b5 	bl	8000200 <memchr>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d038      	beq.n	8007f0c <_svfiprintf_r+0x1d8>
 8007e9a:	4b23      	ldr	r3, [pc, #140]	; (8007f28 <_svfiprintf_r+0x1f4>)
 8007e9c:	bb1b      	cbnz	r3, 8007ee6 <_svfiprintf_r+0x1b2>
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	3307      	adds	r3, #7
 8007ea2:	f023 0307 	bic.w	r3, r3, #7
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	9303      	str	r3, [sp, #12]
 8007eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eac:	4433      	add	r3, r6
 8007eae:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb0:	e767      	b.n	8007d82 <_svfiprintf_r+0x4e>
 8007eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	2001      	movs	r0, #1
 8007eba:	e7a5      	b.n	8007e08 <_svfiprintf_r+0xd4>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	3401      	adds	r4, #1
 8007ec0:	9305      	str	r3, [sp, #20]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	f04f 0c0a 	mov.w	ip, #10
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ece:	3a30      	subs	r2, #48	; 0x30
 8007ed0:	2a09      	cmp	r2, #9
 8007ed2:	d903      	bls.n	8007edc <_svfiprintf_r+0x1a8>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0c5      	beq.n	8007e64 <_svfiprintf_r+0x130>
 8007ed8:	9105      	str	r1, [sp, #20]
 8007eda:	e7c3      	b.n	8007e64 <_svfiprintf_r+0x130>
 8007edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e7f0      	b.n	8007ec8 <_svfiprintf_r+0x194>
 8007ee6:	ab03      	add	r3, sp, #12
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	462a      	mov	r2, r5
 8007eec:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <_svfiprintf_r+0x1f8>)
 8007eee:	a904      	add	r1, sp, #16
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f7fd ffc9 	bl	8005e88 <_printf_float>
 8007ef6:	1c42      	adds	r2, r0, #1
 8007ef8:	4606      	mov	r6, r0
 8007efa:	d1d6      	bne.n	8007eaa <_svfiprintf_r+0x176>
 8007efc:	89ab      	ldrh	r3, [r5, #12]
 8007efe:	065b      	lsls	r3, r3, #25
 8007f00:	f53f af2c 	bmi.w	8007d5c <_svfiprintf_r+0x28>
 8007f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f06:	b01d      	add	sp, #116	; 0x74
 8007f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0c:	ab03      	add	r3, sp, #12
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	462a      	mov	r2, r5
 8007f12:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <_svfiprintf_r+0x1f8>)
 8007f14:	a904      	add	r1, sp, #16
 8007f16:	4638      	mov	r0, r7
 8007f18:	f7fe fa5a 	bl	80063d0 <_printf_i>
 8007f1c:	e7eb      	b.n	8007ef6 <_svfiprintf_r+0x1c2>
 8007f1e:	bf00      	nop
 8007f20:	08008d74 	.word	0x08008d74
 8007f24:	08008d7e 	.word	0x08008d7e
 8007f28:	08005e89 	.word	0x08005e89
 8007f2c:	08007c7d 	.word	0x08007c7d
 8007f30:	08008d7a 	.word	0x08008d7a

08007f34 <_sbrk_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d06      	ldr	r5, [pc, #24]	; (8007f50 <_sbrk_r+0x1c>)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	602b      	str	r3, [r5, #0]
 8007f40:	f7f9 fc9c 	bl	800187c <_sbrk>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_sbrk_r+0x1a>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_sbrk_r+0x1a>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	200003d0 	.word	0x200003d0

08007f54 <__assert_func>:
 8007f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f56:	4614      	mov	r4, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <__assert_func+0x2c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4605      	mov	r5, r0
 8007f60:	68d8      	ldr	r0, [r3, #12]
 8007f62:	b14c      	cbz	r4, 8007f78 <__assert_func+0x24>
 8007f64:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <__assert_func+0x30>)
 8007f66:	9100      	str	r1, [sp, #0]
 8007f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f6c:	4906      	ldr	r1, [pc, #24]	; (8007f88 <__assert_func+0x34>)
 8007f6e:	462b      	mov	r3, r5
 8007f70:	f000 f80e 	bl	8007f90 <fiprintf>
 8007f74:	f000 faac 	bl	80084d0 <abort>
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <__assert_func+0x38>)
 8007f7a:	461c      	mov	r4, r3
 8007f7c:	e7f3      	b.n	8007f66 <__assert_func+0x12>
 8007f7e:	bf00      	nop
 8007f80:	2000000c 	.word	0x2000000c
 8007f84:	08008d85 	.word	0x08008d85
 8007f88:	08008d92 	.word	0x08008d92
 8007f8c:	08008dc0 	.word	0x08008dc0

08007f90 <fiprintf>:
 8007f90:	b40e      	push	{r1, r2, r3}
 8007f92:	b503      	push	{r0, r1, lr}
 8007f94:	4601      	mov	r1, r0
 8007f96:	ab03      	add	r3, sp, #12
 8007f98:	4805      	ldr	r0, [pc, #20]	; (8007fb0 <fiprintf+0x20>)
 8007f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f9e:	6800      	ldr	r0, [r0, #0]
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	f000 f897 	bl	80080d4 <_vfiprintf_r>
 8007fa6:	b002      	add	sp, #8
 8007fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fac:	b003      	add	sp, #12
 8007fae:	4770      	bx	lr
 8007fb0:	2000000c 	.word	0x2000000c

08007fb4 <__ascii_mbtowc>:
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	b901      	cbnz	r1, 8007fba <__ascii_mbtowc+0x6>
 8007fb8:	a901      	add	r1, sp, #4
 8007fba:	b142      	cbz	r2, 8007fce <__ascii_mbtowc+0x1a>
 8007fbc:	b14b      	cbz	r3, 8007fd2 <__ascii_mbtowc+0x1e>
 8007fbe:	7813      	ldrb	r3, [r2, #0]
 8007fc0:	600b      	str	r3, [r1, #0]
 8007fc2:	7812      	ldrb	r2, [r2, #0]
 8007fc4:	1e10      	subs	r0, r2, #0
 8007fc6:	bf18      	it	ne
 8007fc8:	2001      	movne	r0, #1
 8007fca:	b002      	add	sp, #8
 8007fcc:	4770      	bx	lr
 8007fce:	4610      	mov	r0, r2
 8007fd0:	e7fb      	b.n	8007fca <__ascii_mbtowc+0x16>
 8007fd2:	f06f 0001 	mvn.w	r0, #1
 8007fd6:	e7f8      	b.n	8007fca <__ascii_mbtowc+0x16>

08007fd8 <memmove>:
 8007fd8:	4288      	cmp	r0, r1
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	eb01 0402 	add.w	r4, r1, r2
 8007fe0:	d902      	bls.n	8007fe8 <memmove+0x10>
 8007fe2:	4284      	cmp	r4, r0
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	d807      	bhi.n	8007ff8 <memmove+0x20>
 8007fe8:	1e43      	subs	r3, r0, #1
 8007fea:	42a1      	cmp	r1, r4
 8007fec:	d008      	beq.n	8008000 <memmove+0x28>
 8007fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ff6:	e7f8      	b.n	8007fea <memmove+0x12>
 8007ff8:	4402      	add	r2, r0
 8007ffa:	4601      	mov	r1, r0
 8007ffc:	428a      	cmp	r2, r1
 8007ffe:	d100      	bne.n	8008002 <memmove+0x2a>
 8008000:	bd10      	pop	{r4, pc}
 8008002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800800a:	e7f7      	b.n	8007ffc <memmove+0x24>

0800800c <__malloc_lock>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__malloc_lock+0x8>)
 800800e:	f000 bc1f 	b.w	8008850 <__retarget_lock_acquire_recursive>
 8008012:	bf00      	nop
 8008014:	200003d4 	.word	0x200003d4

08008018 <__malloc_unlock>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__malloc_unlock+0x8>)
 800801a:	f000 bc1a 	b.w	8008852 <__retarget_lock_release_recursive>
 800801e:	bf00      	nop
 8008020:	200003d4 	.word	0x200003d4

08008024 <_realloc_r>:
 8008024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008028:	4680      	mov	r8, r0
 800802a:	4614      	mov	r4, r2
 800802c:	460e      	mov	r6, r1
 800802e:	b921      	cbnz	r1, 800803a <_realloc_r+0x16>
 8008030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	4611      	mov	r1, r2
 8008036:	f7ff bdad 	b.w	8007b94 <_malloc_r>
 800803a:	b92a      	cbnz	r2, 8008048 <_realloc_r+0x24>
 800803c:	f7ff fd3e 	bl	8007abc <_free_r>
 8008040:	4625      	mov	r5, r4
 8008042:	4628      	mov	r0, r5
 8008044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008048:	f000 fc6a 	bl	8008920 <_malloc_usable_size_r>
 800804c:	4284      	cmp	r4, r0
 800804e:	4607      	mov	r7, r0
 8008050:	d802      	bhi.n	8008058 <_realloc_r+0x34>
 8008052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008056:	d812      	bhi.n	800807e <_realloc_r+0x5a>
 8008058:	4621      	mov	r1, r4
 800805a:	4640      	mov	r0, r8
 800805c:	f7ff fd9a 	bl	8007b94 <_malloc_r>
 8008060:	4605      	mov	r5, r0
 8008062:	2800      	cmp	r0, #0
 8008064:	d0ed      	beq.n	8008042 <_realloc_r+0x1e>
 8008066:	42bc      	cmp	r4, r7
 8008068:	4622      	mov	r2, r4
 800806a:	4631      	mov	r1, r6
 800806c:	bf28      	it	cs
 800806e:	463a      	movcs	r2, r7
 8008070:	f7ff f97c 	bl	800736c <memcpy>
 8008074:	4631      	mov	r1, r6
 8008076:	4640      	mov	r0, r8
 8008078:	f7ff fd20 	bl	8007abc <_free_r>
 800807c:	e7e1      	b.n	8008042 <_realloc_r+0x1e>
 800807e:	4635      	mov	r5, r6
 8008080:	e7df      	b.n	8008042 <_realloc_r+0x1e>

08008082 <__sfputc_r>:
 8008082:	6893      	ldr	r3, [r2, #8]
 8008084:	3b01      	subs	r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	b410      	push	{r4}
 800808a:	6093      	str	r3, [r2, #8]
 800808c:	da08      	bge.n	80080a0 <__sfputc_r+0x1e>
 800808e:	6994      	ldr	r4, [r2, #24]
 8008090:	42a3      	cmp	r3, r4
 8008092:	db01      	blt.n	8008098 <__sfputc_r+0x16>
 8008094:	290a      	cmp	r1, #10
 8008096:	d103      	bne.n	80080a0 <__sfputc_r+0x1e>
 8008098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800809c:	f000 b94a 	b.w	8008334 <__swbuf_r>
 80080a0:	6813      	ldr	r3, [r2, #0]
 80080a2:	1c58      	adds	r0, r3, #1
 80080a4:	6010      	str	r0, [r2, #0]
 80080a6:	7019      	strb	r1, [r3, #0]
 80080a8:	4608      	mov	r0, r1
 80080aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <__sfputs_r>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	4606      	mov	r6, r0
 80080b4:	460f      	mov	r7, r1
 80080b6:	4614      	mov	r4, r2
 80080b8:	18d5      	adds	r5, r2, r3
 80080ba:	42ac      	cmp	r4, r5
 80080bc:	d101      	bne.n	80080c2 <__sfputs_r+0x12>
 80080be:	2000      	movs	r0, #0
 80080c0:	e007      	b.n	80080d2 <__sfputs_r+0x22>
 80080c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c6:	463a      	mov	r2, r7
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff ffda 	bl	8008082 <__sfputc_r>
 80080ce:	1c43      	adds	r3, r0, #1
 80080d0:	d1f3      	bne.n	80080ba <__sfputs_r+0xa>
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080d4 <_vfiprintf_r>:
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	460d      	mov	r5, r1
 80080da:	b09d      	sub	sp, #116	; 0x74
 80080dc:	4614      	mov	r4, r2
 80080de:	4698      	mov	r8, r3
 80080e0:	4606      	mov	r6, r0
 80080e2:	b118      	cbz	r0, 80080ec <_vfiprintf_r+0x18>
 80080e4:	6983      	ldr	r3, [r0, #24]
 80080e6:	b90b      	cbnz	r3, 80080ec <_vfiprintf_r+0x18>
 80080e8:	f000 fb14 	bl	8008714 <__sinit>
 80080ec:	4b89      	ldr	r3, [pc, #548]	; (8008314 <_vfiprintf_r+0x240>)
 80080ee:	429d      	cmp	r5, r3
 80080f0:	d11b      	bne.n	800812a <_vfiprintf_r+0x56>
 80080f2:	6875      	ldr	r5, [r6, #4]
 80080f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080f6:	07d9      	lsls	r1, r3, #31
 80080f8:	d405      	bmi.n	8008106 <_vfiprintf_r+0x32>
 80080fa:	89ab      	ldrh	r3, [r5, #12]
 80080fc:	059a      	lsls	r2, r3, #22
 80080fe:	d402      	bmi.n	8008106 <_vfiprintf_r+0x32>
 8008100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008102:	f000 fba5 	bl	8008850 <__retarget_lock_acquire_recursive>
 8008106:	89ab      	ldrh	r3, [r5, #12]
 8008108:	071b      	lsls	r3, r3, #28
 800810a:	d501      	bpl.n	8008110 <_vfiprintf_r+0x3c>
 800810c:	692b      	ldr	r3, [r5, #16]
 800810e:	b9eb      	cbnz	r3, 800814c <_vfiprintf_r+0x78>
 8008110:	4629      	mov	r1, r5
 8008112:	4630      	mov	r0, r6
 8008114:	f000 f96e 	bl	80083f4 <__swsetup_r>
 8008118:	b1c0      	cbz	r0, 800814c <_vfiprintf_r+0x78>
 800811a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800811c:	07dc      	lsls	r4, r3, #31
 800811e:	d50e      	bpl.n	800813e <_vfiprintf_r+0x6a>
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	b01d      	add	sp, #116	; 0x74
 8008126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812a:	4b7b      	ldr	r3, [pc, #492]	; (8008318 <_vfiprintf_r+0x244>)
 800812c:	429d      	cmp	r5, r3
 800812e:	d101      	bne.n	8008134 <_vfiprintf_r+0x60>
 8008130:	68b5      	ldr	r5, [r6, #8]
 8008132:	e7df      	b.n	80080f4 <_vfiprintf_r+0x20>
 8008134:	4b79      	ldr	r3, [pc, #484]	; (800831c <_vfiprintf_r+0x248>)
 8008136:	429d      	cmp	r5, r3
 8008138:	bf08      	it	eq
 800813a:	68f5      	ldreq	r5, [r6, #12]
 800813c:	e7da      	b.n	80080f4 <_vfiprintf_r+0x20>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	0598      	lsls	r0, r3, #22
 8008142:	d4ed      	bmi.n	8008120 <_vfiprintf_r+0x4c>
 8008144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008146:	f000 fb84 	bl	8008852 <__retarget_lock_release_recursive>
 800814a:	e7e9      	b.n	8008120 <_vfiprintf_r+0x4c>
 800814c:	2300      	movs	r3, #0
 800814e:	9309      	str	r3, [sp, #36]	; 0x24
 8008150:	2320      	movs	r3, #32
 8008152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008156:	f8cd 800c 	str.w	r8, [sp, #12]
 800815a:	2330      	movs	r3, #48	; 0x30
 800815c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008320 <_vfiprintf_r+0x24c>
 8008160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008164:	f04f 0901 	mov.w	r9, #1
 8008168:	4623      	mov	r3, r4
 800816a:	469a      	mov	sl, r3
 800816c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008170:	b10a      	cbz	r2, 8008176 <_vfiprintf_r+0xa2>
 8008172:	2a25      	cmp	r2, #37	; 0x25
 8008174:	d1f9      	bne.n	800816a <_vfiprintf_r+0x96>
 8008176:	ebba 0b04 	subs.w	fp, sl, r4
 800817a:	d00b      	beq.n	8008194 <_vfiprintf_r+0xc0>
 800817c:	465b      	mov	r3, fp
 800817e:	4622      	mov	r2, r4
 8008180:	4629      	mov	r1, r5
 8008182:	4630      	mov	r0, r6
 8008184:	f7ff ff94 	bl	80080b0 <__sfputs_r>
 8008188:	3001      	adds	r0, #1
 800818a:	f000 80aa 	beq.w	80082e2 <_vfiprintf_r+0x20e>
 800818e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008190:	445a      	add	r2, fp
 8008192:	9209      	str	r2, [sp, #36]	; 0x24
 8008194:	f89a 3000 	ldrb.w	r3, [sl]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80a2 	beq.w	80082e2 <_vfiprintf_r+0x20e>
 800819e:	2300      	movs	r3, #0
 80081a0:	f04f 32ff 	mov.w	r2, #4294967295
 80081a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a8:	f10a 0a01 	add.w	sl, sl, #1
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	9307      	str	r3, [sp, #28]
 80081b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081b4:	931a      	str	r3, [sp, #104]	; 0x68
 80081b6:	4654      	mov	r4, sl
 80081b8:	2205      	movs	r2, #5
 80081ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081be:	4858      	ldr	r0, [pc, #352]	; (8008320 <_vfiprintf_r+0x24c>)
 80081c0:	f7f8 f81e 	bl	8000200 <memchr>
 80081c4:	9a04      	ldr	r2, [sp, #16]
 80081c6:	b9d8      	cbnz	r0, 8008200 <_vfiprintf_r+0x12c>
 80081c8:	06d1      	lsls	r1, r2, #27
 80081ca:	bf44      	itt	mi
 80081cc:	2320      	movmi	r3, #32
 80081ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d2:	0713      	lsls	r3, r2, #28
 80081d4:	bf44      	itt	mi
 80081d6:	232b      	movmi	r3, #43	; 0x2b
 80081d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081dc:	f89a 3000 	ldrb.w	r3, [sl]
 80081e0:	2b2a      	cmp	r3, #42	; 0x2a
 80081e2:	d015      	beq.n	8008210 <_vfiprintf_r+0x13c>
 80081e4:	9a07      	ldr	r2, [sp, #28]
 80081e6:	4654      	mov	r4, sl
 80081e8:	2000      	movs	r0, #0
 80081ea:	f04f 0c0a 	mov.w	ip, #10
 80081ee:	4621      	mov	r1, r4
 80081f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f4:	3b30      	subs	r3, #48	; 0x30
 80081f6:	2b09      	cmp	r3, #9
 80081f8:	d94e      	bls.n	8008298 <_vfiprintf_r+0x1c4>
 80081fa:	b1b0      	cbz	r0, 800822a <_vfiprintf_r+0x156>
 80081fc:	9207      	str	r2, [sp, #28]
 80081fe:	e014      	b.n	800822a <_vfiprintf_r+0x156>
 8008200:	eba0 0308 	sub.w	r3, r0, r8
 8008204:	fa09 f303 	lsl.w	r3, r9, r3
 8008208:	4313      	orrs	r3, r2
 800820a:	9304      	str	r3, [sp, #16]
 800820c:	46a2      	mov	sl, r4
 800820e:	e7d2      	b.n	80081b6 <_vfiprintf_r+0xe2>
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	1d19      	adds	r1, r3, #4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	9103      	str	r1, [sp, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	bfbb      	ittet	lt
 800821c:	425b      	neglt	r3, r3
 800821e:	f042 0202 	orrlt.w	r2, r2, #2
 8008222:	9307      	strge	r3, [sp, #28]
 8008224:	9307      	strlt	r3, [sp, #28]
 8008226:	bfb8      	it	lt
 8008228:	9204      	strlt	r2, [sp, #16]
 800822a:	7823      	ldrb	r3, [r4, #0]
 800822c:	2b2e      	cmp	r3, #46	; 0x2e
 800822e:	d10c      	bne.n	800824a <_vfiprintf_r+0x176>
 8008230:	7863      	ldrb	r3, [r4, #1]
 8008232:	2b2a      	cmp	r3, #42	; 0x2a
 8008234:	d135      	bne.n	80082a2 <_vfiprintf_r+0x1ce>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	1d1a      	adds	r2, r3, #4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	9203      	str	r2, [sp, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfb8      	it	lt
 8008242:	f04f 33ff 	movlt.w	r3, #4294967295
 8008246:	3402      	adds	r4, #2
 8008248:	9305      	str	r3, [sp, #20]
 800824a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008330 <_vfiprintf_r+0x25c>
 800824e:	7821      	ldrb	r1, [r4, #0]
 8008250:	2203      	movs	r2, #3
 8008252:	4650      	mov	r0, sl
 8008254:	f7f7 ffd4 	bl	8000200 <memchr>
 8008258:	b140      	cbz	r0, 800826c <_vfiprintf_r+0x198>
 800825a:	2340      	movs	r3, #64	; 0x40
 800825c:	eba0 000a 	sub.w	r0, r0, sl
 8008260:	fa03 f000 	lsl.w	r0, r3, r0
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	4303      	orrs	r3, r0
 8008268:	3401      	adds	r4, #1
 800826a:	9304      	str	r3, [sp, #16]
 800826c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008270:	482c      	ldr	r0, [pc, #176]	; (8008324 <_vfiprintf_r+0x250>)
 8008272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008276:	2206      	movs	r2, #6
 8008278:	f7f7 ffc2 	bl	8000200 <memchr>
 800827c:	2800      	cmp	r0, #0
 800827e:	d03f      	beq.n	8008300 <_vfiprintf_r+0x22c>
 8008280:	4b29      	ldr	r3, [pc, #164]	; (8008328 <_vfiprintf_r+0x254>)
 8008282:	bb1b      	cbnz	r3, 80082cc <_vfiprintf_r+0x1f8>
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	3307      	adds	r3, #7
 8008288:	f023 0307 	bic.w	r3, r3, #7
 800828c:	3308      	adds	r3, #8
 800828e:	9303      	str	r3, [sp, #12]
 8008290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008292:	443b      	add	r3, r7
 8008294:	9309      	str	r3, [sp, #36]	; 0x24
 8008296:	e767      	b.n	8008168 <_vfiprintf_r+0x94>
 8008298:	fb0c 3202 	mla	r2, ip, r2, r3
 800829c:	460c      	mov	r4, r1
 800829e:	2001      	movs	r0, #1
 80082a0:	e7a5      	b.n	80081ee <_vfiprintf_r+0x11a>
 80082a2:	2300      	movs	r3, #0
 80082a4:	3401      	adds	r4, #1
 80082a6:	9305      	str	r3, [sp, #20]
 80082a8:	4619      	mov	r1, r3
 80082aa:	f04f 0c0a 	mov.w	ip, #10
 80082ae:	4620      	mov	r0, r4
 80082b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b4:	3a30      	subs	r2, #48	; 0x30
 80082b6:	2a09      	cmp	r2, #9
 80082b8:	d903      	bls.n	80082c2 <_vfiprintf_r+0x1ee>
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0c5      	beq.n	800824a <_vfiprintf_r+0x176>
 80082be:	9105      	str	r1, [sp, #20]
 80082c0:	e7c3      	b.n	800824a <_vfiprintf_r+0x176>
 80082c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c6:	4604      	mov	r4, r0
 80082c8:	2301      	movs	r3, #1
 80082ca:	e7f0      	b.n	80082ae <_vfiprintf_r+0x1da>
 80082cc:	ab03      	add	r3, sp, #12
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	462a      	mov	r2, r5
 80082d2:	4b16      	ldr	r3, [pc, #88]	; (800832c <_vfiprintf_r+0x258>)
 80082d4:	a904      	add	r1, sp, #16
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7fd fdd6 	bl	8005e88 <_printf_float>
 80082dc:	4607      	mov	r7, r0
 80082de:	1c78      	adds	r0, r7, #1
 80082e0:	d1d6      	bne.n	8008290 <_vfiprintf_r+0x1bc>
 80082e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082e4:	07d9      	lsls	r1, r3, #31
 80082e6:	d405      	bmi.n	80082f4 <_vfiprintf_r+0x220>
 80082e8:	89ab      	ldrh	r3, [r5, #12]
 80082ea:	059a      	lsls	r2, r3, #22
 80082ec:	d402      	bmi.n	80082f4 <_vfiprintf_r+0x220>
 80082ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082f0:	f000 faaf 	bl	8008852 <__retarget_lock_release_recursive>
 80082f4:	89ab      	ldrh	r3, [r5, #12]
 80082f6:	065b      	lsls	r3, r3, #25
 80082f8:	f53f af12 	bmi.w	8008120 <_vfiprintf_r+0x4c>
 80082fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082fe:	e711      	b.n	8008124 <_vfiprintf_r+0x50>
 8008300:	ab03      	add	r3, sp, #12
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	462a      	mov	r2, r5
 8008306:	4b09      	ldr	r3, [pc, #36]	; (800832c <_vfiprintf_r+0x258>)
 8008308:	a904      	add	r1, sp, #16
 800830a:	4630      	mov	r0, r6
 800830c:	f7fe f860 	bl	80063d0 <_printf_i>
 8008310:	e7e4      	b.n	80082dc <_vfiprintf_r+0x208>
 8008312:	bf00      	nop
 8008314:	08008eec 	.word	0x08008eec
 8008318:	08008f0c 	.word	0x08008f0c
 800831c:	08008ecc 	.word	0x08008ecc
 8008320:	08008d74 	.word	0x08008d74
 8008324:	08008d7e 	.word	0x08008d7e
 8008328:	08005e89 	.word	0x08005e89
 800832c:	080080b1 	.word	0x080080b1
 8008330:	08008d7a 	.word	0x08008d7a

08008334 <__swbuf_r>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	460e      	mov	r6, r1
 8008338:	4614      	mov	r4, r2
 800833a:	4605      	mov	r5, r0
 800833c:	b118      	cbz	r0, 8008346 <__swbuf_r+0x12>
 800833e:	6983      	ldr	r3, [r0, #24]
 8008340:	b90b      	cbnz	r3, 8008346 <__swbuf_r+0x12>
 8008342:	f000 f9e7 	bl	8008714 <__sinit>
 8008346:	4b21      	ldr	r3, [pc, #132]	; (80083cc <__swbuf_r+0x98>)
 8008348:	429c      	cmp	r4, r3
 800834a:	d12b      	bne.n	80083a4 <__swbuf_r+0x70>
 800834c:	686c      	ldr	r4, [r5, #4]
 800834e:	69a3      	ldr	r3, [r4, #24]
 8008350:	60a3      	str	r3, [r4, #8]
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	071a      	lsls	r2, r3, #28
 8008356:	d52f      	bpl.n	80083b8 <__swbuf_r+0x84>
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	b36b      	cbz	r3, 80083b8 <__swbuf_r+0x84>
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	6820      	ldr	r0, [r4, #0]
 8008360:	1ac0      	subs	r0, r0, r3
 8008362:	6963      	ldr	r3, [r4, #20]
 8008364:	b2f6      	uxtb	r6, r6
 8008366:	4283      	cmp	r3, r0
 8008368:	4637      	mov	r7, r6
 800836a:	dc04      	bgt.n	8008376 <__swbuf_r+0x42>
 800836c:	4621      	mov	r1, r4
 800836e:	4628      	mov	r0, r5
 8008370:	f000 f93c 	bl	80085ec <_fflush_r>
 8008374:	bb30      	cbnz	r0, 80083c4 <__swbuf_r+0x90>
 8008376:	68a3      	ldr	r3, [r4, #8]
 8008378:	3b01      	subs	r3, #1
 800837a:	60a3      	str	r3, [r4, #8]
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	6022      	str	r2, [r4, #0]
 8008382:	701e      	strb	r6, [r3, #0]
 8008384:	6963      	ldr	r3, [r4, #20]
 8008386:	3001      	adds	r0, #1
 8008388:	4283      	cmp	r3, r0
 800838a:	d004      	beq.n	8008396 <__swbuf_r+0x62>
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	07db      	lsls	r3, r3, #31
 8008390:	d506      	bpl.n	80083a0 <__swbuf_r+0x6c>
 8008392:	2e0a      	cmp	r6, #10
 8008394:	d104      	bne.n	80083a0 <__swbuf_r+0x6c>
 8008396:	4621      	mov	r1, r4
 8008398:	4628      	mov	r0, r5
 800839a:	f000 f927 	bl	80085ec <_fflush_r>
 800839e:	b988      	cbnz	r0, 80083c4 <__swbuf_r+0x90>
 80083a0:	4638      	mov	r0, r7
 80083a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a4:	4b0a      	ldr	r3, [pc, #40]	; (80083d0 <__swbuf_r+0x9c>)
 80083a6:	429c      	cmp	r4, r3
 80083a8:	d101      	bne.n	80083ae <__swbuf_r+0x7a>
 80083aa:	68ac      	ldr	r4, [r5, #8]
 80083ac:	e7cf      	b.n	800834e <__swbuf_r+0x1a>
 80083ae:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <__swbuf_r+0xa0>)
 80083b0:	429c      	cmp	r4, r3
 80083b2:	bf08      	it	eq
 80083b4:	68ec      	ldreq	r4, [r5, #12]
 80083b6:	e7ca      	b.n	800834e <__swbuf_r+0x1a>
 80083b8:	4621      	mov	r1, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	f000 f81a 	bl	80083f4 <__swsetup_r>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d0cb      	beq.n	800835c <__swbuf_r+0x28>
 80083c4:	f04f 37ff 	mov.w	r7, #4294967295
 80083c8:	e7ea      	b.n	80083a0 <__swbuf_r+0x6c>
 80083ca:	bf00      	nop
 80083cc:	08008eec 	.word	0x08008eec
 80083d0:	08008f0c 	.word	0x08008f0c
 80083d4:	08008ecc 	.word	0x08008ecc

080083d8 <__ascii_wctomb>:
 80083d8:	b149      	cbz	r1, 80083ee <__ascii_wctomb+0x16>
 80083da:	2aff      	cmp	r2, #255	; 0xff
 80083dc:	bf85      	ittet	hi
 80083de:	238a      	movhi	r3, #138	; 0x8a
 80083e0:	6003      	strhi	r3, [r0, #0]
 80083e2:	700a      	strbls	r2, [r1, #0]
 80083e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80083e8:	bf98      	it	ls
 80083ea:	2001      	movls	r0, #1
 80083ec:	4770      	bx	lr
 80083ee:	4608      	mov	r0, r1
 80083f0:	4770      	bx	lr
	...

080083f4 <__swsetup_r>:
 80083f4:	4b32      	ldr	r3, [pc, #200]	; (80084c0 <__swsetup_r+0xcc>)
 80083f6:	b570      	push	{r4, r5, r6, lr}
 80083f8:	681d      	ldr	r5, [r3, #0]
 80083fa:	4606      	mov	r6, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	b125      	cbz	r5, 800840a <__swsetup_r+0x16>
 8008400:	69ab      	ldr	r3, [r5, #24]
 8008402:	b913      	cbnz	r3, 800840a <__swsetup_r+0x16>
 8008404:	4628      	mov	r0, r5
 8008406:	f000 f985 	bl	8008714 <__sinit>
 800840a:	4b2e      	ldr	r3, [pc, #184]	; (80084c4 <__swsetup_r+0xd0>)
 800840c:	429c      	cmp	r4, r3
 800840e:	d10f      	bne.n	8008430 <__swsetup_r+0x3c>
 8008410:	686c      	ldr	r4, [r5, #4]
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008418:	0719      	lsls	r1, r3, #28
 800841a:	d42c      	bmi.n	8008476 <__swsetup_r+0x82>
 800841c:	06dd      	lsls	r5, r3, #27
 800841e:	d411      	bmi.n	8008444 <__swsetup_r+0x50>
 8008420:	2309      	movs	r3, #9
 8008422:	6033      	str	r3, [r6, #0]
 8008424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	f04f 30ff 	mov.w	r0, #4294967295
 800842e:	e03e      	b.n	80084ae <__swsetup_r+0xba>
 8008430:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <__swsetup_r+0xd4>)
 8008432:	429c      	cmp	r4, r3
 8008434:	d101      	bne.n	800843a <__swsetup_r+0x46>
 8008436:	68ac      	ldr	r4, [r5, #8]
 8008438:	e7eb      	b.n	8008412 <__swsetup_r+0x1e>
 800843a:	4b24      	ldr	r3, [pc, #144]	; (80084cc <__swsetup_r+0xd8>)
 800843c:	429c      	cmp	r4, r3
 800843e:	bf08      	it	eq
 8008440:	68ec      	ldreq	r4, [r5, #12]
 8008442:	e7e6      	b.n	8008412 <__swsetup_r+0x1e>
 8008444:	0758      	lsls	r0, r3, #29
 8008446:	d512      	bpl.n	800846e <__swsetup_r+0x7a>
 8008448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800844a:	b141      	cbz	r1, 800845e <__swsetup_r+0x6a>
 800844c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008450:	4299      	cmp	r1, r3
 8008452:	d002      	beq.n	800845a <__swsetup_r+0x66>
 8008454:	4630      	mov	r0, r6
 8008456:	f7ff fb31 	bl	8007abc <_free_r>
 800845a:	2300      	movs	r3, #0
 800845c:	6363      	str	r3, [r4, #52]	; 0x34
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008464:	81a3      	strh	r3, [r4, #12]
 8008466:	2300      	movs	r3, #0
 8008468:	6063      	str	r3, [r4, #4]
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f043 0308 	orr.w	r3, r3, #8
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	6923      	ldr	r3, [r4, #16]
 8008478:	b94b      	cbnz	r3, 800848e <__swsetup_r+0x9a>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008484:	d003      	beq.n	800848e <__swsetup_r+0x9a>
 8008486:	4621      	mov	r1, r4
 8008488:	4630      	mov	r0, r6
 800848a:	f000 fa09 	bl	80088a0 <__smakebuf_r>
 800848e:	89a0      	ldrh	r0, [r4, #12]
 8008490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008494:	f010 0301 	ands.w	r3, r0, #1
 8008498:	d00a      	beq.n	80084b0 <__swsetup_r+0xbc>
 800849a:	2300      	movs	r3, #0
 800849c:	60a3      	str	r3, [r4, #8]
 800849e:	6963      	ldr	r3, [r4, #20]
 80084a0:	425b      	negs	r3, r3
 80084a2:	61a3      	str	r3, [r4, #24]
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	b943      	cbnz	r3, 80084ba <__swsetup_r+0xc6>
 80084a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084ac:	d1ba      	bne.n	8008424 <__swsetup_r+0x30>
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	0781      	lsls	r1, r0, #30
 80084b2:	bf58      	it	pl
 80084b4:	6963      	ldrpl	r3, [r4, #20]
 80084b6:	60a3      	str	r3, [r4, #8]
 80084b8:	e7f4      	b.n	80084a4 <__swsetup_r+0xb0>
 80084ba:	2000      	movs	r0, #0
 80084bc:	e7f7      	b.n	80084ae <__swsetup_r+0xba>
 80084be:	bf00      	nop
 80084c0:	2000000c 	.word	0x2000000c
 80084c4:	08008eec 	.word	0x08008eec
 80084c8:	08008f0c 	.word	0x08008f0c
 80084cc:	08008ecc 	.word	0x08008ecc

080084d0 <abort>:
 80084d0:	b508      	push	{r3, lr}
 80084d2:	2006      	movs	r0, #6
 80084d4:	f000 fa54 	bl	8008980 <raise>
 80084d8:	2001      	movs	r0, #1
 80084da:	f7f9 f957 	bl	800178c <_exit>
	...

080084e0 <__sflush_r>:
 80084e0:	898a      	ldrh	r2, [r1, #12]
 80084e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e6:	4605      	mov	r5, r0
 80084e8:	0710      	lsls	r0, r2, #28
 80084ea:	460c      	mov	r4, r1
 80084ec:	d458      	bmi.n	80085a0 <__sflush_r+0xc0>
 80084ee:	684b      	ldr	r3, [r1, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	dc05      	bgt.n	8008500 <__sflush_r+0x20>
 80084f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dc02      	bgt.n	8008500 <__sflush_r+0x20>
 80084fa:	2000      	movs	r0, #0
 80084fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008502:	2e00      	cmp	r6, #0
 8008504:	d0f9      	beq.n	80084fa <__sflush_r+0x1a>
 8008506:	2300      	movs	r3, #0
 8008508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800850c:	682f      	ldr	r7, [r5, #0]
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	d032      	beq.n	8008578 <__sflush_r+0x98>
 8008512:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	075a      	lsls	r2, r3, #29
 8008518:	d505      	bpl.n	8008526 <__sflush_r+0x46>
 800851a:	6863      	ldr	r3, [r4, #4]
 800851c:	1ac0      	subs	r0, r0, r3
 800851e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008520:	b10b      	cbz	r3, 8008526 <__sflush_r+0x46>
 8008522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008524:	1ac0      	subs	r0, r0, r3
 8008526:	2300      	movs	r3, #0
 8008528:	4602      	mov	r2, r0
 800852a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800852c:	6a21      	ldr	r1, [r4, #32]
 800852e:	4628      	mov	r0, r5
 8008530:	47b0      	blx	r6
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	d106      	bne.n	8008546 <__sflush_r+0x66>
 8008538:	6829      	ldr	r1, [r5, #0]
 800853a:	291d      	cmp	r1, #29
 800853c:	d82c      	bhi.n	8008598 <__sflush_r+0xb8>
 800853e:	4a2a      	ldr	r2, [pc, #168]	; (80085e8 <__sflush_r+0x108>)
 8008540:	40ca      	lsrs	r2, r1
 8008542:	07d6      	lsls	r6, r2, #31
 8008544:	d528      	bpl.n	8008598 <__sflush_r+0xb8>
 8008546:	2200      	movs	r2, #0
 8008548:	6062      	str	r2, [r4, #4]
 800854a:	04d9      	lsls	r1, r3, #19
 800854c:	6922      	ldr	r2, [r4, #16]
 800854e:	6022      	str	r2, [r4, #0]
 8008550:	d504      	bpl.n	800855c <__sflush_r+0x7c>
 8008552:	1c42      	adds	r2, r0, #1
 8008554:	d101      	bne.n	800855a <__sflush_r+0x7a>
 8008556:	682b      	ldr	r3, [r5, #0]
 8008558:	b903      	cbnz	r3, 800855c <__sflush_r+0x7c>
 800855a:	6560      	str	r0, [r4, #84]	; 0x54
 800855c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800855e:	602f      	str	r7, [r5, #0]
 8008560:	2900      	cmp	r1, #0
 8008562:	d0ca      	beq.n	80084fa <__sflush_r+0x1a>
 8008564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008568:	4299      	cmp	r1, r3
 800856a:	d002      	beq.n	8008572 <__sflush_r+0x92>
 800856c:	4628      	mov	r0, r5
 800856e:	f7ff faa5 	bl	8007abc <_free_r>
 8008572:	2000      	movs	r0, #0
 8008574:	6360      	str	r0, [r4, #52]	; 0x34
 8008576:	e7c1      	b.n	80084fc <__sflush_r+0x1c>
 8008578:	6a21      	ldr	r1, [r4, #32]
 800857a:	2301      	movs	r3, #1
 800857c:	4628      	mov	r0, r5
 800857e:	47b0      	blx	r6
 8008580:	1c41      	adds	r1, r0, #1
 8008582:	d1c7      	bne.n	8008514 <__sflush_r+0x34>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0c4      	beq.n	8008514 <__sflush_r+0x34>
 800858a:	2b1d      	cmp	r3, #29
 800858c:	d001      	beq.n	8008592 <__sflush_r+0xb2>
 800858e:	2b16      	cmp	r3, #22
 8008590:	d101      	bne.n	8008596 <__sflush_r+0xb6>
 8008592:	602f      	str	r7, [r5, #0]
 8008594:	e7b1      	b.n	80084fa <__sflush_r+0x1a>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859c:	81a3      	strh	r3, [r4, #12]
 800859e:	e7ad      	b.n	80084fc <__sflush_r+0x1c>
 80085a0:	690f      	ldr	r7, [r1, #16]
 80085a2:	2f00      	cmp	r7, #0
 80085a4:	d0a9      	beq.n	80084fa <__sflush_r+0x1a>
 80085a6:	0793      	lsls	r3, r2, #30
 80085a8:	680e      	ldr	r6, [r1, #0]
 80085aa:	bf08      	it	eq
 80085ac:	694b      	ldreq	r3, [r1, #20]
 80085ae:	600f      	str	r7, [r1, #0]
 80085b0:	bf18      	it	ne
 80085b2:	2300      	movne	r3, #0
 80085b4:	eba6 0807 	sub.w	r8, r6, r7
 80085b8:	608b      	str	r3, [r1, #8]
 80085ba:	f1b8 0f00 	cmp.w	r8, #0
 80085be:	dd9c      	ble.n	80084fa <__sflush_r+0x1a>
 80085c0:	6a21      	ldr	r1, [r4, #32]
 80085c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085c4:	4643      	mov	r3, r8
 80085c6:	463a      	mov	r2, r7
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b0      	blx	r6
 80085cc:	2800      	cmp	r0, #0
 80085ce:	dc06      	bgt.n	80085de <__sflush_r+0xfe>
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	f04f 30ff 	mov.w	r0, #4294967295
 80085dc:	e78e      	b.n	80084fc <__sflush_r+0x1c>
 80085de:	4407      	add	r7, r0
 80085e0:	eba8 0800 	sub.w	r8, r8, r0
 80085e4:	e7e9      	b.n	80085ba <__sflush_r+0xda>
 80085e6:	bf00      	nop
 80085e8:	20400001 	.word	0x20400001

080085ec <_fflush_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	690b      	ldr	r3, [r1, #16]
 80085f0:	4605      	mov	r5, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	b913      	cbnz	r3, 80085fc <_fflush_r+0x10>
 80085f6:	2500      	movs	r5, #0
 80085f8:	4628      	mov	r0, r5
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	b118      	cbz	r0, 8008606 <_fflush_r+0x1a>
 80085fe:	6983      	ldr	r3, [r0, #24]
 8008600:	b90b      	cbnz	r3, 8008606 <_fflush_r+0x1a>
 8008602:	f000 f887 	bl	8008714 <__sinit>
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <_fflush_r+0x6c>)
 8008608:	429c      	cmp	r4, r3
 800860a:	d11b      	bne.n	8008644 <_fflush_r+0x58>
 800860c:	686c      	ldr	r4, [r5, #4]
 800860e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0ef      	beq.n	80085f6 <_fflush_r+0xa>
 8008616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008618:	07d0      	lsls	r0, r2, #31
 800861a:	d404      	bmi.n	8008626 <_fflush_r+0x3a>
 800861c:	0599      	lsls	r1, r3, #22
 800861e:	d402      	bmi.n	8008626 <_fflush_r+0x3a>
 8008620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008622:	f000 f915 	bl	8008850 <__retarget_lock_acquire_recursive>
 8008626:	4628      	mov	r0, r5
 8008628:	4621      	mov	r1, r4
 800862a:	f7ff ff59 	bl	80084e0 <__sflush_r>
 800862e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008630:	07da      	lsls	r2, r3, #31
 8008632:	4605      	mov	r5, r0
 8008634:	d4e0      	bmi.n	80085f8 <_fflush_r+0xc>
 8008636:	89a3      	ldrh	r3, [r4, #12]
 8008638:	059b      	lsls	r3, r3, #22
 800863a:	d4dd      	bmi.n	80085f8 <_fflush_r+0xc>
 800863c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800863e:	f000 f908 	bl	8008852 <__retarget_lock_release_recursive>
 8008642:	e7d9      	b.n	80085f8 <_fflush_r+0xc>
 8008644:	4b05      	ldr	r3, [pc, #20]	; (800865c <_fflush_r+0x70>)
 8008646:	429c      	cmp	r4, r3
 8008648:	d101      	bne.n	800864e <_fflush_r+0x62>
 800864a:	68ac      	ldr	r4, [r5, #8]
 800864c:	e7df      	b.n	800860e <_fflush_r+0x22>
 800864e:	4b04      	ldr	r3, [pc, #16]	; (8008660 <_fflush_r+0x74>)
 8008650:	429c      	cmp	r4, r3
 8008652:	bf08      	it	eq
 8008654:	68ec      	ldreq	r4, [r5, #12]
 8008656:	e7da      	b.n	800860e <_fflush_r+0x22>
 8008658:	08008eec 	.word	0x08008eec
 800865c:	08008f0c 	.word	0x08008f0c
 8008660:	08008ecc 	.word	0x08008ecc

08008664 <std>:
 8008664:	2300      	movs	r3, #0
 8008666:	b510      	push	{r4, lr}
 8008668:	4604      	mov	r4, r0
 800866a:	e9c0 3300 	strd	r3, r3, [r0]
 800866e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008672:	6083      	str	r3, [r0, #8]
 8008674:	8181      	strh	r1, [r0, #12]
 8008676:	6643      	str	r3, [r0, #100]	; 0x64
 8008678:	81c2      	strh	r2, [r0, #14]
 800867a:	6183      	str	r3, [r0, #24]
 800867c:	4619      	mov	r1, r3
 800867e:	2208      	movs	r2, #8
 8008680:	305c      	adds	r0, #92	; 0x5c
 8008682:	f7fd fb59 	bl	8005d38 <memset>
 8008686:	4b05      	ldr	r3, [pc, #20]	; (800869c <std+0x38>)
 8008688:	6263      	str	r3, [r4, #36]	; 0x24
 800868a:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <std+0x3c>)
 800868c:	62a3      	str	r3, [r4, #40]	; 0x28
 800868e:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <std+0x40>)
 8008690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008692:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <std+0x44>)
 8008694:	6224      	str	r4, [r4, #32]
 8008696:	6323      	str	r3, [r4, #48]	; 0x30
 8008698:	bd10      	pop	{r4, pc}
 800869a:	bf00      	nop
 800869c:	080089b9 	.word	0x080089b9
 80086a0:	080089db 	.word	0x080089db
 80086a4:	08008a13 	.word	0x08008a13
 80086a8:	08008a37 	.word	0x08008a37

080086ac <_cleanup_r>:
 80086ac:	4901      	ldr	r1, [pc, #4]	; (80086b4 <_cleanup_r+0x8>)
 80086ae:	f000 b8af 	b.w	8008810 <_fwalk_reent>
 80086b2:	bf00      	nop
 80086b4:	080085ed 	.word	0x080085ed

080086b8 <__sfmoreglue>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	2268      	movs	r2, #104	; 0x68
 80086bc:	1e4d      	subs	r5, r1, #1
 80086be:	4355      	muls	r5, r2
 80086c0:	460e      	mov	r6, r1
 80086c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086c6:	f7ff fa65 	bl	8007b94 <_malloc_r>
 80086ca:	4604      	mov	r4, r0
 80086cc:	b140      	cbz	r0, 80086e0 <__sfmoreglue+0x28>
 80086ce:	2100      	movs	r1, #0
 80086d0:	e9c0 1600 	strd	r1, r6, [r0]
 80086d4:	300c      	adds	r0, #12
 80086d6:	60a0      	str	r0, [r4, #8]
 80086d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086dc:	f7fd fb2c 	bl	8005d38 <memset>
 80086e0:	4620      	mov	r0, r4
 80086e2:	bd70      	pop	{r4, r5, r6, pc}

080086e4 <__sfp_lock_acquire>:
 80086e4:	4801      	ldr	r0, [pc, #4]	; (80086ec <__sfp_lock_acquire+0x8>)
 80086e6:	f000 b8b3 	b.w	8008850 <__retarget_lock_acquire_recursive>
 80086ea:	bf00      	nop
 80086ec:	200003d5 	.word	0x200003d5

080086f0 <__sfp_lock_release>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__sfp_lock_release+0x8>)
 80086f2:	f000 b8ae 	b.w	8008852 <__retarget_lock_release_recursive>
 80086f6:	bf00      	nop
 80086f8:	200003d5 	.word	0x200003d5

080086fc <__sinit_lock_acquire>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__sinit_lock_acquire+0x8>)
 80086fe:	f000 b8a7 	b.w	8008850 <__retarget_lock_acquire_recursive>
 8008702:	bf00      	nop
 8008704:	200003d6 	.word	0x200003d6

08008708 <__sinit_lock_release>:
 8008708:	4801      	ldr	r0, [pc, #4]	; (8008710 <__sinit_lock_release+0x8>)
 800870a:	f000 b8a2 	b.w	8008852 <__retarget_lock_release_recursive>
 800870e:	bf00      	nop
 8008710:	200003d6 	.word	0x200003d6

08008714 <__sinit>:
 8008714:	b510      	push	{r4, lr}
 8008716:	4604      	mov	r4, r0
 8008718:	f7ff fff0 	bl	80086fc <__sinit_lock_acquire>
 800871c:	69a3      	ldr	r3, [r4, #24]
 800871e:	b11b      	cbz	r3, 8008728 <__sinit+0x14>
 8008720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008724:	f7ff bff0 	b.w	8008708 <__sinit_lock_release>
 8008728:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800872c:	6523      	str	r3, [r4, #80]	; 0x50
 800872e:	4b13      	ldr	r3, [pc, #76]	; (800877c <__sinit+0x68>)
 8008730:	4a13      	ldr	r2, [pc, #76]	; (8008780 <__sinit+0x6c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	62a2      	str	r2, [r4, #40]	; 0x28
 8008736:	42a3      	cmp	r3, r4
 8008738:	bf04      	itt	eq
 800873a:	2301      	moveq	r3, #1
 800873c:	61a3      	streq	r3, [r4, #24]
 800873e:	4620      	mov	r0, r4
 8008740:	f000 f820 	bl	8008784 <__sfp>
 8008744:	6060      	str	r0, [r4, #4]
 8008746:	4620      	mov	r0, r4
 8008748:	f000 f81c 	bl	8008784 <__sfp>
 800874c:	60a0      	str	r0, [r4, #8]
 800874e:	4620      	mov	r0, r4
 8008750:	f000 f818 	bl	8008784 <__sfp>
 8008754:	2200      	movs	r2, #0
 8008756:	60e0      	str	r0, [r4, #12]
 8008758:	2104      	movs	r1, #4
 800875a:	6860      	ldr	r0, [r4, #4]
 800875c:	f7ff ff82 	bl	8008664 <std>
 8008760:	68a0      	ldr	r0, [r4, #8]
 8008762:	2201      	movs	r2, #1
 8008764:	2109      	movs	r1, #9
 8008766:	f7ff ff7d 	bl	8008664 <std>
 800876a:	68e0      	ldr	r0, [r4, #12]
 800876c:	2202      	movs	r2, #2
 800876e:	2112      	movs	r1, #18
 8008770:	f7ff ff78 	bl	8008664 <std>
 8008774:	2301      	movs	r3, #1
 8008776:	61a3      	str	r3, [r4, #24]
 8008778:	e7d2      	b.n	8008720 <__sinit+0xc>
 800877a:	bf00      	nop
 800877c:	08008b54 	.word	0x08008b54
 8008780:	080086ad 	.word	0x080086ad

08008784 <__sfp>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	4607      	mov	r7, r0
 8008788:	f7ff ffac 	bl	80086e4 <__sfp_lock_acquire>
 800878c:	4b1e      	ldr	r3, [pc, #120]	; (8008808 <__sfp+0x84>)
 800878e:	681e      	ldr	r6, [r3, #0]
 8008790:	69b3      	ldr	r3, [r6, #24]
 8008792:	b913      	cbnz	r3, 800879a <__sfp+0x16>
 8008794:	4630      	mov	r0, r6
 8008796:	f7ff ffbd 	bl	8008714 <__sinit>
 800879a:	3648      	adds	r6, #72	; 0x48
 800879c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	d503      	bpl.n	80087ac <__sfp+0x28>
 80087a4:	6833      	ldr	r3, [r6, #0]
 80087a6:	b30b      	cbz	r3, 80087ec <__sfp+0x68>
 80087a8:	6836      	ldr	r6, [r6, #0]
 80087aa:	e7f7      	b.n	800879c <__sfp+0x18>
 80087ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087b0:	b9d5      	cbnz	r5, 80087e8 <__sfp+0x64>
 80087b2:	4b16      	ldr	r3, [pc, #88]	; (800880c <__sfp+0x88>)
 80087b4:	60e3      	str	r3, [r4, #12]
 80087b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087ba:	6665      	str	r5, [r4, #100]	; 0x64
 80087bc:	f000 f847 	bl	800884e <__retarget_lock_init_recursive>
 80087c0:	f7ff ff96 	bl	80086f0 <__sfp_lock_release>
 80087c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087cc:	6025      	str	r5, [r4, #0]
 80087ce:	61a5      	str	r5, [r4, #24]
 80087d0:	2208      	movs	r2, #8
 80087d2:	4629      	mov	r1, r5
 80087d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087d8:	f7fd faae 	bl	8005d38 <memset>
 80087dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087e4:	4620      	mov	r0, r4
 80087e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e8:	3468      	adds	r4, #104	; 0x68
 80087ea:	e7d9      	b.n	80087a0 <__sfp+0x1c>
 80087ec:	2104      	movs	r1, #4
 80087ee:	4638      	mov	r0, r7
 80087f0:	f7ff ff62 	bl	80086b8 <__sfmoreglue>
 80087f4:	4604      	mov	r4, r0
 80087f6:	6030      	str	r0, [r6, #0]
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d1d5      	bne.n	80087a8 <__sfp+0x24>
 80087fc:	f7ff ff78 	bl	80086f0 <__sfp_lock_release>
 8008800:	230c      	movs	r3, #12
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	e7ee      	b.n	80087e4 <__sfp+0x60>
 8008806:	bf00      	nop
 8008808:	08008b54 	.word	0x08008b54
 800880c:	ffff0001 	.word	0xffff0001

08008810 <_fwalk_reent>:
 8008810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008814:	4606      	mov	r6, r0
 8008816:	4688      	mov	r8, r1
 8008818:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800881c:	2700      	movs	r7, #0
 800881e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008822:	f1b9 0901 	subs.w	r9, r9, #1
 8008826:	d505      	bpl.n	8008834 <_fwalk_reent+0x24>
 8008828:	6824      	ldr	r4, [r4, #0]
 800882a:	2c00      	cmp	r4, #0
 800882c:	d1f7      	bne.n	800881e <_fwalk_reent+0xe>
 800882e:	4638      	mov	r0, r7
 8008830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008834:	89ab      	ldrh	r3, [r5, #12]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d907      	bls.n	800884a <_fwalk_reent+0x3a>
 800883a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800883e:	3301      	adds	r3, #1
 8008840:	d003      	beq.n	800884a <_fwalk_reent+0x3a>
 8008842:	4629      	mov	r1, r5
 8008844:	4630      	mov	r0, r6
 8008846:	47c0      	blx	r8
 8008848:	4307      	orrs	r7, r0
 800884a:	3568      	adds	r5, #104	; 0x68
 800884c:	e7e9      	b.n	8008822 <_fwalk_reent+0x12>

0800884e <__retarget_lock_init_recursive>:
 800884e:	4770      	bx	lr

08008850 <__retarget_lock_acquire_recursive>:
 8008850:	4770      	bx	lr

08008852 <__retarget_lock_release_recursive>:
 8008852:	4770      	bx	lr

08008854 <__swhatbuf_r>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	460e      	mov	r6, r1
 8008858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885c:	2900      	cmp	r1, #0
 800885e:	b096      	sub	sp, #88	; 0x58
 8008860:	4614      	mov	r4, r2
 8008862:	461d      	mov	r5, r3
 8008864:	da08      	bge.n	8008878 <__swhatbuf_r+0x24>
 8008866:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	602a      	str	r2, [r5, #0]
 800886e:	061a      	lsls	r2, r3, #24
 8008870:	d410      	bmi.n	8008894 <__swhatbuf_r+0x40>
 8008872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008876:	e00e      	b.n	8008896 <__swhatbuf_r+0x42>
 8008878:	466a      	mov	r2, sp
 800887a:	f000 f903 	bl	8008a84 <_fstat_r>
 800887e:	2800      	cmp	r0, #0
 8008880:	dbf1      	blt.n	8008866 <__swhatbuf_r+0x12>
 8008882:	9a01      	ldr	r2, [sp, #4]
 8008884:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008888:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800888c:	425a      	negs	r2, r3
 800888e:	415a      	adcs	r2, r3
 8008890:	602a      	str	r2, [r5, #0]
 8008892:	e7ee      	b.n	8008872 <__swhatbuf_r+0x1e>
 8008894:	2340      	movs	r3, #64	; 0x40
 8008896:	2000      	movs	r0, #0
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	b016      	add	sp, #88	; 0x58
 800889c:	bd70      	pop	{r4, r5, r6, pc}
	...

080088a0 <__smakebuf_r>:
 80088a0:	898b      	ldrh	r3, [r1, #12]
 80088a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088a4:	079d      	lsls	r5, r3, #30
 80088a6:	4606      	mov	r6, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	d507      	bpl.n	80088bc <__smakebuf_r+0x1c>
 80088ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	6123      	str	r3, [r4, #16]
 80088b4:	2301      	movs	r3, #1
 80088b6:	6163      	str	r3, [r4, #20]
 80088b8:	b002      	add	sp, #8
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	ab01      	add	r3, sp, #4
 80088be:	466a      	mov	r2, sp
 80088c0:	f7ff ffc8 	bl	8008854 <__swhatbuf_r>
 80088c4:	9900      	ldr	r1, [sp, #0]
 80088c6:	4605      	mov	r5, r0
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7ff f963 	bl	8007b94 <_malloc_r>
 80088ce:	b948      	cbnz	r0, 80088e4 <__smakebuf_r+0x44>
 80088d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d4:	059a      	lsls	r2, r3, #22
 80088d6:	d4ef      	bmi.n	80088b8 <__smakebuf_r+0x18>
 80088d8:	f023 0303 	bic.w	r3, r3, #3
 80088dc:	f043 0302 	orr.w	r3, r3, #2
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	e7e3      	b.n	80088ac <__smakebuf_r+0xc>
 80088e4:	4b0d      	ldr	r3, [pc, #52]	; (800891c <__smakebuf_r+0x7c>)
 80088e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	6020      	str	r0, [r4, #0]
 80088ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f0:	81a3      	strh	r3, [r4, #12]
 80088f2:	9b00      	ldr	r3, [sp, #0]
 80088f4:	6163      	str	r3, [r4, #20]
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	6120      	str	r0, [r4, #16]
 80088fa:	b15b      	cbz	r3, 8008914 <__smakebuf_r+0x74>
 80088fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008900:	4630      	mov	r0, r6
 8008902:	f000 f8d1 	bl	8008aa8 <_isatty_r>
 8008906:	b128      	cbz	r0, 8008914 <__smakebuf_r+0x74>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f023 0303 	bic.w	r3, r3, #3
 800890e:	f043 0301 	orr.w	r3, r3, #1
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	89a0      	ldrh	r0, [r4, #12]
 8008916:	4305      	orrs	r5, r0
 8008918:	81a5      	strh	r5, [r4, #12]
 800891a:	e7cd      	b.n	80088b8 <__smakebuf_r+0x18>
 800891c:	080086ad 	.word	0x080086ad

08008920 <_malloc_usable_size_r>:
 8008920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008924:	1f18      	subs	r0, r3, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfbc      	itt	lt
 800892a:	580b      	ldrlt	r3, [r1, r0]
 800892c:	18c0      	addlt	r0, r0, r3
 800892e:	4770      	bx	lr

08008930 <_raise_r>:
 8008930:	291f      	cmp	r1, #31
 8008932:	b538      	push	{r3, r4, r5, lr}
 8008934:	4604      	mov	r4, r0
 8008936:	460d      	mov	r5, r1
 8008938:	d904      	bls.n	8008944 <_raise_r+0x14>
 800893a:	2316      	movs	r3, #22
 800893c:	6003      	str	r3, [r0, #0]
 800893e:	f04f 30ff 	mov.w	r0, #4294967295
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008946:	b112      	cbz	r2, 800894e <_raise_r+0x1e>
 8008948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800894c:	b94b      	cbnz	r3, 8008962 <_raise_r+0x32>
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f830 	bl	80089b4 <_getpid_r>
 8008954:	462a      	mov	r2, r5
 8008956:	4601      	mov	r1, r0
 8008958:	4620      	mov	r0, r4
 800895a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800895e:	f000 b817 	b.w	8008990 <_kill_r>
 8008962:	2b01      	cmp	r3, #1
 8008964:	d00a      	beq.n	800897c <_raise_r+0x4c>
 8008966:	1c59      	adds	r1, r3, #1
 8008968:	d103      	bne.n	8008972 <_raise_r+0x42>
 800896a:	2316      	movs	r3, #22
 800896c:	6003      	str	r3, [r0, #0]
 800896e:	2001      	movs	r0, #1
 8008970:	e7e7      	b.n	8008942 <_raise_r+0x12>
 8008972:	2400      	movs	r4, #0
 8008974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008978:	4628      	mov	r0, r5
 800897a:	4798      	blx	r3
 800897c:	2000      	movs	r0, #0
 800897e:	e7e0      	b.n	8008942 <_raise_r+0x12>

08008980 <raise>:
 8008980:	4b02      	ldr	r3, [pc, #8]	; (800898c <raise+0xc>)
 8008982:	4601      	mov	r1, r0
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	f7ff bfd3 	b.w	8008930 <_raise_r>
 800898a:	bf00      	nop
 800898c:	2000000c 	.word	0x2000000c

08008990 <_kill_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d07      	ldr	r5, [pc, #28]	; (80089b0 <_kill_r+0x20>)
 8008994:	2300      	movs	r3, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	4611      	mov	r1, r2
 800899c:	602b      	str	r3, [r5, #0]
 800899e:	f7f8 fee5 	bl	800176c <_kill>
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	d102      	bne.n	80089ac <_kill_r+0x1c>
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	b103      	cbz	r3, 80089ac <_kill_r+0x1c>
 80089aa:	6023      	str	r3, [r4, #0]
 80089ac:	bd38      	pop	{r3, r4, r5, pc}
 80089ae:	bf00      	nop
 80089b0:	200003d0 	.word	0x200003d0

080089b4 <_getpid_r>:
 80089b4:	f7f8 bed2 	b.w	800175c <_getpid>

080089b8 <__sread>:
 80089b8:	b510      	push	{r4, lr}
 80089ba:	460c      	mov	r4, r1
 80089bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c0:	f000 f894 	bl	8008aec <_read_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	bfab      	itete	ge
 80089c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ca:	89a3      	ldrhlt	r3, [r4, #12]
 80089cc:	181b      	addge	r3, r3, r0
 80089ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089d2:	bfac      	ite	ge
 80089d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089d6:	81a3      	strhlt	r3, [r4, #12]
 80089d8:	bd10      	pop	{r4, pc}

080089da <__swrite>:
 80089da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089de:	461f      	mov	r7, r3
 80089e0:	898b      	ldrh	r3, [r1, #12]
 80089e2:	05db      	lsls	r3, r3, #23
 80089e4:	4605      	mov	r5, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	4616      	mov	r6, r2
 80089ea:	d505      	bpl.n	80089f8 <__swrite+0x1e>
 80089ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f0:	2302      	movs	r3, #2
 80089f2:	2200      	movs	r2, #0
 80089f4:	f000 f868 	bl	8008ac8 <_lseek_r>
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	4632      	mov	r2, r6
 8008a06:	463b      	mov	r3, r7
 8008a08:	4628      	mov	r0, r5
 8008a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0e:	f000 b817 	b.w	8008a40 <_write_r>

08008a12 <__sseek>:
 8008a12:	b510      	push	{r4, lr}
 8008a14:	460c      	mov	r4, r1
 8008a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1a:	f000 f855 	bl	8008ac8 <_lseek_r>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	bf15      	itete	ne
 8008a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a2e:	81a3      	strheq	r3, [r4, #12]
 8008a30:	bf18      	it	ne
 8008a32:	81a3      	strhne	r3, [r4, #12]
 8008a34:	bd10      	pop	{r4, pc}

08008a36 <__sclose>:
 8008a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a3a:	f000 b813 	b.w	8008a64 <_close_r>
	...

08008a40 <_write_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4d07      	ldr	r5, [pc, #28]	; (8008a60 <_write_r+0x20>)
 8008a44:	4604      	mov	r4, r0
 8008a46:	4608      	mov	r0, r1
 8008a48:	4611      	mov	r1, r2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	602a      	str	r2, [r5, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f7f8 fec3 	bl	80017da <_write>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_write_r+0x1e>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_write_r+0x1e>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	200003d0 	.word	0x200003d0

08008a64 <_close_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d06      	ldr	r5, [pc, #24]	; (8008a80 <_close_r+0x1c>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	f7f8 fecf 	bl	8001812 <_close>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_close_r+0x1a>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_close_r+0x1a>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	200003d0 	.word	0x200003d0

08008a84 <_fstat_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d07      	ldr	r5, [pc, #28]	; (8008aa4 <_fstat_r+0x20>)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	4611      	mov	r1, r2
 8008a90:	602b      	str	r3, [r5, #0]
 8008a92:	f7f8 feca 	bl	800182a <_fstat>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d102      	bne.n	8008aa0 <_fstat_r+0x1c>
 8008a9a:	682b      	ldr	r3, [r5, #0]
 8008a9c:	b103      	cbz	r3, 8008aa0 <_fstat_r+0x1c>
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
 8008aa2:	bf00      	nop
 8008aa4:	200003d0 	.word	0x200003d0

08008aa8 <_isatty_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d06      	ldr	r5, [pc, #24]	; (8008ac4 <_isatty_r+0x1c>)
 8008aac:	2300      	movs	r3, #0
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	f7f8 fec9 	bl	800184a <_isatty>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d102      	bne.n	8008ac2 <_isatty_r+0x1a>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	b103      	cbz	r3, 8008ac2 <_isatty_r+0x1a>
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	200003d0 	.word	0x200003d0

08008ac8 <_lseek_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d07      	ldr	r5, [pc, #28]	; (8008ae8 <_lseek_r+0x20>)
 8008acc:	4604      	mov	r4, r0
 8008ace:	4608      	mov	r0, r1
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	602a      	str	r2, [r5, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f7f8 fec2 	bl	8001860 <_lseek>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_lseek_r+0x1e>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_lseek_r+0x1e>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	200003d0 	.word	0x200003d0

08008aec <_read_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4d07      	ldr	r5, [pc, #28]	; (8008b0c <_read_r+0x20>)
 8008af0:	4604      	mov	r4, r0
 8008af2:	4608      	mov	r0, r1
 8008af4:	4611      	mov	r1, r2
 8008af6:	2200      	movs	r2, #0
 8008af8:	602a      	str	r2, [r5, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	f7f8 fe50 	bl	80017a0 <_read>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_read_r+0x1e>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_read_r+0x1e>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	200003d0 	.word	0x200003d0

08008b10 <_init>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr

08008b1c <_fini>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	bf00      	nop
 8008b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b22:	bc08      	pop	{r3}
 8008b24:	469e      	mov	lr, r3
 8008b26:	4770      	bx	lr
