
temperature_QMC_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007850  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007a00  08007a00  00008a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc0  08007bc0  000090ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bc0  08007bc0  00008bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc8  08007bc8  000090ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc8  08007bc8  00008bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bcc  08007bcc  00008bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08007bd0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090ac  2**0
                  CONTENTS
 10 .bss          00004f08  200000ac  200000ac  000090ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004fb4  20004fb4  000090ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b5f  00000000  00000000  000090dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000338d  00000000  00000000  0001fc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00022fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecf  00000000  00000000  000242d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003625  00000000  00000000  0002519f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000168fe  00000000  00000000  000287c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb205  00000000  00000000  0003f0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a2c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054e4  00000000  00000000  0012a30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0012f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080079e8 	.word	0x080079e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	080079e8 	.word	0x080079e8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <QMC_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void QMC_Init(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af04      	add	r7, sp, #16
	uint8_t reset;

    reset = 0x1D;
 80005d2:	231d      	movs	r3, #29
 80005d4:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Mem_Write(&hi2c1,QMC_ADDR,QMC_CON,1,&reset,1,1000);
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2301      	movs	r3, #1
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	2209      	movs	r2, #9
 80005e8:	211a      	movs	r1, #26
 80005ea:	480b      	ldr	r0, [pc, #44]	@ (8000618 <QMC_Init+0x4c>)
 80005ec:	f001 fdbc 	bl	8002168 <HAL_I2C_Mem_Write>

    reset = 0x01;
 80005f0:	2301      	movs	r3, #1
 80005f2:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Mem_Write(&hi2c1,QMC_ADDR,QMC_SR,1,&reset,1,1000);
 80005f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	220b      	movs	r2, #11
 8000606:	211a      	movs	r1, #26
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <QMC_Init+0x4c>)
 800060a:	f001 fdad 	bl	8002168 <HAL_I2C_Mem_Write>

}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000420 	.word	0x20000420

0800061c <QMC_READ>:

void QMC_READ(sensor *Qd){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 uint8_t flag;
     HAL_I2C_Mem_Read(&hi2c1,QMC_ADDR,QMC_SR,1,&flag,1,1000);
 8000624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000628:	9302      	str	r3, [sp, #8]
 800062a:	2301      	movs	r3, #1
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	f107 030f 	add.w	r3, r7, #15
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	220b      	movs	r2, #11
 8000638:	211a      	movs	r1, #26
 800063a:	481f      	ldr	r0, [pc, #124]	@ (80006b8 <QMC_READ+0x9c>)
 800063c:	f001 fe8e 	bl	800235c <HAL_I2C_Mem_Read>

     if(flag & 0x01){
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	2b00      	cmp	r3, #0
 8000648:	d031      	beq.n	80006ae <QMC_READ+0x92>

    	 HAL_I2C_Mem_Read(&hi2c1,QMC_ADDR,QMC_DATA,1,Qd->qmcd,6,1000);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3308      	adds	r3, #8
 800064e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000652:	9202      	str	r2, [sp, #8]
 8000654:	2206      	movs	r2, #6
 8000656:	9201      	str	r2, [sp, #4]
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2301      	movs	r3, #1
 800065c:	2200      	movs	r2, #0
 800065e:	211a      	movs	r1, #26
 8000660:	4815      	ldr	r0, [pc, #84]	@ (80006b8 <QMC_READ+0x9c>)
 8000662:	f001 fe7b 	bl	800235c <HAL_I2C_Mem_Read>
    	 Qd->x = (int16_t)(Qd->qmcd[1]<<8)|Qd->qmcd[0];
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7a5b      	ldrb	r3, [r3, #9]
 800066a:	b21b      	sxth	r3, r3
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	b21a      	sxth	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7a1b      	ldrb	r3, [r3, #8]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21a      	sxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	805a      	strh	r2, [r3, #2]
    	 Qd->y = (int16_t)(Qd->qmcd[3]<<8)|Qd->qmcd[2];
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7adb      	ldrb	r3, [r3, #11]
 8000682:	b21b      	sxth	r3, r3
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b21a      	sxth	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7a9b      	ldrb	r3, [r3, #10]
 800068c:	b21b      	sxth	r3, r3
 800068e:	4313      	orrs	r3, r2
 8000690:	b21a      	sxth	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	809a      	strh	r2, [r3, #4]
    	 Qd->z = (int16_t)(Qd->qmcd[5]<<8)|Qd->qmcd[4];
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7b5b      	ldrb	r3, [r3, #13]
 800069a:	b21b      	sxth	r3, r3
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	7b1b      	ldrb	r3, [r3, #12]
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	80da      	strh	r2, [r3, #6]
     }
}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000420 	.word	0x20000420

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fd1a 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f85a 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f9a8 	bl	8000a1c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006cc:	f000 f952 	bl	8000974 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80006d0:	f000 f8be 	bl	8000850 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006d4:	f000 f90e 	bl	80008f4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80006d8:	f000 f976 	bl	80009c8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006dc:	f003 fd78 	bl	80041d0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartQueue01 */
  uartQueue01Handle = osMessageQueueNew (16, sizeof(char[256]), &uartQueue01_attributes);
 80006e0:	4a19      	ldr	r2, [pc, #100]	@ (8000748 <main+0x8c>)
 80006e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e6:	2010      	movs	r0, #16
 80006e8:	f003 fe69 	bl	80043be <osMessageQueueNew>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a17      	ldr	r2, [pc, #92]	@ (800074c <main+0x90>)
 80006f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of qmcTask */
  qmcTaskHandle = osThreadNew(QMCTask, NULL, &qmcTask_attributes);
 80006f2:	4a17      	ldr	r2, [pc, #92]	@ (8000750 <main+0x94>)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4817      	ldr	r0, [pc, #92]	@ (8000754 <main+0x98>)
 80006f8:	f003 fdb4 	bl	8004264 <osThreadNew>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a16      	ldr	r2, [pc, #88]	@ (8000758 <main+0x9c>)
 8000700:	6013      	str	r3, [r2, #0]

  /* creation of tempTask */
  tempTaskHandle = osThreadNew(tempTask02, NULL, &tempTask_attributes);
 8000702:	4a16      	ldr	r2, [pc, #88]	@ (800075c <main+0xa0>)
 8000704:	2100      	movs	r1, #0
 8000706:	4816      	ldr	r0, [pc, #88]	@ (8000760 <main+0xa4>)
 8000708:	f003 fdac 	bl	8004264 <osThreadNew>
 800070c:	4603      	mov	r3, r0
 800070e:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <main+0xa8>)
 8000710:	6013      	str	r3, [r2, #0]

  /* creation of uartTask */
  uartTaskHandle = osThreadNew(printTask, NULL, &uartTask_attributes);
 8000712:	4a15      	ldr	r2, [pc, #84]	@ (8000768 <main+0xac>)
 8000714:	2100      	movs	r1, #0
 8000716:	4815      	ldr	r0, [pc, #84]	@ (800076c <main+0xb0>)
 8000718:	f003 fda4 	bl	8004264 <osThreadNew>
 800071c:	4603      	mov	r3, r0
 800071e:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <main+0xb4>)
 8000720:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

	HAL_UART_Transmit(&huart6,(uint8_t*)cwjap,strlen(cwjap),100);
 8000722:	4814      	ldr	r0, [pc, #80]	@ (8000774 <main+0xb8>)
 8000724:	f7ff fd64 	bl	80001f0 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	2364      	movs	r3, #100	@ 0x64
 800072e:	4911      	ldr	r1, [pc, #68]	@ (8000774 <main+0xb8>)
 8000730:	4811      	ldr	r0, [pc, #68]	@ (8000778 <main+0xbc>)
 8000732:	f003 f95d 	bl	80039f0 <HAL_UART_Transmit>
  osDelay(5000);
 8000736:	f241 3088 	movw	r0, #5000	@ 0x1388
 800073a:	f003 fe25 	bl	8004388 <osDelay>
  /* Start scheduler */
  osKernelStart();
 800073e:	f003 fd6b 	bl	8004218 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000742:	bf00      	nop
 8000744:	e7fd      	b.n	8000742 <main+0x86>
 8000746:	bf00      	nop
 8000748:	08007b5c 	.word	0x08007b5c
 800074c:	20000510 	.word	0x20000510
 8000750:	08007af0 	.word	0x08007af0
 8000754:	08000b79 	.word	0x08000b79
 8000758:	20000504 	.word	0x20000504
 800075c:	08007b14 	.word	0x08007b14
 8000760:	08000c29 	.word	0x08000c29
 8000764:	20000508 	.word	0x20000508
 8000768:	08007b38 	.word	0x08007b38
 800076c:	08000ca9 	.word	0x08000ca9
 8000770:	2000050c 	.word	0x2000050c
 8000774:	20000000 	.word	0x20000000
 8000778:	200004bc 	.word	0x200004bc

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f006 fcae 	bl	80070ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <SystemClock_Config+0xd0>)
 80007c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f0:	23a8      	movs	r3, #168	@ 0xa8
 80007f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f8:	2307      	movs	r3, #7
 80007fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fc0d 	bl	8003020 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800080c:	f000 fa8c 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2105      	movs	r1, #5
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fe6e 	bl	8003510 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083a:	f000 fa75 	bl	8000d28 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000864:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <MX_ADC1_Init+0x9c>)
 8000866:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000868:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_ADC1_Init+0x98>)
 800086a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800086e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800087c:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_ADC1_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088a:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_ADC1_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000892:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <MX_ADC1_Init+0xa0>)
 8000894:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_ADC1_Init+0x98>)
 800089e:	2201      	movs	r2, #1
 80008a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_ADC1_Init+0x98>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <MX_ADC1_Init+0x98>)
 80008b2:	f000 fc93 	bl	80011dc <HAL_ADC_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008bc:	f000 fa34 	bl	8000d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	2303      	movs	r3, #3
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_ADC1_Init+0x98>)
 80008d2:	f000 fdf5 	bl	80014c0 <HAL_ADC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008dc:	f000 fa24 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200003d8 	.word	0x200003d8
 80008ec:	40012000 	.word	0x40012000
 80008f0:	0f000001 	.word	0x0f000001

080008f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_I2C1_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	@ (800096c <MX_I2C1_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	@ (8000970 <MX_I2C1_Init+0x7c>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_I2C1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000912:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000924:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_I2C1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000932:	f001 fad5 	bl	8001ee0 <HAL_I2C_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 f9f4 	bl	8000d28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	4809      	ldr	r0, [pc, #36]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000944:	f002 faf0 	bl	8002f28 <HAL_I2CEx_ConfigAnalogFilter>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800094e:	f000 f9eb 	bl	8000d28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000956:	f002 fb23 	bl	8002fa0 <HAL_I2CEx_ConfigDigitalFilter>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000960:	f000 f9e2 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000420 	.word	0x20000420
 800096c:	40005400 	.word	0x40005400
 8000970:	000186a0 	.word	0x000186a0

08000974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USART3_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <MX_USART3_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_USART3_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USART3_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USART3_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USART3_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USART3_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USART3_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USART3_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USART3_UART_Init+0x4c>)
 80009ac:	f002 ffd0 	bl	8003950 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f9b7 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000474 	.word	0x20000474
 80009c4:	40004800 	.word	0x40004800

080009c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <MX_USART6_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_USART6_UART_Init+0x4c>)
 8000a00:	f002 ffa6 	bl	8003950 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f000 f98d 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200004bc 	.word	0x200004bc
 8000a18:	40011400 	.word	0x40011400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	@ 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	4b4c      	ldr	r3, [pc, #304]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b49      	ldr	r3, [pc, #292]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	4b45      	ldr	r3, [pc, #276]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a44      	ldr	r2, [pc, #272]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b42      	ldr	r3, [pc, #264]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a3d      	ldr	r2, [pc, #244]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a36      	ldr	r2, [pc, #216]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b30      	ldr	r3, [pc, #192]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a28      	ldr	r2, [pc, #160]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ae0:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <MX_GPIO_Init+0x150>)
 8000ae2:	f001 f9e3 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	@ 0x40
 8000aea:	4821      	ldr	r0, [pc, #132]	@ (8000b70 <MX_GPIO_Init+0x154>)
 8000aec:	f001 f9de 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	481b      	ldr	r0, [pc, #108]	@ (8000b74 <MX_GPIO_Init+0x158>)
 8000b08:	f001 f824 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b0c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4811      	ldr	r0, [pc, #68]	@ (8000b6c <MX_GPIO_Init+0x150>)
 8000b26:	f001 f815 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b2a:	2340      	movs	r3, #64	@ 0x40
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <MX_GPIO_Init+0x154>)
 8000b42:	f001 f807 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b46:	2380      	movs	r3, #128	@ 0x80
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_GPIO_Init+0x154>)
 8000b5a:	f000 fffb 	bl	8001b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3730      	adds	r7, #48	@ 0x30
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40020800 	.word	0x40020800

08000b78 <QMCTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_QMCTask */
void QMCTask(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	QMC_Init();
 8000b80:	f7ff fd24 	bl	80005cc <QMC_Init>
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart6,(uint8_t*)tcp,strlen(tcp),100);
 8000b84:	4820      	ldr	r0, [pc, #128]	@ (8000c08 <QMCTask+0x90>)
 8000b86:	f7ff fb33 	bl	80001f0 <strlen>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	2364      	movs	r3, #100	@ 0x64
 8000b90:	491d      	ldr	r1, [pc, #116]	@ (8000c08 <QMCTask+0x90>)
 8000b92:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <QMCTask+0x94>)
 8000b94:	f002 ff2c 	bl	80039f0 <HAL_UART_Transmit>
	  osDelay(1000);
 8000b98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b9c:	f003 fbf4 	bl	8004388 <osDelay>
	  QMC_READ(&s);
 8000ba0:	481b      	ldr	r0, [pc, #108]	@ (8000c10 <QMCTask+0x98>)
 8000ba2:	f7ff fd3b 	bl	800061c <QMC_READ>
	  osDelay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f003 fbee 	bl	8004388 <osDelay>
	  sprintf(d.qmcbuf,"GET /test?data=%d,%d,%d HTTP/1.1\r\nHost: 192.168.146.237\r\nConnection: close\r\n\r\n",s.x,s.y,s.z);
 8000bac:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <QMCTask+0x98>)
 8000bae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <QMCTask+0x98>)
 8000bb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <QMCTask+0x98>)
 8000bbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	4913      	ldr	r1, [pc, #76]	@ (8000c14 <QMCTask+0x9c>)
 8000bc8:	4813      	ldr	r0, [pc, #76]	@ (8000c18 <QMCTask+0xa0>)
 8000bca:	f006 fa6d 	bl	80070a8 <siprintf>
	  sprintf(buf, "AT+CIPSEND=%d\r\n", strlen(d.qmcbuf));
 8000bce:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <QMCTask+0xa0>)
 8000bd0:	f7ff fb0e 	bl	80001f0 <strlen>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4910      	ldr	r1, [pc, #64]	@ (8000c1c <QMCTask+0xa4>)
 8000bda:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <QMCTask+0xa8>)
 8000bdc:	f006 fa64 	bl	80070a8 <siprintf>
	  osMessageQueuePut(uartQueue01Handle,buf,0,0);
 8000be0:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <QMCTask+0xac>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	2200      	movs	r2, #0
 8000be8:	490d      	ldr	r1, [pc, #52]	@ (8000c20 <QMCTask+0xa8>)
 8000bea:	f003 fc5b 	bl	80044a4 <osMessageQueuePut>
	  osMessageQueuePut(uartQueue01Handle,d.qmcbuf,0,0);
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <QMCTask+0xac>)
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4908      	ldr	r1, [pc, #32]	@ (8000c18 <QMCTask+0xa0>)
 8000bf8:	f003 fc54 	bl	80044a4 <osMessageQueuePut>
      osDelay(2000);
 8000bfc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c00:	f003 fbc2 	bl	8004388 <osDelay>
  {
 8000c04:	bf00      	nop
 8000c06:	e7bd      	b.n	8000b84 <QMCTask+0xc>
 8000c08:	20000020 	.word	0x20000020
 8000c0c:	200004bc 	.word	0x200004bc
 8000c10:	200000c8 	.word	0x200000c8
 8000c14:	08007a2c 	.word	0x08007a2c
 8000c18:	200001d8 	.word	0x200001d8
 8000c1c:	08007a7c 	.word	0x08007a7c
 8000c20:	200002d8 	.word	0x200002d8
 8000c24:	20000510 	.word	0x20000510

08000c28 <tempTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tempTask02 */
void tempTask02(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tempTask02 */

  /* Infinite loop */
  for(;;)
  {
	 ADC1->CR2 = 0x40000001;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <tempTask02+0x60>)
 8000c32:	4a16      	ldr	r2, [pc, #88]	@ (8000c8c <tempTask02+0x64>)
 8000c34:	609a      	str	r2, [r3, #8]
	 s.temp = ADC1->DR;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <tempTask02+0x60>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <tempTask02+0x68>)
 8000c3e:	801a      	strh	r2, [r3, #0]
	 sprintf(d.tempbuf,"GET /test?data=%d HTTP/1.1\r\nHost: 192.168.146.237\r\nConnection: close\r\n\r\n",s.temp);
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <tempTask02+0x68>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4913      	ldr	r1, [pc, #76]	@ (8000c94 <tempTask02+0x6c>)
 8000c48:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <tempTask02+0x70>)
 8000c4a:	f006 fa2d 	bl	80070a8 <siprintf>
	 sprintf(buf, "AT+CIPSEND=%d\r\n", strlen(d.tempbuf));
 8000c4e:	4812      	ldr	r0, [pc, #72]	@ (8000c98 <tempTask02+0x70>)
 8000c50:	f7ff face 	bl	80001f0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4910      	ldr	r1, [pc, #64]	@ (8000c9c <tempTask02+0x74>)
 8000c5a:	4811      	ldr	r0, [pc, #68]	@ (8000ca0 <tempTask02+0x78>)
 8000c5c:	f006 fa24 	bl	80070a8 <siprintf>
	 osMessageQueuePut(uartQueue01Handle,buf,0,0);
 8000c60:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <tempTask02+0x7c>)
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	2300      	movs	r3, #0
 8000c66:	2200      	movs	r2, #0
 8000c68:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <tempTask02+0x78>)
 8000c6a:	f003 fc1b 	bl	80044a4 <osMessageQueuePut>
	 osMessageQueuePut(uartQueue01Handle,d.tempbuf,0,0);
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <tempTask02+0x7c>)
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	2300      	movs	r3, #0
 8000c74:	2200      	movs	r2, #0
 8000c76:	4908      	ldr	r1, [pc, #32]	@ (8000c98 <tempTask02+0x70>)
 8000c78:	f003 fc14 	bl	80044a4 <osMessageQueuePut>
     osDelay(2000);
 8000c7c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c80:	f003 fb82 	bl	8004388 <osDelay>
  {
 8000c84:	bf00      	nop
 8000c86:	e7d3      	b.n	8000c30 <tempTask02+0x8>
 8000c88:	40012000 	.word	0x40012000
 8000c8c:	40000001 	.word	0x40000001
 8000c90:	200000c8 	.word	0x200000c8
 8000c94:	08007a8c 	.word	0x08007a8c
 8000c98:	200000d8 	.word	0x200000d8
 8000c9c:	08007a7c 	.word	0x08007a7c
 8000ca0:	200002d8 	.word	0x200002d8
 8000ca4:	20000510 	.word	0x20000510

08000ca8 <printTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask */
void printTask(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN printTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(uartQueue01Handle, buf, NULL, osWaitForever) == osOK) {
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <printTask+0x74>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4919      	ldr	r1, [pc, #100]	@ (8000d20 <printTask+0x78>)
 8000cbc:	f003 fc52 	bl	8004564 <osMessageQueueGet>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10e      	bne.n	8000ce4 <printTask+0x3c>
		  HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), 0xFFFF);
 8000cc6:	4816      	ldr	r0, [pc, #88]	@ (8000d20 <printTask+0x78>)
 8000cc8:	f7ff fa92 	bl	80001f0 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cd4:	4912      	ldr	r1, [pc, #72]	@ (8000d20 <printTask+0x78>)
 8000cd6:	4813      	ldr	r0, [pc, #76]	@ (8000d24 <printTask+0x7c>)
 8000cd8:	f002 fe8a 	bl	80039f0 <HAL_UART_Transmit>
		  osDelay(300);
 8000cdc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ce0:	f003 fb52 	bl	8004388 <osDelay>
	 	  	         }

	    if (osMessageQueueGet(uartQueue01Handle, buf, NULL, osWaitForever) == osOK) {
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <printTask+0x74>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	2200      	movs	r2, #0
 8000cee:	490c      	ldr	r1, [pc, #48]	@ (8000d20 <printTask+0x78>)
 8000cf0:	f003 fc38 	bl	8004564 <osMessageQueueGet>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1da      	bne.n	8000cb0 <printTask+0x8>
	        HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), 0xFFFF);
 8000cfa:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <printTask+0x78>)
 8000cfc:	f7ff fa78 	bl	80001f0 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d08:	4905      	ldr	r1, [pc, #20]	@ (8000d20 <printTask+0x78>)
 8000d0a:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <printTask+0x7c>)
 8000d0c:	f002 fe70 	bl	80039f0 <HAL_UART_Transmit>
	        osDelay(1000);
 8000d10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d14:	f003 fb38 	bl	8004388 <osDelay>
	  if (osMessageQueueGet(uartQueue01Handle, buf, NULL, osWaitForever) == osOK) {
 8000d18:	e7ca      	b.n	8000cb0 <printTask+0x8>
 8000d1a:	bf00      	nop
 8000d1c:	20000510 	.word	0x20000510
 8000d20:	200002d8 	.word	0x200002d8
 8000d24:	200004bc 	.word	0x200004bc

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a11      	ldr	r2, [pc, #68]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	210f      	movs	r1, #15
 8000d76:	f06f 0001 	mvn.w	r0, #1
 8000d7a:	f000 feb4 	bl	8001ae6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e18 <HAL_ADC_MspInit+0x8c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12f      	bne.n	8000e0e <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <HAL_ADC_MspInit+0x90>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	4a19      	ldr	r2, [pc, #100]	@ (8000e1c <HAL_ADC_MspInit+0x90>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <HAL_ADC_MspInit+0x90>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <HAL_ADC_MspInit+0x90>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <HAL_ADC_MspInit+0x90>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <HAL_ADC_MspInit+0x90>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000de6:	2308      	movs	r3, #8
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <HAL_ADC_MspInit+0x94>)
 8000dfa:	f000 feab 	bl	8001b54 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	2012      	movs	r0, #18
 8000e04:	f000 fe6f 	bl	8001ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e08:	2012      	movs	r0, #18
 8000e0a:	f000 fe88 	bl	8001b1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000

08000e24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a19      	ldr	r2, [pc, #100]	@ (8000ea8 <HAL_I2C_MspInit+0x84>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d12c      	bne.n	8000ea0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_I2C_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <HAL_I2C_MspInit+0x88>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_I2C_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e68:	2312      	movs	r3, #18
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e74:	2304      	movs	r3, #4
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <HAL_I2C_MspInit+0x8c>)
 8000e80:	f000 fe68 	bl	8001b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <HAL_I2C_MspInit+0x88>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_I2C_MspInit+0x88>)
 8000e8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <HAL_I2C_MspInit+0x88>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	@ 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	@ 0x30
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a32      	ldr	r2, [pc, #200]	@ (8000f9c <HAL_UART_MspInit+0xe8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d12d      	bne.n	8000f32 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	4b31      	ldr	r3, [pc, #196]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	4a30      	ldr	r2, [pc, #192]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f20:	2307      	movs	r3, #7
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481e      	ldr	r0, [pc, #120]	@ (8000fa4 <HAL_UART_MspInit+0xf0>)
 8000f2c:	f000 fe12 	bl	8001b54 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f30:	e030      	b.n	8000f94 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <HAL_UART_MspInit+0xf4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d12b      	bne.n	8000f94 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f44:	4a16      	ldr	r2, [pc, #88]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f50:	f003 0320 	and.w	r3, r3, #32
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f68:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f74:	23c0      	movs	r3, #192	@ 0xc0
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f84:	2308      	movs	r3, #8
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4807      	ldr	r0, [pc, #28]	@ (8000fac <HAL_UART_MspInit+0xf8>)
 8000f90:	f000 fde0 	bl	8001b54 <HAL_GPIO_Init>
}
 8000f94:	bf00      	nop
 8000f96:	3730      	adds	r7, #48	@ 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40004800 	.word	0x40004800
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40011400 	.word	0x40011400
 8000fac:	40020800 	.word	0x40020800

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fea:	f000 f8d7 	bl	800119c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fee:	f004 ffe1 	bl	8005fb4 <xTaskGetSchedulerState>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d001      	beq.n	8000ffc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ff8:	f005 fdd6 	bl	8006ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <ADC_IRQHandler+0x10>)
 8001006:	f000 f92c 	bl	8001262 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200003d8 	.word	0x200003d8

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f006 f85a 	bl	80070fc <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20030000 	.word	0x20030000
 8001074:	00000400 	.word	0x00000400
 8001078:	20000514 	.word	0x20000514
 800107c:	20004fb8 	.word	0x20004fb8

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <SystemInit+0x20>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <SystemInit+0x20>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a8:	f7ff ffea 	bl	8001080 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ae:	490d      	ldr	r1, [pc, #52]	@ (80010e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b0:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c4:	4c0a      	ldr	r4, [pc, #40]	@ (80010f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f006 f819 	bl	8007108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff faf1 	bl	80006bc <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80010e8:	08007bd0 	.word	0x08007bd0
  ldr r2, =_sbss
 80010ec:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80010f0:	20004fb4 	.word	0x20004fb4

080010f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <CAN1_RX0_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <HAL_Init+0x40>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <HAL_Init+0x40>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <HAL_Init+0x40>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 fcd5 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fe02 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fced 	bl	8001b3a <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 fcb5 	bl	8001ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000004c 	.word	0x2000004c
 8001194:	20000054 	.word	0x20000054
 8001198:	20000050 	.word	0x20000050

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000054 	.word	0x20000054
 80011c0:	20000518 	.word	0x20000518

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000518 	.word	0x20000518

080011dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e033      	b.n	800125a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fdc6 	bl	8000d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	2b00      	cmp	r3, #0
 8001218:	d118      	bne.n	800124c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001222:	f023 0302 	bic.w	r3, r3, #2
 8001226:	f043 0202 	orr.w	r2, r3, #2
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fa78 	bl	8001724 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f023 0303 	bic.w	r3, r3, #3
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	641a      	str	r2, [r3, #64]	@ 0x40
 800124a:	e001      	b.n	8001250 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d049      	beq.n	800132c <HAL_ADC_IRQHandler+0xca>
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d046      	beq.n	800132c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d105      	bne.n	80012b6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d12b      	bne.n	800131c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d127      	bne.n	800131c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d119      	bne.n	800131c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0220 	bic.w	r2, r2, #32
 80012f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d105      	bne.n	800131c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f043 0201 	orr.w	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f8b0 	bl	8001482 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f06f 0212 	mvn.w	r2, #18
 800132a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d057      	beq.n	80013f2 <HAL_ADC_IRQHandler+0x190>
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d054      	beq.n	80013f2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d139      	bne.n	80013e2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001374:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001386:	2b00      	cmp	r3, #0
 8001388:	d12b      	bne.n	80013e2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001394:	2b00      	cmp	r3, #0
 8001396:	d124      	bne.n	80013e2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d11d      	bne.n	80013e2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d119      	bne.n	80013e2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013bc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d105      	bne.n	80013e2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f043 0201 	orr.w	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fa9a 	bl	800191c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f06f 020c 	mvn.w	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001400:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d017      	beq.n	8001438 <HAL_ADC_IRQHandler+0x1d6>
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d014      	beq.n	8001438 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b01      	cmp	r3, #1
 800141a:	d10d      	bne.n	8001438 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f834 	bl	8001496 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f06f 0201 	mvn.w	r2, #1
 8001436:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001446:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d015      	beq.n	800147a <HAL_ADC_IRQHandler+0x218>
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d012      	beq.n	800147a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001458:	f043 0202 	orr.w	r2, r3, #2
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f06f 0220 	mvn.w	r2, #32
 8001468:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f81d 	bl	80014aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f06f 0220 	mvn.w	r2, #32
 8001478:	601a      	str	r2, [r3, #0]
  }
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1c>
 80014d8:	2302      	movs	r3, #2
 80014da:	e113      	b.n	8001704 <HAL_ADC_ConfigChannel+0x244>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d925      	bls.n	8001538 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	3b1e      	subs	r3, #30
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43da      	mvns	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	400a      	ands	r2, r1
 8001510:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68d9      	ldr	r1, [r3, #12]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	4603      	mov	r3, r0
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4403      	add	r3, r0
 800152a:	3b1e      	subs	r3, #30
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	e022      	b.n	800157e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	2207      	movs	r2, #7
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	400a      	ands	r2, r1
 800155a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	4603      	mov	r3, r0
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4403      	add	r3, r0
 8001574:	409a      	lsls	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b06      	cmp	r3, #6
 8001584:	d824      	bhi.n	80015d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b05      	subs	r3, #5
 8001598:	221f      	movs	r2, #31
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b05      	subs	r3, #5
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ce:	e04c      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d824      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b23      	subs	r3, #35	@ 0x23
 80015ea:	221f      	movs	r2, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43da      	mvns	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	400a      	ands	r2, r1
 80015f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b23      	subs	r3, #35	@ 0x23
 8001614:	fa00 f203 	lsl.w	r2, r0, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001620:	e023      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3b41      	subs	r3, #65	@ 0x41
 8001634:	221f      	movs	r2, #31
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	400a      	ands	r2, r1
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b41      	subs	r3, #65	@ 0x41
 800165e:	fa00 f203 	lsl.w	r2, r0, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166a:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <HAL_ADC_ConfigChannel+0x250>)
 800166c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a28      	ldr	r2, [pc, #160]	@ (8001714 <HAL_ADC_ConfigChannel+0x254>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d10f      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1d8>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d10b      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1d      	ldr	r2, [pc, #116]	@ (8001714 <HAL_ADC_ConfigChannel+0x254>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12b      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x23a>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <HAL_ADC_ConfigChannel+0x258>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d003      	beq.n	80016b4 <HAL_ADC_ConfigChannel+0x1f4>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b11      	cmp	r3, #17
 80016b2:	d122      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a11      	ldr	r2, [pc, #68]	@ (8001718 <HAL_ADC_ConfigChannel+0x258>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d111      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_ADC_ConfigChannel+0x25c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <HAL_ADC_ConfigChannel+0x260>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9a      	lsrs	r2, r3, #18
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016ec:	e002      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f9      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40012300 	.word	0x40012300
 8001714:	40012000 	.word	0x40012000
 8001718:	10000012 	.word	0x10000012
 800171c:	2000004c 	.word	0x2000004c
 8001720:	431bde83 	.word	0x431bde83

08001724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172c:	4b79      	ldr	r3, [pc, #484]	@ (8001914 <ADC_Init+0x1f0>)
 800172e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	021a      	lsls	r2, r3, #8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800177c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800179e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b6:	4a58      	ldr	r2, [pc, #352]	@ (8001918 <ADC_Init+0x1f4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d022      	beq.n	8001802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6899      	ldr	r1, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	e00f      	b.n	8001822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001820:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0202 	bic.w	r2, r2, #2
 8001830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e1b      	ldrb	r3, [r3, #24]
 800183c:	005a      	lsls	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800185e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800186e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6859      	ldr	r1, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	3b01      	subs	r3, #1
 800187c:	035a      	lsls	r2, r3, #13
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	e007      	b.n	8001898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001896:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	051a      	lsls	r2, r3, #20
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6899      	ldr	r1, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018da:	025a      	lsls	r2, r3, #9
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6899      	ldr	r1, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	029a      	lsls	r2, r3, #10
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40012300 	.word	0x40012300
 8001918:	0f000001 	.word	0x0f000001

0800191c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4907      	ldr	r1, [pc, #28]	@ (80019cc <__NVIC_EnableIRQ+0x38>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	@ (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	@ (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	@ 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	@ 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a9c:	d301      	bcc.n	8001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <SysTick_Config+0x40>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f7ff ff8e 	bl	80019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <SysTick_Config+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <SysTick_Config+0x40>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff29 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff3e 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff8e 	bl	8001a24 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5d 	bl	80019d0 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff31 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffa2 	bl	8001a8c <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	e177      	b.n	8001e60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b70:	2201      	movs	r2, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	f040 8166 	bne.w	8001e5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d005      	beq.n	8001ba6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d130      	bne.n	8001c08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d017      	beq.n	8001c44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d123      	bne.n	8001c98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80c0 	beq.w	8001e5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b66      	ldr	r3, [pc, #408]	@ (8001e78 <HAL_GPIO_Init+0x324>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	4a65      	ldr	r2, [pc, #404]	@ (8001e78 <HAL_GPIO_Init+0x324>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cea:	4b63      	ldr	r3, [pc, #396]	@ (8001e78 <HAL_GPIO_Init+0x324>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf6:	4a61      	ldr	r2, [pc, #388]	@ (8001e7c <HAL_GPIO_Init+0x328>)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	@ (8001e80 <HAL_GPIO_Init+0x32c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d037      	beq.n	8001d92 <HAL_GPIO_Init+0x23e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a57      	ldr	r2, [pc, #348]	@ (8001e84 <HAL_GPIO_Init+0x330>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d031      	beq.n	8001d8e <HAL_GPIO_Init+0x23a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a56      	ldr	r2, [pc, #344]	@ (8001e88 <HAL_GPIO_Init+0x334>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02b      	beq.n	8001d8a <HAL_GPIO_Init+0x236>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a55      	ldr	r2, [pc, #340]	@ (8001e8c <HAL_GPIO_Init+0x338>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d025      	beq.n	8001d86 <HAL_GPIO_Init+0x232>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a54      	ldr	r2, [pc, #336]	@ (8001e90 <HAL_GPIO_Init+0x33c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01f      	beq.n	8001d82 <HAL_GPIO_Init+0x22e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a53      	ldr	r2, [pc, #332]	@ (8001e94 <HAL_GPIO_Init+0x340>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x22a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a52      	ldr	r2, [pc, #328]	@ (8001e98 <HAL_GPIO_Init+0x344>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x226>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a51      	ldr	r2, [pc, #324]	@ (8001e9c <HAL_GPIO_Init+0x348>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x222>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ea0 <HAL_GPIO_Init+0x34c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x21e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea4 <HAL_GPIO_Init+0x350>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x21a>
 8001d6a:	2309      	movs	r3, #9
 8001d6c:	e012      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d6e:	230a      	movs	r3, #10
 8001d70:	e010      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d72:	2308      	movs	r3, #8
 8001d74:	e00e      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d76:	2307      	movs	r3, #7
 8001d78:	e00c      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d7a:	2306      	movs	r3, #6
 8001d7c:	e00a      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d7e:	2305      	movs	r3, #5
 8001d80:	e008      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d86:	2303      	movs	r3, #3
 8001d88:	e004      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d92:	2300      	movs	r3, #0
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	f002 0203 	and.w	r2, r2, #3
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da4:	4935      	ldr	r1, [pc, #212]	@ (8001e7c <HAL_GPIO_Init+0x328>)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea8 <HAL_GPIO_Init+0x354>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd6:	4a34      	ldr	r2, [pc, #208]	@ (8001ea8 <HAL_GPIO_Init+0x354>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ddc:	4b32      	ldr	r3, [pc, #200]	@ (8001ea8 <HAL_GPIO_Init+0x354>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e00:	4a29      	ldr	r2, [pc, #164]	@ (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e06:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e54:	4a14      	ldr	r2, [pc, #80]	@ (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	f67f ae84 	bls.w	8001b70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3724      	adds	r7, #36	@ 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40013800 	.word	0x40013800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40021400 	.word	0x40021400
 8001e98:	40021800 	.word	0x40021800
 8001e9c:	40021c00 	.word	0x40021c00
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40022400 	.word	0x40022400
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e12b      	b.n	800214a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe ff8c 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	@ 0x24
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f44:	f001 fcdc 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8001f48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4a81      	ldr	r2, [pc, #516]	@ (8002154 <HAL_I2C_Init+0x274>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d807      	bhi.n	8001f64 <HAL_I2C_Init+0x84>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a80      	ldr	r2, [pc, #512]	@ (8002158 <HAL_I2C_Init+0x278>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	bf94      	ite	ls
 8001f5c:	2301      	movls	r3, #1
 8001f5e:	2300      	movhi	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e006      	b.n	8001f72 <HAL_I2C_Init+0x92>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a7d      	ldr	r2, [pc, #500]	@ (800215c <HAL_I2C_Init+0x27c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	bf94      	ite	ls
 8001f6c:	2301      	movls	r3, #1
 8001f6e:	2300      	movhi	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0e7      	b.n	800214a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4a78      	ldr	r2, [pc, #480]	@ (8002160 <HAL_I2C_Init+0x280>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a6a      	ldr	r2, [pc, #424]	@ (8002154 <HAL_I2C_Init+0x274>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d802      	bhi.n	8001fb4 <HAL_I2C_Init+0xd4>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	e009      	b.n	8001fc8 <HAL_I2C_Init+0xe8>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a69      	ldr	r2, [pc, #420]	@ (8002164 <HAL_I2C_Init+0x284>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	495c      	ldr	r1, [pc, #368]	@ (8002154 <HAL_I2C_Init+0x274>)
 8001fe4:	428b      	cmp	r3, r1
 8001fe6:	d819      	bhi.n	800201c <HAL_I2C_Init+0x13c>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e59      	subs	r1, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff6:	1c59      	adds	r1, r3, #1
 8001ff8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_I2C_Init+0x138>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1e59      	subs	r1, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002016:	e051      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 8002018:	2304      	movs	r3, #4
 800201a:	e04f      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d111      	bne.n	8002048 <HAL_I2C_Init+0x168>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	440b      	add	r3, r1
 8002032:	fbb0 f3f3 	udiv	r3, r0, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e012      	b.n	800206e <HAL_I2C_Init+0x18e>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1e58      	subs	r0, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	0099      	lsls	r1, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	fbb0 f3f3 	udiv	r3, r0, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Init+0x196>
 8002072:	2301      	movs	r3, #1
 8002074:	e022      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10e      	bne.n	800209c <HAL_I2C_Init+0x1bc>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e58      	subs	r0, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6859      	ldr	r1, [r3, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	440b      	add	r3, r1
 800208c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002090:	3301      	adds	r3, #1
 8002092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800209a:	e00f      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	0099      	lsls	r1, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	6809      	ldr	r1, [r1, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6911      	ldr	r1, [r2, #16]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68d2      	ldr	r2, [r2, #12]
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	000186a0 	.word	0x000186a0
 8002158:	001e847f 	.word	0x001e847f
 800215c:	003d08ff 	.word	0x003d08ff
 8002160:	431bde83 	.word	0x431bde83
 8002164:	10624dd3 	.word	0x10624dd3

08002168 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002182:	f7ff f81f 	bl	80011c4 <HAL_GetTick>
 8002186:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b20      	cmp	r3, #32
 8002192:	f040 80d9 	bne.w	8002348 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2319      	movs	r3, #25
 800219c:	2201      	movs	r2, #1
 800219e:	496d      	ldr	r1, [pc, #436]	@ (8002354 <HAL_I2C_Mem_Write+0x1ec>)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fc8b 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	e0cc      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Mem_Write+0x56>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e0c5      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d007      	beq.n	80021e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2221      	movs	r2, #33	@ 0x21
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	@ 0x40
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002214:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a4d      	ldr	r2, [pc, #308]	@ (8002358 <HAL_I2C_Mem_Write+0x1f0>)
 8002224:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002226:	88f8      	ldrh	r0, [r7, #6]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4603      	mov	r3, r0
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fac2 	bl	80027c0 <I2C_RequestMemoryWrite>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d052      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e081      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fd50 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00d      	beq.n	8002272 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	2b04      	cmp	r3, #4
 800225c:	d107      	bne.n	800226e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800226c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06b      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d11b      	bne.n	80022e8 <HAL_I2C_Mem_Write+0x180>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d017      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1aa      	bne.n	8002246 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fd43 	bl	8002d80 <I2C_WaitOnBTFFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00d      	beq.n	800231c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	2b04      	cmp	r3, #4
 8002306:	d107      	bne.n	8002318 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002316:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e016      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	00100002 	.word	0x00100002
 8002358:	ffff0000 	.word	0xffff0000

0800235c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	@ 0x30
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	817b      	strh	r3, [r7, #10]
 800236e:	460b      	mov	r3, r1
 8002370:	813b      	strh	r3, [r7, #8]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002376:	f7fe ff25 	bl	80011c4 <HAL_GetTick>
 800237a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b20      	cmp	r3, #32
 8002386:	f040 8214 	bne.w	80027b2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2319      	movs	r3, #25
 8002390:	2201      	movs	r2, #1
 8002392:	497b      	ldr	r1, [pc, #492]	@ (8002580 <HAL_I2C_Mem_Read+0x224>)
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fb91 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
 80023a2:	e207      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_I2C_Mem_Read+0x56>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e200      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d007      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2222      	movs	r2, #34	@ 0x22
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002402:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4a5b      	ldr	r2, [pc, #364]	@ (8002584 <HAL_I2C_Mem_Read+0x228>)
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241a:	88f8      	ldrh	r0, [r7, #6]
 800241c:	893a      	ldrh	r2, [r7, #8]
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4603      	mov	r3, r0
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fa5e 	bl	80028ec <I2C_RequestMemoryRead>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1bc      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	623b      	str	r3, [r7, #32]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	623b      	str	r3, [r7, #32]
 8002456:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e190      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	2b01      	cmp	r3, #1
 8002470:	d11b      	bne.n	80024aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e170      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d11b      	bne.n	80024ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	e150      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002500:	e144      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002506:	2b03      	cmp	r3, #3
 8002508:	f200 80f1 	bhi.w	80026ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	2b01      	cmp	r3, #1
 8002512:	d123      	bne.n	800255c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002516:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fc79 	bl	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e145      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800255a:	e117      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002560:	2b02      	cmp	r3, #2
 8002562:	d14e      	bne.n	8002602 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800256a:	2200      	movs	r2, #0
 800256c:	4906      	ldr	r1, [pc, #24]	@ (8002588 <HAL_I2C_Mem_Read+0x22c>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 faa4 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e11a      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
 800257e:	bf00      	nop
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000
 8002588:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800259a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002600:	e0c4      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002608:	2200      	movs	r2, #0
 800260a:	496c      	ldr	r1, [pc, #432]	@ (80027bc <HAL_I2C_Mem_Read+0x460>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fa55 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0cb      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002664:	2200      	movs	r2, #0
 8002666:	4955      	ldr	r1, [pc, #340]	@ (80027bc <HAL_I2C_Mem_Read+0x460>)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fa27 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e09d      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026ec:	e04e      	b.n	800278c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fb8c 	bl	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e058      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b04      	cmp	r3, #4
 8002740:	d124      	bne.n	800278c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002746:	2b03      	cmp	r3, #3
 8002748:	d107      	bne.n	800275a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002758:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	f47f aeb6 	bne.w	8002502 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3728      	adds	r7, #40	@ 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	00010004 	.word	0x00010004

080027c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	4608      	mov	r0, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4603      	mov	r3, r0
 80027d0:	817b      	strh	r3, [r7, #10]
 80027d2:	460b      	mov	r3, r1
 80027d4:	813b      	strh	r3, [r7, #8]
 80027d6:	4613      	mov	r3, r2
 80027d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f960 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002810:	d103      	bne.n	800281a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e05f      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800281e:	897b      	ldrh	r3, [r7, #10]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800282c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	6a3a      	ldr	r2, [r7, #32]
 8002832:	492d      	ldr	r1, [pc, #180]	@ (80028e8 <I2C_RequestMemoryWrite+0x128>)
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f9bb 	bl	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e04c      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800285c:	6a39      	ldr	r1, [r7, #32]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fa46 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	2b04      	cmp	r3, #4
 8002870:	d107      	bne.n	8002882 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002880:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e02b      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	e021      	b.n	80028dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002898:	893b      	ldrh	r3, [r7, #8]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a8:	6a39      	ldr	r1, [r7, #32]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fa20 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d107      	bne.n	80028ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e005      	b.n	80028de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d2:	893b      	ldrh	r3, [r7, #8]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	00010002 	.word	0x00010002

080028ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	4608      	mov	r0, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	817b      	strh	r3, [r7, #10]
 80028fe:	460b      	mov	r3, r1
 8002900:	813b      	strh	r3, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002914:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2200      	movs	r2, #0
 800292e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8c2 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800294c:	d103      	bne.n	8002956 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0aa      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	6a3a      	ldr	r2, [r7, #32]
 800296e:	4952      	ldr	r1, [pc, #328]	@ (8002ab8 <I2C_RequestMemoryRead+0x1cc>)
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f91d 	bl	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e097      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	6a39      	ldr	r1, [r7, #32]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f9a8 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d107      	bne.n	80029be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e076      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	e021      	b.n	8002a18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029d4:	893b      	ldrh	r3, [r7, #8]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e4:	6a39      	ldr	r1, [r7, #32]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f982 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d107      	bne.n	8002a0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e050      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0e:	893b      	ldrh	r3, [r7, #8]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1a:	6a39      	ldr	r1, [r7, #32]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f967 	bl	8002cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d107      	bne.n	8002a40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e035      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f82b 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7a:	d103      	bne.n	8002a84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e013      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a88:	897b      	ldrh	r3, [r7, #10]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	4906      	ldr	r1, [pc, #24]	@ (8002ab8 <I2C_RequestMemoryRead+0x1cc>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f886 	bl	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	00010002 	.word	0x00010002

08002abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002acc:	e048      	b.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d044      	beq.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7fe fb75 	bl	80011c4 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d139      	bne.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	0c1b      	lsrs	r3, r3, #16
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10d      	bne.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	e00c      	b.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d116      	bne.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e023      	b.n	8002ba8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10d      	bne.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	e00c      	b.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4013      	ands	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d093      	beq.n	8002ace <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bbe:	e071      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bce:	d123      	bne.n	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f043 0204 	orr.w	r2, r3, #4
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e067      	b.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d041      	beq.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c20:	f7fe fad0 	bl	80011c4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d302      	bcc.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d136      	bne.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10c      	bne.n	8002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e00b      	b.n	8002c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	43da      	mvns	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4013      	ands	r3, r2
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e021      	b.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10c      	bne.n	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e00b      	b.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f47f af6d 	bne.w	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cfc:	e034      	b.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f8e3 	bl	8002eca <I2C_IsAcknowledgeFailed>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e034      	b.n	8002d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d028      	beq.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7fe fa55 	bl	80011c4 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11d      	bne.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d36:	2b80      	cmp	r3, #128	@ 0x80
 8002d38:	d016      	beq.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e007      	b.n	8002d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d72:	2b80      	cmp	r3, #128	@ 0x80
 8002d74:	d1c3      	bne.n	8002cfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d8c:	e034      	b.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f89b 	bl	8002eca <I2C_IsAcknowledgeFailed>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e034      	b.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d028      	beq.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7fe fa0d 	bl	80011c4 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11d      	bne.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d016      	beq.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e007      	b.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d1c3      	bne.n	8002d8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e1c:	e049      	b.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d119      	bne.n	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0210 	mvn.w	r2, #16
 8002e34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e030      	b.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e60:	f7fe f9b0 	bl	80011c4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d302      	bcc.n	8002e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11d      	bne.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	2b40      	cmp	r3, #64	@ 0x40
 8002e82:	d016      	beq.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e007      	b.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebc:	2b40      	cmp	r3, #64	@ 0x40
 8002ebe:	d1ae      	bne.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee0:	d11b      	bne.n	8002f1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d129      	bne.n	8002f92 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2224      	movs	r2, #36	@ 0x24
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0210 	bic.w	r2, r2, #16
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d12a      	bne.n	8003010 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2224      	movs	r2, #36	@ 0x24
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002fda:	89fb      	ldrh	r3, [r7, #14]
 8002fdc:	f023 030f 	bic.w	r3, r3, #15
 8002fe0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	89fa      	ldrh	r2, [r7, #14]
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e267      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d075      	beq.n	800312a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800303e:	4b88      	ldr	r3, [pc, #544]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d00c      	beq.n	8003064 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304a:	4b85      	ldr	r3, [pc, #532]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003052:	2b08      	cmp	r3, #8
 8003054:	d112      	bne.n	800307c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003056:	4b82      	ldr	r3, [pc, #520]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003062:	d10b      	bne.n	800307c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	4b7e      	ldr	r3, [pc, #504]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05b      	beq.n	8003128 <HAL_RCC_OscConfig+0x108>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d157      	bne.n	8003128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e242      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003084:	d106      	bne.n	8003094 <HAL_RCC_OscConfig+0x74>
 8003086:	4b76      	ldr	r3, [pc, #472]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a75      	ldr	r2, [pc, #468]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e01d      	b.n	80030d0 <HAL_RCC_OscConfig+0xb0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x98>
 800309e:	4b70      	ldr	r3, [pc, #448]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6f      	ldr	r2, [pc, #444]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0xb0>
 80030b8:	4b69      	ldr	r3, [pc, #420]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a68      	ldr	r2, [pc, #416]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b66      	ldr	r3, [pc, #408]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a65      	ldr	r2, [pc, #404]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe f874 	bl	80011c4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fe f870 	bl	80011c4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	@ 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e207      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0xc0>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe f860 	bl	80011c4 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe f85c 	bl	80011c4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	@ 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1f3      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	4b51      	ldr	r3, [pc, #324]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0xe8>
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003136:	4b4a      	ldr	r3, [pc, #296]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003142:	4b47      	ldr	r3, [pc, #284]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800314a:	2b08      	cmp	r3, #8
 800314c:	d11c      	bne.n	8003188 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314e:	4b44      	ldr	r3, [pc, #272]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	4b41      	ldr	r3, [pc, #260]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x152>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1c7      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b3b      	ldr	r3, [pc, #236]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4937      	ldr	r1, [pc, #220]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	e03a      	b.n	80031fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b34      	ldr	r3, [pc, #208]	@ (8003264 <HAL_RCC_OscConfig+0x244>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe f815 	bl	80011c4 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe f811 	bl	80011c4 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1a8      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b28      	ldr	r3, [pc, #160]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4925      	ldr	r1, [pc, #148]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e015      	b.n	80031fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b24      	ldr	r3, [pc, #144]	@ (8003264 <HAL_RCC_OscConfig+0x244>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fd fff4 	bl	80011c4 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e0:	f7fd fff0 	bl	80011c4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e187      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d036      	beq.n	8003278 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <HAL_RCC_OscConfig+0x248>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fd ffd4 	bl	80011c4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7fd ffd0 	bl	80011c4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e167      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x200>
 800323e:	e01b      	b.n	8003278 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003240:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_RCC_OscConfig+0x248>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7fd ffbd 	bl	80011c4 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	e00e      	b.n	800326c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324e:	f7fd ffb9 	bl	80011c4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d907      	bls.n	800326c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e150      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
 8003260:	40023800 	.word	0x40023800
 8003264:	42470000 	.word	0x42470000
 8003268:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	4b88      	ldr	r3, [pc, #544]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800326e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ea      	bne.n	800324e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8097 	beq.w	80033b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328a:	4b81      	ldr	r3, [pc, #516]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10f      	bne.n	80032b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	4b7d      	ldr	r3, [pc, #500]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	4a7c      	ldr	r2, [pc, #496]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	4b77      	ldr	r3, [pc, #476]	@ (8003494 <HAL_RCC_OscConfig+0x474>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c2:	4b74      	ldr	r3, [pc, #464]	@ (8003494 <HAL_RCC_OscConfig+0x474>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a73      	ldr	r2, [pc, #460]	@ (8003494 <HAL_RCC_OscConfig+0x474>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ce:	f7fd ff79 	bl	80011c4 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fd ff75 	bl	80011c4 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e10c      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003494 <HAL_RCC_OscConfig+0x474>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d106      	bne.n	800330a <HAL_RCC_OscConfig+0x2ea>
 80032fc:	4b64      	ldr	r3, [pc, #400]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003300:	4a63      	ldr	r2, [pc, #396]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	@ 0x70
 8003308:	e01c      	b.n	8003344 <HAL_RCC_OscConfig+0x324>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b05      	cmp	r3, #5
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x30c>
 8003312:	4b5f      	ldr	r3, [pc, #380]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003316:	4a5e      	ldr	r2, [pc, #376]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	6713      	str	r3, [r2, #112]	@ 0x70
 800331e:	4b5c      	ldr	r3, [pc, #368]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	4a5b      	ldr	r2, [pc, #364]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	@ 0x70
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0x324>
 800332c:	4b58      	ldr	r3, [pc, #352]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	4a57      	ldr	r2, [pc, #348]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	@ 0x70
 8003338:	4b55      	ldr	r3, [pc, #340]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	4a54      	ldr	r2, [pc, #336]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800333e:	f023 0304 	bic.w	r3, r3, #4
 8003342:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fd ff3a 	bl	80011c4 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fd ff36 	bl	80011c4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0cb      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	4b49      	ldr	r3, [pc, #292]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ee      	beq.n	8003354 <HAL_RCC_OscConfig+0x334>
 8003376:	e014      	b.n	80033a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003378:	f7fd ff24 	bl	80011c4 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7fd ff20 	bl	80011c4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0b5      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003396:	4b3e      	ldr	r3, [pc, #248]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ee      	bne.n	8003380 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a8:	4b39      	ldr	r3, [pc, #228]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	4a38      	ldr	r2, [pc, #224]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80a1 	beq.w	8003500 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033be:	4b34      	ldr	r3, [pc, #208]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d05c      	beq.n	8003484 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d141      	bne.n	8003456 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	4b31      	ldr	r3, [pc, #196]	@ (8003498 <HAL_RCC_OscConfig+0x478>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fd fef4 	bl	80011c4 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fd fef0 	bl	80011c4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e087      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f2:	4b27      	ldr	r3, [pc, #156]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	491b      	ldr	r1, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <HAL_RCC_OscConfig+0x478>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fd fec9 	bl	80011c4 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd fec5 	bl	80011c4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e05c      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x416>
 8003454:	e054      	b.n	8003500 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fd feb2 	bl	80011c4 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd feae 	bl	80011c4 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e045      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x444>
 8003482:	e03d      	b.n	8003500 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e038      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
 8003490:	40023800 	.word	0x40023800
 8003494:	40007000 	.word	0x40007000
 8003498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800349c:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <HAL_RCC_OscConfig+0x4ec>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d028      	beq.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d121      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d11a      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d111      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	3b01      	subs	r3, #1
 80034e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0cc      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b68      	ldr	r3, [pc, #416]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d90c      	bls.n	800354c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b65      	ldr	r3, [pc, #404]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a58      	ldr	r2, [pc, #352]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800356e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a52      	ldr	r2, [pc, #328]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d044      	beq.n	8003630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d119      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b3f      	ldr	r3, [pc, #252]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e067      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b37      	ldr	r3, [pc, #220]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4934      	ldr	r1, [pc, #208]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fd fde0 	bl	80011c4 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fd fddc 	bl	80011c4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b25      	ldr	r3, [pc, #148]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d20c      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b22      	ldr	r3, [pc, #136]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003682:	4b12      	ldr	r3, [pc, #72]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f821 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fd40 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023c00 	.word	0x40023c00
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08007b74 	.word	0x08007b74
 80036d4:	2000004c 	.word	0x2000004c
 80036d8:	20000050 	.word	0x20000050

080036dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e0:	b094      	sub	sp, #80	@ 0x50
 80036e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f4:	4b79      	ldr	r3, [pc, #484]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d00d      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x40>
 8003700:	2b08      	cmp	r3, #8
 8003702:	f200 80e1 	bhi.w	80038c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x34>
 800370a:	2b04      	cmp	r3, #4
 800370c:	d003      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x3a>
 800370e:	e0db      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b73      	ldr	r3, [pc, #460]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003712:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003714:	e0db      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003716:	4b73      	ldr	r3, [pc, #460]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003718:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800371a:	e0d8      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800371c:	4b6f      	ldr	r3, [pc, #444]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003724:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003726:	4b6d      	ldr	r3, [pc, #436]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d063      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003732:	4b6a      	ldr	r3, [pc, #424]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	2200      	movs	r2, #0
 800373a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800373c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003744:	633b      	str	r3, [r7, #48]	@ 0x30
 8003746:	2300      	movs	r3, #0
 8003748:	637b      	str	r3, [r7, #52]	@ 0x34
 800374a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800374e:	4622      	mov	r2, r4
 8003750:	462b      	mov	r3, r5
 8003752:	f04f 0000 	mov.w	r0, #0
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	0159      	lsls	r1, r3, #5
 800375c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003760:	0150      	lsls	r0, r2, #5
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4621      	mov	r1, r4
 8003768:	1a51      	subs	r1, r2, r1
 800376a:	6139      	str	r1, [r7, #16]
 800376c:	4629      	mov	r1, r5
 800376e:	eb63 0301 	sbc.w	r3, r3, r1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003780:	4659      	mov	r1, fp
 8003782:	018b      	lsls	r3, r1, #6
 8003784:	4651      	mov	r1, sl
 8003786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800378a:	4651      	mov	r1, sl
 800378c:	018a      	lsls	r2, r1, #6
 800378e:	4651      	mov	r1, sl
 8003790:	ebb2 0801 	subs.w	r8, r2, r1
 8003794:	4659      	mov	r1, fp
 8003796:	eb63 0901 	sbc.w	r9, r3, r1
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ae:	4690      	mov	r8, r2
 80037b0:	4699      	mov	r9, r3
 80037b2:	4623      	mov	r3, r4
 80037b4:	eb18 0303 	adds.w	r3, r8, r3
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	462b      	mov	r3, r5
 80037bc:	eb49 0303 	adc.w	r3, r9, r3
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ce:	4629      	mov	r1, r5
 80037d0:	024b      	lsls	r3, r1, #9
 80037d2:	4621      	mov	r1, r4
 80037d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d8:	4621      	mov	r1, r4
 80037da:	024a      	lsls	r2, r1, #9
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037e2:	2200      	movs	r2, #0
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037ec:	f7fc fd58 	bl	80002a0 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f8:	e058      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fa:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	2200      	movs	r2, #0
 8003802:	4618      	mov	r0, r3
 8003804:	4611      	mov	r1, r2
 8003806:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003810:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	0159      	lsls	r1, r3, #5
 8003822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003826:	0150      	lsls	r0, r2, #5
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4641      	mov	r1, r8
 800382e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003832:	4649      	mov	r1, r9
 8003834:	eb63 0b01 	sbc.w	fp, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003844:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003848:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800384c:	ebb2 040a 	subs.w	r4, r2, sl
 8003850:	eb63 050b 	sbc.w	r5, r3, fp
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	00eb      	lsls	r3, r5, #3
 800385e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003862:	00e2      	lsls	r2, r4, #3
 8003864:	4614      	mov	r4, r2
 8003866:	461d      	mov	r5, r3
 8003868:	4643      	mov	r3, r8
 800386a:	18e3      	adds	r3, r4, r3
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	464b      	mov	r3, r9
 8003870:	eb45 0303 	adc.w	r3, r5, r3
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003882:	4629      	mov	r1, r5
 8003884:	028b      	lsls	r3, r1, #10
 8003886:	4621      	mov	r1, r4
 8003888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800388c:	4621      	mov	r1, r4
 800388e:	028a      	lsls	r2, r1, #10
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003896:	2200      	movs	r2, #0
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	61fa      	str	r2, [r7, #28]
 800389c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a0:	f7fc fcfe 	bl	80002a0 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038c6:	e002      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3750      	adds	r7, #80	@ 0x50
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	007a1200 	.word	0x007a1200

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	2000004c 	.word	0x2000004c

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	08007b84 	.word	0x08007b84

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffdc 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0b5b      	lsrs	r3, r3, #13
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	@ (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	08007b84 	.word	0x08007b84

08003950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e042      	b.n	80039e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd fa9c 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2224      	movs	r2, #36	@ 0x24
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f973 	bl	8003c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	@ 0x28
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d175      	bne.n	8003afc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Transmit+0x2c>
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e06e      	b.n	8003afe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2221      	movs	r2, #33	@ 0x21
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2e:	f7fd fbc9 	bl	80011c4 <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a48:	d108      	bne.n	8003a5c <HAL_UART_Transmit+0x6c>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e003      	b.n	8003a64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a64:	e02e      	b.n	8003ac4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2180      	movs	r1, #128	@ 0x80
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f848 	bl	8003b06 <UART_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e03a      	b.n	8003afe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e007      	b.n	8003ab6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1cb      	bne.n	8003a66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2140      	movs	r1, #64	@ 0x40
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f814 	bl	8003b06 <UART_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e006      	b.n	8003afe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e000      	b.n	8003afe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b16:	e03b      	b.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d037      	beq.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b20:	f7fd fb50 	bl	80011c4 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	6a3a      	ldr	r2, [r7, #32]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d302      	bcc.n	8003b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e03a      	b.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d023      	beq.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b80      	cmp	r3, #128	@ 0x80
 8003b4c:	d020      	beq.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b40      	cmp	r3, #64	@ 0x40
 8003b52:	d01d      	beq.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d116      	bne.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f81d 	bl	8003bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2208      	movs	r2, #8
 8003b82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e00f      	b.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d0b4      	beq.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b095      	sub	sp, #84	@ 0x54
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003be6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e5      	bne.n	8003bf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d119      	bne.n	8003c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f023 0310 	bic.w	r3, r3, #16
 8003c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c50:	61ba      	str	r2, [r7, #24]
 8003c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c72:	bf00      	nop
 8003c74:	3754      	adds	r7, #84	@ 0x54
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c84:	b0c0      	sub	sp, #256	@ 0x100
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	68d9      	ldr	r1, [r3, #12]
 8003c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	ea40 0301 	orr.w	r3, r0, r1
 8003ca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cd8:	f021 010c 	bic.w	r1, r1, #12
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfa:	6999      	ldr	r1, [r3, #24]
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	ea40 0301 	orr.w	r3, r0, r1
 8003d06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b8f      	ldr	r3, [pc, #572]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d005      	beq.n	8003d20 <UART_SetConfig+0xa0>
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003f50 <UART_SetConfig+0x2d0>)
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d104      	bne.n	8003d2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d20:	f7ff fe02 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8003d24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d28:	e003      	b.n	8003d32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d2a:	f7ff fde9 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8003d2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d3c:	f040 810c 	bne.w	8003f58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d52:	4622      	mov	r2, r4
 8003d54:	462b      	mov	r3, r5
 8003d56:	1891      	adds	r1, r2, r2
 8003d58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d5a:	415b      	adcs	r3, r3
 8003d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d62:	4621      	mov	r1, r4
 8003d64:	eb12 0801 	adds.w	r8, r2, r1
 8003d68:	4629      	mov	r1, r5
 8003d6a:	eb43 0901 	adc.w	r9, r3, r1
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d82:	4690      	mov	r8, r2
 8003d84:	4699      	mov	r9, r3
 8003d86:	4623      	mov	r3, r4
 8003d88:	eb18 0303 	adds.w	r3, r8, r3
 8003d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d90:	462b      	mov	r3, r5
 8003d92:	eb49 0303 	adc.w	r3, r9, r3
 8003d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003da6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003daa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dae:	460b      	mov	r3, r1
 8003db0:	18db      	adds	r3, r3, r3
 8003db2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003db4:	4613      	mov	r3, r2
 8003db6:	eb42 0303 	adc.w	r3, r2, r3
 8003dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dc4:	f7fc fa6c 	bl	80002a0 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4b61      	ldr	r3, [pc, #388]	@ (8003f54 <UART_SetConfig+0x2d4>)
 8003dce:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	011c      	lsls	r4, r3, #4
 8003dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003de0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003de4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003de8:	4642      	mov	r2, r8
 8003dea:	464b      	mov	r3, r9
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003df0:	415b      	adcs	r3, r3
 8003df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003df4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003df8:	4641      	mov	r1, r8
 8003dfa:	eb12 0a01 	adds.w	sl, r2, r1
 8003dfe:	4649      	mov	r1, r9
 8003e00:	eb43 0b01 	adc.w	fp, r3, r1
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e18:	4692      	mov	sl, r2
 8003e1a:	469b      	mov	fp, r3
 8003e1c:	4643      	mov	r3, r8
 8003e1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e26:	464b      	mov	r3, r9
 8003e28:	eb4b 0303 	adc.w	r3, fp, r3
 8003e2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e44:	460b      	mov	r3, r1
 8003e46:	18db      	adds	r3, r3, r3
 8003e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	eb42 0303 	adc.w	r3, r2, r3
 8003e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e5a:	f7fc fa21 	bl	80002a0 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	4b3b      	ldr	r3, [pc, #236]	@ (8003f54 <UART_SetConfig+0x2d4>)
 8003e66:	fba3 2301 	umull	r2, r3, r3, r1
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2264      	movs	r2, #100	@ 0x64
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	1acb      	subs	r3, r1, r3
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e7a:	4b36      	ldr	r3, [pc, #216]	@ (8003f54 <UART_SetConfig+0x2d4>)
 8003e7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e88:	441c      	add	r4, r3
 8003e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	1891      	adds	r1, r2, r2
 8003ea2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ea4:	415b      	adcs	r3, r3
 8003ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003eac:	4641      	mov	r1, r8
 8003eae:	1851      	adds	r1, r2, r1
 8003eb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	414b      	adcs	r3, r1
 8003eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	00cb      	lsls	r3, r1, #3
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ece:	4651      	mov	r1, sl
 8003ed0:	00ca      	lsls	r2, r1, #3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4642      	mov	r2, r8
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ef8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003efc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f00:	460b      	mov	r3, r1
 8003f02:	18db      	adds	r3, r3, r3
 8003f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f06:	4613      	mov	r3, r2
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f16:	f7fc f9c3 	bl	80002a0 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <UART_SetConfig+0x2d4>)
 8003f20:	fba3 1302 	umull	r1, r3, r3, r2
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	2164      	movs	r1, #100	@ 0x64
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	3332      	adds	r3, #50	@ 0x32
 8003f32:	4a08      	ldr	r2, [pc, #32]	@ (8003f54 <UART_SetConfig+0x2d4>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	f003 0207 	and.w	r2, r3, #7
 8003f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4422      	add	r2, r4
 8003f46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f48:	e106      	b.n	8004158 <UART_SetConfig+0x4d8>
 8003f4a:	bf00      	nop
 8003f4c:	40011000 	.word	0x40011000
 8003f50:	40011400 	.word	0x40011400
 8003f54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	1891      	adds	r1, r2, r2
 8003f70:	6239      	str	r1, [r7, #32]
 8003f72:	415b      	adcs	r3, r3
 8003f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	1854      	adds	r4, r2, r1
 8003f7e:	4649      	mov	r1, r9
 8003f80:	eb43 0501 	adc.w	r5, r3, r1
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	00eb      	lsls	r3, r5, #3
 8003f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f92:	00e2      	lsls	r2, r4, #3
 8003f94:	4614      	mov	r4, r2
 8003f96:	461d      	mov	r5, r3
 8003f98:	4643      	mov	r3, r8
 8003f9a:	18e3      	adds	r3, r4, r3
 8003f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fa0:	464b      	mov	r3, r9
 8003fa2:	eb45 0303 	adc.w	r3, r5, r3
 8003fa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	008b      	lsls	r3, r1, #2
 8003fca:	4621      	mov	r1, r4
 8003fcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	008a      	lsls	r2, r1, #2
 8003fd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fd8:	f7fc f962 	bl	80002a0 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4b60      	ldr	r3, [pc, #384]	@ (8004164 <UART_SetConfig+0x4e4>)
 8003fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	011c      	lsls	r4, r3, #4
 8003fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ff4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ff8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	464b      	mov	r3, r9
 8004000:	1891      	adds	r1, r2, r2
 8004002:	61b9      	str	r1, [r7, #24]
 8004004:	415b      	adcs	r3, r3
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400c:	4641      	mov	r1, r8
 800400e:	1851      	adds	r1, r2, r1
 8004010:	6139      	str	r1, [r7, #16]
 8004012:	4649      	mov	r1, r9
 8004014:	414b      	adcs	r3, r1
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004024:	4659      	mov	r1, fp
 8004026:	00cb      	lsls	r3, r1, #3
 8004028:	4651      	mov	r1, sl
 800402a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800402e:	4651      	mov	r1, sl
 8004030:	00ca      	lsls	r2, r1, #3
 8004032:	4610      	mov	r0, r2
 8004034:	4619      	mov	r1, r3
 8004036:	4603      	mov	r3, r0
 8004038:	4642      	mov	r2, r8
 800403a:	189b      	adds	r3, r3, r2
 800403c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004040:	464b      	mov	r3, r9
 8004042:	460a      	mov	r2, r1
 8004044:	eb42 0303 	adc.w	r3, r2, r3
 8004048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004056:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004064:	4649      	mov	r1, r9
 8004066:	008b      	lsls	r3, r1, #2
 8004068:	4641      	mov	r1, r8
 800406a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800406e:	4641      	mov	r1, r8
 8004070:	008a      	lsls	r2, r1, #2
 8004072:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004076:	f7fc f913 	bl	80002a0 <__aeabi_uldivmod>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4611      	mov	r1, r2
 8004080:	4b38      	ldr	r3, [pc, #224]	@ (8004164 <UART_SetConfig+0x4e4>)
 8004082:	fba3 2301 	umull	r2, r3, r3, r1
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2264      	movs	r2, #100	@ 0x64
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	1acb      	subs	r3, r1, r3
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	3332      	adds	r3, #50	@ 0x32
 8004094:	4a33      	ldr	r2, [pc, #204]	@ (8004164 <UART_SetConfig+0x4e4>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040a0:	441c      	add	r4, r3
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a6:	2200      	movs	r2, #0
 80040a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80040aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80040ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040b0:	4642      	mov	r2, r8
 80040b2:	464b      	mov	r3, r9
 80040b4:	1891      	adds	r1, r2, r2
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	415b      	adcs	r3, r3
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c0:	4641      	mov	r1, r8
 80040c2:	1851      	adds	r1, r2, r1
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	4649      	mov	r1, r9
 80040c8:	414b      	adcs	r3, r1
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040d8:	4659      	mov	r1, fp
 80040da:	00cb      	lsls	r3, r1, #3
 80040dc:	4651      	mov	r1, sl
 80040de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040e2:	4651      	mov	r1, sl
 80040e4:	00ca      	lsls	r2, r1, #3
 80040e6:	4610      	mov	r0, r2
 80040e8:	4619      	mov	r1, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	4642      	mov	r2, r8
 80040ee:	189b      	adds	r3, r3, r2
 80040f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040f2:	464b      	mov	r3, r9
 80040f4:	460a      	mov	r2, r1
 80040f6:	eb42 0303 	adc.w	r3, r2, r3
 80040fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	663b      	str	r3, [r7, #96]	@ 0x60
 8004106:	667a      	str	r2, [r7, #100]	@ 0x64
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004114:	4649      	mov	r1, r9
 8004116:	008b      	lsls	r3, r1, #2
 8004118:	4641      	mov	r1, r8
 800411a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800411e:	4641      	mov	r1, r8
 8004120:	008a      	lsls	r2, r1, #2
 8004122:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004126:	f7fc f8bb 	bl	80002a0 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <UART_SetConfig+0x4e4>)
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2164      	movs	r1, #100	@ 0x64
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	3332      	adds	r3, #50	@ 0x32
 8004142:	4a08      	ldr	r2, [pc, #32]	@ (8004164 <UART_SetConfig+0x4e4>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4422      	add	r2, r4
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800415e:	46bd      	mov	sp, r7
 8004160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004164:	51eb851f 	.word	0x51eb851f

08004168 <__NVIC_SetPriority>:
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	490c      	ldr	r1, [pc, #48]	@ (80041b4 <__NVIC_SetPriority+0x4c>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	440b      	add	r3, r1
 800418c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004190:	e00a      	b.n	80041a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4908      	ldr	r1, [pc, #32]	@ (80041b8 <__NVIC_SetPriority+0x50>)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3b04      	subs	r3, #4
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	761a      	strb	r2, [r3, #24]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000e100 	.word	0xe000e100
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80041c0:	2100      	movs	r1, #0
 80041c2:	f06f 0004 	mvn.w	r0, #4
 80041c6:	f7ff ffcf 	bl	8004168 <__NVIC_SetPriority>
#endif
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041d6:	f3ef 8305 	mrs	r3, IPSR
 80041da:	603b      	str	r3, [r7, #0]
  return(result);
 80041dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80041e2:	f06f 0305 	mvn.w	r3, #5
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	e00c      	b.n	8004204 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <osKernelInitialize+0x44>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041f2:	4b08      	ldr	r3, [pc, #32]	@ (8004214 <osKernelInitialize+0x44>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	e002      	b.n	8004204 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004204:	687b      	ldr	r3, [r7, #4]
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000051c 	.word	0x2000051c

08004218 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800421e:	f3ef 8305 	mrs	r3, IPSR
 8004222:	603b      	str	r3, [r7, #0]
  return(result);
 8004224:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <osKernelStart+0x1a>
    stat = osErrorISR;
 800422a:	f06f 0305 	mvn.w	r3, #5
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	e010      	b.n	8004254 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004232:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <osKernelStart+0x48>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d109      	bne.n	800424e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800423a:	f7ff ffbf 	bl	80041bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800423e:	4b08      	ldr	r3, [pc, #32]	@ (8004260 <osKernelStart+0x48>)
 8004240:	2202      	movs	r2, #2
 8004242:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004244:	f001 fa68 	bl	8005718 <vTaskStartScheduler>
      stat = osOK;
 8004248:	2300      	movs	r3, #0
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	e002      	b.n	8004254 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004254:	687b      	ldr	r3, [r7, #4]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	2000051c 	.word	0x2000051c

08004264 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	@ 0x38
 8004268:	af04      	add	r7, sp, #16
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004274:	f3ef 8305 	mrs	r3, IPSR
 8004278:	617b      	str	r3, [r7, #20]
  return(result);
 800427a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800427c:	2b00      	cmp	r3, #0
 800427e:	d17e      	bne.n	800437e <osThreadNew+0x11a>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d07b      	beq.n	800437e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004286:	2380      	movs	r3, #128	@ 0x80
 8004288:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800428a:	2318      	movs	r3, #24
 800428c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
 8004296:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d045      	beq.n	800432a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <osThreadNew+0x48>
        name = attr->name;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <osThreadNew+0x6e>
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b38      	cmp	r3, #56	@ 0x38
 80042c4:	d805      	bhi.n	80042d2 <osThreadNew+0x6e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <osThreadNew+0x72>
        return (NULL);
 80042d2:	2300      	movs	r3, #0
 80042d4:	e054      	b.n	8004380 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	089b      	lsrs	r3, r3, #2
 80042e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <osThreadNew+0xa8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b5b      	cmp	r3, #91	@ 0x5b
 80042f4:	d90a      	bls.n	800430c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <osThreadNew+0xa8>
        mem = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	e010      	b.n	800432e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10c      	bne.n	800432e <osThreadNew+0xca>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d108      	bne.n	800432e <osThreadNew+0xca>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d104      	bne.n	800432e <osThreadNew+0xca>
          mem = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e001      	b.n	800432e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d110      	bne.n	8004356 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800433c:	9202      	str	r2, [sp, #8]
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6a3a      	ldr	r2, [r7, #32]
 8004348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f001 f808 	bl	8005360 <xTaskCreateStatic>
 8004350:	4603      	mov	r3, r0
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	e013      	b.n	800437e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d110      	bne.n	800437e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	b29a      	uxth	r2, r3
 8004360:	f107 0310 	add.w	r3, r7, #16
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f001 f856 	bl	8005420 <xTaskCreate>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d001      	beq.n	800437e <osThreadNew+0x11a>
            hTask = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800437e:	693b      	ldr	r3, [r7, #16]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3728      	adds	r7, #40	@ 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004390:	f3ef 8305 	mrs	r3, IPSR
 8004394:	60bb      	str	r3, [r7, #8]
  return(result);
 8004396:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <osDelay+0x1c>
    stat = osErrorISR;
 800439c:	f06f 0305 	mvn.w	r3, #5
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e007      	b.n	80043b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f001 f97c 	bl	80056ac <vTaskDelay>
    }
  }

  return (stat);
 80043b4:	68fb      	ldr	r3, [r7, #12]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80043be:	b580      	push	{r7, lr}
 80043c0:	b08a      	sub	sp, #40	@ 0x28
 80043c2:	af02      	add	r7, sp, #8
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ce:	f3ef 8305 	mrs	r3, IPSR
 80043d2:	613b      	str	r3, [r7, #16]
  return(result);
 80043d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d15f      	bne.n	800449a <osMessageQueueNew+0xdc>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d05c      	beq.n	800449a <osMessageQueueNew+0xdc>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d059      	beq.n	800449a <osMessageQueueNew+0xdc>
    mem = -1;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d029      	beq.n	8004446 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d012      	beq.n	8004420 <osMessageQueueNew+0x62>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b4f      	cmp	r3, #79	@ 0x4f
 8004400:	d90e      	bls.n	8004420 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <osMessageQueueNew+0x62>
        mem = 1;
 800441a:	2301      	movs	r3, #1
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e014      	b.n	800444a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d110      	bne.n	800444a <osMessageQueueNew+0x8c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10c      	bne.n	800444a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004434:	2b00      	cmp	r3, #0
 8004436:	d108      	bne.n	800444a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <osMessageQueueNew+0x8c>
          mem = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e001      	b.n	800444a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10b      	bne.n	8004468 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2100      	movs	r1, #0
 800445a:	9100      	str	r1, [sp, #0]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fa30 	bl	80048c4 <xQueueGenericCreateStatic>
 8004464:	61f8      	str	r0, [r7, #28]
 8004466:	e008      	b.n	800447a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800446e:	2200      	movs	r2, #0
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 faa3 	bl	80049be <xQueueGenericCreate>
 8004478:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00c      	beq.n	800449a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e001      	b.n	8004492 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004492:	6979      	ldr	r1, [r7, #20]
 8004494:	69f8      	ldr	r0, [r7, #28]
 8004496:	f000 ff05 	bl	80052a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800449a:	69fb      	ldr	r3, [r7, #28]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044bc:	f3ef 8305 	mrs	r3, IPSR
 80044c0:	617b      	str	r3, [r7, #20]
  return(result);
 80044c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d028      	beq.n	800451a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <osMessageQueuePut+0x36>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <osMessageQueuePut+0x36>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80044da:	f06f 0303 	mvn.w	r3, #3
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	e038      	b.n	8004554 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80044e6:	f107 0210 	add.w	r2, r7, #16
 80044ea:	2300      	movs	r3, #0
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	69b8      	ldr	r0, [r7, #24]
 80044f0:	f000 fbc6 	bl	8004c80 <xQueueGenericSendFromISR>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d003      	beq.n	8004502 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80044fa:	f06f 0302 	mvn.w	r3, #2
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e028      	b.n	8004554 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d025      	beq.n	8004554 <osMessageQueuePut+0xb0>
 8004508:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <osMessageQueuePut+0xbc>)
 800450a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	e01c      	b.n	8004554 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <osMessageQueuePut+0x82>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004526:	f06f 0303 	mvn.w	r3, #3
 800452a:	61fb      	str	r3, [r7, #28]
 800452c:	e012      	b.n	8004554 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800452e:	2300      	movs	r3, #0
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	69b8      	ldr	r0, [r7, #24]
 8004536:	f000 faa1 	bl	8004a7c <xQueueGenericSend>
 800453a:	4603      	mov	r3, r0
 800453c:	2b01      	cmp	r3, #1
 800453e:	d009      	beq.n	8004554 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004546:	f06f 0301 	mvn.w	r3, #1
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	e002      	b.n	8004554 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800454e:	f06f 0302 	mvn.w	r3, #2
 8004552:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004554:	69fb      	ldr	r3, [r7, #28]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	e000ed04 	.word	0xe000ed04

08004564 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800457a:	f3ef 8305 	mrs	r3, IPSR
 800457e:	617b      	str	r3, [r7, #20]
  return(result);
 8004580:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004582:	2b00      	cmp	r3, #0
 8004584:	d028      	beq.n	80045d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <osMessageQueueGet+0x34>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <osMessageQueueGet+0x34>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004598:	f06f 0303 	mvn.w	r3, #3
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	e037      	b.n	8004610 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80045a4:	f107 0310 	add.w	r3, r7, #16
 80045a8:	461a      	mov	r2, r3
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	69b8      	ldr	r0, [r7, #24]
 80045ae:	f000 fce7 	bl	8004f80 <xQueueReceiveFromISR>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d003      	beq.n	80045c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80045b8:	f06f 0302 	mvn.w	r3, #2
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e027      	b.n	8004610 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d024      	beq.n	8004610 <osMessageQueueGet+0xac>
 80045c6:	4b15      	ldr	r3, [pc, #84]	@ (800461c <osMessageQueueGet+0xb8>)
 80045c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	e01b      	b.n	8004610 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <osMessageQueueGet+0x80>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80045e4:	f06f 0303 	mvn.w	r3, #3
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e011      	b.n	8004610 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	69b8      	ldr	r0, [r7, #24]
 80045f2:	f000 fbe3 	bl	8004dbc <xQueueReceive>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d009      	beq.n	8004610 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004602:	f06f 0301 	mvn.w	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e002      	b.n	8004610 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800460a:	f06f 0302 	mvn.w	r3, #2
 800460e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004610:	69fb      	ldr	r3, [r7, #28]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	e000ed04 	.word	0xe000ed04

08004620 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a07      	ldr	r2, [pc, #28]	@ (800464c <vApplicationGetIdleTaskMemory+0x2c>)
 8004630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a06      	ldr	r2, [pc, #24]	@ (8004650 <vApplicationGetIdleTaskMemory+0x30>)
 8004636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2280      	movs	r2, #128	@ 0x80
 800463c:	601a      	str	r2, [r3, #0]
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000520 	.word	0x20000520
 8004650:	2000057c 	.word	0x2000057c

08004654 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a07      	ldr	r2, [pc, #28]	@ (8004680 <vApplicationGetTimerTaskMemory+0x2c>)
 8004664:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a06      	ldr	r2, [pc, #24]	@ (8004684 <vApplicationGetTimerTaskMemory+0x30>)
 800466a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	2000077c 	.word	0x2000077c
 8004684:	200007d8 	.word	0x200007d8

08004688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 0208 	add.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f103 0208 	add.w	r2, r3, #8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f103 0208 	add.w	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d103      	bne.n	800474a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e00c      	b.n	8004764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3308      	adds	r3, #8
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e002      	b.n	8004758 <vListInsert+0x2e>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d2f6      	bcs.n	8004752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6892      	ldr	r2, [r2, #8]
 80047b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6852      	ldr	r2, [r2, #4]
 80047bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d103      	bne.n	80047d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1e5a      	subs	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800481c:	f002 f934 	bl	8006a88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	441a      	add	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484c:	3b01      	subs	r3, #1
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	441a      	add	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	22ff      	movs	r2, #255	@ 0xff
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	22ff      	movs	r2, #255	@ 0xff
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d114      	bne.n	800489c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01a      	beq.n	80048b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3310      	adds	r3, #16
 800487e:	4618      	mov	r0, r3
 8004880:	f001 f9d8 	bl	8005c34 <xTaskRemoveFromEventList>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d012      	beq.n	80048b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800488a:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <xQueueGenericReset+0xd0>)
 800488c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	e009      	b.n	80048b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3310      	adds	r3, #16
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fef1 	bl	8004688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3324      	adds	r3, #36	@ 0x24
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff feec 	bl	8004688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048b0:	f002 f91c 	bl	8006aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048b4:	2301      	movs	r3, #1
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08e      	sub	sp, #56	@ 0x38
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	e7fd      	b.n	80048ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	e7fd      	b.n	800490a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <xQueueGenericCreateStatic+0x56>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <xQueueGenericCreateStatic+0x5a>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <xQueueGenericCreateStatic+0x5c>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	623b      	str	r3, [r7, #32]
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <xQueueGenericCreateStatic+0x84>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <xQueueGenericCreateStatic+0x88>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <xQueueGenericCreateStatic+0x8a>
 800494c:	2300      	movs	r3, #0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	61fb      	str	r3, [r7, #28]
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	e7fd      	b.n	8004966 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800496a:	2350      	movs	r3, #80	@ 0x50
 800496c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b50      	cmp	r3, #80	@ 0x50
 8004972:	d00b      	beq.n	800498c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	61bb      	str	r3, [r7, #24]
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800498c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00d      	beq.n	80049b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80049a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f840 	bl	8004a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3730      	adds	r7, #48	@ 0x30
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b08a      	sub	sp, #40	@ 0x28
 80049c2:	af02      	add	r7, sp, #8
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10b      	bne.n	80049ea <xQueueGenericCreate+0x2c>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	613b      	str	r3, [r7, #16]
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	e7fd      	b.n	80049e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	3350      	adds	r3, #80	@ 0x50
 80049f8:	4618      	mov	r0, r3
 80049fa:	f002 f967 	bl	8006ccc <pvPortMalloc>
 80049fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d011      	beq.n	8004a2a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	3350      	adds	r3, #80	@ 0x50
 8004a0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a18:	79fa      	ldrb	r2, [r7, #7]
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f805 	bl	8004a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d103      	bne.n	8004a50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a62:	2101      	movs	r1, #1
 8004a64:	69b8      	ldr	r0, [r7, #24]
 8004a66:	f7ff fec3 	bl	80047f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08e      	sub	sp, #56	@ 0x38
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <xQueueGenericSend+0x34>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <xQueueGenericSend+0x42>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <xQueueGenericSend+0x46>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <xQueueGenericSend+0x48>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <xQueueGenericSend+0x64>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d103      	bne.n	8004aee <xQueueGenericSend+0x72>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <xQueueGenericSend+0x76>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueGenericSend+0x78>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <xQueueGenericSend+0x94>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	623b      	str	r3, [r7, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	e7fd      	b.n	8004b0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b10:	f001 fa50 	bl	8005fb4 <xTaskGetSchedulerState>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d102      	bne.n	8004b20 <xQueueGenericSend+0xa4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <xQueueGenericSend+0xa8>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <xQueueGenericSend+0xaa>
 8004b24:	2300      	movs	r3, #0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <xQueueGenericSend+0xc6>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	61fb      	str	r3, [r7, #28]
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	e7fd      	b.n	8004b3e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b42:	f001 ffa1 	bl	8006a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <xQueueGenericSend+0xdc>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d129      	bne.n	8004bac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b5e:	f000 fa91 	bl	8005084 <prvCopyDataToQueue>
 8004b62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d010      	beq.n	8004b8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	3324      	adds	r3, #36	@ 0x24
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 f85f 	bl	8005c34 <xTaskRemoveFromEventList>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c7c <xQueueGenericSend+0x200>)
 8004b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	e00a      	b.n	8004ba4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b94:	4b39      	ldr	r3, [pc, #228]	@ (8004c7c <xQueueGenericSend+0x200>)
 8004b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ba4:	f001 ffa2 	bl	8006aec <vPortExitCritical>
				return pdPASS;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e063      	b.n	8004c74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bb2:	f001 ff9b 	bl	8006aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e05c      	b.n	8004c74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bc0:	f107 0314 	add.w	r3, r7, #20
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 f899 	bl	8005cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bce:	f001 ff8d 	bl	8006aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bd2:	f000 fe09 	bl	80057e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bd6:	f001 ff57 	bl	8006a88 <vPortEnterCritical>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004be0:	b25b      	sxtb	r3, r3
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d103      	bne.n	8004bf0 <xQueueGenericSend+0x174>
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d103      	bne.n	8004c06 <xQueueGenericSend+0x18a>
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c06:	f001 ff71 	bl	8006aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c0a:	1d3a      	adds	r2, r7, #4
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4611      	mov	r1, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 f888 	bl	8005d28 <xTaskCheckForTimeOut>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d124      	bne.n	8004c68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c20:	f000 fb28 	bl	8005274 <prvIsQueueFull>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d018      	beq.n	8004c5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 ffac 	bl	8005b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c3a:	f000 fab3 	bl	80051a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c3e:	f000 fde1 	bl	8005804 <xTaskResumeAll>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f47f af7c 	bne.w	8004b42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c7c <xQueueGenericSend+0x200>)
 8004c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	e772      	b.n	8004b42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c5e:	f000 faa1 	bl	80051a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c62:	f000 fdcf 	bl	8005804 <xTaskResumeAll>
 8004c66:	e76c      	b.n	8004b42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c6a:	f000 fa9b 	bl	80051a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c6e:	f000 fdc9 	bl	8005804 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3738      	adds	r7, #56	@ 0x38
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b090      	sub	sp, #64	@ 0x40
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10b      	bne.n	8004cb0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <xQueueGenericSendFromISR+0x3e>
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <xQueueGenericSendFromISR+0x42>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <xQueueGenericSendFromISR+0x44>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d103      	bne.n	8004cee <xQueueGenericSendFromISR+0x6e>
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <xQueueGenericSendFromISR+0x72>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <xQueueGenericSendFromISR+0x74>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	623b      	str	r3, [r7, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d10:	f001 ff9a 	bl	8006c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d14:	f3ef 8211 	mrs	r2, BASEPRI
 8004d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	61fa      	str	r2, [r7, #28]
 8004d2a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d2e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <xQueueGenericSendFromISR+0xc2>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d12f      	bne.n	8004da2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d58:	f000 f994 	bl	8005084 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d64:	d112      	bne.n	8004d8c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	3324      	adds	r3, #36	@ 0x24
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 ff5e 	bl	8005c34 <xTaskRemoveFromEventList>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00e      	beq.n	8004d9c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e007      	b.n	8004d9c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d90:	3301      	adds	r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	b25a      	sxtb	r2, r3
 8004d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004da0:	e001      	b.n	8004da6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004db0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3740      	adds	r7, #64	@ 0x40
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	@ 0x30
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <xQueueReceive+0x32>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	623b      	str	r3, [r7, #32]
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	e7fd      	b.n	8004dea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d103      	bne.n	8004dfc <xQueueReceive+0x40>
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <xQueueReceive+0x44>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <xQueueReceive+0x46>
 8004e00:	2300      	movs	r3, #0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <xQueueReceive+0x62>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	61fb      	str	r3, [r7, #28]
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e1e:	f001 f8c9 	bl	8005fb4 <xTaskGetSchedulerState>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <xQueueReceive+0x72>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <xQueueReceive+0x76>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <xQueueReceive+0x78>
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10b      	bne.n	8004e50 <xQueueReceive+0x94>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	61bb      	str	r3, [r7, #24]
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	e7fd      	b.n	8004e4c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e50:	f001 fe1a 	bl	8006a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01f      	beq.n	8004ea0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e64:	f000 f978 	bl	8005158 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	1e5a      	subs	r2, r3, #1
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00f      	beq.n	8004e98 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7a:	3310      	adds	r3, #16
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fed9 	bl	8005c34 <xTaskRemoveFromEventList>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e88:	4b3c      	ldr	r3, [pc, #240]	@ (8004f7c <xQueueReceive+0x1c0>)
 8004e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e98:	f001 fe28 	bl	8006aec <vPortExitCritical>
				return pdPASS;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e069      	b.n	8004f74 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ea6:	f001 fe21 	bl	8006aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e062      	b.n	8004f74 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d106      	bne.n	8004ec2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eb4:	f107 0310 	add.w	r3, r7, #16
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 ff1f 	bl	8005cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ec2:	f001 fe13 	bl	8006aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ec6:	f000 fc8f 	bl	80057e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eca:	f001 fddd 	bl	8006a88 <vPortEnterCritical>
 8004ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ed4:	b25b      	sxtb	r3, r3
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d103      	bne.n	8004ee4 <xQueueReceive+0x128>
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d103      	bne.n	8004efa <xQueueReceive+0x13e>
 8004ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004efa:	f001 fdf7 	bl	8006aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004efe:	1d3a      	adds	r2, r7, #4
 8004f00:	f107 0310 	add.w	r3, r7, #16
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 ff0e 	bl	8005d28 <xTaskCheckForTimeOut>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d123      	bne.n	8004f5a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f14:	f000 f998 	bl	8005248 <prvIsQueueEmpty>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d017      	beq.n	8004f4e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	3324      	adds	r3, #36	@ 0x24
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fe32 	bl	8005b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f2e:	f000 f939 	bl	80051a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f32:	f000 fc67 	bl	8005804 <xTaskResumeAll>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d189      	bne.n	8004e50 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <xQueueReceive+0x1c0>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	e780      	b.n	8004e50 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f50:	f000 f928 	bl	80051a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f54:	f000 fc56 	bl	8005804 <xTaskResumeAll>
 8004f58:	e77a      	b.n	8004e50 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f5c:	f000 f922 	bl	80051a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f60:	f000 fc50 	bl	8005804 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f66:	f000 f96f 	bl	8005248 <prvIsQueueEmpty>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f43f af6f 	beq.w	8004e50 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3730      	adds	r7, #48	@ 0x30
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08e      	sub	sp, #56	@ 0x38
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	623b      	str	r3, [r7, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d103      	bne.n	8004fbc <xQueueReceiveFromISR+0x3c>
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <xQueueReceiveFromISR+0x40>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <xQueueReceiveFromISR+0x42>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10b      	bne.n	8004fde <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	61fb      	str	r3, [r7, #28]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fde:	f001 fe33 	bl	8006c48 <vPortValidateInterruptPriority>
	__asm volatile
 8004fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	61ba      	str	r2, [r7, #24]
 8004ff8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ffa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005002:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d02f      	beq.n	800506a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800500a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005018:	f000 f89e 	bl	8005158 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	1e5a      	subs	r2, r3, #1
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005024:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d112      	bne.n	8005054 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d016      	beq.n	8005064 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	3310      	adds	r3, #16
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fdfa 	bl	8005c34 <xTaskRemoveFromEventList>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00e      	beq.n	8005064 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e007      	b.n	8005064 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005058:	3301      	adds	r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	b25a      	sxtb	r2, r3
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005064:	2301      	movs	r3, #1
 8005066:	637b      	str	r3, [r7, #52]	@ 0x34
 8005068:	e001      	b.n	800506e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	@ 0x34
 800506e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005070:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f383 8811 	msr	BASEPRI, r3
}
 8005078:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800507c:	4618      	mov	r0, r3
 800507e:	3738      	adds	r7, #56	@ 0x38
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10d      	bne.n	80050be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d14d      	bne.n	8005146 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 ff9e 	bl	8005ff0 <xTaskPriorityDisinherit>
 80050b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	e043      	b.n	8005146 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d119      	bne.n	80050f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6858      	ldr	r0, [r3, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	461a      	mov	r2, r3
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	f002 f840 	bl	8007154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	441a      	add	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d32b      	bcc.n	8005146 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	e026      	b.n	8005146 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68d8      	ldr	r0, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	461a      	mov	r2, r3
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	f002 f826 	bl	8007154 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	425b      	negs	r3, r3
 8005112:	441a      	add	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d207      	bcs.n	8005134 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	425b      	negs	r3, r3
 800512e:	441a      	add	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d105      	bne.n	8005146 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	3b01      	subs	r3, #1
 8005144:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800514e:	697b      	ldr	r3, [r7, #20]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d018      	beq.n	800519c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005172:	441a      	add	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	d303      	bcc.n	800518c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68d9      	ldr	r1, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	461a      	mov	r2, r3
 8005196:	6838      	ldr	r0, [r7, #0]
 8005198:	f001 ffdc 	bl	8007154 <memcpy>
	}
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051ac:	f001 fc6c 	bl	8006a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051b8:	e011      	b.n	80051de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d012      	beq.n	80051e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3324      	adds	r3, #36	@ 0x24
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fd34 	bl	8005c34 <xTaskRemoveFromEventList>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051d2:	f000 fe0d 	bl	8005df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	3b01      	subs	r3, #1
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	dce9      	bgt.n	80051ba <prvUnlockQueue+0x16>
 80051e6:	e000      	b.n	80051ea <prvUnlockQueue+0x46>
					break;
 80051e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	22ff      	movs	r2, #255	@ 0xff
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80051f2:	f001 fc7b 	bl	8006aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051f6:	f001 fc47 	bl	8006a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005200:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005202:	e011      	b.n	8005228 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d012      	beq.n	8005232 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3310      	adds	r3, #16
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fd0f 	bl	8005c34 <xTaskRemoveFromEventList>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800521c:	f000 fde8 	bl	8005df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	3b01      	subs	r3, #1
 8005224:	b2db      	uxtb	r3, r3
 8005226:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800522c:	2b00      	cmp	r3, #0
 800522e:	dce9      	bgt.n	8005204 <prvUnlockQueue+0x60>
 8005230:	e000      	b.n	8005234 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005232:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	22ff      	movs	r2, #255	@ 0xff
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800523c:	f001 fc56 	bl	8006aec <vPortExitCritical>
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005250:	f001 fc1a 	bl	8006a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800525c:	2301      	movs	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e001      	b.n	8005266 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005266:	f001 fc41 	bl	8006aec <vPortExitCritical>

	return xReturn;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800527c:	f001 fc04 	bl	8006a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005288:	429a      	cmp	r2, r3
 800528a:	d102      	bne.n	8005292 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800528c:	2301      	movs	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e001      	b.n	8005296 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005296:	f001 fc29 	bl	8006aec <vPortExitCritical>

	return xReturn;
 800529a:	68fb      	ldr	r3, [r7, #12]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e014      	b.n	80052de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052b4:	4a0f      	ldr	r2, [pc, #60]	@ (80052f4 <vQueueAddToRegistry+0x50>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052c0:	490c      	ldr	r1, [pc, #48]	@ (80052f4 <vQueueAddToRegistry+0x50>)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052ca:	4a0a      	ldr	r2, [pc, #40]	@ (80052f4 <vQueueAddToRegistry+0x50>)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052d6:	e006      	b.n	80052e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b07      	cmp	r3, #7
 80052e2:	d9e7      	bls.n	80052b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000bd8 	.word	0x20000bd8

080052f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005308:	f001 fbbe 	bl	8006a88 <vPortEnterCritical>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005312:	b25b      	sxtb	r3, r3
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d103      	bne.n	8005322 <vQueueWaitForMessageRestricted+0x2a>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005328:	b25b      	sxtb	r3, r3
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d103      	bne.n	8005338 <vQueueWaitForMessageRestricted+0x40>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005338:	f001 fbd8 	bl	8006aec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	3324      	adds	r3, #36	@ 0x24
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fc45 	bl	8005bdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005352:	6978      	ldr	r0, [r7, #20]
 8005354:	f7ff ff26 	bl	80051a4 <prvUnlockQueue>
	}
 8005358:	bf00      	nop
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08e      	sub	sp, #56	@ 0x38
 8005364:	af04      	add	r7, sp, #16
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	623b      	str	r3, [r7, #32]
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800538c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10b      	bne.n	80053aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	61fb      	str	r3, [r7, #28]
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	e7fd      	b.n	80053a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053aa:	235c      	movs	r3, #92	@ 0x5c
 80053ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80053b2:	d00b      	beq.n	80053cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61bb      	str	r3, [r7, #24]
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01e      	beq.n	8005412 <xTaskCreateStatic+0xb2>
 80053d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01b      	beq.n	8005412 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053ec:	2300      	movs	r3, #0
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	9302      	str	r3, [sp, #8]
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f850 	bl	80054aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800540a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800540c:	f000 f8de 	bl	80055cc <prvAddNewTaskToReadyList>
 8005410:	e001      	b.n	8005416 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005416:	697b      	ldr	r3, [r7, #20]
	}
 8005418:	4618      	mov	r0, r3
 800541a:	3728      	adds	r7, #40	@ 0x28
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	@ 0x30
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f001 fc49 	bl	8006ccc <pvPortMalloc>
 800543a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005442:	205c      	movs	r0, #92	@ 0x5c
 8005444:	f001 fc42 	bl	8006ccc <pvPortMalloc>
 8005448:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	631a      	str	r2, [r3, #48]	@ 0x30
 8005456:	e005      	b.n	8005464 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f001 fd05 	bl	8006e68 <vPortFree>
 800545e:	e001      	b.n	8005464 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d017      	beq.n	800549a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	2300      	movs	r3, #0
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	9302      	str	r3, [sp, #8]
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f80e 	bl	80054aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800548e:	69f8      	ldr	r0, [r7, #28]
 8005490:	f000 f89c 	bl	80055cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e002      	b.n	80054a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054a0:	69bb      	ldr	r3, [r7, #24]
	}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b088      	sub	sp, #32
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
 80054b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	461a      	mov	r2, r3
 80054c2:	21a5      	movs	r1, #165	@ 0xa5
 80054c4:	f001 fe12 	bl	80070ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054d2:	3b01      	subs	r3, #1
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00b      	beq.n	8005504 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	617b      	str	r3, [r7, #20]
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01f      	beq.n	800554a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550a:	2300      	movs	r3, #0
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	e012      	b.n	8005536 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	7819      	ldrb	r1, [r3, #0]
 8005518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	3334      	adds	r3, #52	@ 0x34
 8005520:	460a      	mov	r2, r1
 8005522:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	3301      	adds	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2b0f      	cmp	r3, #15
 800553a:	d9e9      	bls.n	8005510 <prvInitialiseNewTask+0x66>
 800553c:	e000      	b.n	8005540 <prvInitialiseNewTask+0x96>
			{
				break;
 800553e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005548:	e003      	b.n	8005552 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	2b37      	cmp	r3, #55	@ 0x37
 8005556:	d901      	bls.n	800555c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005558:	2337      	movs	r3, #55	@ 0x37
 800555a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005560:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005566:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	2200      	movs	r2, #0
 800556c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	3304      	adds	r3, #4
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff f8a8 	bl	80046c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	3318      	adds	r3, #24
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff f8a3 	bl	80046c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005596:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	2200      	movs	r2, #0
 800559c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	68f9      	ldr	r1, [r7, #12]
 80055aa:	69b8      	ldr	r0, [r7, #24]
 80055ac:	f001 f93e 	bl	800682c <pxPortInitialiseStack>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c2:	bf00      	nop
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055d4:	f001 fa58 	bl	8006a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005690 <prvAddNewTaskToReadyList+0xc4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	4a2c      	ldr	r2, [pc, #176]	@ (8005690 <prvAddNewTaskToReadyList+0xc4>)
 80055e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005694 <prvAddNewTaskToReadyList+0xc8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005694 <prvAddNewTaskToReadyList+0xc8>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f0:	4b27      	ldr	r3, [pc, #156]	@ (8005690 <prvAddNewTaskToReadyList+0xc4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d110      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055f8:	f000 fc1e 	bl	8005e38 <prvInitialiseTaskLists>
 80055fc:	e00d      	b.n	800561a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055fe:	4b26      	ldr	r3, [pc, #152]	@ (8005698 <prvAddNewTaskToReadyList+0xcc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005606:	4b23      	ldr	r3, [pc, #140]	@ (8005694 <prvAddNewTaskToReadyList+0xc8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	429a      	cmp	r2, r3
 8005612:	d802      	bhi.n	800561a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005614:	4a1f      	ldr	r2, [pc, #124]	@ (8005694 <prvAddNewTaskToReadyList+0xc8>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800561a:	4b20      	ldr	r3, [pc, #128]	@ (800569c <prvAddNewTaskToReadyList+0xd0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3301      	adds	r3, #1
 8005620:	4a1e      	ldr	r2, [pc, #120]	@ (800569c <prvAddNewTaskToReadyList+0xd0>)
 8005622:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005624:	4b1d      	ldr	r3, [pc, #116]	@ (800569c <prvAddNewTaskToReadyList+0xd0>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005630:	4b1b      	ldr	r3, [pc, #108]	@ (80056a0 <prvAddNewTaskToReadyList+0xd4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d903      	bls.n	8005640 <prvAddNewTaskToReadyList+0x74>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	4a18      	ldr	r2, [pc, #96]	@ (80056a0 <prvAddNewTaskToReadyList+0xd4>)
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4a15      	ldr	r2, [pc, #84]	@ (80056a4 <prvAddNewTaskToReadyList+0xd8>)
 800564e:	441a      	add	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f7ff f843 	bl	80046e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800565c:	f001 fa46 	bl	8006aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005660:	4b0d      	ldr	r3, [pc, #52]	@ (8005698 <prvAddNewTaskToReadyList+0xcc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00e      	beq.n	8005686 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005668:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <prvAddNewTaskToReadyList+0xc8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005672:	429a      	cmp	r2, r3
 8005674:	d207      	bcs.n	8005686 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005676:	4b0c      	ldr	r3, [pc, #48]	@ (80056a8 <prvAddNewTaskToReadyList+0xdc>)
 8005678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005686:	bf00      	nop
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200010ec 	.word	0x200010ec
 8005694:	20000c18 	.word	0x20000c18
 8005698:	200010f8 	.word	0x200010f8
 800569c:	20001108 	.word	0x20001108
 80056a0:	200010f4 	.word	0x200010f4
 80056a4:	20000c1c 	.word	0x20000c1c
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d018      	beq.n	80056f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056be:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <vTaskDelay+0x64>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <vTaskDelay+0x32>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	60bb      	str	r3, [r7, #8]
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	e7fd      	b.n	80056da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056de:	f000 f883 	bl	80057e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056e2:	2100      	movs	r1, #0
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fcf3 	bl	80060d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056ea:	f000 f88b 	bl	8005804 <xTaskResumeAll>
 80056ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d107      	bne.n	8005706 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80056f6:	4b07      	ldr	r3, [pc, #28]	@ (8005714 <vTaskDelay+0x68>)
 80056f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20001114 	.word	0x20001114
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	@ 0x28
 800571c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005726:	463a      	mov	r2, r7
 8005728:	1d39      	adds	r1, r7, #4
 800572a:	f107 0308 	add.w	r3, r7, #8
 800572e:	4618      	mov	r0, r3
 8005730:	f7fe ff76 	bl	8004620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	9202      	str	r2, [sp, #8]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	2300      	movs	r3, #0
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	2300      	movs	r3, #0
 8005744:	460a      	mov	r2, r1
 8005746:	4922      	ldr	r1, [pc, #136]	@ (80057d0 <vTaskStartScheduler+0xb8>)
 8005748:	4822      	ldr	r0, [pc, #136]	@ (80057d4 <vTaskStartScheduler+0xbc>)
 800574a:	f7ff fe09 	bl	8005360 <xTaskCreateStatic>
 800574e:	4603      	mov	r3, r0
 8005750:	4a21      	ldr	r2, [pc, #132]	@ (80057d8 <vTaskStartScheduler+0xc0>)
 8005752:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005754:	4b20      	ldr	r3, [pc, #128]	@ (80057d8 <vTaskStartScheduler+0xc0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e001      	b.n	8005766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d102      	bne.n	8005772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800576c:	f000 fd04 	bl	8006178 <xTimerCreateTimerTask>
 8005770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d116      	bne.n	80057a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	613b      	str	r3, [r7, #16]
}
 800578a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800578c:	4b13      	ldr	r3, [pc, #76]	@ (80057dc <vTaskStartScheduler+0xc4>)
 800578e:	f04f 32ff 	mov.w	r2, #4294967295
 8005792:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005794:	4b12      	ldr	r3, [pc, #72]	@ (80057e0 <vTaskStartScheduler+0xc8>)
 8005796:	2201      	movs	r2, #1
 8005798:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800579a:	4b12      	ldr	r3, [pc, #72]	@ (80057e4 <vTaskStartScheduler+0xcc>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057a0:	f001 f8ce 	bl	8006940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057a4:	e00f      	b.n	80057c6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d10b      	bne.n	80057c6 <vTaskStartScheduler+0xae>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	60fb      	str	r3, [r7, #12]
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <vTaskStartScheduler+0xaa>
}
 80057c6:	bf00      	nop
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	08007ad8 	.word	0x08007ad8
 80057d4:	08005e09 	.word	0x08005e09
 80057d8:	20001110 	.word	0x20001110
 80057dc:	2000110c 	.word	0x2000110c
 80057e0:	200010f8 	.word	0x200010f8
 80057e4:	200010f0 	.word	0x200010f0

080057e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057ec:	4b04      	ldr	r3, [pc, #16]	@ (8005800 <vTaskSuspendAll+0x18>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	4a03      	ldr	r2, [pc, #12]	@ (8005800 <vTaskSuspendAll+0x18>)
 80057f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057f6:	bf00      	nop
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20001114 	.word	0x20001114

08005804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005812:	4b42      	ldr	r3, [pc, #264]	@ (800591c <xTaskResumeAll+0x118>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <xTaskResumeAll+0x2e>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	603b      	str	r3, [r7, #0]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005832:	f001 f929 	bl	8006a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005836:	4b39      	ldr	r3, [pc, #228]	@ (800591c <xTaskResumeAll+0x118>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	4a37      	ldr	r2, [pc, #220]	@ (800591c <xTaskResumeAll+0x118>)
 800583e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005840:	4b36      	ldr	r3, [pc, #216]	@ (800591c <xTaskResumeAll+0x118>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d162      	bne.n	800590e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005848:	4b35      	ldr	r3, [pc, #212]	@ (8005920 <xTaskResumeAll+0x11c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d05e      	beq.n	800590e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005850:	e02f      	b.n	80058b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005852:	4b34      	ldr	r3, [pc, #208]	@ (8005924 <xTaskResumeAll+0x120>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3318      	adds	r3, #24
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe ff9c 	bl	800479c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3304      	adds	r3, #4
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe ff97 	bl	800479c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005872:	4b2d      	ldr	r3, [pc, #180]	@ (8005928 <xTaskResumeAll+0x124>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d903      	bls.n	8005882 <xTaskResumeAll+0x7e>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	4a2a      	ldr	r2, [pc, #168]	@ (8005928 <xTaskResumeAll+0x124>)
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4a27      	ldr	r2, [pc, #156]	@ (800592c <xTaskResumeAll+0x128>)
 8005890:	441a      	add	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3304      	adds	r3, #4
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f7fe ff22 	bl	80046e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a2:	4b23      	ldr	r3, [pc, #140]	@ (8005930 <xTaskResumeAll+0x12c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d302      	bcc.n	80058b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058ac:	4b21      	ldr	r3, [pc, #132]	@ (8005934 <xTaskResumeAll+0x130>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005924 <xTaskResumeAll+0x120>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1cb      	bne.n	8005852 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058c0:	f000 fb58 	bl	8005f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005938 <xTaskResumeAll+0x134>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d010      	beq.n	80058f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058d0:	f000 f846 	bl	8005960 <xTaskIncrementTick>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80058da:	4b16      	ldr	r3, [pc, #88]	@ (8005934 <xTaskResumeAll+0x130>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f1      	bne.n	80058d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80058ec:	4b12      	ldr	r3, [pc, #72]	@ (8005938 <xTaskResumeAll+0x134>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058f2:	4b10      	ldr	r3, [pc, #64]	@ (8005934 <xTaskResumeAll+0x130>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058fa:	2301      	movs	r3, #1
 80058fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058fe:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <xTaskResumeAll+0x138>)
 8005900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800590e:	f001 f8ed 	bl	8006aec <vPortExitCritical>

	return xAlreadyYielded;
 8005912:	68bb      	ldr	r3, [r7, #8]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20001114 	.word	0x20001114
 8005920:	200010ec 	.word	0x200010ec
 8005924:	200010ac 	.word	0x200010ac
 8005928:	200010f4 	.word	0x200010f4
 800592c:	20000c1c 	.word	0x20000c1c
 8005930:	20000c18 	.word	0x20000c18
 8005934:	20001100 	.word	0x20001100
 8005938:	200010fc 	.word	0x200010fc
 800593c:	e000ed04 	.word	0xe000ed04

08005940 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005946:	4b05      	ldr	r3, [pc, #20]	@ (800595c <xTaskGetTickCount+0x1c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800594c:	687b      	ldr	r3, [r7, #4]
}
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	200010f0 	.word	0x200010f0

08005960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800596a:	4b4f      	ldr	r3, [pc, #316]	@ (8005aa8 <xTaskIncrementTick+0x148>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f040 8090 	bne.w	8005a94 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005974:	4b4d      	ldr	r3, [pc, #308]	@ (8005aac <xTaskIncrementTick+0x14c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800597c:	4a4b      	ldr	r2, [pc, #300]	@ (8005aac <xTaskIncrementTick+0x14c>)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d121      	bne.n	80059cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005988:	4b49      	ldr	r3, [pc, #292]	@ (8005ab0 <xTaskIncrementTick+0x150>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	603b      	str	r3, [r7, #0]
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	e7fd      	b.n	80059a6 <xTaskIncrementTick+0x46>
 80059aa:	4b41      	ldr	r3, [pc, #260]	@ (8005ab0 <xTaskIncrementTick+0x150>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	4b40      	ldr	r3, [pc, #256]	@ (8005ab4 <xTaskIncrementTick+0x154>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab0 <xTaskIncrementTick+0x150>)
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab4 <xTaskIncrementTick+0x154>)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	4b3e      	ldr	r3, [pc, #248]	@ (8005ab8 <xTaskIncrementTick+0x158>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ab8 <xTaskIncrementTick+0x158>)
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	f000 fad4 	bl	8005f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059cc:	4b3b      	ldr	r3, [pc, #236]	@ (8005abc <xTaskIncrementTick+0x15c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d349      	bcc.n	8005a6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059d6:	4b36      	ldr	r3, [pc, #216]	@ (8005ab0 <xTaskIncrementTick+0x150>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e0:	4b36      	ldr	r3, [pc, #216]	@ (8005abc <xTaskIncrementTick+0x15c>)
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295
 80059e6:	601a      	str	r2, [r3, #0]
					break;
 80059e8:	e03f      	b.n	8005a6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ea:	4b31      	ldr	r3, [pc, #196]	@ (8005ab0 <xTaskIncrementTick+0x150>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d203      	bcs.n	8005a0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a02:	4a2e      	ldr	r2, [pc, #184]	@ (8005abc <xTaskIncrementTick+0x15c>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a08:	e02f      	b.n	8005a6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fec4 	bl	800479c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	3318      	adds	r3, #24
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe febb 	bl	800479c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2a:	4b25      	ldr	r3, [pc, #148]	@ (8005ac0 <xTaskIncrementTick+0x160>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d903      	bls.n	8005a3a <xTaskIncrementTick+0xda>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	4a22      	ldr	r2, [pc, #136]	@ (8005ac0 <xTaskIncrementTick+0x160>)
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac4 <xTaskIncrementTick+0x164>)
 8005a48:	441a      	add	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7fe fe46 	bl	80046e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac8 <xTaskIncrementTick+0x168>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d3b8      	bcc.n	80059d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a68:	e7b5      	b.n	80059d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a6a:	4b17      	ldr	r3, [pc, #92]	@ (8005ac8 <xTaskIncrementTick+0x168>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a70:	4914      	ldr	r1, [pc, #80]	@ (8005ac4 <xTaskIncrementTick+0x164>)
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d901      	bls.n	8005a86 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a86:	4b11      	ldr	r3, [pc, #68]	@ (8005acc <xTaskIncrementTick+0x16c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e004      	b.n	8005a9e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a94:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad0 <xTaskIncrementTick+0x170>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad0 <xTaskIncrementTick+0x170>)
 8005a9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a9e:	697b      	ldr	r3, [r7, #20]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20001114 	.word	0x20001114
 8005aac:	200010f0 	.word	0x200010f0
 8005ab0:	200010a4 	.word	0x200010a4
 8005ab4:	200010a8 	.word	0x200010a8
 8005ab8:	20001104 	.word	0x20001104
 8005abc:	2000110c 	.word	0x2000110c
 8005ac0:	200010f4 	.word	0x200010f4
 8005ac4:	20000c1c 	.word	0x20000c1c
 8005ac8:	20000c18 	.word	0x20000c18
 8005acc:	20001100 	.word	0x20001100
 8005ad0:	200010fc 	.word	0x200010fc

08005ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ada:	4b28      	ldr	r3, [pc, #160]	@ (8005b7c <vTaskSwitchContext+0xa8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ae2:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <vTaskSwitchContext+0xac>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ae8:	e042      	b.n	8005b70 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005aea:	4b25      	ldr	r3, [pc, #148]	@ (8005b80 <vTaskSwitchContext+0xac>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af0:	4b24      	ldr	r3, [pc, #144]	@ (8005b84 <vTaskSwitchContext+0xb0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e011      	b.n	8005b1c <vTaskSwitchContext+0x48>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <vTaskSwitchContext+0x42>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <vTaskSwitchContext+0x3e>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	491a      	ldr	r1, [pc, #104]	@ (8005b88 <vTaskSwitchContext+0xb4>)
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0e3      	beq.n	8005af8 <vTaskSwitchContext+0x24>
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4a13      	ldr	r2, [pc, #76]	@ (8005b88 <vTaskSwitchContext+0xb4>)
 8005b3c:	4413      	add	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	3308      	adds	r3, #8
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d104      	bne.n	8005b60 <vTaskSwitchContext+0x8c>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	4a09      	ldr	r2, [pc, #36]	@ (8005b8c <vTaskSwitchContext+0xb8>)
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	4a06      	ldr	r2, [pc, #24]	@ (8005b84 <vTaskSwitchContext+0xb0>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6013      	str	r3, [r2, #0]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	20001114 	.word	0x20001114
 8005b80:	20001100 	.word	0x20001100
 8005b84:	200010f4 	.word	0x200010f4
 8005b88:	20000c1c 	.word	0x20000c1c
 8005b8c:	20000c18 	.word	0x20000c18

08005b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
}
 8005bb2:	bf00      	nop
 8005bb4:	bf00      	nop
 8005bb6:	e7fd      	b.n	8005bb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bb8:	4b07      	ldr	r3, [pc, #28]	@ (8005bd8 <vTaskPlaceOnEventList+0x48>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3318      	adds	r3, #24
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fe fdb2 	bl	800472a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	6838      	ldr	r0, [r7, #0]
 8005bca:	f000 fa81 	bl	80060d0 <prvAddCurrentTaskToDelayedList>
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000c18 	.word	0x20000c18

08005bdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	617b      	str	r3, [r7, #20]
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	e7fd      	b.n	8005c02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c06:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3318      	adds	r3, #24
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7fe fd67 	bl	80046e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	68b8      	ldr	r0, [r7, #8]
 8005c24:	f000 fa54 	bl	80060d0 <prvAddCurrentTaskToDelayedList>
	}
 8005c28:	bf00      	nop
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000c18 	.word	0x20000c18

08005c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	60fb      	str	r3, [r7, #12]
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	e7fd      	b.n	8005c5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	3318      	adds	r3, #24
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe fd98 	bl	800479c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce4 <xTaskRemoveFromEventList+0xb0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11d      	bne.n	8005cb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe fd8f 	bl	800479c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c82:	4b19      	ldr	r3, [pc, #100]	@ (8005ce8 <xTaskRemoveFromEventList+0xb4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d903      	bls.n	8005c92 <xTaskRemoveFromEventList+0x5e>
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ce8 <xTaskRemoveFromEventList+0xb4>)
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a13      	ldr	r2, [pc, #76]	@ (8005cec <xTaskRemoveFromEventList+0xb8>)
 8005ca0:	441a      	add	r2, r3
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7fe fd1a 	bl	80046e2 <vListInsertEnd>
 8005cae:	e005      	b.n	8005cbc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	3318      	adds	r3, #24
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	480e      	ldr	r0, [pc, #56]	@ (8005cf0 <xTaskRemoveFromEventList+0xbc>)
 8005cb8:	f7fe fd13 	bl	80046e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf4 <xTaskRemoveFromEventList+0xc0>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d905      	bls.n	8005cd6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cce:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf8 <xTaskRemoveFromEventList+0xc4>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e001      	b.n	8005cda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cda:	697b      	ldr	r3, [r7, #20]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20001114 	.word	0x20001114
 8005ce8:	200010f4 	.word	0x200010f4
 8005cec:	20000c1c 	.word	0x20000c1c
 8005cf0:	200010ac 	.word	0x200010ac
 8005cf4:	20000c18 	.word	0x20000c18
 8005cf8:	20001100 	.word	0x20001100

08005cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d04:	4b06      	ldr	r3, [pc, #24]	@ (8005d20 <vTaskInternalSetTimeOutState+0x24>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d0c:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <vTaskInternalSetTimeOutState+0x28>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	605a      	str	r2, [r3, #4]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20001104 	.word	0x20001104
 8005d24:	200010f0 	.word	0x200010f0

08005d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	613b      	str	r3, [r7, #16]
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10b      	bne.n	8005d6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	60fb      	str	r3, [r7, #12]
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	e7fd      	b.n	8005d6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d6e:	f000 fe8b 	bl	8006a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d72:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <xTaskCheckForTimeOut+0xc0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d102      	bne.n	8005d92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	e023      	b.n	8005dda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b15      	ldr	r3, [pc, #84]	@ (8005dec <xTaskCheckForTimeOut+0xc4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d007      	beq.n	8005dae <xTaskCheckForTimeOut+0x86>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d302      	bcc.n	8005dae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e015      	b.n	8005dda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d20b      	bcs.n	8005dd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff ff99 	bl	8005cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	e004      	b.n	8005dda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dda:	f000 fe87 	bl	8006aec <vPortExitCritical>

	return xReturn;
 8005dde:	69fb      	ldr	r3, [r7, #28]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3720      	adds	r7, #32
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	200010f0 	.word	0x200010f0
 8005dec:	20001104 	.word	0x20001104

08005df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005df4:	4b03      	ldr	r3, [pc, #12]	@ (8005e04 <vTaskMissedYield+0x14>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	20001100 	.word	0x20001100

08005e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e10:	f000 f852 	bl	8005eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e14:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <prvIdleTask+0x28>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d9f9      	bls.n	8005e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e1c:	4b05      	ldr	r3, [pc, #20]	@ (8005e34 <prvIdleTask+0x2c>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e2c:	e7f0      	b.n	8005e10 <prvIdleTask+0x8>
 8005e2e:	bf00      	nop
 8005e30:	20000c1c 	.word	0x20000c1c
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
 8005e42:	e00c      	b.n	8005e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4a12      	ldr	r2, [pc, #72]	@ (8005e98 <prvInitialiseTaskLists+0x60>)
 8005e50:	4413      	add	r3, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fc18 	bl	8004688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b37      	cmp	r3, #55	@ 0x37
 8005e62:	d9ef      	bls.n	8005e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e64:	480d      	ldr	r0, [pc, #52]	@ (8005e9c <prvInitialiseTaskLists+0x64>)
 8005e66:	f7fe fc0f 	bl	8004688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e6a:	480d      	ldr	r0, [pc, #52]	@ (8005ea0 <prvInitialiseTaskLists+0x68>)
 8005e6c:	f7fe fc0c 	bl	8004688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e70:	480c      	ldr	r0, [pc, #48]	@ (8005ea4 <prvInitialiseTaskLists+0x6c>)
 8005e72:	f7fe fc09 	bl	8004688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e76:	480c      	ldr	r0, [pc, #48]	@ (8005ea8 <prvInitialiseTaskLists+0x70>)
 8005e78:	f7fe fc06 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e7c:	480b      	ldr	r0, [pc, #44]	@ (8005eac <prvInitialiseTaskLists+0x74>)
 8005e7e:	f7fe fc03 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e82:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <prvInitialiseTaskLists+0x78>)
 8005e84:	4a05      	ldr	r2, [pc, #20]	@ (8005e9c <prvInitialiseTaskLists+0x64>)
 8005e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e88:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <prvInitialiseTaskLists+0x7c>)
 8005e8a:	4a05      	ldr	r2, [pc, #20]	@ (8005ea0 <prvInitialiseTaskLists+0x68>)
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000c1c 	.word	0x20000c1c
 8005e9c:	2000107c 	.word	0x2000107c
 8005ea0:	20001090 	.word	0x20001090
 8005ea4:	200010ac 	.word	0x200010ac
 8005ea8:	200010c0 	.word	0x200010c0
 8005eac:	200010d8 	.word	0x200010d8
 8005eb0:	200010a4 	.word	0x200010a4
 8005eb4:	200010a8 	.word	0x200010a8

08005eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ebe:	e019      	b.n	8005ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ec0:	f000 fde2 	bl	8006a88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec4:	4b10      	ldr	r3, [pc, #64]	@ (8005f08 <prvCheckTasksWaitingTermination+0x50>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fc63 	bl	800479c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <prvCheckTasksWaitingTermination+0x54>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	4a0b      	ldr	r2, [pc, #44]	@ (8005f0c <prvCheckTasksWaitingTermination+0x54>)
 8005ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <prvCheckTasksWaitingTermination+0x58>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8005f10 <prvCheckTasksWaitingTermination+0x58>)
 8005ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eea:	f000 fdff 	bl	8006aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f810 	bl	8005f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ef4:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <prvCheckTasksWaitingTermination+0x58>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e1      	bne.n	8005ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200010c0 	.word	0x200010c0
 8005f0c:	200010ec 	.word	0x200010ec
 8005f10:	200010d4 	.word	0x200010d4

08005f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d108      	bne.n	8005f38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 ff9c 	bl	8006e68 <vPortFree>
				vPortFree( pxTCB );
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 ff99 	bl	8006e68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f36:	e019      	b.n	8005f6c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d103      	bne.n	8005f4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 ff90 	bl	8006e68 <vPortFree>
	}
 8005f48:	e010      	b.n	8005f6c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d00b      	beq.n	8005f6c <prvDeleteTCB+0x58>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	e7fd      	b.n	8005f68 <prvDeleteTCB+0x54>
	}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f84:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f8c:	e008      	b.n	8005fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8e:	4b07      	ldr	r3, [pc, #28]	@ (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	@ (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f9e:	6013      	str	r3, [r2, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	200010a4 	.word	0x200010a4
 8005fb0:	2000110c 	.word	0x2000110c

08005fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fba:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe8 <xTaskGetSchedulerState+0x34>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	e008      	b.n	8005fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc8:	4b08      	ldr	r3, [pc, #32]	@ (8005fec <xTaskGetSchedulerState+0x38>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	e001      	b.n	8005fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fda:	687b      	ldr	r3, [r7, #4]
	}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	200010f8 	.word	0x200010f8
 8005fec:	20001114 	.word	0x20001114

08005ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d058      	beq.n	80060b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006006:	4b2f      	ldr	r3, [pc, #188]	@ (80060c4 <xTaskPriorityDisinherit+0xd4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d00b      	beq.n	8006028 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10b      	bne.n	8006048 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	60bb      	str	r3, [r7, #8]
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	e7fd      	b.n	8006044 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604c:	1e5a      	subs	r2, r3, #1
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800605a:	429a      	cmp	r2, r3
 800605c:	d02c      	beq.n	80060b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006062:	2b00      	cmp	r3, #0
 8006064:	d128      	bne.n	80060b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	3304      	adds	r3, #4
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe fb96 	bl	800479c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006088:	4b0f      	ldr	r3, [pc, #60]	@ (80060c8 <xTaskPriorityDisinherit+0xd8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d903      	bls.n	8006098 <xTaskPriorityDisinherit+0xa8>
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006094:	4a0c      	ldr	r2, [pc, #48]	@ (80060c8 <xTaskPriorityDisinherit+0xd8>)
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4a09      	ldr	r2, [pc, #36]	@ (80060cc <xTaskPriorityDisinherit+0xdc>)
 80060a6:	441a      	add	r2, r3
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f7fe fb17 	bl	80046e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060b8:	697b      	ldr	r3, [r7, #20]
	}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000c18 	.word	0x20000c18
 80060c8:	200010f4 	.word	0x200010f4
 80060cc:	20000c1c 	.word	0x20000c1c

080060d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060da:	4b21      	ldr	r3, [pc, #132]	@ (8006160 <prvAddCurrentTaskToDelayedList+0x90>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060e0:	4b20      	ldr	r3, [pc, #128]	@ (8006164 <prvAddCurrentTaskToDelayedList+0x94>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe fb58 	bl	800479c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d10a      	bne.n	800610a <prvAddCurrentTaskToDelayedList+0x3a>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006164 <prvAddCurrentTaskToDelayedList+0x94>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3304      	adds	r3, #4
 8006100:	4619      	mov	r1, r3
 8006102:	4819      	ldr	r0, [pc, #100]	@ (8006168 <prvAddCurrentTaskToDelayedList+0x98>)
 8006104:	f7fe faed 	bl	80046e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006108:	e026      	b.n	8006158 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4413      	add	r3, r2
 8006110:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006112:	4b14      	ldr	r3, [pc, #80]	@ (8006164 <prvAddCurrentTaskToDelayedList+0x94>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	429a      	cmp	r2, r3
 8006120:	d209      	bcs.n	8006136 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006122:	4b12      	ldr	r3, [pc, #72]	@ (800616c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <prvAddCurrentTaskToDelayedList+0x94>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3304      	adds	r3, #4
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f7fe fafb 	bl	800472a <vListInsert>
}
 8006134:	e010      	b.n	8006158 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006136:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b0a      	ldr	r3, [pc, #40]	@ (8006164 <prvAddCurrentTaskToDelayedList+0x94>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3304      	adds	r3, #4
 8006140:	4619      	mov	r1, r3
 8006142:	4610      	mov	r0, r2
 8006144:	f7fe faf1 	bl	800472a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006148:	4b0a      	ldr	r3, [pc, #40]	@ (8006174 <prvAddCurrentTaskToDelayedList+0xa4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	d202      	bcs.n	8006158 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006152:	4a08      	ldr	r2, [pc, #32]	@ (8006174 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6013      	str	r3, [r2, #0]
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	200010f0 	.word	0x200010f0
 8006164:	20000c18 	.word	0x20000c18
 8006168:	200010d8 	.word	0x200010d8
 800616c:	200010a8 	.word	0x200010a8
 8006170:	200010a4 	.word	0x200010a4
 8006174:	2000110c 	.word	0x2000110c

08006178 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	@ 0x28
 800617c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006182:	f000 fb13 	bl	80067ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006186:	4b1d      	ldr	r3, [pc, #116]	@ (80061fc <xTimerCreateTimerTask+0x84>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d021      	beq.n	80061d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006196:	1d3a      	adds	r2, r7, #4
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	f107 030c 	add.w	r3, r7, #12
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe fa57 	bl	8004654 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	9202      	str	r2, [sp, #8]
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	2302      	movs	r3, #2
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	460a      	mov	r2, r1
 80061b8:	4911      	ldr	r1, [pc, #68]	@ (8006200 <xTimerCreateTimerTask+0x88>)
 80061ba:	4812      	ldr	r0, [pc, #72]	@ (8006204 <xTimerCreateTimerTask+0x8c>)
 80061bc:	f7ff f8d0 	bl	8005360 <xTaskCreateStatic>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4a11      	ldr	r2, [pc, #68]	@ (8006208 <xTimerCreateTimerTask+0x90>)
 80061c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061c6:	4b10      	ldr	r3, [pc, #64]	@ (8006208 <xTimerCreateTimerTask+0x90>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061ce:	2301      	movs	r3, #1
 80061d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	613b      	str	r3, [r7, #16]
}
 80061ea:	bf00      	nop
 80061ec:	bf00      	nop
 80061ee:	e7fd      	b.n	80061ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061f0:	697b      	ldr	r3, [r7, #20]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20001148 	.word	0x20001148
 8006200:	08007ae0 	.word	0x08007ae0
 8006204:	08006345 	.word	0x08006345
 8006208:	2000114c 	.word	0x2000114c

0800620c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	@ 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800621a:	2300      	movs	r3, #0
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <xTimerGenericCommand+0x30>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	623b      	str	r3, [r7, #32]
}
 8006236:	bf00      	nop
 8006238:	bf00      	nop
 800623a:	e7fd      	b.n	8006238 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800623c:	4b19      	ldr	r3, [pc, #100]	@ (80062a4 <xTimerGenericCommand+0x98>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d02a      	beq.n	800629a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b05      	cmp	r3, #5
 8006254:	dc18      	bgt.n	8006288 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006256:	f7ff fead 	bl	8005fb4 <xTaskGetSchedulerState>
 800625a:	4603      	mov	r3, r0
 800625c:	2b02      	cmp	r3, #2
 800625e:	d109      	bne.n	8006274 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006260:	4b10      	ldr	r3, [pc, #64]	@ (80062a4 <xTimerGenericCommand+0x98>)
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	f107 0110 	add.w	r1, r7, #16
 8006268:	2300      	movs	r3, #0
 800626a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626c:	f7fe fc06 	bl	8004a7c <xQueueGenericSend>
 8006270:	6278      	str	r0, [r7, #36]	@ 0x24
 8006272:	e012      	b.n	800629a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006274:	4b0b      	ldr	r3, [pc, #44]	@ (80062a4 <xTimerGenericCommand+0x98>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	f107 0110 	add.w	r1, r7, #16
 800627c:	2300      	movs	r3, #0
 800627e:	2200      	movs	r2, #0
 8006280:	f7fe fbfc 	bl	8004a7c <xQueueGenericSend>
 8006284:	6278      	str	r0, [r7, #36]	@ 0x24
 8006286:	e008      	b.n	800629a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006288:	4b06      	ldr	r3, [pc, #24]	@ (80062a4 <xTimerGenericCommand+0x98>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	f107 0110 	add.w	r1, r7, #16
 8006290:	2300      	movs	r3, #0
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	f7fe fcf4 	bl	8004c80 <xQueueGenericSendFromISR>
 8006298:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800629c:	4618      	mov	r0, r3
 800629e:	3728      	adds	r7, #40	@ 0x28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20001148 	.word	0x20001148

080062a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b2:	4b23      	ldr	r3, [pc, #140]	@ (8006340 <prvProcessExpiredTimer+0x98>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fa6b 	bl	800479c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d023      	beq.n	800631c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	699a      	ldr	r2, [r3, #24]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	18d1      	adds	r1, r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	6978      	ldr	r0, [r7, #20]
 80062e2:	f000 f8d5 	bl	8006490 <prvInsertTimerInActiveList>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d020      	beq.n	800632e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	2100      	movs	r1, #0
 80062f6:	6978      	ldr	r0, [r7, #20]
 80062f8:	f7ff ff88 	bl	800620c <xTimerGenericCommand>
 80062fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d114      	bne.n	800632e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	60fb      	str	r3, [r7, #12]
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	e7fd      	b.n	8006318 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006322:	f023 0301 	bic.w	r3, r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	4798      	blx	r3
}
 8006336:	bf00      	nop
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20001140 	.word	0x20001140

08006344 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800634c:	f107 0308 	add.w	r3, r7, #8
 8006350:	4618      	mov	r0, r3
 8006352:	f000 f859 	bl	8006408 <prvGetNextExpireTime>
 8006356:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4619      	mov	r1, r3
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f805 	bl	800636c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006362:	f000 f8d7 	bl	8006514 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006366:	bf00      	nop
 8006368:	e7f0      	b.n	800634c <prvTimerTask+0x8>
	...

0800636c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006376:	f7ff fa37 	bl	80057e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f866 	bl	8006450 <prvSampleTimeNow>
 8006384:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d130      	bne.n	80063ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <prvProcessTimerOrBlockTask+0x3c>
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	429a      	cmp	r2, r3
 8006398:	d806      	bhi.n	80063a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800639a:	f7ff fa33 	bl	8005804 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ff81 	bl	80062a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063a6:	e024      	b.n	80063f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063ae:	4b13      	ldr	r3, [pc, #76]	@ (80063fc <prvProcessTimerOrBlockTask+0x90>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <prvProcessTimerOrBlockTask+0x50>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <prvProcessTimerOrBlockTask+0x52>
 80063bc:	2300      	movs	r3, #0
 80063be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006400 <prvProcessTimerOrBlockTask+0x94>)
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4619      	mov	r1, r3
 80063ce:	f7fe ff93 	bl	80052f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063d2:	f7ff fa17 	bl	8005804 <xTaskResumeAll>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063dc:	4b09      	ldr	r3, [pc, #36]	@ (8006404 <prvProcessTimerOrBlockTask+0x98>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
}
 80063ec:	e001      	b.n	80063f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063ee:	f7ff fa09 	bl	8005804 <xTaskResumeAll>
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20001144 	.word	0x20001144
 8006400:	20001148 	.word	0x20001148
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006410:	4b0e      	ldr	r3, [pc, #56]	@ (800644c <prvGetNextExpireTime+0x44>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <prvGetNextExpireTime+0x16>
 800641a:	2201      	movs	r2, #1
 800641c:	e000      	b.n	8006420 <prvGetNextExpireTime+0x18>
 800641e:	2200      	movs	r2, #0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d105      	bne.n	8006438 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800642c:	4b07      	ldr	r3, [pc, #28]	@ (800644c <prvGetNextExpireTime+0x44>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e001      	b.n	800643c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800643c:	68fb      	ldr	r3, [r7, #12]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20001140 	.word	0x20001140

08006450 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006458:	f7ff fa72 	bl	8005940 <xTaskGetTickCount>
 800645c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800645e:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <prvSampleTimeNow+0x3c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	429a      	cmp	r2, r3
 8006466:	d205      	bcs.n	8006474 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006468:	f000 f93a 	bl	80066e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e002      	b.n	800647a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800647a:	4a04      	ldr	r2, [pc, #16]	@ (800648c <prvSampleTimeNow+0x3c>)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006480:	68fb      	ldr	r3, [r7, #12]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20001150 	.word	0x20001150

08006490 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d812      	bhi.n	80064dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e01b      	b.n	8006502 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064ca:	4b10      	ldr	r3, [pc, #64]	@ (800650c <prvInsertTimerInActiveList+0x7c>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f7fe f928 	bl	800472a <vListInsert>
 80064da:	e012      	b.n	8006502 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d206      	bcs.n	80064f2 <prvInsertTimerInActiveList+0x62>
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e007      	b.n	8006502 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064f2:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <prvInsertTimerInActiveList+0x80>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f7fe f914 	bl	800472a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006502:	697b      	ldr	r3, [r7, #20]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20001144 	.word	0x20001144
 8006510:	20001140 	.word	0x20001140

08006514 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	@ 0x38
 8006518:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800651a:	e0ce      	b.n	80066ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	da19      	bge.n	8006556 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	3304      	adds	r3, #4
 8006526:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	61fb      	str	r3, [r7, #28]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800654c:	6850      	ldr	r0, [r2, #4]
 800654e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006550:	6892      	ldr	r2, [r2, #8]
 8006552:	4611      	mov	r1, r2
 8006554:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f2c0 80ae 	blt.w	80066ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656c:	3304      	adds	r3, #4
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe f914 	bl	800479c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006574:	463b      	mov	r3, r7
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff ff6a 	bl	8006450 <prvSampleTimeNow>
 800657c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b09      	cmp	r3, #9
 8006582:	f200 8097 	bhi.w	80066b4 <prvProcessReceivedCommands+0x1a0>
 8006586:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <prvProcessReceivedCommands+0x78>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065b5 	.word	0x080065b5
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065b5 	.word	0x080065b5
 8006598:	0800662b 	.word	0x0800662b
 800659c:	0800663f 	.word	0x0800663f
 80065a0:	0800668b 	.word	0x0800668b
 80065a4:	080065b5 	.word	0x080065b5
 80065a8:	080065b5 	.word	0x080065b5
 80065ac:	0800662b 	.word	0x0800662b
 80065b0:	0800663f 	.word	0x0800663f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	18d1      	adds	r1, r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065d4:	f7ff ff5c 	bl	8006490 <prvInsertTimerInActiveList>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d06c      	beq.n	80066b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d061      	beq.n	80066b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	441a      	add	r2, r3
 80065fc:	2300      	movs	r3, #0
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	2300      	movs	r3, #0
 8006602:	2100      	movs	r1, #0
 8006604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006606:	f7ff fe01 	bl	800620c <xTimerGenericCommand>
 800660a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d152      	bne.n	80066b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	61bb      	str	r3, [r7, #24]
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	e7fd      	b.n	8006626 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	b2da      	uxtb	r2, r3
 8006636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006638:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800663c:	e03d      	b.n	80066ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800663e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	617b      	str	r3, [r7, #20]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	18d1      	adds	r1, r2, r3
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006684:	f7ff ff04 	bl	8006490 <prvInsertTimerInActiveList>
					break;
 8006688:	e017      	b.n	80066ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800668a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800669a:	f000 fbe5 	bl	8006e68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800669e:	e00c      	b.n	80066ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066b2:	e002      	b.n	80066ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80066b4:	bf00      	nop
 80066b6:	e000      	b.n	80066ba <prvProcessReceivedCommands+0x1a6>
					break;
 80066b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ba:	4b08      	ldr	r3, [pc, #32]	@ (80066dc <prvProcessReceivedCommands+0x1c8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	1d39      	adds	r1, r7, #4
 80066c0:	2200      	movs	r2, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fe fb7a 	bl	8004dbc <xQueueReceive>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f47f af26 	bne.w	800651c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	3730      	adds	r7, #48	@ 0x30
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20001148 	.word	0x20001148

080066e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066e6:	e049      	b.n	800677c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e8:	4b2e      	ldr	r3, [pc, #184]	@ (80067a4 <prvSwitchTimerLists+0xc4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f2:	4b2c      	ldr	r3, [pc, #176]	@ (80067a4 <prvSwitchTimerLists+0xc4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe f84b 	bl	800479c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d02f      	beq.n	800677c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	429a      	cmp	r2, r3
 800672c:	d90e      	bls.n	800674c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800673a:	4b1a      	ldr	r3, [pc, #104]	@ (80067a4 <prvSwitchTimerLists+0xc4>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f7fd fff0 	bl	800472a <vListInsert>
 800674a:	e017      	b.n	800677c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	2300      	movs	r3, #0
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	2100      	movs	r1, #0
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f7ff fd58 	bl	800620c <xTimerGenericCommand>
 800675c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	603b      	str	r3, [r7, #0]
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	e7fd      	b.n	8006778 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800677c:	4b09      	ldr	r3, [pc, #36]	@ (80067a4 <prvSwitchTimerLists+0xc4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1b0      	bne.n	80066e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006786:	4b07      	ldr	r3, [pc, #28]	@ (80067a4 <prvSwitchTimerLists+0xc4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800678c:	4b06      	ldr	r3, [pc, #24]	@ (80067a8 <prvSwitchTimerLists+0xc8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a04      	ldr	r2, [pc, #16]	@ (80067a4 <prvSwitchTimerLists+0xc4>)
 8006792:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006794:	4a04      	ldr	r2, [pc, #16]	@ (80067a8 <prvSwitchTimerLists+0xc8>)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	6013      	str	r3, [r2, #0]
}
 800679a:	bf00      	nop
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20001140 	.word	0x20001140
 80067a8:	20001144 	.word	0x20001144

080067ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067b2:	f000 f969 	bl	8006a88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067b6:	4b15      	ldr	r3, [pc, #84]	@ (800680c <prvCheckForValidListAndQueue+0x60>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d120      	bne.n	8006800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067be:	4814      	ldr	r0, [pc, #80]	@ (8006810 <prvCheckForValidListAndQueue+0x64>)
 80067c0:	f7fd ff62 	bl	8004688 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067c4:	4813      	ldr	r0, [pc, #76]	@ (8006814 <prvCheckForValidListAndQueue+0x68>)
 80067c6:	f7fd ff5f 	bl	8004688 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067ca:	4b13      	ldr	r3, [pc, #76]	@ (8006818 <prvCheckForValidListAndQueue+0x6c>)
 80067cc:	4a10      	ldr	r2, [pc, #64]	@ (8006810 <prvCheckForValidListAndQueue+0x64>)
 80067ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067d0:	4b12      	ldr	r3, [pc, #72]	@ (800681c <prvCheckForValidListAndQueue+0x70>)
 80067d2:	4a10      	ldr	r2, [pc, #64]	@ (8006814 <prvCheckForValidListAndQueue+0x68>)
 80067d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067d6:	2300      	movs	r3, #0
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	4b11      	ldr	r3, [pc, #68]	@ (8006820 <prvCheckForValidListAndQueue+0x74>)
 80067dc:	4a11      	ldr	r2, [pc, #68]	@ (8006824 <prvCheckForValidListAndQueue+0x78>)
 80067de:	2110      	movs	r1, #16
 80067e0:	200a      	movs	r0, #10
 80067e2:	f7fe f86f 	bl	80048c4 <xQueueGenericCreateStatic>
 80067e6:	4603      	mov	r3, r0
 80067e8:	4a08      	ldr	r2, [pc, #32]	@ (800680c <prvCheckForValidListAndQueue+0x60>)
 80067ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067ec:	4b07      	ldr	r3, [pc, #28]	@ (800680c <prvCheckForValidListAndQueue+0x60>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067f4:	4b05      	ldr	r3, [pc, #20]	@ (800680c <prvCheckForValidListAndQueue+0x60>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	490b      	ldr	r1, [pc, #44]	@ (8006828 <prvCheckForValidListAndQueue+0x7c>)
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fd52 	bl	80052a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006800:	f000 f974 	bl	8006aec <vPortExitCritical>
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20001148 	.word	0x20001148
 8006810:	20001118 	.word	0x20001118
 8006814:	2000112c 	.word	0x2000112c
 8006818:	20001140 	.word	0x20001140
 800681c:	20001144 	.word	0x20001144
 8006820:	200011f4 	.word	0x200011f4
 8006824:	20001154 	.word	0x20001154
 8006828:	08007ae8 	.word	0x08007ae8

0800682c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b04      	subs	r3, #4
 800683c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b04      	subs	r3, #4
 800684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f023 0201 	bic.w	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b04      	subs	r3, #4
 800685a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800685c:	4a0c      	ldr	r2, [pc, #48]	@ (8006890 <pxPortInitialiseStack+0x64>)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3b14      	subs	r3, #20
 8006866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3b04      	subs	r3, #4
 8006872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f06f 0202 	mvn.w	r2, #2
 800687a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3b20      	subs	r3, #32
 8006880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006882:	68fb      	ldr	r3, [r7, #12]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	08006895 	.word	0x08006895

08006894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800689e:	4b13      	ldr	r3, [pc, #76]	@ (80068ec <prvTaskExitError+0x58>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d00b      	beq.n	80068c0 <prvTaskExitError+0x2c>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	60fb      	str	r3, [r7, #12]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <prvTaskExitError+0x28>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	60bb      	str	r3, [r7, #8]
}
 80068d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068d4:	bf00      	nop
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0fc      	beq.n	80068d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000058 	.word	0x20000058

080068f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068f0:	4b07      	ldr	r3, [pc, #28]	@ (8006910 <pxCurrentTCBConst2>)
 80068f2:	6819      	ldr	r1, [r3, #0]
 80068f4:	6808      	ldr	r0, [r1, #0]
 80068f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fa:	f380 8809 	msr	PSP, r0
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f380 8811 	msr	BASEPRI, r0
 800690a:	4770      	bx	lr
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst2>:
 8006910:	20000c18 	.word	0x20000c18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006918:	4808      	ldr	r0, [pc, #32]	@ (800693c <prvPortStartFirstTask+0x24>)
 800691a:	6800      	ldr	r0, [r0, #0]
 800691c:	6800      	ldr	r0, [r0, #0]
 800691e:	f380 8808 	msr	MSP, r0
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8814 	msr	CONTROL, r0
 800692a:	b662      	cpsie	i
 800692c:	b661      	cpsie	f
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	df00      	svc	0
 8006938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800693a:	bf00      	nop
 800693c:	e000ed08 	.word	0xe000ed08

08006940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006946:	4b47      	ldr	r3, [pc, #284]	@ (8006a64 <xPortStartScheduler+0x124>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a47      	ldr	r2, [pc, #284]	@ (8006a68 <xPortStartScheduler+0x128>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d10b      	bne.n	8006968 <xPortStartScheduler+0x28>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60fb      	str	r3, [r7, #12]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006968:	4b3e      	ldr	r3, [pc, #248]	@ (8006a64 <xPortStartScheduler+0x124>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a6c <xPortStartScheduler+0x12c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d10b      	bne.n	800698a <xPortStartScheduler+0x4a>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	613b      	str	r3, [r7, #16]
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	e7fd      	b.n	8006986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800698a:	4b39      	ldr	r3, [pc, #228]	@ (8006a70 <xPortStartScheduler+0x130>)
 800698c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	22ff      	movs	r2, #255	@ 0xff
 800699a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	4b31      	ldr	r3, [pc, #196]	@ (8006a74 <xPortStartScheduler+0x134>)
 80069b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069b2:	4b31      	ldr	r3, [pc, #196]	@ (8006a78 <xPortStartScheduler+0x138>)
 80069b4:	2207      	movs	r2, #7
 80069b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069b8:	e009      	b.n	80069ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80069ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006a78 <xPortStartScheduler+0x138>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3b01      	subs	r3, #1
 80069c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a78 <xPortStartScheduler+0x138>)
 80069c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d6:	2b80      	cmp	r3, #128	@ 0x80
 80069d8:	d0ef      	beq.n	80069ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069da:	4b27      	ldr	r3, [pc, #156]	@ (8006a78 <xPortStartScheduler+0x138>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f1c3 0307 	rsb	r3, r3, #7
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d00b      	beq.n	80069fe <xPortStartScheduler+0xbe>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60bb      	str	r3, [r7, #8]
}
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	e7fd      	b.n	80069fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006a78 <xPortStartScheduler+0x138>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	4a1c      	ldr	r2, [pc, #112]	@ (8006a78 <xPortStartScheduler+0x138>)
 8006a06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a08:	4b1b      	ldr	r3, [pc, #108]	@ (8006a78 <xPortStartScheduler+0x138>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a10:	4a19      	ldr	r2, [pc, #100]	@ (8006a78 <xPortStartScheduler+0x138>)
 8006a12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a1c:	4b17      	ldr	r3, [pc, #92]	@ (8006a7c <xPortStartScheduler+0x13c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <xPortStartScheduler+0x13c>)
 8006a22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a28:	4b14      	ldr	r3, [pc, #80]	@ (8006a7c <xPortStartScheduler+0x13c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a13      	ldr	r2, [pc, #76]	@ (8006a7c <xPortStartScheduler+0x13c>)
 8006a2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a34:	f000 f8da 	bl	8006bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a38:	4b11      	ldr	r3, [pc, #68]	@ (8006a80 <xPortStartScheduler+0x140>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a3e:	f000 f8f9 	bl	8006c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a42:	4b10      	ldr	r3, [pc, #64]	@ (8006a84 <xPortStartScheduler+0x144>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a0f      	ldr	r2, [pc, #60]	@ (8006a84 <xPortStartScheduler+0x144>)
 8006a48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006a4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a4e:	f7ff ff63 	bl	8006918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a52:	f7ff f83f 	bl	8005ad4 <vTaskSwitchContext>
	prvTaskExitError();
 8006a56:	f7ff ff1d 	bl	8006894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	e000ed00 	.word	0xe000ed00
 8006a68:	410fc271 	.word	0x410fc271
 8006a6c:	410fc270 	.word	0x410fc270
 8006a70:	e000e400 	.word	0xe000e400
 8006a74:	20001244 	.word	0x20001244
 8006a78:	20001248 	.word	0x20001248
 8006a7c:	e000ed20 	.word	0xe000ed20
 8006a80:	20000058 	.word	0x20000058
 8006a84:	e000ef34 	.word	0xe000ef34

08006a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
}
 8006aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006aa2:	4b10      	ldr	r3, [pc, #64]	@ (8006ae4 <vPortEnterCritical+0x5c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ae4 <vPortEnterCritical+0x5c>)
 8006aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006aac:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae4 <vPortEnterCritical+0x5c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d110      	bne.n	8006ad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae8 <vPortEnterCritical+0x60>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	603b      	str	r3, [r7, #0]
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	e7fd      	b.n	8006ad2 <vPortEnterCritical+0x4a>
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000058 	.word	0x20000058
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006af2:	4b12      	ldr	r3, [pc, #72]	@ (8006b3c <vPortExitCritical+0x50>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <vPortExitCritical+0x26>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	607b      	str	r3, [r7, #4]
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	e7fd      	b.n	8006b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b12:	4b0a      	ldr	r3, [pc, #40]	@ (8006b3c <vPortExitCritical+0x50>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	4a08      	ldr	r2, [pc, #32]	@ (8006b3c <vPortExitCritical+0x50>)
 8006b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b1c:	4b07      	ldr	r3, [pc, #28]	@ (8006b3c <vPortExitCritical+0x50>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <vPortExitCritical+0x44>
 8006b24:	2300      	movs	r3, #0
 8006b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f383 8811 	msr	BASEPRI, r3
}
 8006b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	20000058 	.word	0x20000058

08006b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b40:	f3ef 8009 	mrs	r0, PSP
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	4b15      	ldr	r3, [pc, #84]	@ (8006ba0 <pxCurrentTCBConst>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	f01e 0f10 	tst.w	lr, #16
 8006b50:	bf08      	it	eq
 8006b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5a:	6010      	str	r0, [r2, #0]
 8006b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006b64:	f380 8811 	msr	BASEPRI, r0
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f7fe ffb0 	bl	8005ad4 <vTaskSwitchContext>
 8006b74:	f04f 0000 	mov.w	r0, #0
 8006b78:	f380 8811 	msr	BASEPRI, r0
 8006b7c:	bc09      	pop	{r0, r3}
 8006b7e:	6819      	ldr	r1, [r3, #0]
 8006b80:	6808      	ldr	r0, [r1, #0]
 8006b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b86:	f01e 0f10 	tst.w	lr, #16
 8006b8a:	bf08      	it	eq
 8006b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b90:	f380 8809 	msr	PSP, r0
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	f3af 8000 	nop.w

08006ba0 <pxCurrentTCBConst>:
 8006ba0:	20000c18 	.word	0x20000c18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop

08006ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	607b      	str	r3, [r7, #4]
}
 8006bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bc2:	f7fe fecd 	bl	8005960 <xTaskIncrementTick>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	@ (8006be8 <xPortSysTickHandler+0x40>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f383 8811 	msr	BASEPRI, r3
}
 8006bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c20 <vPortSetupTimerInterrupt+0x34>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <vPortSetupTimerInterrupt+0x38>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006c28 <vPortSetupTimerInterrupt+0x3c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a0a      	ldr	r2, [pc, #40]	@ (8006c2c <vPortSetupTimerInterrupt+0x40>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	099b      	lsrs	r3, r3, #6
 8006c08:	4a09      	ldr	r2, [pc, #36]	@ (8006c30 <vPortSetupTimerInterrupt+0x44>)
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c0e:	4b04      	ldr	r3, [pc, #16]	@ (8006c20 <vPortSetupTimerInterrupt+0x34>)
 8006c10:	2207      	movs	r2, #7
 8006c12:	601a      	str	r2, [r3, #0]
}
 8006c14:	bf00      	nop
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	e000e010 	.word	0xe000e010
 8006c24:	e000e018 	.word	0xe000e018
 8006c28:	2000004c 	.word	0x2000004c
 8006c2c:	10624dd3 	.word	0x10624dd3
 8006c30:	e000e014 	.word	0xe000e014

08006c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c44 <vPortEnableVFP+0x10>
 8006c38:	6801      	ldr	r1, [r0, #0]
 8006c3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c3e:	6001      	str	r1, [r0, #0]
 8006c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c42:	bf00      	nop
 8006c44:	e000ed88 	.word	0xe000ed88

08006c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c4e:	f3ef 8305 	mrs	r3, IPSR
 8006c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b0f      	cmp	r3, #15
 8006c58:	d915      	bls.n	8006c86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c5a:	4a18      	ldr	r2, [pc, #96]	@ (8006cbc <vPortValidateInterruptPriority+0x74>)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c64:	4b16      	ldr	r3, [pc, #88]	@ (8006cc0 <vPortValidateInterruptPriority+0x78>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	7afa      	ldrb	r2, [r7, #11]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d20b      	bcs.n	8006c86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	607b      	str	r3, [r7, #4]
}
 8006c80:	bf00      	nop
 8006c82:	bf00      	nop
 8006c84:	e7fd      	b.n	8006c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c86:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc4 <vPortValidateInterruptPriority+0x7c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc8 <vPortValidateInterruptPriority+0x80>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d90b      	bls.n	8006cae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	603b      	str	r3, [r7, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <vPortValidateInterruptPriority+0x62>
	}
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	e000e3f0 	.word	0xe000e3f0
 8006cc0:	20001244 	.word	0x20001244
 8006cc4:	e000ed0c 	.word	0xe000ed0c
 8006cc8:	20001248 	.word	0x20001248

08006ccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	@ 0x28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cd8:	f7fe fd86 	bl	80057e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8006e50 <pvPortMalloc+0x184>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ce4:	f000 f924 	bl	8006f30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8006e54 <pvPortMalloc+0x188>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 8095 	bne.w	8006e20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01e      	beq.n	8006d3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4413      	add	r3, r2
 8006d02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d015      	beq.n	8006d3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f023 0307 	bic.w	r3, r3, #7
 8006d14:	3308      	adds	r3, #8
 8006d16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00b      	beq.n	8006d3a <pvPortMalloc+0x6e>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	617b      	str	r3, [r7, #20]
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	e7fd      	b.n	8006d36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d06f      	beq.n	8006e20 <pvPortMalloc+0x154>
 8006d40:	4b45      	ldr	r3, [pc, #276]	@ (8006e58 <pvPortMalloc+0x18c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d86a      	bhi.n	8006e20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d4a:	4b44      	ldr	r3, [pc, #272]	@ (8006e5c <pvPortMalloc+0x190>)
 8006d4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d4e:	4b43      	ldr	r3, [pc, #268]	@ (8006e5c <pvPortMalloc+0x190>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d54:	e004      	b.n	8006d60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d903      	bls.n	8006d72 <pvPortMalloc+0xa6>
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f1      	bne.n	8006d56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d72:	4b37      	ldr	r3, [pc, #220]	@ (8006e50 <pvPortMalloc+0x184>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d051      	beq.n	8006e20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2208      	movs	r2, #8
 8006d82:	4413      	add	r3, r2
 8006d84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	1ad2      	subs	r2, r2, r3
 8006d96:	2308      	movs	r3, #8
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d920      	bls.n	8006de0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4413      	add	r3, r2
 8006da4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <pvPortMalloc+0xfc>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	613b      	str	r3, [r7, #16]
}
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dda:	69b8      	ldr	r0, [r7, #24]
 8006ddc:	f000 f90a 	bl	8006ff4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006de0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e58 <pvPortMalloc+0x18c>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	4a1b      	ldr	r2, [pc, #108]	@ (8006e58 <pvPortMalloc+0x18c>)
 8006dec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dee:	4b1a      	ldr	r3, [pc, #104]	@ (8006e58 <pvPortMalloc+0x18c>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e60 <pvPortMalloc+0x194>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d203      	bcs.n	8006e02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dfa:	4b17      	ldr	r3, [pc, #92]	@ (8006e58 <pvPortMalloc+0x18c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a18      	ldr	r2, [pc, #96]	@ (8006e60 <pvPortMalloc+0x194>)
 8006e00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	4b13      	ldr	r3, [pc, #76]	@ (8006e54 <pvPortMalloc+0x188>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e16:	4b13      	ldr	r3, [pc, #76]	@ (8006e64 <pvPortMalloc+0x198>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	4a11      	ldr	r2, [pc, #68]	@ (8006e64 <pvPortMalloc+0x198>)
 8006e1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e20:	f7fe fcf0 	bl	8005804 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00b      	beq.n	8006e46 <pvPortMalloc+0x17a>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	60fb      	str	r3, [r7, #12]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <pvPortMalloc+0x176>
	return pvReturn;
 8006e46:	69fb      	ldr	r3, [r7, #28]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3728      	adds	r7, #40	@ 0x28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20004e54 	.word	0x20004e54
 8006e54:	20004e68 	.word	0x20004e68
 8006e58:	20004e58 	.word	0x20004e58
 8006e5c:	20004e4c 	.word	0x20004e4c
 8006e60:	20004e5c 	.word	0x20004e5c
 8006e64:	20004e60 	.word	0x20004e60

08006e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d04f      	beq.n	8006f1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e7a:	2308      	movs	r3, #8
 8006e7c:	425b      	negs	r3, r3
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4413      	add	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	4b25      	ldr	r3, [pc, #148]	@ (8006f24 <vPortFree+0xbc>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10b      	bne.n	8006eae <vPortFree+0x46>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	60fb      	str	r3, [r7, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	bf00      	nop
 8006eac:	e7fd      	b.n	8006eaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00b      	beq.n	8006ece <vPortFree+0x66>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60bb      	str	r3, [r7, #8]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	4b14      	ldr	r3, [pc, #80]	@ (8006f24 <vPortFree+0xbc>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01e      	beq.n	8006f1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d11a      	bne.n	8006f1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f24 <vPortFree+0xbc>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	43db      	mvns	r3, r3
 8006eee:	401a      	ands	r2, r3
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ef4:	f7fe fc78 	bl	80057e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f28 <vPortFree+0xc0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4413      	add	r3, r2
 8006f02:	4a09      	ldr	r2, [pc, #36]	@ (8006f28 <vPortFree+0xc0>)
 8006f04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f06:	6938      	ldr	r0, [r7, #16]
 8006f08:	f000 f874 	bl	8006ff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f0c:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <vPortFree+0xc4>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3301      	adds	r3, #1
 8006f12:	4a06      	ldr	r2, [pc, #24]	@ (8006f2c <vPortFree+0xc4>)
 8006f14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f16:	f7fe fc75 	bl	8005804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f1a:	bf00      	nop
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20004e68 	.word	0x20004e68
 8006f28:	20004e58 	.word	0x20004e58
 8006f2c:	20004e64 	.word	0x20004e64

08006f30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006f3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f3c:	4b27      	ldr	r3, [pc, #156]	@ (8006fdc <prvHeapInit+0xac>)
 8006f3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00c      	beq.n	8006f64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3307      	adds	r3, #7
 8006f4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0307 	bic.w	r3, r3, #7
 8006f56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006fdc <prvHeapInit+0xac>)
 8006f60:	4413      	add	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f68:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe0 <prvHeapInit+0xb0>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe0 <prvHeapInit+0xb0>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	4413      	add	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0307 	bic.w	r3, r3, #7
 8006f8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4a15      	ldr	r2, [pc, #84]	@ (8006fe4 <prvHeapInit+0xb4>)
 8006f90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f92:	4b14      	ldr	r3, [pc, #80]	@ (8006fe4 <prvHeapInit+0xb4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2200      	movs	r2, #0
 8006f98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f9a:	4b12      	ldr	r3, [pc, #72]	@ (8006fe4 <prvHeapInit+0xb4>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	1ad2      	subs	r2, r2, r3
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <prvHeapInit+0xb4>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe8 <prvHeapInit+0xb8>)
 8006fbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4a09      	ldr	r2, [pc, #36]	@ (8006fec <prvHeapInit+0xbc>)
 8006fc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fc8:	4b09      	ldr	r3, [pc, #36]	@ (8006ff0 <prvHeapInit+0xc0>)
 8006fca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006fce:	601a      	str	r2, [r3, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	2000124c 	.word	0x2000124c
 8006fe0:	20004e4c 	.word	0x20004e4c
 8006fe4:	20004e54 	.word	0x20004e54
 8006fe8:	20004e5c 	.word	0x20004e5c
 8006fec:	20004e58 	.word	0x20004e58
 8006ff0:	20004e68 	.word	0x20004e68

08006ff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ffc:	4b28      	ldr	r3, [pc, #160]	@ (80070a0 <prvInsertBlockIntoFreeList+0xac>)
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e002      	b.n	8007008 <prvInsertBlockIntoFreeList+0x14>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	429a      	cmp	r2, r3
 8007010:	d8f7      	bhi.n	8007002 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	4413      	add	r3, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d108      	bne.n	8007036 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	441a      	add	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	441a      	add	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d118      	bne.n	800707c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b15      	ldr	r3, [pc, #84]	@ (80070a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d00d      	beq.n	8007072 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	441a      	add	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	e008      	b.n	8007084 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007072:	4b0c      	ldr	r3, [pc, #48]	@ (80070a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e003      	b.n	8007084 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	429a      	cmp	r2, r3
 800708a:	d002      	beq.n	8007092 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007092:	bf00      	nop
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	20004e4c 	.word	0x20004e4c
 80070a4:	20004e54 	.word	0x20004e54

080070a8 <siprintf>:
 80070a8:	b40e      	push	{r1, r2, r3}
 80070aa:	b510      	push	{r4, lr}
 80070ac:	b09d      	sub	sp, #116	@ 0x74
 80070ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80070b0:	9002      	str	r0, [sp, #8]
 80070b2:	9006      	str	r0, [sp, #24]
 80070b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070b8:	480a      	ldr	r0, [pc, #40]	@ (80070e4 <siprintf+0x3c>)
 80070ba:	9107      	str	r1, [sp, #28]
 80070bc:	9104      	str	r1, [sp, #16]
 80070be:	490a      	ldr	r1, [pc, #40]	@ (80070e8 <siprintf+0x40>)
 80070c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c4:	9105      	str	r1, [sp, #20]
 80070c6:	2400      	movs	r4, #0
 80070c8:	a902      	add	r1, sp, #8
 80070ca:	6800      	ldr	r0, [r0, #0]
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80070d0:	f000 f9a2 	bl	8007418 <_svfiprintf_r>
 80070d4:	9b02      	ldr	r3, [sp, #8]
 80070d6:	701c      	strb	r4, [r3, #0]
 80070d8:	b01d      	add	sp, #116	@ 0x74
 80070da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070de:	b003      	add	sp, #12
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	2000005c 	.word	0x2000005c
 80070e8:	ffff0208 	.word	0xffff0208

080070ec <memset>:
 80070ec:	4402      	add	r2, r0
 80070ee:	4603      	mov	r3, r0
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d100      	bne.n	80070f6 <memset+0xa>
 80070f4:	4770      	bx	lr
 80070f6:	f803 1b01 	strb.w	r1, [r3], #1
 80070fa:	e7f9      	b.n	80070f0 <memset+0x4>

080070fc <__errno>:
 80070fc:	4b01      	ldr	r3, [pc, #4]	@ (8007104 <__errno+0x8>)
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	2000005c 	.word	0x2000005c

08007108 <__libc_init_array>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4d0d      	ldr	r5, [pc, #52]	@ (8007140 <__libc_init_array+0x38>)
 800710c:	4c0d      	ldr	r4, [pc, #52]	@ (8007144 <__libc_init_array+0x3c>)
 800710e:	1b64      	subs	r4, r4, r5
 8007110:	10a4      	asrs	r4, r4, #2
 8007112:	2600      	movs	r6, #0
 8007114:	42a6      	cmp	r6, r4
 8007116:	d109      	bne.n	800712c <__libc_init_array+0x24>
 8007118:	4d0b      	ldr	r5, [pc, #44]	@ (8007148 <__libc_init_array+0x40>)
 800711a:	4c0c      	ldr	r4, [pc, #48]	@ (800714c <__libc_init_array+0x44>)
 800711c:	f000 fc64 	bl	80079e8 <_init>
 8007120:	1b64      	subs	r4, r4, r5
 8007122:	10a4      	asrs	r4, r4, #2
 8007124:	2600      	movs	r6, #0
 8007126:	42a6      	cmp	r6, r4
 8007128:	d105      	bne.n	8007136 <__libc_init_array+0x2e>
 800712a:	bd70      	pop	{r4, r5, r6, pc}
 800712c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007130:	4798      	blx	r3
 8007132:	3601      	adds	r6, #1
 8007134:	e7ee      	b.n	8007114 <__libc_init_array+0xc>
 8007136:	f855 3b04 	ldr.w	r3, [r5], #4
 800713a:	4798      	blx	r3
 800713c:	3601      	adds	r6, #1
 800713e:	e7f2      	b.n	8007126 <__libc_init_array+0x1e>
 8007140:	08007bc8 	.word	0x08007bc8
 8007144:	08007bc8 	.word	0x08007bc8
 8007148:	08007bc8 	.word	0x08007bc8
 800714c:	08007bcc 	.word	0x08007bcc

08007150 <__retarget_lock_acquire_recursive>:
 8007150:	4770      	bx	lr

08007152 <__retarget_lock_release_recursive>:
 8007152:	4770      	bx	lr

08007154 <memcpy>:
 8007154:	440a      	add	r2, r1
 8007156:	4291      	cmp	r1, r2
 8007158:	f100 33ff 	add.w	r3, r0, #4294967295
 800715c:	d100      	bne.n	8007160 <memcpy+0xc>
 800715e:	4770      	bx	lr
 8007160:	b510      	push	{r4, lr}
 8007162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800716a:	4291      	cmp	r1, r2
 800716c:	d1f9      	bne.n	8007162 <memcpy+0xe>
 800716e:	bd10      	pop	{r4, pc}

08007170 <_free_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4605      	mov	r5, r0
 8007174:	2900      	cmp	r1, #0
 8007176:	d041      	beq.n	80071fc <_free_r+0x8c>
 8007178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800717c:	1f0c      	subs	r4, r1, #4
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfb8      	it	lt
 8007182:	18e4      	addlt	r4, r4, r3
 8007184:	f000 f8e0 	bl	8007348 <__malloc_lock>
 8007188:	4a1d      	ldr	r2, [pc, #116]	@ (8007200 <_free_r+0x90>)
 800718a:	6813      	ldr	r3, [r2, #0]
 800718c:	b933      	cbnz	r3, 800719c <_free_r+0x2c>
 800718e:	6063      	str	r3, [r4, #4]
 8007190:	6014      	str	r4, [r2, #0]
 8007192:	4628      	mov	r0, r5
 8007194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007198:	f000 b8dc 	b.w	8007354 <__malloc_unlock>
 800719c:	42a3      	cmp	r3, r4
 800719e:	d908      	bls.n	80071b2 <_free_r+0x42>
 80071a0:	6820      	ldr	r0, [r4, #0]
 80071a2:	1821      	adds	r1, r4, r0
 80071a4:	428b      	cmp	r3, r1
 80071a6:	bf01      	itttt	eq
 80071a8:	6819      	ldreq	r1, [r3, #0]
 80071aa:	685b      	ldreq	r3, [r3, #4]
 80071ac:	1809      	addeq	r1, r1, r0
 80071ae:	6021      	streq	r1, [r4, #0]
 80071b0:	e7ed      	b.n	800718e <_free_r+0x1e>
 80071b2:	461a      	mov	r2, r3
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	b10b      	cbz	r3, 80071bc <_free_r+0x4c>
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	d9fa      	bls.n	80071b2 <_free_r+0x42>
 80071bc:	6811      	ldr	r1, [r2, #0]
 80071be:	1850      	adds	r0, r2, r1
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d10b      	bne.n	80071dc <_free_r+0x6c>
 80071c4:	6820      	ldr	r0, [r4, #0]
 80071c6:	4401      	add	r1, r0
 80071c8:	1850      	adds	r0, r2, r1
 80071ca:	4283      	cmp	r3, r0
 80071cc:	6011      	str	r1, [r2, #0]
 80071ce:	d1e0      	bne.n	8007192 <_free_r+0x22>
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	6053      	str	r3, [r2, #4]
 80071d6:	4408      	add	r0, r1
 80071d8:	6010      	str	r0, [r2, #0]
 80071da:	e7da      	b.n	8007192 <_free_r+0x22>
 80071dc:	d902      	bls.n	80071e4 <_free_r+0x74>
 80071de:	230c      	movs	r3, #12
 80071e0:	602b      	str	r3, [r5, #0]
 80071e2:	e7d6      	b.n	8007192 <_free_r+0x22>
 80071e4:	6820      	ldr	r0, [r4, #0]
 80071e6:	1821      	adds	r1, r4, r0
 80071e8:	428b      	cmp	r3, r1
 80071ea:	bf04      	itt	eq
 80071ec:	6819      	ldreq	r1, [r3, #0]
 80071ee:	685b      	ldreq	r3, [r3, #4]
 80071f0:	6063      	str	r3, [r4, #4]
 80071f2:	bf04      	itt	eq
 80071f4:	1809      	addeq	r1, r1, r0
 80071f6:	6021      	streq	r1, [r4, #0]
 80071f8:	6054      	str	r4, [r2, #4]
 80071fa:	e7ca      	b.n	8007192 <_free_r+0x22>
 80071fc:	bd38      	pop	{r3, r4, r5, pc}
 80071fe:	bf00      	nop
 8007200:	20004fb0 	.word	0x20004fb0

08007204 <sbrk_aligned>:
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	4e0f      	ldr	r6, [pc, #60]	@ (8007244 <sbrk_aligned+0x40>)
 8007208:	460c      	mov	r4, r1
 800720a:	6831      	ldr	r1, [r6, #0]
 800720c:	4605      	mov	r5, r0
 800720e:	b911      	cbnz	r1, 8007216 <sbrk_aligned+0x12>
 8007210:	f000 fba4 	bl	800795c <_sbrk_r>
 8007214:	6030      	str	r0, [r6, #0]
 8007216:	4621      	mov	r1, r4
 8007218:	4628      	mov	r0, r5
 800721a:	f000 fb9f 	bl	800795c <_sbrk_r>
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	d103      	bne.n	800722a <sbrk_aligned+0x26>
 8007222:	f04f 34ff 	mov.w	r4, #4294967295
 8007226:	4620      	mov	r0, r4
 8007228:	bd70      	pop	{r4, r5, r6, pc}
 800722a:	1cc4      	adds	r4, r0, #3
 800722c:	f024 0403 	bic.w	r4, r4, #3
 8007230:	42a0      	cmp	r0, r4
 8007232:	d0f8      	beq.n	8007226 <sbrk_aligned+0x22>
 8007234:	1a21      	subs	r1, r4, r0
 8007236:	4628      	mov	r0, r5
 8007238:	f000 fb90 	bl	800795c <_sbrk_r>
 800723c:	3001      	adds	r0, #1
 800723e:	d1f2      	bne.n	8007226 <sbrk_aligned+0x22>
 8007240:	e7ef      	b.n	8007222 <sbrk_aligned+0x1e>
 8007242:	bf00      	nop
 8007244:	20004fac 	.word	0x20004fac

08007248 <_malloc_r>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	1ccd      	adds	r5, r1, #3
 800724e:	f025 0503 	bic.w	r5, r5, #3
 8007252:	3508      	adds	r5, #8
 8007254:	2d0c      	cmp	r5, #12
 8007256:	bf38      	it	cc
 8007258:	250c      	movcc	r5, #12
 800725a:	2d00      	cmp	r5, #0
 800725c:	4606      	mov	r6, r0
 800725e:	db01      	blt.n	8007264 <_malloc_r+0x1c>
 8007260:	42a9      	cmp	r1, r5
 8007262:	d904      	bls.n	800726e <_malloc_r+0x26>
 8007264:	230c      	movs	r3, #12
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	2000      	movs	r0, #0
 800726a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007344 <_malloc_r+0xfc>
 8007272:	f000 f869 	bl	8007348 <__malloc_lock>
 8007276:	f8d8 3000 	ldr.w	r3, [r8]
 800727a:	461c      	mov	r4, r3
 800727c:	bb44      	cbnz	r4, 80072d0 <_malloc_r+0x88>
 800727e:	4629      	mov	r1, r5
 8007280:	4630      	mov	r0, r6
 8007282:	f7ff ffbf 	bl	8007204 <sbrk_aligned>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	4604      	mov	r4, r0
 800728a:	d158      	bne.n	800733e <_malloc_r+0xf6>
 800728c:	f8d8 4000 	ldr.w	r4, [r8]
 8007290:	4627      	mov	r7, r4
 8007292:	2f00      	cmp	r7, #0
 8007294:	d143      	bne.n	800731e <_malloc_r+0xd6>
 8007296:	2c00      	cmp	r4, #0
 8007298:	d04b      	beq.n	8007332 <_malloc_r+0xea>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	4639      	mov	r1, r7
 800729e:	4630      	mov	r0, r6
 80072a0:	eb04 0903 	add.w	r9, r4, r3
 80072a4:	f000 fb5a 	bl	800795c <_sbrk_r>
 80072a8:	4581      	cmp	r9, r0
 80072aa:	d142      	bne.n	8007332 <_malloc_r+0xea>
 80072ac:	6821      	ldr	r1, [r4, #0]
 80072ae:	1a6d      	subs	r5, r5, r1
 80072b0:	4629      	mov	r1, r5
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ffa6 	bl	8007204 <sbrk_aligned>
 80072b8:	3001      	adds	r0, #1
 80072ba:	d03a      	beq.n	8007332 <_malloc_r+0xea>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	442b      	add	r3, r5
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	f8d8 3000 	ldr.w	r3, [r8]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	bb62      	cbnz	r2, 8007324 <_malloc_r+0xdc>
 80072ca:	f8c8 7000 	str.w	r7, [r8]
 80072ce:	e00f      	b.n	80072f0 <_malloc_r+0xa8>
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	1b52      	subs	r2, r2, r5
 80072d4:	d420      	bmi.n	8007318 <_malloc_r+0xd0>
 80072d6:	2a0b      	cmp	r2, #11
 80072d8:	d917      	bls.n	800730a <_malloc_r+0xc2>
 80072da:	1961      	adds	r1, r4, r5
 80072dc:	42a3      	cmp	r3, r4
 80072de:	6025      	str	r5, [r4, #0]
 80072e0:	bf18      	it	ne
 80072e2:	6059      	strne	r1, [r3, #4]
 80072e4:	6863      	ldr	r3, [r4, #4]
 80072e6:	bf08      	it	eq
 80072e8:	f8c8 1000 	streq.w	r1, [r8]
 80072ec:	5162      	str	r2, [r4, r5]
 80072ee:	604b      	str	r3, [r1, #4]
 80072f0:	4630      	mov	r0, r6
 80072f2:	f000 f82f 	bl	8007354 <__malloc_unlock>
 80072f6:	f104 000b 	add.w	r0, r4, #11
 80072fa:	1d23      	adds	r3, r4, #4
 80072fc:	f020 0007 	bic.w	r0, r0, #7
 8007300:	1ac2      	subs	r2, r0, r3
 8007302:	bf1c      	itt	ne
 8007304:	1a1b      	subne	r3, r3, r0
 8007306:	50a3      	strne	r3, [r4, r2]
 8007308:	e7af      	b.n	800726a <_malloc_r+0x22>
 800730a:	6862      	ldr	r2, [r4, #4]
 800730c:	42a3      	cmp	r3, r4
 800730e:	bf0c      	ite	eq
 8007310:	f8c8 2000 	streq.w	r2, [r8]
 8007314:	605a      	strne	r2, [r3, #4]
 8007316:	e7eb      	b.n	80072f0 <_malloc_r+0xa8>
 8007318:	4623      	mov	r3, r4
 800731a:	6864      	ldr	r4, [r4, #4]
 800731c:	e7ae      	b.n	800727c <_malloc_r+0x34>
 800731e:	463c      	mov	r4, r7
 8007320:	687f      	ldr	r7, [r7, #4]
 8007322:	e7b6      	b.n	8007292 <_malloc_r+0x4a>
 8007324:	461a      	mov	r2, r3
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	42a3      	cmp	r3, r4
 800732a:	d1fb      	bne.n	8007324 <_malloc_r+0xdc>
 800732c:	2300      	movs	r3, #0
 800732e:	6053      	str	r3, [r2, #4]
 8007330:	e7de      	b.n	80072f0 <_malloc_r+0xa8>
 8007332:	230c      	movs	r3, #12
 8007334:	6033      	str	r3, [r6, #0]
 8007336:	4630      	mov	r0, r6
 8007338:	f000 f80c 	bl	8007354 <__malloc_unlock>
 800733c:	e794      	b.n	8007268 <_malloc_r+0x20>
 800733e:	6005      	str	r5, [r0, #0]
 8007340:	e7d6      	b.n	80072f0 <_malloc_r+0xa8>
 8007342:	bf00      	nop
 8007344:	20004fb0 	.word	0x20004fb0

08007348 <__malloc_lock>:
 8007348:	4801      	ldr	r0, [pc, #4]	@ (8007350 <__malloc_lock+0x8>)
 800734a:	f7ff bf01 	b.w	8007150 <__retarget_lock_acquire_recursive>
 800734e:	bf00      	nop
 8007350:	20004fa8 	.word	0x20004fa8

08007354 <__malloc_unlock>:
 8007354:	4801      	ldr	r0, [pc, #4]	@ (800735c <__malloc_unlock+0x8>)
 8007356:	f7ff befc 	b.w	8007152 <__retarget_lock_release_recursive>
 800735a:	bf00      	nop
 800735c:	20004fa8 	.word	0x20004fa8

08007360 <__ssputs_r>:
 8007360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007364:	688e      	ldr	r6, [r1, #8]
 8007366:	461f      	mov	r7, r3
 8007368:	42be      	cmp	r6, r7
 800736a:	680b      	ldr	r3, [r1, #0]
 800736c:	4682      	mov	sl, r0
 800736e:	460c      	mov	r4, r1
 8007370:	4690      	mov	r8, r2
 8007372:	d82d      	bhi.n	80073d0 <__ssputs_r+0x70>
 8007374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007378:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800737c:	d026      	beq.n	80073cc <__ssputs_r+0x6c>
 800737e:	6965      	ldr	r5, [r4, #20]
 8007380:	6909      	ldr	r1, [r1, #16]
 8007382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007386:	eba3 0901 	sub.w	r9, r3, r1
 800738a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800738e:	1c7b      	adds	r3, r7, #1
 8007390:	444b      	add	r3, r9
 8007392:	106d      	asrs	r5, r5, #1
 8007394:	429d      	cmp	r5, r3
 8007396:	bf38      	it	cc
 8007398:	461d      	movcc	r5, r3
 800739a:	0553      	lsls	r3, r2, #21
 800739c:	d527      	bpl.n	80073ee <__ssputs_r+0x8e>
 800739e:	4629      	mov	r1, r5
 80073a0:	f7ff ff52 	bl	8007248 <_malloc_r>
 80073a4:	4606      	mov	r6, r0
 80073a6:	b360      	cbz	r0, 8007402 <__ssputs_r+0xa2>
 80073a8:	6921      	ldr	r1, [r4, #16]
 80073aa:	464a      	mov	r2, r9
 80073ac:	f7ff fed2 	bl	8007154 <memcpy>
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	6126      	str	r6, [r4, #16]
 80073be:	6165      	str	r5, [r4, #20]
 80073c0:	444e      	add	r6, r9
 80073c2:	eba5 0509 	sub.w	r5, r5, r9
 80073c6:	6026      	str	r6, [r4, #0]
 80073c8:	60a5      	str	r5, [r4, #8]
 80073ca:	463e      	mov	r6, r7
 80073cc:	42be      	cmp	r6, r7
 80073ce:	d900      	bls.n	80073d2 <__ssputs_r+0x72>
 80073d0:	463e      	mov	r6, r7
 80073d2:	6820      	ldr	r0, [r4, #0]
 80073d4:	4632      	mov	r2, r6
 80073d6:	4641      	mov	r1, r8
 80073d8:	f000 faa6 	bl	8007928 <memmove>
 80073dc:	68a3      	ldr	r3, [r4, #8]
 80073de:	1b9b      	subs	r3, r3, r6
 80073e0:	60a3      	str	r3, [r4, #8]
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	4433      	add	r3, r6
 80073e6:	6023      	str	r3, [r4, #0]
 80073e8:	2000      	movs	r0, #0
 80073ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ee:	462a      	mov	r2, r5
 80073f0:	f000 fac4 	bl	800797c <_realloc_r>
 80073f4:	4606      	mov	r6, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d1e0      	bne.n	80073bc <__ssputs_r+0x5c>
 80073fa:	6921      	ldr	r1, [r4, #16]
 80073fc:	4650      	mov	r0, sl
 80073fe:	f7ff feb7 	bl	8007170 <_free_r>
 8007402:	230c      	movs	r3, #12
 8007404:	f8ca 3000 	str.w	r3, [sl]
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800740e:	81a3      	strh	r3, [r4, #12]
 8007410:	f04f 30ff 	mov.w	r0, #4294967295
 8007414:	e7e9      	b.n	80073ea <__ssputs_r+0x8a>
	...

08007418 <_svfiprintf_r>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	4698      	mov	r8, r3
 800741e:	898b      	ldrh	r3, [r1, #12]
 8007420:	061b      	lsls	r3, r3, #24
 8007422:	b09d      	sub	sp, #116	@ 0x74
 8007424:	4607      	mov	r7, r0
 8007426:	460d      	mov	r5, r1
 8007428:	4614      	mov	r4, r2
 800742a:	d510      	bpl.n	800744e <_svfiprintf_r+0x36>
 800742c:	690b      	ldr	r3, [r1, #16]
 800742e:	b973      	cbnz	r3, 800744e <_svfiprintf_r+0x36>
 8007430:	2140      	movs	r1, #64	@ 0x40
 8007432:	f7ff ff09 	bl	8007248 <_malloc_r>
 8007436:	6028      	str	r0, [r5, #0]
 8007438:	6128      	str	r0, [r5, #16]
 800743a:	b930      	cbnz	r0, 800744a <_svfiprintf_r+0x32>
 800743c:	230c      	movs	r3, #12
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	b01d      	add	sp, #116	@ 0x74
 8007446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744a:	2340      	movs	r3, #64	@ 0x40
 800744c:	616b      	str	r3, [r5, #20]
 800744e:	2300      	movs	r3, #0
 8007450:	9309      	str	r3, [sp, #36]	@ 0x24
 8007452:	2320      	movs	r3, #32
 8007454:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007458:	f8cd 800c 	str.w	r8, [sp, #12]
 800745c:	2330      	movs	r3, #48	@ 0x30
 800745e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075fc <_svfiprintf_r+0x1e4>
 8007462:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007466:	f04f 0901 	mov.w	r9, #1
 800746a:	4623      	mov	r3, r4
 800746c:	469a      	mov	sl, r3
 800746e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007472:	b10a      	cbz	r2, 8007478 <_svfiprintf_r+0x60>
 8007474:	2a25      	cmp	r2, #37	@ 0x25
 8007476:	d1f9      	bne.n	800746c <_svfiprintf_r+0x54>
 8007478:	ebba 0b04 	subs.w	fp, sl, r4
 800747c:	d00b      	beq.n	8007496 <_svfiprintf_r+0x7e>
 800747e:	465b      	mov	r3, fp
 8007480:	4622      	mov	r2, r4
 8007482:	4629      	mov	r1, r5
 8007484:	4638      	mov	r0, r7
 8007486:	f7ff ff6b 	bl	8007360 <__ssputs_r>
 800748a:	3001      	adds	r0, #1
 800748c:	f000 80a7 	beq.w	80075de <_svfiprintf_r+0x1c6>
 8007490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007492:	445a      	add	r2, fp
 8007494:	9209      	str	r2, [sp, #36]	@ 0x24
 8007496:	f89a 3000 	ldrb.w	r3, [sl]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 809f 	beq.w	80075de <_svfiprintf_r+0x1c6>
 80074a0:	2300      	movs	r3, #0
 80074a2:	f04f 32ff 	mov.w	r2, #4294967295
 80074a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074aa:	f10a 0a01 	add.w	sl, sl, #1
 80074ae:	9304      	str	r3, [sp, #16]
 80074b0:	9307      	str	r3, [sp, #28]
 80074b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80074b8:	4654      	mov	r4, sl
 80074ba:	2205      	movs	r2, #5
 80074bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c0:	484e      	ldr	r0, [pc, #312]	@ (80075fc <_svfiprintf_r+0x1e4>)
 80074c2:	f7f8 fe9d 	bl	8000200 <memchr>
 80074c6:	9a04      	ldr	r2, [sp, #16]
 80074c8:	b9d8      	cbnz	r0, 8007502 <_svfiprintf_r+0xea>
 80074ca:	06d0      	lsls	r0, r2, #27
 80074cc:	bf44      	itt	mi
 80074ce:	2320      	movmi	r3, #32
 80074d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074d4:	0711      	lsls	r1, r2, #28
 80074d6:	bf44      	itt	mi
 80074d8:	232b      	movmi	r3, #43	@ 0x2b
 80074da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074de:	f89a 3000 	ldrb.w	r3, [sl]
 80074e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e4:	d015      	beq.n	8007512 <_svfiprintf_r+0xfa>
 80074e6:	9a07      	ldr	r2, [sp, #28]
 80074e8:	4654      	mov	r4, sl
 80074ea:	2000      	movs	r0, #0
 80074ec:	f04f 0c0a 	mov.w	ip, #10
 80074f0:	4621      	mov	r1, r4
 80074f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074f6:	3b30      	subs	r3, #48	@ 0x30
 80074f8:	2b09      	cmp	r3, #9
 80074fa:	d94b      	bls.n	8007594 <_svfiprintf_r+0x17c>
 80074fc:	b1b0      	cbz	r0, 800752c <_svfiprintf_r+0x114>
 80074fe:	9207      	str	r2, [sp, #28]
 8007500:	e014      	b.n	800752c <_svfiprintf_r+0x114>
 8007502:	eba0 0308 	sub.w	r3, r0, r8
 8007506:	fa09 f303 	lsl.w	r3, r9, r3
 800750a:	4313      	orrs	r3, r2
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	46a2      	mov	sl, r4
 8007510:	e7d2      	b.n	80074b8 <_svfiprintf_r+0xa0>
 8007512:	9b03      	ldr	r3, [sp, #12]
 8007514:	1d19      	adds	r1, r3, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	9103      	str	r1, [sp, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	bfbb      	ittet	lt
 800751e:	425b      	neglt	r3, r3
 8007520:	f042 0202 	orrlt.w	r2, r2, #2
 8007524:	9307      	strge	r3, [sp, #28]
 8007526:	9307      	strlt	r3, [sp, #28]
 8007528:	bfb8      	it	lt
 800752a:	9204      	strlt	r2, [sp, #16]
 800752c:	7823      	ldrb	r3, [r4, #0]
 800752e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007530:	d10a      	bne.n	8007548 <_svfiprintf_r+0x130>
 8007532:	7863      	ldrb	r3, [r4, #1]
 8007534:	2b2a      	cmp	r3, #42	@ 0x2a
 8007536:	d132      	bne.n	800759e <_svfiprintf_r+0x186>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	1d1a      	adds	r2, r3, #4
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	9203      	str	r2, [sp, #12]
 8007540:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007544:	3402      	adds	r4, #2
 8007546:	9305      	str	r3, [sp, #20]
 8007548:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800760c <_svfiprintf_r+0x1f4>
 800754c:	7821      	ldrb	r1, [r4, #0]
 800754e:	2203      	movs	r2, #3
 8007550:	4650      	mov	r0, sl
 8007552:	f7f8 fe55 	bl	8000200 <memchr>
 8007556:	b138      	cbz	r0, 8007568 <_svfiprintf_r+0x150>
 8007558:	9b04      	ldr	r3, [sp, #16]
 800755a:	eba0 000a 	sub.w	r0, r0, sl
 800755e:	2240      	movs	r2, #64	@ 0x40
 8007560:	4082      	lsls	r2, r0
 8007562:	4313      	orrs	r3, r2
 8007564:	3401      	adds	r4, #1
 8007566:	9304      	str	r3, [sp, #16]
 8007568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756c:	4824      	ldr	r0, [pc, #144]	@ (8007600 <_svfiprintf_r+0x1e8>)
 800756e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007572:	2206      	movs	r2, #6
 8007574:	f7f8 fe44 	bl	8000200 <memchr>
 8007578:	2800      	cmp	r0, #0
 800757a:	d036      	beq.n	80075ea <_svfiprintf_r+0x1d2>
 800757c:	4b21      	ldr	r3, [pc, #132]	@ (8007604 <_svfiprintf_r+0x1ec>)
 800757e:	bb1b      	cbnz	r3, 80075c8 <_svfiprintf_r+0x1b0>
 8007580:	9b03      	ldr	r3, [sp, #12]
 8007582:	3307      	adds	r3, #7
 8007584:	f023 0307 	bic.w	r3, r3, #7
 8007588:	3308      	adds	r3, #8
 800758a:	9303      	str	r3, [sp, #12]
 800758c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800758e:	4433      	add	r3, r6
 8007590:	9309      	str	r3, [sp, #36]	@ 0x24
 8007592:	e76a      	b.n	800746a <_svfiprintf_r+0x52>
 8007594:	fb0c 3202 	mla	r2, ip, r2, r3
 8007598:	460c      	mov	r4, r1
 800759a:	2001      	movs	r0, #1
 800759c:	e7a8      	b.n	80074f0 <_svfiprintf_r+0xd8>
 800759e:	2300      	movs	r3, #0
 80075a0:	3401      	adds	r4, #1
 80075a2:	9305      	str	r3, [sp, #20]
 80075a4:	4619      	mov	r1, r3
 80075a6:	f04f 0c0a 	mov.w	ip, #10
 80075aa:	4620      	mov	r0, r4
 80075ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b0:	3a30      	subs	r2, #48	@ 0x30
 80075b2:	2a09      	cmp	r2, #9
 80075b4:	d903      	bls.n	80075be <_svfiprintf_r+0x1a6>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0c6      	beq.n	8007548 <_svfiprintf_r+0x130>
 80075ba:	9105      	str	r1, [sp, #20]
 80075bc:	e7c4      	b.n	8007548 <_svfiprintf_r+0x130>
 80075be:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c2:	4604      	mov	r4, r0
 80075c4:	2301      	movs	r3, #1
 80075c6:	e7f0      	b.n	80075aa <_svfiprintf_r+0x192>
 80075c8:	ab03      	add	r3, sp, #12
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	462a      	mov	r2, r5
 80075ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007608 <_svfiprintf_r+0x1f0>)
 80075d0:	a904      	add	r1, sp, #16
 80075d2:	4638      	mov	r0, r7
 80075d4:	f3af 8000 	nop.w
 80075d8:	1c42      	adds	r2, r0, #1
 80075da:	4606      	mov	r6, r0
 80075dc:	d1d6      	bne.n	800758c <_svfiprintf_r+0x174>
 80075de:	89ab      	ldrh	r3, [r5, #12]
 80075e0:	065b      	lsls	r3, r3, #25
 80075e2:	f53f af2d 	bmi.w	8007440 <_svfiprintf_r+0x28>
 80075e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075e8:	e72c      	b.n	8007444 <_svfiprintf_r+0x2c>
 80075ea:	ab03      	add	r3, sp, #12
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	462a      	mov	r2, r5
 80075f0:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <_svfiprintf_r+0x1f0>)
 80075f2:	a904      	add	r1, sp, #16
 80075f4:	4638      	mov	r0, r7
 80075f6:	f000 f879 	bl	80076ec <_printf_i>
 80075fa:	e7ed      	b.n	80075d8 <_svfiprintf_r+0x1c0>
 80075fc:	08007b8c 	.word	0x08007b8c
 8007600:	08007b96 	.word	0x08007b96
 8007604:	00000000 	.word	0x00000000
 8007608:	08007361 	.word	0x08007361
 800760c:	08007b92 	.word	0x08007b92

08007610 <_printf_common>:
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	4616      	mov	r6, r2
 8007616:	4698      	mov	r8, r3
 8007618:	688a      	ldr	r2, [r1, #8]
 800761a:	690b      	ldr	r3, [r1, #16]
 800761c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007620:	4293      	cmp	r3, r2
 8007622:	bfb8      	it	lt
 8007624:	4613      	movlt	r3, r2
 8007626:	6033      	str	r3, [r6, #0]
 8007628:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800762c:	4607      	mov	r7, r0
 800762e:	460c      	mov	r4, r1
 8007630:	b10a      	cbz	r2, 8007636 <_printf_common+0x26>
 8007632:	3301      	adds	r3, #1
 8007634:	6033      	str	r3, [r6, #0]
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	0699      	lsls	r1, r3, #26
 800763a:	bf42      	ittt	mi
 800763c:	6833      	ldrmi	r3, [r6, #0]
 800763e:	3302      	addmi	r3, #2
 8007640:	6033      	strmi	r3, [r6, #0]
 8007642:	6825      	ldr	r5, [r4, #0]
 8007644:	f015 0506 	ands.w	r5, r5, #6
 8007648:	d106      	bne.n	8007658 <_printf_common+0x48>
 800764a:	f104 0a19 	add.w	sl, r4, #25
 800764e:	68e3      	ldr	r3, [r4, #12]
 8007650:	6832      	ldr	r2, [r6, #0]
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	42ab      	cmp	r3, r5
 8007656:	dc26      	bgt.n	80076a6 <_printf_common+0x96>
 8007658:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800765c:	6822      	ldr	r2, [r4, #0]
 800765e:	3b00      	subs	r3, #0
 8007660:	bf18      	it	ne
 8007662:	2301      	movne	r3, #1
 8007664:	0692      	lsls	r2, r2, #26
 8007666:	d42b      	bmi.n	80076c0 <_printf_common+0xb0>
 8007668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800766c:	4641      	mov	r1, r8
 800766e:	4638      	mov	r0, r7
 8007670:	47c8      	blx	r9
 8007672:	3001      	adds	r0, #1
 8007674:	d01e      	beq.n	80076b4 <_printf_common+0xa4>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	6922      	ldr	r2, [r4, #16]
 800767a:	f003 0306 	and.w	r3, r3, #6
 800767e:	2b04      	cmp	r3, #4
 8007680:	bf02      	ittt	eq
 8007682:	68e5      	ldreq	r5, [r4, #12]
 8007684:	6833      	ldreq	r3, [r6, #0]
 8007686:	1aed      	subeq	r5, r5, r3
 8007688:	68a3      	ldr	r3, [r4, #8]
 800768a:	bf0c      	ite	eq
 800768c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007690:	2500      	movne	r5, #0
 8007692:	4293      	cmp	r3, r2
 8007694:	bfc4      	itt	gt
 8007696:	1a9b      	subgt	r3, r3, r2
 8007698:	18ed      	addgt	r5, r5, r3
 800769a:	2600      	movs	r6, #0
 800769c:	341a      	adds	r4, #26
 800769e:	42b5      	cmp	r5, r6
 80076a0:	d11a      	bne.n	80076d8 <_printf_common+0xc8>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e008      	b.n	80076b8 <_printf_common+0xa8>
 80076a6:	2301      	movs	r3, #1
 80076a8:	4652      	mov	r2, sl
 80076aa:	4641      	mov	r1, r8
 80076ac:	4638      	mov	r0, r7
 80076ae:	47c8      	blx	r9
 80076b0:	3001      	adds	r0, #1
 80076b2:	d103      	bne.n	80076bc <_printf_common+0xac>
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076bc:	3501      	adds	r5, #1
 80076be:	e7c6      	b.n	800764e <_printf_common+0x3e>
 80076c0:	18e1      	adds	r1, r4, r3
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	2030      	movs	r0, #48	@ 0x30
 80076c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076ca:	4422      	add	r2, r4
 80076cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076d4:	3302      	adds	r3, #2
 80076d6:	e7c7      	b.n	8007668 <_printf_common+0x58>
 80076d8:	2301      	movs	r3, #1
 80076da:	4622      	mov	r2, r4
 80076dc:	4641      	mov	r1, r8
 80076de:	4638      	mov	r0, r7
 80076e0:	47c8      	blx	r9
 80076e2:	3001      	adds	r0, #1
 80076e4:	d0e6      	beq.n	80076b4 <_printf_common+0xa4>
 80076e6:	3601      	adds	r6, #1
 80076e8:	e7d9      	b.n	800769e <_printf_common+0x8e>
	...

080076ec <_printf_i>:
 80076ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f0:	7e0f      	ldrb	r7, [r1, #24]
 80076f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076f4:	2f78      	cmp	r7, #120	@ 0x78
 80076f6:	4691      	mov	r9, r2
 80076f8:	4680      	mov	r8, r0
 80076fa:	460c      	mov	r4, r1
 80076fc:	469a      	mov	sl, r3
 80076fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007702:	d807      	bhi.n	8007714 <_printf_i+0x28>
 8007704:	2f62      	cmp	r7, #98	@ 0x62
 8007706:	d80a      	bhi.n	800771e <_printf_i+0x32>
 8007708:	2f00      	cmp	r7, #0
 800770a:	f000 80d1 	beq.w	80078b0 <_printf_i+0x1c4>
 800770e:	2f58      	cmp	r7, #88	@ 0x58
 8007710:	f000 80b8 	beq.w	8007884 <_printf_i+0x198>
 8007714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800771c:	e03a      	b.n	8007794 <_printf_i+0xa8>
 800771e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007722:	2b15      	cmp	r3, #21
 8007724:	d8f6      	bhi.n	8007714 <_printf_i+0x28>
 8007726:	a101      	add	r1, pc, #4	@ (adr r1, 800772c <_printf_i+0x40>)
 8007728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800772c:	08007785 	.word	0x08007785
 8007730:	08007799 	.word	0x08007799
 8007734:	08007715 	.word	0x08007715
 8007738:	08007715 	.word	0x08007715
 800773c:	08007715 	.word	0x08007715
 8007740:	08007715 	.word	0x08007715
 8007744:	08007799 	.word	0x08007799
 8007748:	08007715 	.word	0x08007715
 800774c:	08007715 	.word	0x08007715
 8007750:	08007715 	.word	0x08007715
 8007754:	08007715 	.word	0x08007715
 8007758:	08007897 	.word	0x08007897
 800775c:	080077c3 	.word	0x080077c3
 8007760:	08007851 	.word	0x08007851
 8007764:	08007715 	.word	0x08007715
 8007768:	08007715 	.word	0x08007715
 800776c:	080078b9 	.word	0x080078b9
 8007770:	08007715 	.word	0x08007715
 8007774:	080077c3 	.word	0x080077c3
 8007778:	08007715 	.word	0x08007715
 800777c:	08007715 	.word	0x08007715
 8007780:	08007859 	.word	0x08007859
 8007784:	6833      	ldr	r3, [r6, #0]
 8007786:	1d1a      	adds	r2, r3, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6032      	str	r2, [r6, #0]
 800778c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007794:	2301      	movs	r3, #1
 8007796:	e09c      	b.n	80078d2 <_printf_i+0x1e6>
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	6820      	ldr	r0, [r4, #0]
 800779c:	1d19      	adds	r1, r3, #4
 800779e:	6031      	str	r1, [r6, #0]
 80077a0:	0606      	lsls	r6, r0, #24
 80077a2:	d501      	bpl.n	80077a8 <_printf_i+0xbc>
 80077a4:	681d      	ldr	r5, [r3, #0]
 80077a6:	e003      	b.n	80077b0 <_printf_i+0xc4>
 80077a8:	0645      	lsls	r5, r0, #25
 80077aa:	d5fb      	bpl.n	80077a4 <_printf_i+0xb8>
 80077ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	da03      	bge.n	80077bc <_printf_i+0xd0>
 80077b4:	232d      	movs	r3, #45	@ 0x2d
 80077b6:	426d      	negs	r5, r5
 80077b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077bc:	4858      	ldr	r0, [pc, #352]	@ (8007920 <_printf_i+0x234>)
 80077be:	230a      	movs	r3, #10
 80077c0:	e011      	b.n	80077e6 <_printf_i+0xfa>
 80077c2:	6821      	ldr	r1, [r4, #0]
 80077c4:	6833      	ldr	r3, [r6, #0]
 80077c6:	0608      	lsls	r0, r1, #24
 80077c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80077cc:	d402      	bmi.n	80077d4 <_printf_i+0xe8>
 80077ce:	0649      	lsls	r1, r1, #25
 80077d0:	bf48      	it	mi
 80077d2:	b2ad      	uxthmi	r5, r5
 80077d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80077d6:	4852      	ldr	r0, [pc, #328]	@ (8007920 <_printf_i+0x234>)
 80077d8:	6033      	str	r3, [r6, #0]
 80077da:	bf14      	ite	ne
 80077dc:	230a      	movne	r3, #10
 80077de:	2308      	moveq	r3, #8
 80077e0:	2100      	movs	r1, #0
 80077e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077e6:	6866      	ldr	r6, [r4, #4]
 80077e8:	60a6      	str	r6, [r4, #8]
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	db05      	blt.n	80077fa <_printf_i+0x10e>
 80077ee:	6821      	ldr	r1, [r4, #0]
 80077f0:	432e      	orrs	r6, r5
 80077f2:	f021 0104 	bic.w	r1, r1, #4
 80077f6:	6021      	str	r1, [r4, #0]
 80077f8:	d04b      	beq.n	8007892 <_printf_i+0x1a6>
 80077fa:	4616      	mov	r6, r2
 80077fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007800:	fb03 5711 	mls	r7, r3, r1, r5
 8007804:	5dc7      	ldrb	r7, [r0, r7]
 8007806:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800780a:	462f      	mov	r7, r5
 800780c:	42bb      	cmp	r3, r7
 800780e:	460d      	mov	r5, r1
 8007810:	d9f4      	bls.n	80077fc <_printf_i+0x110>
 8007812:	2b08      	cmp	r3, #8
 8007814:	d10b      	bne.n	800782e <_printf_i+0x142>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	07df      	lsls	r7, r3, #31
 800781a:	d508      	bpl.n	800782e <_printf_i+0x142>
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	6861      	ldr	r1, [r4, #4]
 8007820:	4299      	cmp	r1, r3
 8007822:	bfde      	ittt	le
 8007824:	2330      	movle	r3, #48	@ 0x30
 8007826:	f806 3c01 	strble.w	r3, [r6, #-1]
 800782a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800782e:	1b92      	subs	r2, r2, r6
 8007830:	6122      	str	r2, [r4, #16]
 8007832:	f8cd a000 	str.w	sl, [sp]
 8007836:	464b      	mov	r3, r9
 8007838:	aa03      	add	r2, sp, #12
 800783a:	4621      	mov	r1, r4
 800783c:	4640      	mov	r0, r8
 800783e:	f7ff fee7 	bl	8007610 <_printf_common>
 8007842:	3001      	adds	r0, #1
 8007844:	d14a      	bne.n	80078dc <_printf_i+0x1f0>
 8007846:	f04f 30ff 	mov.w	r0, #4294967295
 800784a:	b004      	add	sp, #16
 800784c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	f043 0320 	orr.w	r3, r3, #32
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	4832      	ldr	r0, [pc, #200]	@ (8007924 <_printf_i+0x238>)
 800785a:	2778      	movs	r7, #120	@ 0x78
 800785c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	6831      	ldr	r1, [r6, #0]
 8007864:	061f      	lsls	r7, r3, #24
 8007866:	f851 5b04 	ldr.w	r5, [r1], #4
 800786a:	d402      	bmi.n	8007872 <_printf_i+0x186>
 800786c:	065f      	lsls	r7, r3, #25
 800786e:	bf48      	it	mi
 8007870:	b2ad      	uxthmi	r5, r5
 8007872:	6031      	str	r1, [r6, #0]
 8007874:	07d9      	lsls	r1, r3, #31
 8007876:	bf44      	itt	mi
 8007878:	f043 0320 	orrmi.w	r3, r3, #32
 800787c:	6023      	strmi	r3, [r4, #0]
 800787e:	b11d      	cbz	r5, 8007888 <_printf_i+0x19c>
 8007880:	2310      	movs	r3, #16
 8007882:	e7ad      	b.n	80077e0 <_printf_i+0xf4>
 8007884:	4826      	ldr	r0, [pc, #152]	@ (8007920 <_printf_i+0x234>)
 8007886:	e7e9      	b.n	800785c <_printf_i+0x170>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	f023 0320 	bic.w	r3, r3, #32
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	e7f6      	b.n	8007880 <_printf_i+0x194>
 8007892:	4616      	mov	r6, r2
 8007894:	e7bd      	b.n	8007812 <_printf_i+0x126>
 8007896:	6833      	ldr	r3, [r6, #0]
 8007898:	6825      	ldr	r5, [r4, #0]
 800789a:	6961      	ldr	r1, [r4, #20]
 800789c:	1d18      	adds	r0, r3, #4
 800789e:	6030      	str	r0, [r6, #0]
 80078a0:	062e      	lsls	r6, r5, #24
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	d501      	bpl.n	80078aa <_printf_i+0x1be>
 80078a6:	6019      	str	r1, [r3, #0]
 80078a8:	e002      	b.n	80078b0 <_printf_i+0x1c4>
 80078aa:	0668      	lsls	r0, r5, #25
 80078ac:	d5fb      	bpl.n	80078a6 <_printf_i+0x1ba>
 80078ae:	8019      	strh	r1, [r3, #0]
 80078b0:	2300      	movs	r3, #0
 80078b2:	6123      	str	r3, [r4, #16]
 80078b4:	4616      	mov	r6, r2
 80078b6:	e7bc      	b.n	8007832 <_printf_i+0x146>
 80078b8:	6833      	ldr	r3, [r6, #0]
 80078ba:	1d1a      	adds	r2, r3, #4
 80078bc:	6032      	str	r2, [r6, #0]
 80078be:	681e      	ldr	r6, [r3, #0]
 80078c0:	6862      	ldr	r2, [r4, #4]
 80078c2:	2100      	movs	r1, #0
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7f8 fc9b 	bl	8000200 <memchr>
 80078ca:	b108      	cbz	r0, 80078d0 <_printf_i+0x1e4>
 80078cc:	1b80      	subs	r0, r0, r6
 80078ce:	6060      	str	r0, [r4, #4]
 80078d0:	6863      	ldr	r3, [r4, #4]
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	2300      	movs	r3, #0
 80078d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078da:	e7aa      	b.n	8007832 <_printf_i+0x146>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	4632      	mov	r2, r6
 80078e0:	4649      	mov	r1, r9
 80078e2:	4640      	mov	r0, r8
 80078e4:	47d0      	blx	sl
 80078e6:	3001      	adds	r0, #1
 80078e8:	d0ad      	beq.n	8007846 <_printf_i+0x15a>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	079b      	lsls	r3, r3, #30
 80078ee:	d413      	bmi.n	8007918 <_printf_i+0x22c>
 80078f0:	68e0      	ldr	r0, [r4, #12]
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	4298      	cmp	r0, r3
 80078f6:	bfb8      	it	lt
 80078f8:	4618      	movlt	r0, r3
 80078fa:	e7a6      	b.n	800784a <_printf_i+0x15e>
 80078fc:	2301      	movs	r3, #1
 80078fe:	4632      	mov	r2, r6
 8007900:	4649      	mov	r1, r9
 8007902:	4640      	mov	r0, r8
 8007904:	47d0      	blx	sl
 8007906:	3001      	adds	r0, #1
 8007908:	d09d      	beq.n	8007846 <_printf_i+0x15a>
 800790a:	3501      	adds	r5, #1
 800790c:	68e3      	ldr	r3, [r4, #12]
 800790e:	9903      	ldr	r1, [sp, #12]
 8007910:	1a5b      	subs	r3, r3, r1
 8007912:	42ab      	cmp	r3, r5
 8007914:	dcf2      	bgt.n	80078fc <_printf_i+0x210>
 8007916:	e7eb      	b.n	80078f0 <_printf_i+0x204>
 8007918:	2500      	movs	r5, #0
 800791a:	f104 0619 	add.w	r6, r4, #25
 800791e:	e7f5      	b.n	800790c <_printf_i+0x220>
 8007920:	08007b9d 	.word	0x08007b9d
 8007924:	08007bae 	.word	0x08007bae

08007928 <memmove>:
 8007928:	4288      	cmp	r0, r1
 800792a:	b510      	push	{r4, lr}
 800792c:	eb01 0402 	add.w	r4, r1, r2
 8007930:	d902      	bls.n	8007938 <memmove+0x10>
 8007932:	4284      	cmp	r4, r0
 8007934:	4623      	mov	r3, r4
 8007936:	d807      	bhi.n	8007948 <memmove+0x20>
 8007938:	1e43      	subs	r3, r0, #1
 800793a:	42a1      	cmp	r1, r4
 800793c:	d008      	beq.n	8007950 <memmove+0x28>
 800793e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007946:	e7f8      	b.n	800793a <memmove+0x12>
 8007948:	4402      	add	r2, r0
 800794a:	4601      	mov	r1, r0
 800794c:	428a      	cmp	r2, r1
 800794e:	d100      	bne.n	8007952 <memmove+0x2a>
 8007950:	bd10      	pop	{r4, pc}
 8007952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800795a:	e7f7      	b.n	800794c <memmove+0x24>

0800795c <_sbrk_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d06      	ldr	r5, [pc, #24]	@ (8007978 <_sbrk_r+0x1c>)
 8007960:	2300      	movs	r3, #0
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	602b      	str	r3, [r5, #0]
 8007968:	f7f9 fb54 	bl	8001014 <_sbrk>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_sbrk_r+0x1a>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_sbrk_r+0x1a>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	20004fa4 	.word	0x20004fa4

0800797c <_realloc_r>:
 800797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	4607      	mov	r7, r0
 8007982:	4614      	mov	r4, r2
 8007984:	460d      	mov	r5, r1
 8007986:	b921      	cbnz	r1, 8007992 <_realloc_r+0x16>
 8007988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800798c:	4611      	mov	r1, r2
 800798e:	f7ff bc5b 	b.w	8007248 <_malloc_r>
 8007992:	b92a      	cbnz	r2, 80079a0 <_realloc_r+0x24>
 8007994:	f7ff fbec 	bl	8007170 <_free_r>
 8007998:	4625      	mov	r5, r4
 800799a:	4628      	mov	r0, r5
 800799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a0:	f000 f81a 	bl	80079d8 <_malloc_usable_size_r>
 80079a4:	4284      	cmp	r4, r0
 80079a6:	4606      	mov	r6, r0
 80079a8:	d802      	bhi.n	80079b0 <_realloc_r+0x34>
 80079aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079ae:	d8f4      	bhi.n	800799a <_realloc_r+0x1e>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4638      	mov	r0, r7
 80079b4:	f7ff fc48 	bl	8007248 <_malloc_r>
 80079b8:	4680      	mov	r8, r0
 80079ba:	b908      	cbnz	r0, 80079c0 <_realloc_r+0x44>
 80079bc:	4645      	mov	r5, r8
 80079be:	e7ec      	b.n	800799a <_realloc_r+0x1e>
 80079c0:	42b4      	cmp	r4, r6
 80079c2:	4622      	mov	r2, r4
 80079c4:	4629      	mov	r1, r5
 80079c6:	bf28      	it	cs
 80079c8:	4632      	movcs	r2, r6
 80079ca:	f7ff fbc3 	bl	8007154 <memcpy>
 80079ce:	4629      	mov	r1, r5
 80079d0:	4638      	mov	r0, r7
 80079d2:	f7ff fbcd 	bl	8007170 <_free_r>
 80079d6:	e7f1      	b.n	80079bc <_realloc_r+0x40>

080079d8 <_malloc_usable_size_r>:
 80079d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079dc:	1f18      	subs	r0, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfbc      	itt	lt
 80079e2:	580b      	ldrlt	r3, [r1, r0]
 80079e4:	18c0      	addlt	r0, r0, r3
 80079e6:	4770      	bx	lr

080079e8 <_init>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr

080079f4 <_fini>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr
