
ETH_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8cc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  0800ea7c  0800ea7c  0000fa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011640  08011640  00013088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011640  08011640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011648  08011648  00013088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011648  08011648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801164c  0801164c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08011650  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013088  2**0
                  CONTENTS
 10 .bss          000084a4  20000088  20000088  00013088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000852c  2000852c  00013088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acac  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ea6  00000000  00000000  0002dd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff3  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f1fe  00000000  00000000  00034ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022243  00000000  00000000  000641f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea9fa  00000000  00000000  00086434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00170e2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058d4  00000000  00000000  00170e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00176748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ea64 	.word	0x0800ea64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800ea64 	.word	0x0800ea64

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fc2c 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f810 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8a8 	bl	800071c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005cc:	f000 f87c 	bl	80006c8 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80005d0:	f003 f846 	bl	8003660 <MX_LWIP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
   ethernetif_input(&gnetif);
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <main+0x28>)
 80005d6:	f003 faaf 	bl	8003b38 <ethernetif_input>
   sys_check_timeouts();
 80005da:	f00a fd79 	bl	800b0d0 <sys_check_timeouts>
   ethernetif_input(&gnetif);
 80005de:	bf00      	nop
 80005e0:	e7f8      	b.n	80005d4 <main+0x18>
 80005e2:	bf00      	nop
 80005e4:	200000f4 	.word	0x200000f4

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00d fb91 	bl	800dd1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <SystemClock_Config+0xd8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a2a      	ldr	r2, [pc, #168]	@ (80006c0 <SystemClock_Config+0xd8>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <SystemClock_Config+0xd8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <SystemClock_Config+0xdc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <SystemClock_Config+0xdc>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <SystemClock_Config+0xdc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000648:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800065c:	23b4      	movs	r3, #180	@ 0xb4
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 f89b 	bl	80027a8 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f91e 	bl	80008b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800067c:	f002 f844 	bl	8002708 <HAL_PWREx_EnableOverDrive>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000686:	f000 f917 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2105      	movs	r1, #5
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 faf5 	bl	8002c98 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b4:	f000 f900 	bl	80008b8 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	@ 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART3_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 8000700:	f002 fcea 	bl	80030d8 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f8d5 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000a4 	.word	0x200000a4
 8000718:	40004800 	.word	0x40004800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	@ 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4b5b      	ldr	r3, [pc, #364]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a5a      	ldr	r2, [pc, #360]	@ (80008a4 <MX_GPIO_Init+0x188>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b58      	ldr	r3, [pc, #352]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b54      	ldr	r3, [pc, #336]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a53      	ldr	r2, [pc, #332]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b51      	ldr	r3, [pc, #324]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b4d      	ldr	r3, [pc, #308]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a4c      	ldr	r2, [pc, #304]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b4a      	ldr	r3, [pc, #296]	@ (80008a4 <MX_GPIO_Init+0x188>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b46      	ldr	r3, [pc, #280]	@ (80008a4 <MX_GPIO_Init+0x188>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a45      	ldr	r2, [pc, #276]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b43      	ldr	r3, [pc, #268]	@ (80008a4 <MX_GPIO_Init+0x188>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b3f      	ldr	r3, [pc, #252]	@ (80008a4 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a3e      	ldr	r2, [pc, #248]	@ (80008a4 <MX_GPIO_Init+0x188>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b3c      	ldr	r3, [pc, #240]	@ (80008a4 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b38      	ldr	r3, [pc, #224]	@ (80008a4 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a37      	ldr	r2, [pc, #220]	@ (80008a4 <MX_GPIO_Init+0x188>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b35      	ldr	r3, [pc, #212]	@ (80008a4 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007e0:	4831      	ldr	r0, [pc, #196]	@ (80008a8 <MX_GPIO_Init+0x18c>)
 80007e2:	f001 ff77 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2140      	movs	r1, #64	@ 0x40
 80007ea:	4830      	ldr	r0, [pc, #192]	@ (80008ac <MX_GPIO_Init+0x190>)
 80007ec:	f001 ff72 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	482a      	ldr	r0, [pc, #168]	@ (80008b0 <MX_GPIO_Init+0x194>)
 8000808:	f001 fdb8 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800080c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4820      	ldr	r0, [pc, #128]	@ (80008a8 <MX_GPIO_Init+0x18c>)
 8000826:	f001 fda9 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800082a:	2340      	movs	r3, #64	@ 0x40
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	481a      	ldr	r0, [pc, #104]	@ (80008ac <MX_GPIO_Init+0x190>)
 8000842:	f001 fd9b 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000846:	2380      	movs	r3, #128	@ 0x80
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4814      	ldr	r0, [pc, #80]	@ (80008ac <MX_GPIO_Init+0x190>)
 800085a:	f001 fd8f 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800085e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000870:	230a      	movs	r3, #10
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	480e      	ldr	r0, [pc, #56]	@ (80008b4 <MX_GPIO_Init+0x198>)
 800087c:	f001 fd7e 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <MX_GPIO_Init+0x198>)
 8000896:	f001 fd71 	bl	800237c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	3730      	adds	r7, #48	@ 0x30
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40020800 	.word	0x40020800
 80008b4:	40020000 	.word	0x40020000

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	@ (8000998 <HAL_UART_MspInit+0x84>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d12c      	bne.n	8000990 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_UART_MspInit+0x88>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	4a17      	ldr	r2, [pc, #92]	@ (800099c <HAL_UART_MspInit+0x88>)
 8000940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000944:	6413      	str	r3, [r2, #64]	@ 0x40
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <HAL_UART_MspInit+0x88>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_UART_MspInit+0x88>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a10      	ldr	r2, [pc, #64]	@ (800099c <HAL_UART_MspInit+0x88>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_UART_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800096e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000980:	2307      	movs	r3, #7
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <HAL_UART_MspInit+0x8c>)
 800098c:	f001 fcf6 	bl	800237c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40004800 	.word	0x40004800
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020c00 	.word	0x40020c00

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fa:	f000 fa61 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  return 1;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <_kill>:

int _kill(int pid, int sig)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <_kill+0x20>)
 8000a20:	2216      	movs	r2, #22
 8000a22:	601a      	str	r2, [r3, #0]
  return -1;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	2000851c 	.word	0x2000851c

08000a38 <_exit>:

void _exit (int status)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ffe5 	bl	8000a14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a4a:	bf00      	nop
 8000a4c:	e7fd      	b.n	8000a4a <_exit+0x12>

08000a4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e00a      	b.n	8000a76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a60:	f3af 8000 	nop.w
 8000a64:	4601      	mov	r1, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	60ba      	str	r2, [r7, #8]
 8000a6c:	b2ca      	uxtb	r2, r1
 8000a6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3301      	adds	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	dbf0      	blt.n	8000a60 <_read+0x12>
  }

  return len;
 8000a7e:	687b      	ldr	r3, [r7, #4]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e009      	b.n	8000aae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	60ba      	str	r2, [r7, #8]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dbf1      	blt.n	8000a9a <_write+0x12>
  }
  return len;
 8000ab6:	687b      	ldr	r3, [r7, #4]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_close>:

int _close(int file)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae8:	605a      	str	r2, [r3, #4]
  return 0;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_isatty>:

int _isatty(int file)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b00:	2301      	movs	r3, #1
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	@ (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d205      	bcs.n	8000b64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <_sbrk+0x6c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	371c      	adds	r7, #28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	20030000 	.word	0x20030000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	200000ec 	.word	0x200000ec
 8000b90:	20008530 	.word	0x20008530
 8000b94:	2000851c 	.word	0x2000851c

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f00d f8e7 	bl	800ddbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fce5 	bl	80005bc <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bf4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c00:	08011650 	.word	0x08011650
  ldr r2, =_sbss
 8000c04:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c08:	2000852c 	.word	0x2000852c

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>

08000c0e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00b      	beq.n	8000c36 <LAN8742_RegisterBusIO+0x28>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d007      	beq.n	8000c36 <LAN8742_RegisterBusIO+0x28>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <LAN8742_RegisterBusIO+0x28>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e014      	b.n	8000c66 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	691a      	ldr	r2, [r3, #16]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d139      	bne.n	8000d02 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e01c      	b.n	8000ce2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f107 020c 	add.w	r2, r7, #12
 8000cb0:	2112      	movs	r1, #18
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	4798      	blx	r3
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	da03      	bge.n	8000cc4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000cbc:	f06f 0304 	mvn.w	r3, #4
 8000cc0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000cc2:	e00b      	b.n	8000cdc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d105      	bne.n	8000cdc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
         break;
 8000cda:	e005      	b.n	8000ce8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	2b1f      	cmp	r3, #31
 8000ce6:	d9df      	bls.n	8000ca8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b1f      	cmp	r3, #31
 8000cee:	d902      	bls.n	8000cf6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000cf0:	f06f 0302 	mvn.w	r3, #2
 8000cf4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000d02:	693b      	ldr	r3, [r7, #16]
 }
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	6810      	ldr	r0, [r2, #0]
 8000d20:	f107 020c 	add.w	r2, r7, #12
 8000d24:	2101      	movs	r1, #1
 8000d26:	4798      	blx	r3
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	da02      	bge.n	8000d34 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d2e:	f06f 0304 	mvn.w	r3, #4
 8000d32:	e06e      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6810      	ldr	r0, [r2, #0]
 8000d3c:	f107 020c 	add.w	r2, r7, #12
 8000d40:	2101      	movs	r1, #1
 8000d42:	4798      	blx	r3
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	da02      	bge.n	8000d50 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d4a:	f06f 0304 	mvn.w	r3, #4
 8000d4e:	e060      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e059      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6810      	ldr	r0, [r2, #0]
 8000d66:	f107 020c 	add.w	r2, r7, #12
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4798      	blx	r3
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	da02      	bge.n	8000d7a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d74:	f06f 0304 	mvn.w	r3, #4
 8000d78:	e04b      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d11b      	bne.n	8000dbc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <LAN8742_GetLinkState+0x90>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e03a      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e033      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000db4:	2304      	movs	r3, #4
 8000db6:	e02c      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000db8:	2305      	movs	r3, #5
 8000dba:	e02a      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6810      	ldr	r0, [r2, #0]
 8000dc4:	f107 020c 	add.w	r2, r7, #12
 8000dc8:	211f      	movs	r1, #31
 8000dca:	4798      	blx	r3
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da02      	bge.n	8000dd8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000dd2:	f06f 0304 	mvn.w	r3, #4
 8000dd6:	e01c      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000de2:	2306      	movs	r3, #6
 8000de4:	e015      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f003 031c 	and.w	r3, r3, #28
 8000dec:	2b18      	cmp	r3, #24
 8000dee:	d101      	bne.n	8000df4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000df0:	2302      	movs	r3, #2
 8000df2:	e00e      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 031c 	and.w	r3, r3, #28
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d101      	bne.n	8000e02 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e007      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f003 031c 	and.w	r3, r3, #28
 8000e08:	2b14      	cmp	r3, #20
 8000e0a:	d101      	bne.n	8000e10 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	e000      	b.n	8000e12 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e10:	2305      	movs	r3, #5
    }
  }
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f931 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fd38 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f93b 	bl	80010fa <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f911 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	@ (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	200000f0 	.word	0x200000f0

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200000f0 	.word	0x200000f0

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	@ (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	@ 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	@ 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff47 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff5c 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffb0 	bl	8001068 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e08a      	b.n	800123c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800112c:	2b00      	cmp	r3, #0
 800112e:	d106      	bne.n	800113e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2220      	movs	r2, #32
 8001134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f002 fd6d 	bl	8003c18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b40      	ldr	r3, [pc, #256]	@ (8001244 <HAL_ETH_Init+0x130>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	4a3f      	ldr	r2, [pc, #252]	@ (8001244 <HAL_ETH_Init+0x130>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114c:	6453      	str	r3, [r2, #68]	@ 0x44
 800114e:	4b3d      	ldr	r3, [pc, #244]	@ (8001244 <HAL_ETH_Init+0x130>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800115a:	4b3b      	ldr	r3, [pc, #236]	@ (8001248 <HAL_ETH_Init+0x134>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a3a      	ldr	r2, [pc, #232]	@ (8001248 <HAL_ETH_Init+0x134>)
 8001160:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001164:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001166:	4b38      	ldr	r3, [pc, #224]	@ (8001248 <HAL_ETH_Init+0x134>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4936      	ldr	r1, [pc, #216]	@ (8001248 <HAL_ETH_Init+0x134>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001174:	4b34      	ldr	r3, [pc, #208]	@ (8001248 <HAL_ETH_Init+0x134>)
 8001176:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800118e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001190:	f7ff feaa 	bl	8000ee8 <HAL_GetTick>
 8001194:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001196:	e011      	b.n	80011bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001198:	f7ff fea6 	bl	8000ee8 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011a6:	d909      	bls.n	80011bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2204      	movs	r2, #4
 80011ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	22e0      	movs	r2, #224	@ 0xe0
 80011b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e03f      	b.n	800123c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1e4      	bne.n	8001198 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fe16 	bl	8001e00 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fec1 	bl	8001f5c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 ff17 	bl	800200e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	461a      	mov	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fe7f 	bl	8001eec <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80011fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800120e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001212:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001226:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2210      	movs	r2, #16
 8001236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800

0800124c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800125a:	2b10      	cmp	r3, #16
 800125c:	d150      	bne.n	8001300 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2220      	movs	r2, #32
 8001262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2204      	movs	r2, #4
 800126a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f9f8 	bl	8001662 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0208 	orr.w	r2, r2, #8
 8001280:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff fe38 	bl	8000f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0204 	orr.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff fe25 	bl	8000f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fc3a 	bl	8001b38 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012da:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012f2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2240      	movs	r2, #64	@ 0x40
 80012f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
  }
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001318:	2b40      	cmp	r3, #64	@ 0x40
 800131a:	d14a      	bne.n	80013b2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2220      	movs	r2, #32
 8001320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001336:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800133a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	f023 0302 	bic.w	r3, r3, #2
 800134e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001352:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0204 	bic.w	r2, r2, #4
 8001362:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff fdc7 	bl	8000f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fbdc 	bl	8001b38 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0208 	bic.w	r2, r2, #8
 800138e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff fdb1 	bl	8000f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2210      	movs	r2, #16
 80013aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
  }
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d4:	f043 0201 	orr.w	r2, r3, #1
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e07c      	b.n	80014dc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013e8:	2b40      	cmp	r3, #64	@ 0x40
 80013ea:	d176      	bne.n	80014da <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80013ec:	2200      	movs	r2, #0
 80013ee:	68b9      	ldr	r1, [r7, #8]
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 fe7b 	bl	80020ec <ETH_Prepare_Tx_Descriptors>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d009      	beq.n	8001410 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001402:	f043 0202 	orr.w	r2, r3, #2
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e065      	b.n	80014dc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001410:	f3bf 8f4f 	dsb	sy
}
 8001414:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3206      	adds	r2, #6
 800141e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001422:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	629a      	str	r2, [r3, #40]	@ 0x28
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001432:	2b03      	cmp	r3, #3
 8001434:	d904      	bls.n	8001440 <HAL_ETH_Transmit+0x84>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143a:	1f1a      	subs	r2, r3, #4
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3106      	adds	r1, #6
 800144c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001454:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001456:	f7ff fd47 	bl	8000ee8 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800145c:	e037      	b.n	80014ce <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d011      	beq.n	8001494 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001476:	f043 0208 	orr.w	r2, r3, #8
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e023      	b.n	80014dc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149a:	d018      	beq.n	80014ce <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800149c:	f7ff fd24 	bl	8000ee8 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d302      	bcc.n	80014b2 <HAL_ETH_Transmit+0xf6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10d      	bne.n	80014ce <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b8:	f043 0204 	orr.w	r2, r3, #4
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80014c8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e006      	b.n	80014dc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dbc3      	blt.n	800145e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
  }
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0a4      	b.n	800165a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001516:	2b40      	cmp	r3, #64	@ 0x40
 8001518:	d001      	beq.n	800151e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e09d      	b.n	800165a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001522:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	3212      	adds	r2, #18
 800152a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001534:	f1c3 0304 	rsb	r3, r3, #4
 8001538:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800153a:	e066      	b.n	800160a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001560:	2b00      	cmp	r3, #0
 8001562:	d103      	bne.n	800156c <HAL_ETH_ReadData+0x88>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03c      	beq.n	80015e6 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800158e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015c0:	461a      	mov	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f002 fcf7 	bl	8003fb8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	441a      	add	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d902      	bls.n	80015f8 <HAL_ETH_ReadData+0x114>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b04      	subs	r3, #4
 80015f6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	3212      	adds	r2, #18
 80015fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800160e:	2b00      	cmp	r3, #0
 8001610:	db06      	blt.n	8001620 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	429a      	cmp	r2, r3
 8001618:	d202      	bcs.n	8001620 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800161a:	7cfb      	ldrb	r3, [r7, #19]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d08d      	beq.n	800153c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	441a      	add	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f814 	bl	8001662 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001640:	7cfb      	ldrb	r3, [r7, #19]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d108      	bne.n	8001658 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	e000      	b.n	800165a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b088      	sub	sp, #32
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800166e:	2301      	movs	r3, #1
 8001670:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001676:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	3212      	adds	r2, #18
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001688:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800168a:	e044      	b.n	8001716 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d112      	bne.n	80016ba <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fc5d 	bl	8003f58 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	74fb      	strb	r3, [r7, #19]
 80016a8:	e007      	b.n	80016ba <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	461a      	mov	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	461a      	mov	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80016ba:	7cfb      	ldrb	r3, [r7, #19]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d02a      	beq.n	8001716 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d108      	bne.n	80016da <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	6053      	str	r3, [r2, #4]
 80016d8:	e005      	b.n	80016e6 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d902      	bls.n	8001704 <ETH_UpdateDescriptor+0xa2>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b04      	subs	r3, #4
 8001702:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	3212      	adds	r2, #18
 800170a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	3b01      	subs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <ETH_UpdateDescriptor+0xc0>
 800171c:	7cfb      	ldrb	r3, [r7, #19]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1b4      	bne.n	800168c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	429a      	cmp	r2, r3
 800172a:	d01a      	beq.n	8001762 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	3303      	adds	r3, #3
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001736:	f3bf 8f5f 	dmb	sy
}
 800173a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6919      	ldr	r1, [r3, #16]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	18ca      	adds	r2, r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001754:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001762:	bf00      	nop
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 031c 	and.w	r3, r3, #28
 8001786:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	02db      	lsls	r3, r3, #11
 800178c:	b29b      	uxth	r3, r3
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4313      	orrs	r3, r2
 8001792:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	019b      	lsls	r3, r3, #6
 8001798:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	4313      	orrs	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f023 0302 	bic.w	r3, r3, #2
 80017a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80017ba:	f7ff fb95 	bl	8000ee8 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017c0:	e00d      	b.n	80017de <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80017c2:	f7ff fb91 	bl	8000ee8 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017d0:	d301      	bcc.n	80017d6 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e010      	b.n	80017f8 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ec      	bne.n	80017c2 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 031c 	and.w	r3, r3, #28
 800181c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	02db      	lsls	r3, r3, #11
 8001822:	b29b      	uxth	r3, r3
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4313      	orrs	r3, r2
 8001836:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800185a:	f7ff fb45 	bl	8000ee8 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001860:	e00d      	b.n	800187e <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001862:	f7ff fb41 	bl	8000ee8 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001870:	d301      	bcc.n	8001876 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e009      	b.n	800188a <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ec      	bne.n	8001862 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0e6      	b.n	8001a74 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf0c      	ite	eq
 80018de:	2301      	moveq	r3, #1
 80018e0:	2300      	movne	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e00b      	b.n	8001aac <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d105      	bne.n	8001aaa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f86f 	bl	8001b84 <ETH_SetMACConfig>

    return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f023 031c 	bic.w	r3, r3, #28
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001acc:	f001 fad0 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8001ad0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4a14      	ldr	r2, [pc, #80]	@ (8001b28 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d804      	bhi.n	8001ae4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e019      	b.n	8001b18 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <HAL_ETH_SetMDIOClockRange+0x78>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d204      	bcs.n	8001af6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f043 030c 	orr.w	r3, r3, #12
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e010      	b.n	8001b18 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d90c      	bls.n	8001b18 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d804      	bhi.n	8001b10 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e003      	b.n	8001b18 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f043 0310 	orr.w	r3, r3, #16
 8001b16:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	02160ebf 	.word	0x02160ebf
 8001b2c:	03938700 	.word	0x03938700
 8001b30:	05f5e0ff 	.word	0x05f5e0ff
 8001b34:	08f0d17f 	.word	0x08f0d17f

08001b38 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b5a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff f9c9 	bl	8000f00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b78:	6193      	str	r3, [r2, #24]
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4b53      	ldr	r3, [pc, #332]	@ (8001ce8 <ETH_SetMACConfig+0x164>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	7b9b      	ldrb	r3, [r3, #14]
 8001ba2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	7c12      	ldrb	r2, [r2, #16]
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d102      	bne.n	8001bb2 <ETH_SetMACConfig+0x2e>
 8001bac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bb0:	e000      	b.n	8001bb4 <ETH_SetMACConfig+0x30>
 8001bb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001bb4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	7c52      	ldrb	r2, [r2, #17]
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d102      	bne.n	8001bc4 <ETH_SetMACConfig+0x40>
 8001bbe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001bc2:	e000      	b.n	8001bc6 <ETH_SetMACConfig+0x42>
 8001bc4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bc6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001bcc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	7fdb      	ldrb	r3, [r3, #31]
 8001bd2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001bd4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001bda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	7f92      	ldrb	r2, [r2, #30]
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d102      	bne.n	8001bea <ETH_SetMACConfig+0x66>
 8001be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be8:	e000      	b.n	8001bec <ETH_SetMACConfig+0x68>
 8001bea:	2200      	movs	r2, #0
                        macconf->Speed |
 8001bec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	7f1b      	ldrb	r3, [r3, #28]
 8001bf2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001bf4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bfa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	791b      	ldrb	r3, [r3, #4]
 8001c00:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d102      	bne.n	8001c14 <ETH_SetMACConfig+0x90>
 8001c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c12:	e000      	b.n	8001c16 <ETH_SetMACConfig+0x92>
 8001c14:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7bdb      	ldrb	r3, [r3, #15]
 8001c1c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c1e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001c2c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff f95a 	bl	8000f00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001c62:	4013      	ands	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c6a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c72:	2a00      	cmp	r2, #0
 8001c74:	d101      	bne.n	8001c7a <ETH_SetMACConfig+0xf6>
 8001c76:	2280      	movs	r2, #128	@ 0x80
 8001c78:	e000      	b.n	8001c7c <ETH_SetMACConfig+0xf8>
 8001c7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c7c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001c8a:	2a01      	cmp	r2, #1
 8001c8c:	d101      	bne.n	8001c92 <ETH_SetMACConfig+0x10e>
 8001c8e:	2208      	movs	r2, #8
 8001c90:	e000      	b.n	8001c94 <ETH_SetMACConfig+0x110>
 8001c92:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001c94:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001c9c:	2a01      	cmp	r2, #1
 8001c9e:	d101      	bne.n	8001ca4 <ETH_SetMACConfig+0x120>
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	e000      	b.n	8001ca6 <ETH_SetMACConfig+0x122>
 8001ca4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ca6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001cae:	2a01      	cmp	r2, #1
 8001cb0:	d101      	bne.n	8001cb6 <ETH_SetMACConfig+0x132>
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	e000      	b.n	8001cb8 <ETH_SetMACConfig+0x134>
 8001cb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff f915 	bl	8000f00 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	fd20810f 	.word	0xfd20810f

08001cec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <ETH_SetDMAConfig+0x110>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	7b1b      	ldrb	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <ETH_SetDMAConfig+0x2c>
 8001d12:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d16:	e000      	b.n	8001d1a <ETH_SetDMAConfig+0x2e>
 8001d18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	7b5b      	ldrb	r3, [r3, #13]
 8001d1e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d20:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	7f52      	ldrb	r2, [r2, #29]
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d102      	bne.n	8001d30 <ETH_SetDMAConfig+0x44>
 8001d2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d2e:	e000      	b.n	8001d32 <ETH_SetDMAConfig+0x46>
 8001d30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	7b9b      	ldrb	r3, [r3, #14]
 8001d38:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d3a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7f1b      	ldrb	r3, [r3, #28]
 8001d46:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001d48:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	7f9b      	ldrb	r3, [r3, #30]
 8001d4e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d50:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d56:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d5e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d60:	4313      	orrs	r3, r2
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d70:	461a      	mov	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff f8bc 	bl	8000f00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d90:	461a      	mov	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	791b      	ldrb	r3, [r3, #4]
 8001d9a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001da0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001da6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001dac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001db4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001db6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001dbe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001dc4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dd2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7ff f88d 	bl	8000f00 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	f8de3f23 	.word	0xf8de3f23

08001e00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0a6      	sub	sp, #152	@ 0x98
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e42:	2300      	movs	r3, #0
 8001e44:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fe7f 	bl	8001b84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e86:	2301      	movs	r3, #1
 8001e88:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e94:	2301      	movs	r3, #1
 8001e96:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001eb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001eba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ebc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ec0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ec6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff05 	bl	8001cec <ETH_SetDMAConfig>
}
 8001ee2:	bf00      	nop
 8001ee4:	3798      	adds	r7, #152	@ 0x98
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3305      	adds	r3, #5
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	3204      	adds	r2, #4
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <ETH_MACAddressConfig+0x68>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3303      	adds	r3, #3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	061a      	lsls	r2, r3, #24
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3302      	adds	r3, #2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	4313      	orrs	r3, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <ETH_MACAddressConfig+0x6c>)
 8001f3e:	4413      	add	r3, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	6013      	str	r3, [r2, #0]
}
 8001f46:	bf00      	nop
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40028040 	.word	0x40028040
 8001f58:	40028044 	.word	0x40028044

08001f5c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	e03e      	b.n	8001fe8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	3206      	adds	r2, #6
 8001f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d80c      	bhi.n	8001fcc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68d9      	ldr	r1, [r3, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	e004      	b.n	8001fd6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d9bd      	bls.n	8001f6a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002000:	611a      	str	r2, [r3, #16]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e048      	b.n	80020ae <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6919      	ldr	r1, [r3, #16]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2200      	movs	r2, #0
 8002038:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2200      	movs	r2, #0
 800204a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002058:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	3212      	adds	r2, #18
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d80c      	bhi.n	800209e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6919      	ldr	r1, [r3, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	461a      	mov	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	e004      	b.n	80020a8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d9b3      	bls.n	800201c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020de:	60da      	str	r2, [r3, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b091      	sub	sp, #68	@ 0x44
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3318      	adds	r3, #24
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002116:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800212a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800212e:	d007      	beq.n	8002140 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002134:	3304      	adds	r3, #4
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002140:	2302      	movs	r3, #2
 8002142:	e115      	b.n	8002370 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002146:	3301      	adds	r3, #1
 8002148:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800214a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002152:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800215c:	f023 031f 	bic.w	r3, r3, #31
 8002160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002162:	6852      	ldr	r2, [r2, #4]
 8002164:	431a      	orrs	r2, r3
 8002166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002168:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	431a      	orrs	r2, r3
 8002184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002186:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80021b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80021ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80021be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80021ca:	e084      	b.n	80022d6 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80021cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80021d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80021e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e005      	b.n	80021f8 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80021f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80021f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021fa:	3301      	adds	r3, #1
 80021fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002200:	2b03      	cmp	r3, #3
 8002202:	d902      	bls.n	800220a <ETH_Prepare_Tx_Descriptors+0x11e>
 8002204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002206:	3b04      	subs	r3, #4
 8002208:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800221c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002220:	d007      	beq.n	8002232 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002226:	3304      	adds	r3, #4
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d029      	beq.n	8002286 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800223a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002240:	2300      	movs	r3, #0
 8002242:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002244:	e019      	b.n	800227a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8002246:	f3bf 8f5f 	dmb	sy
}
 800224a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800224c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002256:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800225a:	3301      	adds	r3, #1
 800225c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800225e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002260:	2b03      	cmp	r3, #3
 8002262:	d902      	bls.n	800226a <ETH_Prepare_Tx_Descriptors+0x17e>
 8002264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002266:	3b04      	subs	r3, #4
 8002268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800226e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002272:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002276:	3301      	adds	r3, #1
 8002278:	63bb      	str	r3, [r7, #56]	@ 0x38
 800227a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800227c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227e:	429a      	cmp	r2, r3
 8002280:	d3e1      	bcc.n	8002246 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	e074      	b.n	8002370 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002290:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002294:	3301      	adds	r3, #1
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800229e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80022b0:	f023 031f 	bic.w	r3, r3, #31
 80022b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022b6:	6852      	ldr	r2, [r2, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022bc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	3301      	adds	r3, #1
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80022c4:	f3bf 8f5f 	dmb	sy
}
 80022c8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80022d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f47f af76 	bne.w	80021cc <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80022ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e005      	b.n	8002300 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	6a3a      	ldr	r2, [r7, #32]
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002314:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002316:	f3bf 8f5f 	dmb	sy
}
 800231a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800231c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002326:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800232c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800232e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002330:	3304      	adds	r3, #4
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800233c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800233e:	f3ef 8310 	mrs	r3, PRIMASK
 8002342:	613b      	str	r3, [r7, #16]
  return(result);
 8002344:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	2301      	movs	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f383 8810 	msr	PRIMASK, r3
}
 8002352:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235a:	4413      	add	r3, r2
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	629a      	str	r2, [r3, #40]	@ 0x28
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	f383 8810 	msr	PRIMASK, r3
}
 800236c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3744      	adds	r7, #68	@ 0x44
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	@ 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e177      	b.n	8002688 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8166 	bne.w	8002682 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d005      	beq.n	80023ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80c0 	beq.w	8002682 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b66      	ldr	r3, [pc, #408]	@ (80026a0 <HAL_GPIO_Init+0x324>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	4a65      	ldr	r2, [pc, #404]	@ (80026a0 <HAL_GPIO_Init+0x324>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002510:	6453      	str	r3, [r2, #68]	@ 0x44
 8002512:	4b63      	ldr	r3, [pc, #396]	@ (80026a0 <HAL_GPIO_Init+0x324>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a61      	ldr	r2, [pc, #388]	@ (80026a4 <HAL_GPIO_Init+0x328>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a58      	ldr	r2, [pc, #352]	@ (80026a8 <HAL_GPIO_Init+0x32c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d037      	beq.n	80025ba <HAL_GPIO_Init+0x23e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a57      	ldr	r2, [pc, #348]	@ (80026ac <HAL_GPIO_Init+0x330>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d031      	beq.n	80025b6 <HAL_GPIO_Init+0x23a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a56      	ldr	r2, [pc, #344]	@ (80026b0 <HAL_GPIO_Init+0x334>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d02b      	beq.n	80025b2 <HAL_GPIO_Init+0x236>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a55      	ldr	r2, [pc, #340]	@ (80026b4 <HAL_GPIO_Init+0x338>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d025      	beq.n	80025ae <HAL_GPIO_Init+0x232>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a54      	ldr	r2, [pc, #336]	@ (80026b8 <HAL_GPIO_Init+0x33c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d01f      	beq.n	80025aa <HAL_GPIO_Init+0x22e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a53      	ldr	r2, [pc, #332]	@ (80026bc <HAL_GPIO_Init+0x340>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d019      	beq.n	80025a6 <HAL_GPIO_Init+0x22a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_GPIO_Init+0x344>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_GPIO_Init+0x226>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a51      	ldr	r2, [pc, #324]	@ (80026c4 <HAL_GPIO_Init+0x348>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00d      	beq.n	800259e <HAL_GPIO_Init+0x222>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a50      	ldr	r2, [pc, #320]	@ (80026c8 <HAL_GPIO_Init+0x34c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x21e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	@ (80026cc <HAL_GPIO_Init+0x350>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_GPIO_Init+0x21a>
 8002592:	2309      	movs	r3, #9
 8002594:	e012      	b.n	80025bc <HAL_GPIO_Init+0x240>
 8002596:	230a      	movs	r3, #10
 8002598:	e010      	b.n	80025bc <HAL_GPIO_Init+0x240>
 800259a:	2308      	movs	r3, #8
 800259c:	e00e      	b.n	80025bc <HAL_GPIO_Init+0x240>
 800259e:	2307      	movs	r3, #7
 80025a0:	e00c      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e00a      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025a6:	2305      	movs	r3, #5
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025aa:	2304      	movs	r3, #4
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	@ (80026a4 <HAL_GPIO_Init+0x328>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_GPIO_Init+0x354>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fe:	4a34      	ldr	r2, [pc, #208]	@ (80026d0 <HAL_GPIO_Init+0x354>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002604:	4b32      	ldr	r3, [pc, #200]	@ (80026d0 <HAL_GPIO_Init+0x354>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002628:	4a29      	ldr	r2, [pc, #164]	@ (80026d0 <HAL_GPIO_Init+0x354>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262e:	4b28      	ldr	r3, [pc, #160]	@ (80026d0 <HAL_GPIO_Init+0x354>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002652:	4a1f      	ldr	r2, [pc, #124]	@ (80026d0 <HAL_GPIO_Init+0x354>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <HAL_GPIO_Init+0x354>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267c:	4a14      	ldr	r2, [pc, #80]	@ (80026d0 <HAL_GPIO_Init+0x354>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f ae84 	bls.w	8002398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40021400 	.word	0x40021400
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40021c00 	.word	0x40021c00
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40022400 	.word	0x40022400
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
 80026e0:	4613      	mov	r3, r2
 80026e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e4:	787b      	ldrb	r3, [r7, #1]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026f0:	e003      	b.n	80026fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	041a      	lsls	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	619a      	str	r2, [r3, #24]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <HAL_PWREx_EnableOverDrive+0x90>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	4a1f      	ldr	r2, [pc, #124]	@ (8002798 <HAL_PWREx_EnableOverDrive+0x90>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	@ 0x40
 8002722:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <HAL_PWREx_EnableOverDrive+0x90>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_PWREx_EnableOverDrive+0x94>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002734:	f7fe fbd8 	bl	8000ee8 <HAL_GetTick>
 8002738:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800273a:	e009      	b.n	8002750 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800273c:	f7fe fbd4 	bl	8000ee8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800274a:	d901      	bls.n	8002750 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e01f      	b.n	8002790 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800275c:	d1ee      	bne.n	800273c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800275e:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002764:	f7fe fbc0 	bl	8000ee8 <HAL_GetTick>
 8002768:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800276a:	e009      	b.n	8002780 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800276c:	f7fe fbbc 	bl	8000ee8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800277a:	d901      	bls.n	8002780 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e007      	b.n	8002790 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002780:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800278c:	d1ee      	bne.n	800276c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	420e0040 	.word	0x420e0040
 80027a0:	40007000 	.word	0x40007000
 80027a4:	420e0044 	.word	0x420e0044

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e267      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d075      	beq.n	80028b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027c6:	4b88      	ldr	r3, [pc, #544]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d00c      	beq.n	80027ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	4b85      	ldr	r3, [pc, #532]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d112      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b82      	ldr	r3, [pc, #520]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ea:	d10b      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	4b7e      	ldr	r3, [pc, #504]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05b      	beq.n	80028b0 <HAL_RCC_OscConfig+0x108>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d157      	bne.n	80028b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e242      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x74>
 800280e:	4b76      	ldr	r3, [pc, #472]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a75      	ldr	r2, [pc, #468]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x98>
 8002826:	4b70      	ldr	r3, [pc, #448]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6f      	ldr	r2, [pc, #444]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6d      	ldr	r3, [pc, #436]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6c      	ldr	r2, [pc, #432]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 8002840:	4b69      	ldr	r3, [pc, #420]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a68      	ldr	r2, [pc, #416]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b66      	ldr	r3, [pc, #408]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a65      	ldr	r2, [pc, #404]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe fb42 	bl	8000ee8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe fb3e 	bl	8000ee8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e207      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5b      	ldr	r3, [pc, #364]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xc0>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fb2e 	bl	8000ee8 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fb2a 	bl	8000ee8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1f3      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b51      	ldr	r3, [pc, #324]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0xe8>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028be:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b47      	ldr	r3, [pc, #284]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b44      	ldr	r3, [pc, #272]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b41      	ldr	r3, [pc, #260]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1c7      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3b      	ldr	r3, [pc, #236]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4937      	ldr	r1, [pc, #220]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b34      	ldr	r3, [pc, #208]	@ (80029ec <HAL_RCC_OscConfig+0x244>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fae3 	bl	8000ee8 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe fadf 	bl	8000ee8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1a8      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b28      	ldr	r3, [pc, #160]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4925      	ldr	r1, [pc, #148]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <HAL_RCC_OscConfig+0x244>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fac2 	bl	8000ee8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe fabe 	bl	8000ee8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e187      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d036      	beq.n	8002a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <HAL_RCC_OscConfig+0x248>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe faa2 	bl	8000ee8 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe fa9e 	bl	8000ee8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e167      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x200>
 80029c6:	e01b      	b.n	8002a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c8:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_RCC_OscConfig+0x248>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fa8b 	bl	8000ee8 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	e00e      	b.n	80029f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d6:	f7fe fa87 	bl	8000ee8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d907      	bls.n	80029f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e150      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
 80029e8:	40023800 	.word	0x40023800
 80029ec:	42470000 	.word	0x42470000
 80029f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	4b88      	ldr	r3, [pc, #544]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ea      	bne.n	80029d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8097 	beq.w	8002b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a12:	4b81      	ldr	r3, [pc, #516]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10f      	bne.n	8002a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	4b7d      	ldr	r3, [pc, #500]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	4a7c      	ldr	r2, [pc, #496]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	4b77      	ldr	r3, [pc, #476]	@ (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4a:	4b74      	ldr	r3, [pc, #464]	@ (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a73      	ldr	r2, [pc, #460]	@ (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fa47 	bl	8000ee8 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fe fa43 	bl	8000ee8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e10c      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b6a      	ldr	r3, [pc, #424]	@ (8002c1c <HAL_RCC_OscConfig+0x474>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x2ea>
 8002a84:	4b64      	ldr	r3, [pc, #400]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a63      	ldr	r2, [pc, #396]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a90:	e01c      	b.n	8002acc <HAL_RCC_OscConfig+0x324>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x30c>
 8002a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9e:	4a5e      	ldr	r2, [pc, #376]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	4a5b      	ldr	r2, [pc, #364]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0x324>
 8002ab4:	4b58      	ldr	r3, [pc, #352]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab8:	4a57      	ldr	r2, [pc, #348]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac0:	4b55      	ldr	r3, [pc, #340]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a54      	ldr	r2, [pc, #336]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f023 0304 	bic.w	r3, r3, #4
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d015      	beq.n	8002b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fa08 	bl	8000ee8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe fa04 	bl	8000ee8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0cb      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	4b49      	ldr	r3, [pc, #292]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ee      	beq.n	8002adc <HAL_RCC_OscConfig+0x334>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fe f9f2 	bl	8000ee8 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe f9ee 	bl	8000ee8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0b5      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1ee      	bne.n	8002b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	4a38      	ldr	r2, [pc, #224]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80a1 	beq.w	8002c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b46:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d05c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d141      	bne.n	8002bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5a:	4b31      	ldr	r3, [pc, #196]	@ (8002c20 <HAL_RCC_OscConfig+0x478>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe f9c2 	bl	8000ee8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe f9be 	bl	8000ee8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e087      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	4b27      	ldr	r3, [pc, #156]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	019b      	lsls	r3, r3, #6
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	491b      	ldr	r1, [pc, #108]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_RCC_OscConfig+0x478>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7fe f997 	bl	8000ee8 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe f993 	bl	8000ee8 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e05c      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd0:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002bdc:	e054      	b.n	8002c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <HAL_RCC_OscConfig+0x478>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe f980 	bl	8000ee8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe f97c 	bl	8000ee8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e045      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_RCC_OscConfig+0x470>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x444>
 8002c0a:	e03d      	b.n	8002c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e038      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <HAL_RCC_OscConfig+0x4ec>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d028      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d121      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d11a      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d111      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0cc      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b68      	ldr	r3, [pc, #416]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b65      	ldr	r3, [pc, #404]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4b59      	ldr	r3, [pc, #356]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d04:	4b53      	ldr	r3, [pc, #332]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a52      	ldr	r2, [pc, #328]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b50      	ldr	r3, [pc, #320]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	494d      	ldr	r1, [pc, #308]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d044      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b47      	ldr	r3, [pc, #284]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d119      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b3f      	ldr	r3, [pc, #252]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3b      	ldr	r3, [pc, #236]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e067      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4934      	ldr	r1, [pc, #208]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7fe f8ae 	bl	8000ee8 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe f8aa 	bl	8000ee8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b25      	ldr	r3, [pc, #148]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d20c      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e032      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4916      	ldr	r1, [pc, #88]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0a:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	490e      	ldr	r1, [pc, #56]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e1e:	f000 f821 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	490a      	ldr	r1, [pc, #40]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	5ccb      	ldrb	r3, [r1, r3]
 8002e32:	fa22 f303 	lsr.w	r3, r2, r3
 8002e36:	4a09      	ldr	r2, [pc, #36]	@ (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe f80e 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023c00 	.word	0x40023c00
 8002e54:	40023800 	.word	0x40023800
 8002e58:	0801145c 	.word	0x0801145c
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b094      	sub	sp, #80	@ 0x50
 8002e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7c:	4b79      	ldr	r3, [pc, #484]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d00d      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	f200 80e1 	bhi.w	8003050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x34>
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e96:	e0db      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b73      	ldr	r3, [pc, #460]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e9c:	e0db      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9e:	4b73      	ldr	r3, [pc, #460]	@ (800306c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea2:	e0d8      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eae:	4b6d      	ldr	r3, [pc, #436]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d063      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	4b6a      	ldr	r3, [pc, #424]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ec4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ece:	2300      	movs	r3, #0
 8002ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	0159      	lsls	r1, r3, #5
 8002ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee8:	0150      	lsls	r0, r2, #5
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4621      	mov	r1, r4
 8002ef0:	1a51      	subs	r1, r2, r1
 8002ef2:	6139      	str	r1, [r7, #16]
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f08:	4659      	mov	r1, fp
 8002f0a:	018b      	lsls	r3, r1, #6
 8002f0c:	4651      	mov	r1, sl
 8002f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f12:	4651      	mov	r1, sl
 8002f14:	018a      	lsls	r2, r1, #6
 8002f16:	4651      	mov	r1, sl
 8002f18:	ebb2 0801 	subs.w	r8, r2, r1
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f36:	4690      	mov	r8, r2
 8002f38:	4699      	mov	r9, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	eb18 0303 	adds.w	r3, r8, r3
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	462b      	mov	r3, r5
 8002f44:	eb49 0303 	adc.w	r3, r9, r3
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f56:	4629      	mov	r1, r5
 8002f58:	024b      	lsls	r3, r1, #9
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f60:	4621      	mov	r1, r4
 8002f62:	024a      	lsls	r2, r1, #9
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f74:	f7fd f98c 	bl	8000290 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f80:	e058      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f82:	4b38      	ldr	r3, [pc, #224]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	f04f 0000 	mov.w	r0, #0
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	0159      	lsls	r1, r3, #5
 8002faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fae:	0150      	lsls	r0, r2, #5
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fba:	4649      	mov	r1, r9
 8002fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	00eb      	lsls	r3, r5, #3
 8002fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fea:	00e2      	lsls	r2, r4, #3
 8002fec:	4614      	mov	r4, r2
 8002fee:	461d      	mov	r5, r3
 8002ff0:	4643      	mov	r3, r8
 8002ff2:	18e3      	adds	r3, r4, r3
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	eb45 0303 	adc.w	r3, r5, r3
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800300a:	4629      	mov	r1, r5
 800300c:	028b      	lsls	r3, r1, #10
 800300e:	4621      	mov	r1, r4
 8003010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003014:	4621      	mov	r1, r4
 8003016:	028a      	lsls	r2, r1, #10
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301e:	2200      	movs	r2, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	61fa      	str	r2, [r7, #28]
 8003024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003028:	f7fd f932 	bl	8000290 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800304e:	e002      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x204>)
 8003052:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003058:	4618      	mov	r0, r3
 800305a:	3750      	adds	r7, #80	@ 0x50
 800305c:	46bd      	mov	sp, r7
 800305e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	00f42400 	.word	0x00f42400
 800306c:	007a1200 	.word	0x007a1200

08003070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003074:	4b03      	ldr	r3, [pc, #12]	@ (8003084 <HAL_RCC_GetHCLKFreq+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000

08003088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800308c:	f7ff fff0 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0a9b      	lsrs	r3, r3, #10
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	@ (80030ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	0801146c 	.word	0x0801146c

080030b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030b4:	f7ff ffdc 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0b5b      	lsrs	r3, r3, #13
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	@ (80030d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	0801146c 	.word	0x0801146c

080030d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e042      	b.n	8003170 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd fc08 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	@ 0x24
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800311a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f82b 	bl	8003178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317c:	b0c0      	sub	sp, #256	@ 0x100
 800317e:	af00      	add	r7, sp, #0
 8003180:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	68d9      	ldr	r1, [r3, #12]
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	ea40 0301 	orr.w	r3, r0, r1
 80031a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031d0:	f021 010c 	bic.w	r1, r1, #12
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031de:	430b      	orrs	r3, r1
 80031e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f2:	6999      	ldr	r1, [r3, #24]
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	ea40 0301 	orr.w	r3, r0, r1
 80031fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b8f      	ldr	r3, [pc, #572]	@ (8003444 <UART_SetConfig+0x2cc>)
 8003208:	429a      	cmp	r2, r3
 800320a:	d005      	beq.n	8003218 <UART_SetConfig+0xa0>
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b8d      	ldr	r3, [pc, #564]	@ (8003448 <UART_SetConfig+0x2d0>)
 8003214:	429a      	cmp	r2, r3
 8003216:	d104      	bne.n	8003222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff ff4a 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 800321c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003220:	e003      	b.n	800322a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003222:	f7ff ff31 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8003226:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003234:	f040 810c 	bne.w	8003450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800323c:	2200      	movs	r2, #0
 800323e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003242:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800324a:	4622      	mov	r2, r4
 800324c:	462b      	mov	r3, r5
 800324e:	1891      	adds	r1, r2, r2
 8003250:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003252:	415b      	adcs	r3, r3
 8003254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800325a:	4621      	mov	r1, r4
 800325c:	eb12 0801 	adds.w	r8, r2, r1
 8003260:	4629      	mov	r1, r5
 8003262:	eb43 0901 	adc.w	r9, r3, r1
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800327a:	4690      	mov	r8, r2
 800327c:	4699      	mov	r9, r3
 800327e:	4623      	mov	r3, r4
 8003280:	eb18 0303 	adds.w	r3, r8, r3
 8003284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003288:	462b      	mov	r3, r5
 800328a:	eb49 0303 	adc.w	r3, r9, r3
 800328e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800329e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032a6:	460b      	mov	r3, r1
 80032a8:	18db      	adds	r3, r3, r3
 80032aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80032ac:	4613      	mov	r3, r2
 80032ae:	eb42 0303 	adc.w	r3, r2, r3
 80032b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80032b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032bc:	f7fc ffe8 	bl	8000290 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4b61      	ldr	r3, [pc, #388]	@ (800344c <UART_SetConfig+0x2d4>)
 80032c6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	011c      	lsls	r4, r3, #4
 80032ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032e8:	415b      	adcs	r3, r3
 80032ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032f0:	4641      	mov	r1, r8
 80032f2:	eb12 0a01 	adds.w	sl, r2, r1
 80032f6:	4649      	mov	r1, r9
 80032f8:	eb43 0b01 	adc.w	fp, r3, r1
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800330c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003310:	4692      	mov	sl, r2
 8003312:	469b      	mov	fp, r3
 8003314:	4643      	mov	r3, r8
 8003316:	eb1a 0303 	adds.w	r3, sl, r3
 800331a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800331e:	464b      	mov	r3, r9
 8003320:	eb4b 0303 	adc.w	r3, fp, r3
 8003324:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003334:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800333c:	460b      	mov	r3, r1
 800333e:	18db      	adds	r3, r3, r3
 8003340:	643b      	str	r3, [r7, #64]	@ 0x40
 8003342:	4613      	mov	r3, r2
 8003344:	eb42 0303 	adc.w	r3, r2, r3
 8003348:	647b      	str	r3, [r7, #68]	@ 0x44
 800334a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800334e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003352:	f7fc ff9d 	bl	8000290 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4611      	mov	r1, r2
 800335c:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <UART_SetConfig+0x2d4>)
 800335e:	fba3 2301 	umull	r2, r3, r3, r1
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2264      	movs	r2, #100	@ 0x64
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	1acb      	subs	r3, r1, r3
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003372:	4b36      	ldr	r3, [pc, #216]	@ (800344c <UART_SetConfig+0x2d4>)
 8003374:	fba3 2302 	umull	r2, r3, r3, r2
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003380:	441c      	add	r4, r3
 8003382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003386:	2200      	movs	r2, #0
 8003388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800338c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003394:	4642      	mov	r2, r8
 8003396:	464b      	mov	r3, r9
 8003398:	1891      	adds	r1, r2, r2
 800339a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800339c:	415b      	adcs	r3, r3
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033a4:	4641      	mov	r1, r8
 80033a6:	1851      	adds	r1, r2, r1
 80033a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80033aa:	4649      	mov	r1, r9
 80033ac:	414b      	adcs	r3, r1
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033bc:	4659      	mov	r1, fp
 80033be:	00cb      	lsls	r3, r1, #3
 80033c0:	4651      	mov	r1, sl
 80033c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c6:	4651      	mov	r1, sl
 80033c8:	00ca      	lsls	r2, r1, #3
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	4642      	mov	r2, r8
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033d8:	464b      	mov	r3, r9
 80033da:	460a      	mov	r2, r1
 80033dc:	eb42 0303 	adc.w	r3, r2, r3
 80033e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033f8:	460b      	mov	r3, r1
 80033fa:	18db      	adds	r3, r3, r3
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033fe:	4613      	mov	r3, r2
 8003400:	eb42 0303 	adc.w	r3, r2, r3
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800340a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800340e:	f7fc ff3f 	bl	8000290 <__aeabi_uldivmod>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <UART_SetConfig+0x2d4>)
 8003418:	fba3 1302 	umull	r1, r3, r3, r2
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	2164      	movs	r1, #100	@ 0x64
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	3332      	adds	r3, #50	@ 0x32
 800342a:	4a08      	ldr	r2, [pc, #32]	@ (800344c <UART_SetConfig+0x2d4>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	f003 0207 	and.w	r2, r3, #7
 8003436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4422      	add	r2, r4
 800343e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003440:	e106      	b.n	8003650 <UART_SetConfig+0x4d8>
 8003442:	bf00      	nop
 8003444:	40011000 	.word	0x40011000
 8003448:	40011400 	.word	0x40011400
 800344c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800345a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800345e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003462:	4642      	mov	r2, r8
 8003464:	464b      	mov	r3, r9
 8003466:	1891      	adds	r1, r2, r2
 8003468:	6239      	str	r1, [r7, #32]
 800346a:	415b      	adcs	r3, r3
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
 800346e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003472:	4641      	mov	r1, r8
 8003474:	1854      	adds	r4, r2, r1
 8003476:	4649      	mov	r1, r9
 8003478:	eb43 0501 	adc.w	r5, r3, r1
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	00eb      	lsls	r3, r5, #3
 8003486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348a:	00e2      	lsls	r2, r4, #3
 800348c:	4614      	mov	r4, r2
 800348e:	461d      	mov	r5, r3
 8003490:	4643      	mov	r3, r8
 8003492:	18e3      	adds	r3, r4, r3
 8003494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003498:	464b      	mov	r3, r9
 800349a:	eb45 0303 	adc.w	r3, r5, r3
 800349e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034be:	4629      	mov	r1, r5
 80034c0:	008b      	lsls	r3, r1, #2
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c8:	4621      	mov	r1, r4
 80034ca:	008a      	lsls	r2, r1, #2
 80034cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034d0:	f7fc fede 	bl	8000290 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4b60      	ldr	r3, [pc, #384]	@ (800365c <UART_SetConfig+0x4e4>)
 80034da:	fba3 2302 	umull	r2, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	011c      	lsls	r4, r3, #4
 80034e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034f4:	4642      	mov	r2, r8
 80034f6:	464b      	mov	r3, r9
 80034f8:	1891      	adds	r1, r2, r2
 80034fa:	61b9      	str	r1, [r7, #24]
 80034fc:	415b      	adcs	r3, r3
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003504:	4641      	mov	r1, r8
 8003506:	1851      	adds	r1, r2, r1
 8003508:	6139      	str	r1, [r7, #16]
 800350a:	4649      	mov	r1, r9
 800350c:	414b      	adcs	r3, r1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800351c:	4659      	mov	r1, fp
 800351e:	00cb      	lsls	r3, r1, #3
 8003520:	4651      	mov	r1, sl
 8003522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003526:	4651      	mov	r1, sl
 8003528:	00ca      	lsls	r2, r1, #3
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	4603      	mov	r3, r0
 8003530:	4642      	mov	r2, r8
 8003532:	189b      	adds	r3, r3, r2
 8003534:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003538:	464b      	mov	r3, r9
 800353a:	460a      	mov	r2, r1
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800354e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800355c:	4649      	mov	r1, r9
 800355e:	008b      	lsls	r3, r1, #2
 8003560:	4641      	mov	r1, r8
 8003562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003566:	4641      	mov	r1, r8
 8003568:	008a      	lsls	r2, r1, #2
 800356a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800356e:	f7fc fe8f 	bl	8000290 <__aeabi_uldivmod>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4611      	mov	r1, r2
 8003578:	4b38      	ldr	r3, [pc, #224]	@ (800365c <UART_SetConfig+0x4e4>)
 800357a:	fba3 2301 	umull	r2, r3, r3, r1
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2264      	movs	r2, #100	@ 0x64
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	1acb      	subs	r3, r1, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	@ 0x32
 800358c:	4a33      	ldr	r2, [pc, #204]	@ (800365c <UART_SetConfig+0x4e4>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003598:	441c      	add	r4, r3
 800359a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800359e:	2200      	movs	r2, #0
 80035a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80035a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80035a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	415b      	adcs	r3, r3
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035b8:	4641      	mov	r1, r8
 80035ba:	1851      	adds	r1, r2, r1
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	4649      	mov	r1, r9
 80035c0:	414b      	adcs	r3, r1
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035d0:	4659      	mov	r1, fp
 80035d2:	00cb      	lsls	r3, r1, #3
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035da:	4651      	mov	r1, sl
 80035dc:	00ca      	lsls	r2, r1, #3
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	4642      	mov	r2, r8
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ea:	464b      	mov	r3, r9
 80035ec:	460a      	mov	r2, r1
 80035ee:	eb42 0303 	adc.w	r3, r2, r3
 80035f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80035fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800360c:	4649      	mov	r1, r9
 800360e:	008b      	lsls	r3, r1, #2
 8003610:	4641      	mov	r1, r8
 8003612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003616:	4641      	mov	r1, r8
 8003618:	008a      	lsls	r2, r1, #2
 800361a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800361e:	f7fc fe37 	bl	8000290 <__aeabi_uldivmod>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <UART_SetConfig+0x4e4>)
 8003628:	fba3 1302 	umull	r1, r3, r3, r2
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	2164      	movs	r1, #100	@ 0x64
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	3332      	adds	r3, #50	@ 0x32
 800363a:	4a08      	ldr	r2, [pc, #32]	@ (800365c <UART_SetConfig+0x4e4>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	f003 020f 	and.w	r2, r3, #15
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4422      	add	r2, r4
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003656:	46bd      	mov	sp, r7
 8003658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365c:	51eb851f 	.word	0x51eb851f

08003660 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003666:	4b87      	ldr	r3, [pc, #540]	@ (8003884 <MX_LWIP_Init+0x224>)
 8003668:	22c0      	movs	r2, #192	@ 0xc0
 800366a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800366c:	4b85      	ldr	r3, [pc, #532]	@ (8003884 <MX_LWIP_Init+0x224>)
 800366e:	22a8      	movs	r2, #168	@ 0xa8
 8003670:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003672:	4b84      	ldr	r3, [pc, #528]	@ (8003884 <MX_LWIP_Init+0x224>)
 8003674:	2200      	movs	r2, #0
 8003676:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8003678:	4b82      	ldr	r3, [pc, #520]	@ (8003884 <MX_LWIP_Init+0x224>)
 800367a:	2214      	movs	r2, #20
 800367c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 800367e:	4b82      	ldr	r3, [pc, #520]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 8003684:	4b80      	ldr	r3, [pc, #512]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003686:	2200      	movs	r2, #0
 8003688:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800368a:	4b7f      	ldr	r3, [pc, #508]	@ (8003888 <MX_LWIP_Init+0x228>)
 800368c:	2200      	movs	r2, #0
 800368e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003690:	4b7d      	ldr	r3, [pc, #500]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003692:	2200      	movs	r2, #0
 8003694:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003696:	4b7d      	ldr	r3, [pc, #500]	@ (800388c <MX_LWIP_Init+0x22c>)
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800369c:	4b7b      	ldr	r3, [pc, #492]	@ (800388c <MX_LWIP_Init+0x22c>)
 800369e:	2200      	movs	r2, #0
 80036a0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80036a2:	4b7a      	ldr	r3, [pc, #488]	@ (800388c <MX_LWIP_Init+0x22c>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80036a8:	4b78      	ldr	r3, [pc, #480]	@ (800388c <MX_LWIP_Init+0x22c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80036ae:	f000 fcf2 	bl	8004096 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80036b2:	4b74      	ldr	r3, [pc, #464]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	061a      	lsls	r2, r3, #24
 80036b8:	4b72      	ldr	r3, [pc, #456]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	4b70      	ldr	r3, [pc, #448]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036c2:	789b      	ldrb	r3, [r3, #2]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	4313      	orrs	r3, r2
 80036c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036ca:	78d2      	ldrb	r2, [r2, #3]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	061a      	lsls	r2, r3, #24
 80036d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	0619      	lsls	r1, r3, #24
 80036d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	4319      	orrs	r1, r3
 80036de:	4b69      	ldr	r3, [pc, #420]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036e0:	789b      	ldrb	r3, [r3, #2]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	430b      	orrs	r3, r1
 80036e6:	4967      	ldr	r1, [pc, #412]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036e8:	78c9      	ldrb	r1, [r1, #3]
 80036ea:	430b      	orrs	r3, r1
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80036f2:	431a      	orrs	r2, r3
 80036f4:	4b63      	ldr	r3, [pc, #396]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	0619      	lsls	r1, r3, #24
 80036fa:	4b62      	ldr	r3, [pc, #392]	@ (8003884 <MX_LWIP_Init+0x224>)
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	4319      	orrs	r1, r3
 8003702:	4b60      	ldr	r3, [pc, #384]	@ (8003884 <MX_LWIP_Init+0x224>)
 8003704:	789b      	ldrb	r3, [r3, #2]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	430b      	orrs	r3, r1
 800370a:	495e      	ldr	r1, [pc, #376]	@ (8003884 <MX_LWIP_Init+0x224>)
 800370c:	78c9      	ldrb	r1, [r1, #3]
 800370e:	430b      	orrs	r3, r1
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003716:	431a      	orrs	r2, r3
 8003718:	4b5a      	ldr	r3, [pc, #360]	@ (8003884 <MX_LWIP_Init+0x224>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	0619      	lsls	r1, r3, #24
 800371e:	4b59      	ldr	r3, [pc, #356]	@ (8003884 <MX_LWIP_Init+0x224>)
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	4319      	orrs	r1, r3
 8003726:	4b57      	ldr	r3, [pc, #348]	@ (8003884 <MX_LWIP_Init+0x224>)
 8003728:	789b      	ldrb	r3, [r3, #2]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	430b      	orrs	r3, r1
 800372e:	4955      	ldr	r1, [pc, #340]	@ (8003884 <MX_LWIP_Init+0x224>)
 8003730:	78c9      	ldrb	r1, [r1, #3]
 8003732:	430b      	orrs	r3, r1
 8003734:	0e1b      	lsrs	r3, r3, #24
 8003736:	4313      	orrs	r3, r2
 8003738:	4a55      	ldr	r2, [pc, #340]	@ (8003890 <MX_LWIP_Init+0x230>)
 800373a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800373c:	4b52      	ldr	r3, [pc, #328]	@ (8003888 <MX_LWIP_Init+0x228>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	061a      	lsls	r2, r3, #24
 8003742:	4b51      	ldr	r3, [pc, #324]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	431a      	orrs	r2, r3
 800374a:	4b4f      	ldr	r3, [pc, #316]	@ (8003888 <MX_LWIP_Init+0x228>)
 800374c:	789b      	ldrb	r3, [r3, #2]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	4313      	orrs	r3, r2
 8003752:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003754:	78d2      	ldrb	r2, [r2, #3]
 8003756:	4313      	orrs	r3, r2
 8003758:	061a      	lsls	r2, r3, #24
 800375a:	4b4b      	ldr	r3, [pc, #300]	@ (8003888 <MX_LWIP_Init+0x228>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	0619      	lsls	r1, r3, #24
 8003760:	4b49      	ldr	r3, [pc, #292]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003762:	785b      	ldrb	r3, [r3, #1]
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	4319      	orrs	r1, r3
 8003768:	4b47      	ldr	r3, [pc, #284]	@ (8003888 <MX_LWIP_Init+0x228>)
 800376a:	789b      	ldrb	r3, [r3, #2]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	430b      	orrs	r3, r1
 8003770:	4945      	ldr	r1, [pc, #276]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003772:	78c9      	ldrb	r1, [r1, #3]
 8003774:	430b      	orrs	r3, r1
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800377c:	431a      	orrs	r2, r3
 800377e:	4b42      	ldr	r3, [pc, #264]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	0619      	lsls	r1, r3, #24
 8003784:	4b40      	ldr	r3, [pc, #256]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003786:	785b      	ldrb	r3, [r3, #1]
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	4319      	orrs	r1, r3
 800378c:	4b3e      	ldr	r3, [pc, #248]	@ (8003888 <MX_LWIP_Init+0x228>)
 800378e:	789b      	ldrb	r3, [r3, #2]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	430b      	orrs	r3, r1
 8003794:	493c      	ldr	r1, [pc, #240]	@ (8003888 <MX_LWIP_Init+0x228>)
 8003796:	78c9      	ldrb	r1, [r1, #3]
 8003798:	430b      	orrs	r3, r1
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80037a0:	431a      	orrs	r2, r3
 80037a2:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <MX_LWIP_Init+0x228>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	0619      	lsls	r1, r3, #24
 80037a8:	4b37      	ldr	r3, [pc, #220]	@ (8003888 <MX_LWIP_Init+0x228>)
 80037aa:	785b      	ldrb	r3, [r3, #1]
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	4319      	orrs	r1, r3
 80037b0:	4b35      	ldr	r3, [pc, #212]	@ (8003888 <MX_LWIP_Init+0x228>)
 80037b2:	789b      	ldrb	r3, [r3, #2]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	430b      	orrs	r3, r1
 80037b8:	4933      	ldr	r1, [pc, #204]	@ (8003888 <MX_LWIP_Init+0x228>)
 80037ba:	78c9      	ldrb	r1, [r1, #3]
 80037bc:	430b      	orrs	r3, r1
 80037be:	0e1b      	lsrs	r3, r3, #24
 80037c0:	4313      	orrs	r3, r2
 80037c2:	4a34      	ldr	r2, [pc, #208]	@ (8003894 <MX_LWIP_Init+0x234>)
 80037c4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80037c6:	4b31      	ldr	r3, [pc, #196]	@ (800388c <MX_LWIP_Init+0x22c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	061a      	lsls	r2, r3, #24
 80037cc:	4b2f      	ldr	r3, [pc, #188]	@ (800388c <MX_LWIP_Init+0x22c>)
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	431a      	orrs	r2, r3
 80037d4:	4b2d      	ldr	r3, [pc, #180]	@ (800388c <MX_LWIP_Init+0x22c>)
 80037d6:	789b      	ldrb	r3, [r3, #2]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	4313      	orrs	r3, r2
 80037dc:	4a2b      	ldr	r2, [pc, #172]	@ (800388c <MX_LWIP_Init+0x22c>)
 80037de:	78d2      	ldrb	r2, [r2, #3]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	061a      	lsls	r2, r3, #24
 80037e4:	4b29      	ldr	r3, [pc, #164]	@ (800388c <MX_LWIP_Init+0x22c>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	0619      	lsls	r1, r3, #24
 80037ea:	4b28      	ldr	r3, [pc, #160]	@ (800388c <MX_LWIP_Init+0x22c>)
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	4319      	orrs	r1, r3
 80037f2:	4b26      	ldr	r3, [pc, #152]	@ (800388c <MX_LWIP_Init+0x22c>)
 80037f4:	789b      	ldrb	r3, [r3, #2]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	430b      	orrs	r3, r1
 80037fa:	4924      	ldr	r1, [pc, #144]	@ (800388c <MX_LWIP_Init+0x22c>)
 80037fc:	78c9      	ldrb	r1, [r1, #3]
 80037fe:	430b      	orrs	r3, r1
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003806:	431a      	orrs	r2, r3
 8003808:	4b20      	ldr	r3, [pc, #128]	@ (800388c <MX_LWIP_Init+0x22c>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	0619      	lsls	r1, r3, #24
 800380e:	4b1f      	ldr	r3, [pc, #124]	@ (800388c <MX_LWIP_Init+0x22c>)
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	4319      	orrs	r1, r3
 8003816:	4b1d      	ldr	r3, [pc, #116]	@ (800388c <MX_LWIP_Init+0x22c>)
 8003818:	789b      	ldrb	r3, [r3, #2]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	430b      	orrs	r3, r1
 800381e:	491b      	ldr	r1, [pc, #108]	@ (800388c <MX_LWIP_Init+0x22c>)
 8003820:	78c9      	ldrb	r1, [r1, #3]
 8003822:	430b      	orrs	r3, r1
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800382a:	431a      	orrs	r2, r3
 800382c:	4b17      	ldr	r3, [pc, #92]	@ (800388c <MX_LWIP_Init+0x22c>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	0619      	lsls	r1, r3, #24
 8003832:	4b16      	ldr	r3, [pc, #88]	@ (800388c <MX_LWIP_Init+0x22c>)
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	4319      	orrs	r1, r3
 800383a:	4b14      	ldr	r3, [pc, #80]	@ (800388c <MX_LWIP_Init+0x22c>)
 800383c:	789b      	ldrb	r3, [r3, #2]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	430b      	orrs	r3, r1
 8003842:	4912      	ldr	r1, [pc, #72]	@ (800388c <MX_LWIP_Init+0x22c>)
 8003844:	78c9      	ldrb	r1, [r1, #3]
 8003846:	430b      	orrs	r3, r1
 8003848:	0e1b      	lsrs	r3, r3, #24
 800384a:	4313      	orrs	r3, r2
 800384c:	4a12      	ldr	r2, [pc, #72]	@ (8003898 <MX_LWIP_Init+0x238>)
 800384e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003850:	4b12      	ldr	r3, [pc, #72]	@ (800389c <MX_LWIP_Init+0x23c>)
 8003852:	9302      	str	r3, [sp, #8]
 8003854:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <MX_LWIP_Init+0x240>)
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	2300      	movs	r3, #0
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <MX_LWIP_Init+0x238>)
 800385e:	4a0d      	ldr	r2, [pc, #52]	@ (8003894 <MX_LWIP_Init+0x234>)
 8003860:	490b      	ldr	r1, [pc, #44]	@ (8003890 <MX_LWIP_Init+0x230>)
 8003862:	4810      	ldr	r0, [pc, #64]	@ (80038a4 <MX_LWIP_Init+0x244>)
 8003864:	f001 f902 	bl	8004a6c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003868:	480e      	ldr	r0, [pc, #56]	@ (80038a4 <MX_LWIP_Init+0x244>)
 800386a:	f001 fab1 	bl	8004dd0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800386e:	480d      	ldr	r0, [pc, #52]	@ (80038a4 <MX_LWIP_Init+0x244>)
 8003870:	f001 fabe 	bl	8004df0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003874:	490c      	ldr	r1, [pc, #48]	@ (80038a8 <MX_LWIP_Init+0x248>)
 8003876:	480b      	ldr	r0, [pc, #44]	@ (80038a4 <MX_LWIP_Init+0x244>)
 8003878:	f001 fbbc 	bl	8004ff4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000134 	.word	0x20000134
 8003888:	20000138 	.word	0x20000138
 800388c:	2000013c 	.word	0x2000013c
 8003890:	20000128 	.word	0x20000128
 8003894:	2000012c 	.word	0x2000012c
 8003898:	20000130 	.word	0x20000130
 800389c:	0800d8a9 	.word	0x0800d8a9
 80038a0:	08003b79 	.word	0x08003b79
 80038a4:	200000f4 	.word	0x200000f4
 80038a8:	080038ad 	.word	0x080038ad

080038ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80038cc:	4b44      	ldr	r3, [pc, #272]	@ (80039e0 <low_level_init+0x120>)
 80038ce:	4a45      	ldr	r2, [pc, #276]	@ (80039e4 <low_level_init+0x124>)
 80038d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80038d2:	2300      	movs	r3, #0
 80038d4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80038da:	23e1      	movs	r3, #225	@ 0xe1
 80038dc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80038de:	2300      	movs	r3, #0
 80038e0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80038e2:	2300      	movs	r3, #0
 80038e4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80038e6:	2300      	movs	r3, #0
 80038e8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80038ea:	4a3d      	ldr	r2, [pc, #244]	@ (80039e0 <low_level_init+0x120>)
 80038ec:	f107 0308 	add.w	r3, r7, #8
 80038f0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80038f2:	4b3b      	ldr	r3, [pc, #236]	@ (80039e0 <low_level_init+0x120>)
 80038f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038f8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80038fa:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <low_level_init+0x120>)
 80038fc:	4a3a      	ldr	r2, [pc, #232]	@ (80039e8 <low_level_init+0x128>)
 80038fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003900:	4b37      	ldr	r3, [pc, #220]	@ (80039e0 <low_level_init+0x120>)
 8003902:	4a3a      	ldr	r2, [pc, #232]	@ (80039ec <low_level_init+0x12c>)
 8003904:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003906:	4b36      	ldr	r3, [pc, #216]	@ (80039e0 <low_level_init+0x120>)
 8003908:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800390c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800390e:	4834      	ldr	r0, [pc, #208]	@ (80039e0 <low_level_init+0x120>)
 8003910:	f7fd fc00 	bl	8001114 <HAL_ETH_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003918:	2238      	movs	r2, #56	@ 0x38
 800391a:	2100      	movs	r1, #0
 800391c:	4834      	ldr	r0, [pc, #208]	@ (80039f0 <low_level_init+0x130>)
 800391e:	f00a f9fe 	bl	800dd1e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003922:	4b33      	ldr	r3, [pc, #204]	@ (80039f0 <low_level_init+0x130>)
 8003924:	2221      	movs	r2, #33	@ 0x21
 8003926:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003928:	4b31      	ldr	r3, [pc, #196]	@ (80039f0 <low_level_init+0x130>)
 800392a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800392e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003930:	4b2f      	ldr	r3, [pc, #188]	@ (80039f0 <low_level_init+0x130>)
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003936:	482f      	ldr	r0, [pc, #188]	@ (80039f4 <low_level_init+0x134>)
 8003938:	f000 ff60 	bl	80047fc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2206      	movs	r2, #6
 8003940:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003944:	4b26      	ldr	r3, [pc, #152]	@ (80039e0 <low_level_init+0x120>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003950:	4b23      	ldr	r3, [pc, #140]	@ (80039e0 <low_level_init+0x120>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	785a      	ldrb	r2, [r3, #1]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800395c:	4b20      	ldr	r3, [pc, #128]	@ (80039e0 <low_level_init+0x120>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	789a      	ldrb	r2, [r3, #2]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003968:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <low_level_init+0x120>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	78da      	ldrb	r2, [r3, #3]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003974:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <low_level_init+0x120>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	791a      	ldrb	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003980:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <low_level_init+0x120>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	795a      	ldrb	r2, [r3, #5]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003992:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800399a:	f043 030a 	orr.w	r3, r3, #10
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80039a6:	4914      	ldr	r1, [pc, #80]	@ (80039f8 <low_level_init+0x138>)
 80039a8:	4814      	ldr	r0, [pc, #80]	@ (80039fc <low_level_init+0x13c>)
 80039aa:	f7fd f930 	bl	8000c0e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80039ae:	4813      	ldr	r0, [pc, #76]	@ (80039fc <low_level_init+0x13c>)
 80039b0:	f7fd f95f 	bl	8000c72 <LAN8742_Init>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f001 faea 	bl	8004f94 <netif_set_link_down>
    netif_set_down(netif);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f001 fa81 	bl	8004ec8 <netif_set_down>
 80039c6:	e008      	b.n	80039da <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa36 	bl	8003e40 <ethernet_link_check_state>
 80039d4:	e001      	b.n	80039da <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80039d6:	f7fc ff6f 	bl	80008b8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20004c0c 	.word	0x20004c0c
 80039e4:	40028000 	.word	0x40028000
 80039e8:	20004b6c 	.word	0x20004b6c
 80039ec:	20004acc 	.word	0x20004acc
 80039f0:	20004cbc 	.word	0x20004cbc
 80039f4:	08011474 	.word	0x08011474
 80039f8:	2000000c 	.word	0x2000000c
 80039fc:	20004cf4 	.word	0x20004cf4

08003a00 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b092      	sub	sp, #72	@ 0x48
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003a18:	f107 030c 	add.w	r3, r7, #12
 8003a1c:	2230      	movs	r2, #48	@ 0x30
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f00a f97c 	bl	800dd1e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	2230      	movs	r2, #48	@ 0x30
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f00a f975 	bl	800dd1e <memset>

  for(q = p; q != NULL; q = q->next)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a38:	e045      	b.n	8003ac6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d902      	bls.n	8003a46 <low_level_output+0x46>
      return ERR_IF;
 8003a40:	f06f 030b 	mvn.w	r3, #11
 8003a44:	e055      	b.n	8003af2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	3348      	adds	r3, #72	@ 0x48
 8003a56:	443b      	add	r3, r7
 8003a58:	3b3c      	subs	r3, #60	@ 0x3c
 8003a5a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5e:	895b      	ldrh	r3, [r3, #10]
 8003a60:	4619      	mov	r1, r3
 8003a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	3348      	adds	r3, #72	@ 0x48
 8003a6e:	443b      	add	r3, r7
 8003a70:	3b38      	subs	r3, #56	@ 0x38
 8003a72:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d011      	beq.n	8003a9e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	f107 000c 	add.w	r0, r7, #12
 8003a82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003a84:	460b      	mov	r3, r1
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	440b      	add	r3, r1
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	18c1      	adds	r1, r0, r3
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	3348      	adds	r3, #72	@ 0x48
 8003a98:	443b      	add	r3, r7
 8003a9a:	3b34      	subs	r3, #52	@ 0x34
 8003a9c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	3348      	adds	r3, #72	@ 0x48
 8003ab2:	443b      	add	r3, r7
 8003ab4:	3b34      	subs	r3, #52	@ 0x34
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003abc:	3301      	adds	r3, #1
 8003abe:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1b6      	bne.n	8003a3a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	891b      	ldrh	r3, [r3, #8]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <low_level_output+0xfc>)
 8003ad4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003ad6:	4a09      	ldr	r2, [pc, #36]	@ (8003afc <low_level_output+0xfc>)
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003ade:	4a07      	ldr	r2, [pc, #28]	@ (8003afc <low_level_output+0xfc>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003ae4:	2214      	movs	r2, #20
 8003ae6:	4905      	ldr	r1, [pc, #20]	@ (8003afc <low_level_output+0xfc>)
 8003ae8:	4805      	ldr	r0, [pc, #20]	@ (8003b00 <low_level_output+0x100>)
 8003aea:	f7fd fc67 	bl	80013bc <HAL_ETH_Transmit>

  return errval;
 8003aee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3748      	adds	r7, #72	@ 0x48
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20004cbc 	.word	0x20004cbc
 8003b00:	20004c0c 	.word	0x20004c0c

08003b04 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003b10:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <low_level_input+0x2c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d105      	bne.n	8003b24 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4805      	ldr	r0, [pc, #20]	@ (8003b34 <low_level_input+0x30>)
 8003b20:	f7fd fce0 	bl	80014e4 <HAL_ETH_ReadData>
  }

  return p;
 8003b24:	68fb      	ldr	r3, [r7, #12]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20004ac8 	.word	0x20004ac8
 8003b34:	20004c0c 	.word	0x20004c0c

08003b38 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ffdd 	bl	8003b04 <low_level_input>
 8003b4a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	4798      	blx	r3
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f001 fdc6 	bl	80056f4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ea      	bne.n	8003b44 <ethernetif_input+0xc>
}
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <ethernetif_init+0x1c>
 8003b86:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc0 <ethernetif_init+0x48>)
 8003b88:	f240 126f 	movw	r2, #367	@ 0x16f
 8003b8c:	490d      	ldr	r1, [pc, #52]	@ (8003bc4 <ethernetif_init+0x4c>)
 8003b8e:	480e      	ldr	r0, [pc, #56]	@ (8003bc8 <ethernetif_init+0x50>)
 8003b90:	f00a f860 	bl	800dc54 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2273      	movs	r2, #115	@ 0x73
 8003b98:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2274      	movs	r2, #116	@ 0x74
 8003ba0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a09      	ldr	r2, [pc, #36]	@ (8003bcc <ethernetif_init+0x54>)
 8003ba8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a08      	ldr	r2, [pc, #32]	@ (8003bd0 <ethernetif_init+0x58>)
 8003bae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fe85 	bl	80038c0 <low_level_init>

  return ERR_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	0800ea7c 	.word	0x0800ea7c
 8003bc4:	0800ea98 	.word	0x0800ea98
 8003bc8:	0800eaa8 	.word	0x0800eaa8
 8003bcc:	0800bd61 	.word	0x0800bd61
 8003bd0:	08003a01 	.word	0x08003a01

08003bd4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	4807      	ldr	r0, [pc, #28]	@ (8003c00 <pbuf_free_custom+0x2c>)
 8003be4:	f000 feec 	bl	80049c0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003be8:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <pbuf_free_custom+0x30>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d102      	bne.n	8003bf6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <pbuf_free_custom+0x30>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	08011474 	.word	0x08011474
 8003c04:	20004ac8 	.word	0x20004ac8

08003c08 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003c0c:	f7fd f96c 	bl	8000ee8 <HAL_GetTick>
 8003c10:	4603      	mov	r3, r0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08e      	sub	sp, #56	@ 0x38
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a55      	ldr	r2, [pc, #340]	@ (8003d8c <HAL_ETH_MspInit+0x174>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	f040 80a4 	bne.w	8003d84 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	4b53      	ldr	r3, [pc, #332]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	4a52      	ldr	r2, [pc, #328]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4c:	4b50      	ldr	r3, [pc, #320]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	4a4b      	ldr	r2, [pc, #300]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c68:	4b49      	ldr	r3, [pc, #292]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	4b45      	ldr	r3, [pc, #276]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	4a44      	ldr	r2, [pc, #272]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c84:	4b42      	ldr	r3, [pc, #264]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	4b3e      	ldr	r3, [pc, #248]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	4a3d      	ldr	r2, [pc, #244]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	4b37      	ldr	r3, [pc, #220]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	4a36      	ldr	r2, [pc, #216]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cbc:	4b34      	ldr	r3, [pc, #208]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	4b30      	ldr	r3, [pc, #192]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003cd2:	f043 0302 	orr.w	r3, r3, #2
 8003cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	4b29      	ldr	r3, [pc, #164]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	4a28      	ldr	r2, [pc, #160]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cf4:	4b26      	ldr	r3, [pc, #152]	@ (8003d90 <HAL_ETH_MspInit+0x178>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003d00:	2332      	movs	r3, #50	@ 0x32
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d04:	2302      	movs	r3, #2
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d10:	230b      	movs	r3, #11
 8003d12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d18:	4619      	mov	r1, r3
 8003d1a:	481e      	ldr	r0, [pc, #120]	@ (8003d94 <HAL_ETH_MspInit+0x17c>)
 8003d1c:	f7fe fb2e 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003d20:	2386      	movs	r3, #134	@ 0x86
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d24:	2302      	movs	r3, #2
 8003d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d30:	230b      	movs	r3, #11
 8003d32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4817      	ldr	r0, [pc, #92]	@ (8003d98 <HAL_ETH_MspInit+0x180>)
 8003d3c:	f7fe fb1e 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003d40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d46:	2302      	movs	r3, #2
 8003d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d52:	230b      	movs	r3, #11
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	480f      	ldr	r0, [pc, #60]	@ (8003d9c <HAL_ETH_MspInit+0x184>)
 8003d5e:	f7fe fb0d 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003d62:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d70:	2303      	movs	r3, #3
 8003d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d74:	230b      	movs	r3, #11
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4808      	ldr	r0, [pc, #32]	@ (8003da0 <HAL_ETH_MspInit+0x188>)
 8003d80:	f7fe fafc 	bl	800237c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003d84:	bf00      	nop
 8003d86:	3738      	adds	r7, #56	@ 0x38
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40028000 	.word	0x40028000
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40020800 	.word	0x40020800
 8003d98:	40020000 	.word	0x40020000
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	40021800 	.word	0x40021800

08003da4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003da8:	4802      	ldr	r0, [pc, #8]	@ (8003db4 <ETH_PHY_IO_Init+0x10>)
 8003daa:	f7fd fe83 	bl	8001ab4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20004c0c 	.word	0x20004c0c

08003db8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return 0;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	68f9      	ldr	r1, [r7, #12]
 8003dda:	4807      	ldr	r0, [pc, #28]	@ (8003df8 <ETH_PHY_IO_ReadReg+0x30>)
 8003ddc:	f7fd fcc5 	bl	800176a <HAL_ETH_ReadPHYRegister>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dea:	e000      	b.n	8003dee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20004c0c 	.word	0x20004c0c

08003dfc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	68f9      	ldr	r1, [r7, #12]
 8003e0e:	4807      	ldr	r0, [pc, #28]	@ (8003e2c <ETH_PHY_IO_WriteReg+0x30>)
 8003e10:	f7fd fcf6 	bl	8001800 <HAL_ETH_WritePHYRegister>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1e:	e000      	b.n	8003e22 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20004c0c 	.word	0x20004c0c

08003e30 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003e34:	f7fd f858 	bl	8000ee8 <HAL_GetTick>
 8003e38:	4603      	mov	r3, r0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b0a0      	sub	sp, #128	@ 0x80
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003e48:	f107 030c 	add.w	r3, r7, #12
 8003e4c:	2264      	movs	r2, #100	@ 0x64
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f009 ff64 	bl	800dd1e <memset>
  int32_t PHYLinkState = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e5e:	2300      	movs	r3, #0
 8003e60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e62:	2300      	movs	r3, #0
 8003e64:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003e66:	483a      	ldr	r0, [pc, #232]	@ (8003f50 <ethernet_link_check_state+0x110>)
 8003e68:	f7fc ff50 	bl	8000d0c <LAN8742_GetLinkState>
 8003e6c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <ethernet_link_check_state+0x5a>
 8003e80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	dc09      	bgt.n	8003e9a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003e86:	4833      	ldr	r0, [pc, #204]	@ (8003f54 <ethernet_link_check_state+0x114>)
 8003e88:	f7fd fa3f 	bl	800130a <HAL_ETH_Stop>
    netif_set_down(netif);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f001 f81b 	bl	8004ec8 <netif_set_down>
    netif_set_link_down(netif);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f001 f87e 	bl	8004f94 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003e98:	e055      	b.n	8003f46 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d14e      	bne.n	8003f46 <ethernet_link_check_state+0x106>
 8003ea8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	dd4b      	ble.n	8003f46 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eb0:	3b02      	subs	r3, #2
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d82a      	bhi.n	8003f0c <ethernet_link_check_state+0xcc>
 8003eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ebc <ethernet_link_check_state+0x7c>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ecd 	.word	0x08003ecd
 8003ec0:	08003edf 	.word	0x08003edf
 8003ec4:	08003eef 	.word	0x08003eef
 8003ec8:	08003eff 	.word	0x08003eff
      duplex = ETH_FULLDUPLEX_MODE;
 8003ecc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ed0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003ed2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ed6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003edc:	e017      	b.n	8003f0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003ee2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ee6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003eec:	e00f      	b.n	8003f0e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003eee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ef2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003efc:	e007      	b.n	8003f0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003f02:	2300      	movs	r3, #0
 8003f04:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003f0a:	e000      	b.n	8003f0e <ethernet_link_check_state+0xce>
      break;
 8003f0c:	bf00      	nop
    if(linkchanged)
 8003f0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d018      	beq.n	8003f46 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	4619      	mov	r1, r3
 8003f1a:	480e      	ldr	r0, [pc, #56]	@ (8003f54 <ethernet_link_check_state+0x114>)
 8003f1c:	f7fd fcb9 	bl	8001892 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8003f24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f26:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003f28:	f107 030c 	add.w	r3, r7, #12
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4809      	ldr	r0, [pc, #36]	@ (8003f54 <ethernet_link_check_state+0x114>)
 8003f30:	f7fd fda6 	bl	8001a80 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003f34:	4807      	ldr	r0, [pc, #28]	@ (8003f54 <ethernet_link_check_state+0x114>)
 8003f36:	f7fd f989 	bl	800124c <HAL_ETH_Start>
      netif_set_up(netif);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 ff58 	bl	8004df0 <netif_set_up>
      netif_set_link_up(netif);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fff3 	bl	8004f2c <netif_set_link_up>
}
 8003f46:	bf00      	nop
 8003f48:	3780      	adds	r7, #128	@ 0x80
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20004cf4 	.word	0x20004cf4
 8003f54:	20004c0c 	.word	0x20004c0c

08003f58 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003f60:	4812      	ldr	r0, [pc, #72]	@ (8003fac <HAL_ETH_RxAllocateCallback+0x54>)
 8003f62:	f000 fcbf 	bl	80048e4 <memp_malloc_pool>
 8003f66:	60f8      	str	r0, [r7, #12]
  if (p)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d014      	beq.n	8003f98 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f103 0220 	add.w	r2, r3, #32
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb0 <HAL_ETH_RxAllocateCallback+0x58>)
 8003f7c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003f86:	9201      	str	r2, [sp, #4]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2241      	movs	r2, #65	@ 0x41
 8003f8e:	2100      	movs	r1, #0
 8003f90:	2000      	movs	r0, #0
 8003f92:	f001 f9f5 	bl	8005380 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003f96:	e005      	b.n	8003fa4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003f98:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	08011474 	.word	0x08011474
 8003fb0:	08003bd5 	.word	0x08003bd5
 8003fb4:	20004ac8 	.word	0x20004ac8

08003fb8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	@ 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3b20      	subs	r3, #32
 8003fd6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e003      	b.n	8004002 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e009      	b.n	8004024 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	891a      	ldrh	r2, [r3, #8]
 8004014:	887b      	ldrh	r3, [r7, #2]
 8004016:	4413      	add	r3, r2
 8004018:	b29a      	uxth	r2, r3
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f2      	bne.n	8004010 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	3724      	adds	r7, #36	@ 0x24
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	b21a      	sxth	r2, r3
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	b29b      	uxth	r3, r3
 8004050:	b21b      	sxth	r3, r3
 8004052:	4313      	orrs	r3, r2
 8004054:	b21b      	sxth	r3, r3
 8004056:	b29b      	uxth	r3, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	061a      	lsls	r2, r3, #24
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0e1b      	lsrs	r3, r3, #24
 8004088:	4313      	orrs	r3, r2
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80040a0:	f000 f8d4 	bl	800424c <mem_init>
  memp_init();
 80040a4:	f000 fbda 	bl	800485c <memp_init>
  pbuf_init();
  netif_init();
 80040a8:	f000 fcd8 	bl	8004a5c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80040ac:	f007 f852 	bl	800b154 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80040b0:	f001 fdae 	bl	8005c10 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80040b4:	f006 ffc4 	bl	800b040 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80040ca:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <ptr_to_mem+0x20>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	4413      	add	r3, r2
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20005380 	.word	0x20005380

080040e4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <mem_to_ptr+0x20>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	b29b      	uxth	r3, r3
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20005380 	.word	0x20005380

08004108 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004110:	4b45      	ldr	r3, [pc, #276]	@ (8004228 <plug_holes+0x120>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d206      	bcs.n	8004128 <plug_holes+0x20>
 800411a:	4b44      	ldr	r3, [pc, #272]	@ (800422c <plug_holes+0x124>)
 800411c:	f240 12df 	movw	r2, #479	@ 0x1df
 8004120:	4943      	ldr	r1, [pc, #268]	@ (8004230 <plug_holes+0x128>)
 8004122:	4844      	ldr	r0, [pc, #272]	@ (8004234 <plug_holes+0x12c>)
 8004124:	f009 fd96 	bl	800dc54 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004128:	4b43      	ldr	r3, [pc, #268]	@ (8004238 <plug_holes+0x130>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d306      	bcc.n	8004140 <plug_holes+0x38>
 8004132:	4b3e      	ldr	r3, [pc, #248]	@ (800422c <plug_holes+0x124>)
 8004134:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004138:	4940      	ldr	r1, [pc, #256]	@ (800423c <plug_holes+0x134>)
 800413a:	483e      	ldr	r0, [pc, #248]	@ (8004234 <plug_holes+0x12c>)
 800413c:	f009 fd8a 	bl	800dc54 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	791b      	ldrb	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <plug_holes+0x4e>
 8004148:	4b38      	ldr	r3, [pc, #224]	@ (800422c <plug_holes+0x124>)
 800414a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800414e:	493c      	ldr	r1, [pc, #240]	@ (8004240 <plug_holes+0x138>)
 8004150:	4838      	ldr	r0, [pc, #224]	@ (8004234 <plug_holes+0x12c>)
 8004152:	f009 fd7f 	bl	800dc54 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800415e:	d906      	bls.n	800416e <plug_holes+0x66>
 8004160:	4b32      	ldr	r3, [pc, #200]	@ (800422c <plug_holes+0x124>)
 8004162:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8004166:	4937      	ldr	r1, [pc, #220]	@ (8004244 <plug_holes+0x13c>)
 8004168:	4832      	ldr	r0, [pc, #200]	@ (8004234 <plug_holes+0x12c>)
 800416a:	f009 fd73 	bl	800dc54 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ffa4 	bl	80040c0 <ptr_to_mem>
 8004178:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	429a      	cmp	r2, r3
 8004180:	d024      	beq.n	80041cc <plug_holes+0xc4>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	791b      	ldrb	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d120      	bne.n	80041cc <plug_holes+0xc4>
 800418a:	4b2b      	ldr	r3, [pc, #172]	@ (8004238 <plug_holes+0x130>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d01b      	beq.n	80041cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004194:	4b2c      	ldr	r3, [pc, #176]	@ (8004248 <plug_holes+0x140>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	429a      	cmp	r2, r3
 800419c:	d102      	bne.n	80041a4 <plug_holes+0x9c>
      lfree = mem;
 800419e:	4a2a      	ldr	r2, [pc, #168]	@ (8004248 <plug_holes+0x140>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80041b4:	d00a      	beq.n	80041cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ff80 	bl	80040c0 <ptr_to_mem>
 80041c0:	4604      	mov	r4, r0
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff8e 	bl	80040e4 <mem_to_ptr>
 80041c8:	4603      	mov	r3, r0
 80041ca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	885b      	ldrh	r3, [r3, #2]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff75 	bl	80040c0 <ptr_to_mem>
 80041d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d01f      	beq.n	8004220 <plug_holes+0x118>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d11b      	bne.n	8004220 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80041e8:	4b17      	ldr	r3, [pc, #92]	@ (8004248 <plug_holes+0x140>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d102      	bne.n	80041f8 <plug_holes+0xf0>
      lfree = pmem;
 80041f2:	4a15      	ldr	r2, [pc, #84]	@ (8004248 <plug_holes+0x140>)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	881a      	ldrh	r2, [r3, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004208:	d00a      	beq.n	8004220 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff56 	bl	80040c0 <ptr_to_mem>
 8004214:	4604      	mov	r4, r0
 8004216:	68b8      	ldr	r0, [r7, #8]
 8004218:	f7ff ff64 	bl	80040e4 <mem_to_ptr>
 800421c:	4603      	mov	r3, r0
 800421e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bd90      	pop	{r4, r7, pc}
 8004228:	20005380 	.word	0x20005380
 800422c:	0800ead0 	.word	0x0800ead0
 8004230:	0800eb00 	.word	0x0800eb00
 8004234:	0800eb18 	.word	0x0800eb18
 8004238:	20005384 	.word	0x20005384
 800423c:	0800eb40 	.word	0x0800eb40
 8004240:	0800eb5c 	.word	0x0800eb5c
 8004244:	0800eb78 	.word	0x0800eb78
 8004248:	20005388 	.word	0x20005388

0800424c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004252:	4b18      	ldr	r3, [pc, #96]	@ (80042b4 <mem_init+0x68>)
 8004254:	3303      	adds	r3, #3
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	461a      	mov	r2, r3
 800425c:	4b16      	ldr	r3, [pc, #88]	@ (80042b8 <mem_init+0x6c>)
 800425e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004260:	4b15      	ldr	r3, [pc, #84]	@ (80042b8 <mem_init+0x6c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800426c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800427a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800427e:	f7ff ff1f 	bl	80040c0 <ptr_to_mem>
 8004282:	4603      	mov	r3, r0
 8004284:	4a0d      	ldr	r2, [pc, #52]	@ (80042bc <mem_init+0x70>)
 8004286:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004288:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <mem_init+0x70>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2201      	movs	r2, #1
 800428e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004290:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <mem_init+0x70>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004298:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800429a:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <mem_init+0x70>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80042a2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <mem_init+0x6c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a05      	ldr	r2, [pc, #20]	@ (80042c0 <mem_init+0x74>)
 80042aa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20004d2c 	.word	0x20004d2c
 80042b8:	20005380 	.word	0x20005380
 80042bc:	20005384 	.word	0x20005384
 80042c0:	20005388 	.word	0x20005388

080042c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff ff09 	bl	80040e4 <mem_to_ptr>
 80042d2:	4603      	mov	r3, r0
 80042d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fef0 	bl	80040c0 <ptr_to_mem>
 80042e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	885b      	ldrh	r3, [r3, #2]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff feea 	bl	80040c0 <ptr_to_mem>
 80042ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80042f6:	d818      	bhi.n	800432a <mem_link_valid+0x66>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	885b      	ldrh	r3, [r3, #2]
 80042fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004300:	d813      	bhi.n	800432a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004306:	8afa      	ldrh	r2, [r7, #22]
 8004308:	429a      	cmp	r2, r3
 800430a:	d004      	beq.n	8004316 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	8afa      	ldrh	r2, [r7, #22]
 8004312:	429a      	cmp	r2, r3
 8004314:	d109      	bne.n	800432a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004316:	4b08      	ldr	r3, [pc, #32]	@ (8004338 <mem_link_valid+0x74>)
 8004318:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	429a      	cmp	r2, r3
 800431e:	d006      	beq.n	800432e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	885b      	ldrh	r3, [r3, #2]
 8004324:	8afa      	ldrh	r2, [r7, #22]
 8004326:	429a      	cmp	r2, r3
 8004328:	d001      	beq.n	800432e <mem_link_valid+0x6a>
    return 0;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <mem_link_valid+0x6c>
  }
  return 1;
 800432e:	2301      	movs	r3, #1
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20005384 	.word	0x20005384

0800433c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d04c      	beq.n	80043e4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004354:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <mem_free+0xb0>)
 8004356:	f240 2273 	movw	r2, #627	@ 0x273
 800435a:	4925      	ldr	r1, [pc, #148]	@ (80043f0 <mem_free+0xb4>)
 800435c:	4825      	ldr	r0, [pc, #148]	@ (80043f4 <mem_free+0xb8>)
 800435e:	f009 fc79 	bl	800dc54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004362:	e040      	b.n	80043e6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3b08      	subs	r3, #8
 8004368:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800436a:	4b23      	ldr	r3, [pc, #140]	@ (80043f8 <mem_free+0xbc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	429a      	cmp	r2, r3
 8004372:	d306      	bcc.n	8004382 <mem_free+0x46>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f103 020c 	add.w	r2, r3, #12
 800437a:	4b20      	ldr	r3, [pc, #128]	@ (80043fc <mem_free+0xc0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d907      	bls.n	8004392 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004382:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <mem_free+0xb0>)
 8004384:	f240 227f 	movw	r2, #639	@ 0x27f
 8004388:	491d      	ldr	r1, [pc, #116]	@ (8004400 <mem_free+0xc4>)
 800438a:	481a      	ldr	r0, [pc, #104]	@ (80043f4 <mem_free+0xb8>)
 800438c:	f009 fc62 	bl	800dc54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004390:	e029      	b.n	80043e6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	791b      	ldrb	r3, [r3, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d107      	bne.n	80043aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800439a:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <mem_free+0xb0>)
 800439c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80043a0:	4918      	ldr	r1, [pc, #96]	@ (8004404 <mem_free+0xc8>)
 80043a2:	4814      	ldr	r0, [pc, #80]	@ (80043f4 <mem_free+0xb8>)
 80043a4:	f009 fc56 	bl	800dc54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80043a8:	e01d      	b.n	80043e6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ff8a 	bl	80042c4 <mem_link_valid>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d107      	bne.n	80043c6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80043b6:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <mem_free+0xb0>)
 80043b8:	f240 2295 	movw	r2, #661	@ 0x295
 80043bc:	4912      	ldr	r1, [pc, #72]	@ (8004408 <mem_free+0xcc>)
 80043be:	480d      	ldr	r0, [pc, #52]	@ (80043f4 <mem_free+0xb8>)
 80043c0:	f009 fc48 	bl	800dc54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80043c4:	e00f      	b.n	80043e6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80043cc:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <mem_free+0xd0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d202      	bcs.n	80043dc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80043d6:	4a0d      	ldr	r2, [pc, #52]	@ (800440c <mem_free+0xd0>)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff fe93 	bl	8004108 <plug_holes>
 80043e2:	e000      	b.n	80043e6 <mem_free+0xaa>
    return;
 80043e4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	0800ead0 	.word	0x0800ead0
 80043f0:	0800eba4 	.word	0x0800eba4
 80043f4:	0800eb18 	.word	0x0800eb18
 80043f8:	20005380 	.word	0x20005380
 80043fc:	20005384 	.word	0x20005384
 8004400:	0800ebc8 	.word	0x0800ebc8
 8004404:	0800ebe4 	.word	0x0800ebe4
 8004408:	0800ec0c 	.word	0x0800ec0c
 800440c:	20005388 	.word	0x20005388

08004410 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800441c:	887b      	ldrh	r3, [r7, #2]
 800441e:	3303      	adds	r3, #3
 8004420:	b29b      	uxth	r3, r3
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004428:	8bfb      	ldrh	r3, [r7, #30]
 800442a:	2b0b      	cmp	r3, #11
 800442c:	d801      	bhi.n	8004432 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800442e:	230c      	movs	r3, #12
 8004430:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004432:	8bfb      	ldrh	r3, [r7, #30]
 8004434:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004438:	d803      	bhi.n	8004442 <mem_trim+0x32>
 800443a:	8bfa      	ldrh	r2, [r7, #30]
 800443c:	887b      	ldrh	r3, [r7, #2]
 800443e:	429a      	cmp	r2, r3
 8004440:	d201      	bcs.n	8004446 <mem_trim+0x36>
    return NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	e0cc      	b.n	80045e0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004446:	4b68      	ldr	r3, [pc, #416]	@ (80045e8 <mem_trim+0x1d8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d304      	bcc.n	800445a <mem_trim+0x4a>
 8004450:	4b66      	ldr	r3, [pc, #408]	@ (80045ec <mem_trim+0x1dc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d306      	bcc.n	8004468 <mem_trim+0x58>
 800445a:	4b65      	ldr	r3, [pc, #404]	@ (80045f0 <mem_trim+0x1e0>)
 800445c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8004460:	4964      	ldr	r1, [pc, #400]	@ (80045f4 <mem_trim+0x1e4>)
 8004462:	4865      	ldr	r0, [pc, #404]	@ (80045f8 <mem_trim+0x1e8>)
 8004464:	f009 fbf6 	bl	800dc54 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004468:	4b5f      	ldr	r3, [pc, #380]	@ (80045e8 <mem_trim+0x1d8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d304      	bcc.n	800447c <mem_trim+0x6c>
 8004472:	4b5e      	ldr	r3, [pc, #376]	@ (80045ec <mem_trim+0x1dc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	d301      	bcc.n	8004480 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	e0af      	b.n	80045e0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b08      	subs	r3, #8
 8004484:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004486:	69b8      	ldr	r0, [r7, #24]
 8004488:	f7ff fe2c 	bl	80040e4 <mem_to_ptr>
 800448c:	4603      	mov	r3, r0
 800448e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	881a      	ldrh	r2, [r3, #0]
 8004494:	8afb      	ldrh	r3, [r7, #22]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b08      	subs	r3, #8
 800449c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800449e:	8bfa      	ldrh	r2, [r7, #30]
 80044a0:	8abb      	ldrh	r3, [r7, #20]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d906      	bls.n	80044b4 <mem_trim+0xa4>
 80044a6:	4b52      	ldr	r3, [pc, #328]	@ (80045f0 <mem_trim+0x1e0>)
 80044a8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80044ac:	4953      	ldr	r1, [pc, #332]	@ (80045fc <mem_trim+0x1ec>)
 80044ae:	4852      	ldr	r0, [pc, #328]	@ (80045f8 <mem_trim+0x1e8>)
 80044b0:	f009 fbd0 	bl	800dc54 <iprintf>
  if (newsize > size) {
 80044b4:	8bfa      	ldrh	r2, [r7, #30]
 80044b6:	8abb      	ldrh	r3, [r7, #20]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d901      	bls.n	80044c0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	e08f      	b.n	80045e0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80044c0:	8bfa      	ldrh	r2, [r7, #30]
 80044c2:	8abb      	ldrh	r3, [r7, #20]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d101      	bne.n	80044cc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	e089      	b.n	80045e0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fdf5 	bl	80040c0 <ptr_to_mem>
 80044d6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	791b      	ldrb	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d13f      	bne.n	8004560 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80044e8:	d106      	bne.n	80044f8 <mem_trim+0xe8>
 80044ea:	4b41      	ldr	r3, [pc, #260]	@ (80045f0 <mem_trim+0x1e0>)
 80044ec:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80044f0:	4943      	ldr	r1, [pc, #268]	@ (8004600 <mem_trim+0x1f0>)
 80044f2:	4841      	ldr	r0, [pc, #260]	@ (80045f8 <mem_trim+0x1e8>)
 80044f4:	f009 fbae 	bl	800dc54 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80044fe:	8afa      	ldrh	r2, [r7, #22]
 8004500:	8bfb      	ldrh	r3, [r7, #30]
 8004502:	4413      	add	r3, r2
 8004504:	b29b      	uxth	r3, r3
 8004506:	3308      	adds	r3, #8
 8004508:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800450a:	4b3e      	ldr	r3, [pc, #248]	@ (8004604 <mem_trim+0x1f4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	429a      	cmp	r2, r3
 8004512:	d106      	bne.n	8004522 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fdd2 	bl	80040c0 <ptr_to_mem>
 800451c:	4603      	mov	r3, r0
 800451e:	4a39      	ldr	r2, [pc, #228]	@ (8004604 <mem_trim+0x1f4>)
 8004520:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004522:	89fb      	ldrh	r3, [r7, #14]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fdcb 	bl	80040c0 <ptr_to_mem>
 800452a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2200      	movs	r2, #0
 8004530:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	89ba      	ldrh	r2, [r7, #12]
 8004536:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	8afa      	ldrh	r2, [r7, #22]
 800453c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	89fa      	ldrh	r2, [r7, #14]
 8004542:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800454c:	d047      	beq.n	80045de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fdb4 	bl	80040c0 <ptr_to_mem>
 8004558:	4602      	mov	r2, r0
 800455a:	89fb      	ldrh	r3, [r7, #14]
 800455c:	8053      	strh	r3, [r2, #2]
 800455e:	e03e      	b.n	80045de <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004560:	8bfb      	ldrh	r3, [r7, #30]
 8004562:	f103 0214 	add.w	r2, r3, #20
 8004566:	8abb      	ldrh	r3, [r7, #20]
 8004568:	429a      	cmp	r2, r3
 800456a:	d838      	bhi.n	80045de <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800456c:	8afa      	ldrh	r2, [r7, #22]
 800456e:	8bfb      	ldrh	r3, [r7, #30]
 8004570:	4413      	add	r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	3308      	adds	r3, #8
 8004576:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004580:	d106      	bne.n	8004590 <mem_trim+0x180>
 8004582:	4b1b      	ldr	r3, [pc, #108]	@ (80045f0 <mem_trim+0x1e0>)
 8004584:	f240 3216 	movw	r2, #790	@ 0x316
 8004588:	491d      	ldr	r1, [pc, #116]	@ (8004600 <mem_trim+0x1f0>)
 800458a:	481b      	ldr	r0, [pc, #108]	@ (80045f8 <mem_trim+0x1e8>)
 800458c:	f009 fb62 	bl	800dc54 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004590:	89fb      	ldrh	r3, [r7, #14]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fd94 	bl	80040c0 <ptr_to_mem>
 8004598:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800459a:	4b1a      	ldr	r3, [pc, #104]	@ (8004604 <mem_trim+0x1f4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d202      	bcs.n	80045aa <mem_trim+0x19a>
      lfree = mem2;
 80045a4:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <mem_trim+0x1f4>)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2200      	movs	r2, #0
 80045ae:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	881a      	ldrh	r2, [r3, #0]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	8afa      	ldrh	r2, [r7, #22]
 80045bc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	89fa      	ldrh	r2, [r7, #14]
 80045c2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80045cc:	d007      	beq.n	80045de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fd74 	bl	80040c0 <ptr_to_mem>
 80045d8:	4602      	mov	r2, r0
 80045da:	89fb      	ldrh	r3, [r7, #14]
 80045dc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80045de:	687b      	ldr	r3, [r7, #4]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20005380 	.word	0x20005380
 80045ec:	20005384 	.word	0x20005384
 80045f0:	0800ead0 	.word	0x0800ead0
 80045f4:	0800ec40 	.word	0x0800ec40
 80045f8:	0800eb18 	.word	0x0800eb18
 80045fc:	0800ec58 	.word	0x0800ec58
 8004600:	0800ec78 	.word	0x0800ec78
 8004604:	20005388 	.word	0x20005388

08004608 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <mem_malloc+0x14>
    return NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	e0d9      	b.n	80047d0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	3303      	adds	r3, #3
 8004620:	b29b      	uxth	r3, r3
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004628:	8bbb      	ldrh	r3, [r7, #28]
 800462a:	2b0b      	cmp	r3, #11
 800462c:	d801      	bhi.n	8004632 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800462e:	230c      	movs	r3, #12
 8004630:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004632:	8bbb      	ldrh	r3, [r7, #28]
 8004634:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004638:	d803      	bhi.n	8004642 <mem_malloc+0x3a>
 800463a:	8bba      	ldrh	r2, [r7, #28]
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	429a      	cmp	r2, r3
 8004640:	d201      	bcs.n	8004646 <mem_malloc+0x3e>
    return NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	e0c4      	b.n	80047d0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004646:	4b64      	ldr	r3, [pc, #400]	@ (80047d8 <mem_malloc+0x1d0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fd4a 	bl	80040e4 <mem_to_ptr>
 8004650:	4603      	mov	r3, r0
 8004652:	83fb      	strh	r3, [r7, #30]
 8004654:	e0b4      	b.n	80047c0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004656:	8bfb      	ldrh	r3, [r7, #30]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fd31 	bl	80040c0 <ptr_to_mem>
 800465e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	791b      	ldrb	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f040 80a4 	bne.w	80047b2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	8bfb      	ldrh	r3, [r7, #30]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f1a3 0208 	sub.w	r2, r3, #8
 8004678:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800467a:	429a      	cmp	r2, r3
 800467c:	f0c0 8099 	bcc.w	80047b2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	8bfb      	ldrh	r3, [r7, #30]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f1a3 0208 	sub.w	r2, r3, #8
 800468e:	8bbb      	ldrh	r3, [r7, #28]
 8004690:	3314      	adds	r3, #20
 8004692:	429a      	cmp	r2, r3
 8004694:	d333      	bcc.n	80046fe <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004696:	8bfa      	ldrh	r2, [r7, #30]
 8004698:	8bbb      	ldrh	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	b29b      	uxth	r3, r3
 800469e:	3308      	adds	r3, #8
 80046a0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80046a2:	8a7b      	ldrh	r3, [r7, #18]
 80046a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80046a8:	d106      	bne.n	80046b8 <mem_malloc+0xb0>
 80046aa:	4b4c      	ldr	r3, [pc, #304]	@ (80047dc <mem_malloc+0x1d4>)
 80046ac:	f240 3287 	movw	r2, #903	@ 0x387
 80046b0:	494b      	ldr	r1, [pc, #300]	@ (80047e0 <mem_malloc+0x1d8>)
 80046b2:	484c      	ldr	r0, [pc, #304]	@ (80047e4 <mem_malloc+0x1dc>)
 80046b4:	f009 face 	bl	800dc54 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80046b8:	8a7b      	ldrh	r3, [r7, #18]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fd00 	bl	80040c0 <ptr_to_mem>
 80046c0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	881a      	ldrh	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8bfa      	ldrh	r2, [r7, #30]
 80046d4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	8a7a      	ldrh	r2, [r7, #18]
 80046da:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2201      	movs	r2, #1
 80046e0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80046ea:	d00b      	beq.n	8004704 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fce5 	bl	80040c0 <ptr_to_mem>
 80046f6:	4602      	mov	r2, r0
 80046f8:	8a7b      	ldrh	r3, [r7, #18]
 80046fa:	8053      	strh	r3, [r2, #2]
 80046fc:	e002      	b.n	8004704 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2201      	movs	r2, #1
 8004702:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004704:	4b34      	ldr	r3, [pc, #208]	@ (80047d8 <mem_malloc+0x1d0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	429a      	cmp	r2, r3
 800470c:	d127      	bne.n	800475e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800470e:	4b32      	ldr	r3, [pc, #200]	@ (80047d8 <mem_malloc+0x1d0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004714:	e005      	b.n	8004722 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fcd0 	bl	80040c0 <ptr_to_mem>
 8004720:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	791b      	ldrb	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <mem_malloc+0x12c>
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <mem_malloc+0x1e0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	429a      	cmp	r2, r3
 8004732:	d1f0      	bne.n	8004716 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004734:	4a28      	ldr	r2, [pc, #160]	@ (80047d8 <mem_malloc+0x1d0>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800473a:	4b27      	ldr	r3, [pc, #156]	@ (80047d8 <mem_malloc+0x1d0>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b2a      	ldr	r3, [pc, #168]	@ (80047e8 <mem_malloc+0x1e0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d00b      	beq.n	800475e <mem_malloc+0x156>
 8004746:	4b24      	ldr	r3, [pc, #144]	@ (80047d8 <mem_malloc+0x1d0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	791b      	ldrb	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <mem_malloc+0x156>
 8004750:	4b22      	ldr	r3, [pc, #136]	@ (80047dc <mem_malloc+0x1d4>)
 8004752:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8004756:	4925      	ldr	r1, [pc, #148]	@ (80047ec <mem_malloc+0x1e4>)
 8004758:	4822      	ldr	r0, [pc, #136]	@ (80047e4 <mem_malloc+0x1dc>)
 800475a:	f009 fa7b 	bl	800dc54 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800475e:	8bba      	ldrh	r2, [r7, #28]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	3308      	adds	r3, #8
 8004766:	4a20      	ldr	r2, [pc, #128]	@ (80047e8 <mem_malloc+0x1e0>)
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	4293      	cmp	r3, r2
 800476c:	d906      	bls.n	800477c <mem_malloc+0x174>
 800476e:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <mem_malloc+0x1d4>)
 8004770:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8004774:	491e      	ldr	r1, [pc, #120]	@ (80047f0 <mem_malloc+0x1e8>)
 8004776:	481b      	ldr	r0, [pc, #108]	@ (80047e4 <mem_malloc+0x1dc>)
 8004778:	f009 fa6c 	bl	800dc54 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d006      	beq.n	8004794 <mem_malloc+0x18c>
 8004786:	4b15      	ldr	r3, [pc, #84]	@ (80047dc <mem_malloc+0x1d4>)
 8004788:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800478c:	4919      	ldr	r1, [pc, #100]	@ (80047f4 <mem_malloc+0x1ec>)
 800478e:	4815      	ldr	r0, [pc, #84]	@ (80047e4 <mem_malloc+0x1dc>)
 8004790:	f009 fa60 	bl	800dc54 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <mem_malloc+0x1a4>
 800479e:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <mem_malloc+0x1d4>)
 80047a0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80047a4:	4914      	ldr	r1, [pc, #80]	@ (80047f8 <mem_malloc+0x1f0>)
 80047a6:	480f      	ldr	r0, [pc, #60]	@ (80047e4 <mem_malloc+0x1dc>)
 80047a8:	f009 fa54 	bl	800dc54 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	3308      	adds	r3, #8
 80047b0:	e00e      	b.n	80047d0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80047b2:	8bfb      	ldrh	r3, [r7, #30]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fc83 	bl	80040c0 <ptr_to_mem>
 80047ba:	4603      	mov	r3, r0
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80047c0:	8bfa      	ldrh	r2, [r7, #30]
 80047c2:	8bbb      	ldrh	r3, [r7, #28]
 80047c4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80047c8:	429a      	cmp	r2, r3
 80047ca:	f4ff af44 	bcc.w	8004656 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20005388 	.word	0x20005388
 80047dc:	0800ead0 	.word	0x0800ead0
 80047e0:	0800ec78 	.word	0x0800ec78
 80047e4:	0800eb18 	.word	0x0800eb18
 80047e8:	20005384 	.word	0x20005384
 80047ec:	0800ec8c 	.word	0x0800ec8c
 80047f0:	0800eca8 	.word	0x0800eca8
 80047f4:	0800ecd8 	.word	0x0800ecd8
 80047f8:	0800ed08 	.word	0x0800ed08

080047fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	3303      	adds	r3, #3
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e011      	b.n	8004842 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4413      	add	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	885b      	ldrh	r3, [r3, #2]
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4293      	cmp	r3, r2
 800484c:	dbe7      	blt.n	800481e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004862:	2300      	movs	r3, #0
 8004864:	80fb      	strh	r3, [r7, #6]
 8004866:	e009      	b.n	800487c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	4a08      	ldr	r2, [pc, #32]	@ (800488c <memp_init+0x30>)
 800486c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ffc3 	bl	80047fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	3301      	adds	r3, #1
 800487a:	80fb      	strh	r3, [r7, #6]
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2b08      	cmp	r3, #8
 8004880:	d9f2      	bls.n	8004868 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	080114ec 	.word	0x080114ec

08004890 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d012      	beq.n	80048cc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d006      	beq.n	80048c8 <do_memp_malloc_pool+0x38>
 80048ba:	4b07      	ldr	r3, [pc, #28]	@ (80048d8 <do_memp_malloc_pool+0x48>)
 80048bc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80048c0:	4906      	ldr	r1, [pc, #24]	@ (80048dc <do_memp_malloc_pool+0x4c>)
 80048c2:	4807      	ldr	r0, [pc, #28]	@ (80048e0 <do_memp_malloc_pool+0x50>)
 80048c4:	f009 f9c6 	bl	800dc54 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	e000      	b.n	80048ce <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	0800ed2c 	.word	0x0800ed2c
 80048dc:	0800ed5c 	.word	0x0800ed5c
 80048e0:	0800ed80 	.word	0x0800ed80

080048e4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <memp_malloc_pool+0x1c>
 80048f2:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <memp_malloc_pool+0x38>)
 80048f4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80048f8:	4909      	ldr	r1, [pc, #36]	@ (8004920 <memp_malloc_pool+0x3c>)
 80048fa:	480a      	ldr	r0, [pc, #40]	@ (8004924 <memp_malloc_pool+0x40>)
 80048fc:	f009 f9aa 	bl	800dc54 <iprintf>
  if (desc == NULL) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <memp_malloc_pool+0x26>
    return NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	e003      	b.n	8004912 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ffc0 	bl	8004890 <do_memp_malloc_pool>
 8004910:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	0800ed2c 	.word	0x0800ed2c
 8004920:	0800eda8 	.word	0x0800eda8
 8004924:	0800ed80 	.word	0x0800ed80

08004928 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d908      	bls.n	800494a <memp_malloc+0x22>
 8004938:	4b0a      	ldr	r3, [pc, #40]	@ (8004964 <memp_malloc+0x3c>)
 800493a:	f240 1257 	movw	r2, #343	@ 0x157
 800493e:	490a      	ldr	r1, [pc, #40]	@ (8004968 <memp_malloc+0x40>)
 8004940:	480a      	ldr	r0, [pc, #40]	@ (800496c <memp_malloc+0x44>)
 8004942:	f009 f987 	bl	800dc54 <iprintf>
 8004946:	2300      	movs	r3, #0
 8004948:	e008      	b.n	800495c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	4a08      	ldr	r2, [pc, #32]	@ (8004970 <memp_malloc+0x48>)
 800494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff ff9c 	bl	8004890 <do_memp_malloc_pool>
 8004958:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800495a:	68fb      	ldr	r3, [r7, #12]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	0800ed2c 	.word	0x0800ed2c
 8004968:	0800edbc 	.word	0x0800edbc
 800496c:	0800ed80 	.word	0x0800ed80
 8004970:	080114ec 	.word	0x080114ec

08004974 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d006      	beq.n	8004996 <do_memp_free_pool+0x22>
 8004988:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <do_memp_free_pool+0x40>)
 800498a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800498e:	490a      	ldr	r1, [pc, #40]	@ (80049b8 <do_memp_free_pool+0x44>)
 8004990:	480a      	ldr	r0, [pc, #40]	@ (80049bc <do_memp_free_pool+0x48>)
 8004992:	f009 f95f 	bl	800dc54 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	0800ed2c 	.word	0x0800ed2c
 80049b8:	0800eddc 	.word	0x0800eddc
 80049bc:	0800ed80 	.word	0x0800ed80

080049c0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <memp_free_pool+0x1e>
 80049d0:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <memp_free_pool+0x3c>)
 80049d2:	f240 1295 	movw	r2, #405	@ 0x195
 80049d6:	490a      	ldr	r1, [pc, #40]	@ (8004a00 <memp_free_pool+0x40>)
 80049d8:	480a      	ldr	r0, [pc, #40]	@ (8004a04 <memp_free_pool+0x44>)
 80049da:	f009 f93b 	bl	800dc54 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <memp_free_pool+0x34>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80049ea:	6839      	ldr	r1, [r7, #0]
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff ffc1 	bl	8004974 <do_memp_free_pool>
 80049f2:	e000      	b.n	80049f6 <memp_free_pool+0x36>
    return;
 80049f4:	bf00      	nop
}
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	0800ed2c 	.word	0x0800ed2c
 8004a00:	0800eda8 	.word	0x0800eda8
 8004a04:	0800ed80 	.word	0x0800ed80

08004a08 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6039      	str	r1, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d907      	bls.n	8004a2a <memp_free+0x22>
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <memp_free+0x44>)
 8004a1c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8004a20:	490b      	ldr	r1, [pc, #44]	@ (8004a50 <memp_free+0x48>)
 8004a22:	480c      	ldr	r0, [pc, #48]	@ (8004a54 <memp_free+0x4c>)
 8004a24:	f009 f916 	bl	800dc54 <iprintf>
 8004a28:	e00c      	b.n	8004a44 <memp_free+0x3c>

  if (mem == NULL) {
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	4a09      	ldr	r2, [pc, #36]	@ (8004a58 <memp_free+0x50>)
 8004a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a38:	6839      	ldr	r1, [r7, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff ff9a 	bl	8004974 <do_memp_free_pool>
 8004a40:	e000      	b.n	8004a44 <memp_free+0x3c>
    return;
 8004a42:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	0800ed2c 	.word	0x0800ed2c
 8004a50:	0800edfc 	.word	0x0800edfc
 8004a54:	0800ed80 	.word	0x0800ed80
 8004a58:	080114ec 	.word	0x080114ec

08004a5c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d108      	bne.n	8004a92 <netif_add+0x26>
 8004a80:	4b57      	ldr	r3, [pc, #348]	@ (8004be0 <netif_add+0x174>)
 8004a82:	f240 1227 	movw	r2, #295	@ 0x127
 8004a86:	4957      	ldr	r1, [pc, #348]	@ (8004be4 <netif_add+0x178>)
 8004a88:	4857      	ldr	r0, [pc, #348]	@ (8004be8 <netif_add+0x17c>)
 8004a8a:	f009 f8e3 	bl	800dc54 <iprintf>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e0a2      	b.n	8004bd8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d108      	bne.n	8004aaa <netif_add+0x3e>
 8004a98:	4b51      	ldr	r3, [pc, #324]	@ (8004be0 <netif_add+0x174>)
 8004a9a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004a9e:	4953      	ldr	r1, [pc, #332]	@ (8004bec <netif_add+0x180>)
 8004aa0:	4851      	ldr	r0, [pc, #324]	@ (8004be8 <netif_add+0x17c>)
 8004aa2:	f009 f8d7 	bl	800dc54 <iprintf>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e096      	b.n	8004bd8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf0 <netif_add+0x184>)
 8004ab2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004aba:	4b4d      	ldr	r3, [pc, #308]	@ (8004bf0 <netif_add+0x184>)
 8004abc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf0 <netif_add+0x184>)
 8004ac6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a45      	ldr	r2, [pc, #276]	@ (8004bf4 <netif_add+0x188>)
 8004ade:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a3a      	ldr	r2, [r7, #32]
 8004af8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004afa:	4b3f      	ldr	r3, [pc, #252]	@ (8004bf8 <netif_add+0x18c>)
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b08:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f913 	bl	8004d3c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	4798      	blx	r3
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <netif_add+0xba>
    return NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e058      	b.n	8004bd8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b2c:	2bff      	cmp	r3, #255	@ 0xff
 8004b2e:	d103      	bne.n	8004b38 <netif_add+0xcc>
        netif->num = 0;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004bfc <netif_add+0x190>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e02b      	b.n	8004b9c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d106      	bne.n	8004b5a <netif_add+0xee>
 8004b4c:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <netif_add+0x174>)
 8004b4e:	f240 128b 	movw	r2, #395	@ 0x18b
 8004b52:	492b      	ldr	r1, [pc, #172]	@ (8004c00 <netif_add+0x194>)
 8004b54:	4824      	ldr	r0, [pc, #144]	@ (8004be8 <netif_add+0x17c>)
 8004b56:	f009 f87d 	bl	800dc54 <iprintf>
        num_netifs++;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2bff      	cmp	r3, #255	@ 0xff
 8004b64:	dd06      	ble.n	8004b74 <netif_add+0x108>
 8004b66:	4b1e      	ldr	r3, [pc, #120]	@ (8004be0 <netif_add+0x174>)
 8004b68:	f240 128d 	movw	r2, #397	@ 0x18d
 8004b6c:	4925      	ldr	r1, [pc, #148]	@ (8004c04 <netif_add+0x198>)
 8004b6e:	481e      	ldr	r0, [pc, #120]	@ (8004be8 <netif_add+0x17c>)
 8004b70:	f009 f870 	bl	800dc54 <iprintf>
        if (netif2->num == netif->num) {
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d108      	bne.n	8004b96 <netif_add+0x12a>
          netif->num++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8004b94:	e005      	b.n	8004ba2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1d0      	bne.n	8004b44 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1be      	bne.n	8004b26 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bae:	2bfe      	cmp	r3, #254	@ 0xfe
 8004bb0:	d103      	bne.n	8004bba <netif_add+0x14e>
    netif_num = 0;
 8004bb2:	4b11      	ldr	r3, [pc, #68]	@ (8004bf8 <netif_add+0x18c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	e006      	b.n	8004bc8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <netif_add+0x18c>)
 8004bc6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bfc <netif_add+0x190>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <netif_add+0x190>)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	0800ee18 	.word	0x0800ee18
 8004be4:	0800eeac 	.word	0x0800eeac
 8004be8:	0800ee68 	.word	0x0800ee68
 8004bec:	0800eec8 	.word	0x0800eec8
 8004bf0:	08011550 	.word	0x08011550
 8004bf4:	08005017 	.word	0x08005017
 8004bf8:	20008280 	.word	0x20008280
 8004bfc:	20008278 	.word	0x20008278
 8004c00:	0800eeec 	.word	0x0800eeec
 8004c04:	0800ef00 	.word	0x0800ef00

08004c08 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f002 fb45 	bl	80072a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004c1a:	6839      	ldr	r1, [r7, #0]
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f006 fc23 	bl	800b468 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <netif_do_set_ipaddr+0x20>
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <netif_do_set_ipaddr+0x88>)
 8004c40:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8004c44:	491c      	ldr	r1, [pc, #112]	@ (8004cb8 <netif_do_set_ipaddr+0x8c>)
 8004c46:	481d      	ldr	r0, [pc, #116]	@ (8004cbc <netif_do_set_ipaddr+0x90>)
 8004c48:	f009 f804 	bl	800dc54 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <netif_do_set_ipaddr+0x34>
 8004c52:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <netif_do_set_ipaddr+0x88>)
 8004c54:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8004c58:	4917      	ldr	r1, [pc, #92]	@ (8004cb8 <netif_do_set_ipaddr+0x8c>)
 8004c5a:	4818      	ldr	r0, [pc, #96]	@ (8004cbc <netif_do_set_ipaddr+0x90>)
 8004c5c:	f008 fffa 	bl	800dc54 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3304      	adds	r3, #4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d01c      	beq.n	8004ca8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3304      	adds	r3, #4
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ffbf 	bl	8004c08 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <netif_do_set_ipaddr+0x6a>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	e000      	b.n	8004c98 <netif_do_set_ipaddr+0x6c>
 8004c96:	2300      	movs	r3, #0
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8d2 	bl	8004e48 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	0800ee18 	.word	0x0800ee18
 8004cb8:	0800ef30 	.word	0x0800ef30
 8004cbc:	0800ee68 	.word	0x0800ee68

08004cc0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d00a      	beq.n	8004cf0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <netif_do_set_netmask+0x26>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	e000      	b.n	8004ce8 <netif_do_set_netmask+0x28>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b085      	sub	sp, #20
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	330c      	adds	r3, #12
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d00a      	beq.n	8004d2e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <netif_do_set_gw+0x26>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	e000      	b.n	8004d26 <netif_do_set_gw+0x28>
 8004d24:	2300      	movs	r3, #0
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004d58:	4b1c      	ldr	r3, [pc, #112]	@ (8004dcc <netif_set_addr+0x90>)
 8004d5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004d62:	4b1a      	ldr	r3, [pc, #104]	@ (8004dcc <netif_set_addr+0x90>)
 8004d64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004d6c:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <netif_set_addr+0x90>)
 8004d6e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <netif_set_addr+0x42>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <netif_set_addr+0x46>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <netif_set_addr+0x48>
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d006      	beq.n	8004d9a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	461a      	mov	r2, r3
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff ff49 	bl	8004c2c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff ff8e 	bl	8004cc0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff ffa8 	bl	8004cfe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004db4:	f107 0310 	add.w	r3, r7, #16
 8004db8:	461a      	mov	r2, r3
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff ff35 	bl	8004c2c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004dc2:	bf00      	nop
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	08011550 	.word	0x08011550

08004dd0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004dd8:	4a04      	ldr	r2, [pc, #16]	@ (8004dec <netif_set_default+0x1c>)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	2000827c 	.word	0x2000827c

08004df0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d107      	bne.n	8004e0e <netif_set_up+0x1e>
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004e3c <netif_set_up+0x4c>)
 8004e00:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8004e04:	490e      	ldr	r1, [pc, #56]	@ (8004e40 <netif_set_up+0x50>)
 8004e06:	480f      	ldr	r0, [pc, #60]	@ (8004e44 <netif_set_up+0x54>)
 8004e08:	f008 ff24 	bl	800dc54 <iprintf>
 8004e0c:	e013      	b.n	8004e36 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10c      	bne.n	8004e36 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004e2e:	2103      	movs	r1, #3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f809 	bl	8004e48 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	0800ee18 	.word	0x0800ee18
 8004e40:	0800efa0 	.word	0x0800efa0
 8004e44:	0800ee68 	.word	0x0800ee68

08004e48 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <netif_issue_reports+0x20>
 8004e5a:	4b18      	ldr	r3, [pc, #96]	@ (8004ebc <netif_issue_reports+0x74>)
 8004e5c:	f240 326d 	movw	r2, #877	@ 0x36d
 8004e60:	4917      	ldr	r1, [pc, #92]	@ (8004ec0 <netif_issue_reports+0x78>)
 8004e62:	4818      	ldr	r0, [pc, #96]	@ (8004ec4 <netif_issue_reports+0x7c>)
 8004e64:	f008 fef6 	bl	800dc54 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01e      	beq.n	8004eb4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e7c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d017      	beq.n	8004eb4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d013      	beq.n	8004eb6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00e      	beq.n	8004eb6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f007 fa45 	bl	800c33c <etharp_request>
 8004eb2:	e000      	b.n	8004eb6 <netif_issue_reports+0x6e>
    return;
 8004eb4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	0800ee18 	.word	0x0800ee18
 8004ec0:	0800efbc 	.word	0x0800efbc
 8004ec4:	0800ee68 	.word	0x0800ee68

08004ec8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <netif_set_down+0x1e>
 8004ed6:	4b12      	ldr	r3, [pc, #72]	@ (8004f20 <netif_set_down+0x58>)
 8004ed8:	f240 329b 	movw	r2, #923	@ 0x39b
 8004edc:	4911      	ldr	r1, [pc, #68]	@ (8004f24 <netif_set_down+0x5c>)
 8004ede:	4812      	ldr	r0, [pc, #72]	@ (8004f28 <netif_set_down+0x60>)
 8004ee0:	f008 feb8 	bl	800dc54 <iprintf>
 8004ee4:	e019      	b.n	8004f1a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d012      	beq.n	8004f1a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f006 fdcf 	bl	800bab8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	0800ee18 	.word	0x0800ee18
 8004f24:	0800efe0 	.word	0x0800efe0
 8004f28:	0800ee68 	.word	0x0800ee68

08004f2c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d107      	bne.n	8004f4a <netif_set_link_up+0x1e>
 8004f3a:	4b13      	ldr	r3, [pc, #76]	@ (8004f88 <netif_set_link_up+0x5c>)
 8004f3c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8004f40:	4912      	ldr	r1, [pc, #72]	@ (8004f8c <netif_set_link_up+0x60>)
 8004f42:	4813      	ldr	r0, [pc, #76]	@ (8004f90 <netif_set_link_up+0x64>)
 8004f44:	f008 fe86 	bl	800dc54 <iprintf>
 8004f48:	e01b      	b.n	8004f82 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d114      	bne.n	8004f82 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f5e:	f043 0304 	orr.w	r3, r3, #4
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ff6b 	bl	8004e48 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <netif_set_link_up+0x56>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	0800ee18 	.word	0x0800ee18
 8004f8c:	0800f000 	.word	0x0800f000
 8004f90:	0800ee68 	.word	0x0800ee68

08004f94 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d107      	bne.n	8004fb2 <netif_set_link_down+0x1e>
 8004fa2:	4b11      	ldr	r3, [pc, #68]	@ (8004fe8 <netif_set_link_down+0x54>)
 8004fa4:	f240 4206 	movw	r2, #1030	@ 0x406
 8004fa8:	4910      	ldr	r1, [pc, #64]	@ (8004fec <netif_set_link_down+0x58>)
 8004faa:	4811      	ldr	r0, [pc, #68]	@ (8004ff0 <netif_set_link_down+0x5c>)
 8004fac:	f008 fe52 	bl	800dc54 <iprintf>
 8004fb0:	e017      	b.n	8004fe2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d010      	beq.n	8004fe2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004fc6:	f023 0304 	bic.w	r3, r3, #4
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <netif_set_link_down+0x4e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	0800ee18 	.word	0x0800ee18
 8004fec:	0800f024 	.word	0x0800f024
 8004ff0:	0800ee68 	.word	0x0800ee68

08004ff4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	61da      	str	r2, [r3, #28]
  }
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005022:	f06f 030b 	mvn.w	r3, #11
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005044:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <netif_get_by_index+0x48>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e00c      	b.n	8005066 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005052:	3301      	adds	r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	79fa      	ldrb	r2, [r7, #7]
 8005058:	429a      	cmp	r2, r3
 800505a:	d101      	bne.n	8005060 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	e006      	b.n	800506e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ef      	bne.n	800504c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20008278 	.word	0x20008278

08005080 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005086:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <pbuf_free_ooseq+0x38>)
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800508c:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <pbuf_free_ooseq+0x3c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	e00a      	b.n	80050aa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f002 f93f 	bl	8007320 <tcp_free_ooseq>
      return;
 80050a2:	e005      	b.n	80050b0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	607b      	str	r3, [r7, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f1      	bne.n	8005094 <pbuf_free_ooseq+0x14>
    }
  }
}
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20008281 	.word	0x20008281
 80050bc:	20008290 	.word	0x20008290

080050c0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80050c4:	4b03      	ldr	r3, [pc, #12]	@ (80050d4 <pbuf_pool_is_empty+0x14>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	20008281 	.word	0x20008281

080050d8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	4611      	mov	r1, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	460b      	mov	r3, r1
 80050e8:	80fb      	strh	r3, [r7, #6]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	88fa      	ldrh	r2, [r7, #6]
 80050fe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	88ba      	ldrh	r2, [r7, #4]
 8005104:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005106:	8b3b      	ldrh	r3, [r7, #24]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	7f3a      	ldrb	r2, [r7, #28]
 8005112:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	73da      	strb	r2, [r3, #15]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	@ 0x30
 8005130:	af02      	add	r7, sp, #8
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
 8005136:	460b      	mov	r3, r1
 8005138:	80bb      	strh	r3, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005148:	d07f      	beq.n	800524a <pbuf_alloc+0x11e>
 800514a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800514e:	f300 80c8 	bgt.w	80052e2 <pbuf_alloc+0x1b6>
 8005152:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005156:	d010      	beq.n	800517a <pbuf_alloc+0x4e>
 8005158:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800515c:	f300 80c1 	bgt.w	80052e2 <pbuf_alloc+0x1b6>
 8005160:	2b01      	cmp	r3, #1
 8005162:	d002      	beq.n	800516a <pbuf_alloc+0x3e>
 8005164:	2b41      	cmp	r3, #65	@ 0x41
 8005166:	f040 80bc 	bne.w	80052e2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800516a:	887a      	ldrh	r2, [r7, #2]
 800516c:	88bb      	ldrh	r3, [r7, #4]
 800516e:	4619      	mov	r1, r3
 8005170:	2000      	movs	r0, #0
 8005172:	f000 f8d1 	bl	8005318 <pbuf_alloc_reference>
 8005176:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005178:	e0bd      	b.n	80052f6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005182:	88bb      	ldrh	r3, [r7, #4]
 8005184:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005186:	2008      	movs	r0, #8
 8005188:	f7ff fbce 	bl	8004928 <memp_malloc>
 800518c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d109      	bne.n	80051a8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005194:	f7ff ff94 	bl	80050c0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800519e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051a0:	f000 faa8 	bl	80056f4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e0a7      	b.n	80052f8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80051a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051aa:	3303      	adds	r3, #3
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8b7a      	ldrh	r2, [r7, #26]
 80051bc:	4293      	cmp	r3, r2
 80051be:	bf28      	it	cs
 80051c0:	4613      	movcs	r3, r2
 80051c2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80051c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051c6:	3310      	adds	r3, #16
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4413      	add	r3, r2
 80051cc:	3303      	adds	r3, #3
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	4618      	mov	r0, r3
 80051d4:	89f9      	ldrh	r1, [r7, #14]
 80051d6:	8b7a      	ldrh	r2, [r7, #26]
 80051d8:	2300      	movs	r3, #0
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	887b      	ldrh	r3, [r7, #2]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	460b      	mov	r3, r1
 80051e2:	4601      	mov	r1, r0
 80051e4:	6938      	ldr	r0, [r7, #16]
 80051e6:	f7ff ff77 	bl	80050d8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <pbuf_alloc+0xd8>
 80051f6:	4b42      	ldr	r3, [pc, #264]	@ (8005300 <pbuf_alloc+0x1d4>)
 80051f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051fc:	4941      	ldr	r1, [pc, #260]	@ (8005304 <pbuf_alloc+0x1d8>)
 80051fe:	4842      	ldr	r0, [pc, #264]	@ (8005308 <pbuf_alloc+0x1dc>)
 8005200:	f008 fd28 	bl	800dc54 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005204:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005206:	3303      	adds	r3, #3
 8005208:	f023 0303 	bic.w	r3, r3, #3
 800520c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005210:	d106      	bne.n	8005220 <pbuf_alloc+0xf4>
 8005212:	4b3b      	ldr	r3, [pc, #236]	@ (8005300 <pbuf_alloc+0x1d4>)
 8005214:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005218:	493c      	ldr	r1, [pc, #240]	@ (800530c <pbuf_alloc+0x1e0>)
 800521a:	483b      	ldr	r0, [pc, #236]	@ (8005308 <pbuf_alloc+0x1dc>)
 800521c:	f008 fd1a 	bl	800dc54 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
 800522a:	e002      	b.n	8005232 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005236:	8b7a      	ldrh	r2, [r7, #26]
 8005238:	89fb      	ldrh	r3, [r7, #14]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8005242:	8b7b      	ldrh	r3, [r7, #26]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d19e      	bne.n	8005186 <pbuf_alloc+0x5a>
      break;
 8005248:	e055      	b.n	80052f6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800524a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800524c:	3303      	adds	r3, #3
 800524e:	b29b      	uxth	r3, r3
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	b29a      	uxth	r2, r3
 8005256:	88bb      	ldrh	r3, [r7, #4]
 8005258:	3303      	adds	r3, #3
 800525a:	b29b      	uxth	r3, r3
 800525c:	f023 0303 	bic.w	r3, r3, #3
 8005260:	b29b      	uxth	r3, r3
 8005262:	4413      	add	r3, r2
 8005264:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005266:	8b3b      	ldrh	r3, [r7, #24]
 8005268:	3310      	adds	r3, #16
 800526a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800526c:	8b3a      	ldrh	r2, [r7, #24]
 800526e:	88bb      	ldrh	r3, [r7, #4]
 8005270:	3303      	adds	r3, #3
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	429a      	cmp	r2, r3
 8005278:	d306      	bcc.n	8005288 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800527a:	8afa      	ldrh	r2, [r7, #22]
 800527c:	88bb      	ldrh	r3, [r7, #4]
 800527e:	3303      	adds	r3, #3
 8005280:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d201      	bcs.n	800528c <pbuf_alloc+0x160>
        return NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	e035      	b.n	80052f8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800528c:	8afb      	ldrh	r3, [r7, #22]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff f9ba 	bl	8004608 <mem_malloc>
 8005294:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <pbuf_alloc+0x174>
        return NULL;
 800529c:	2300      	movs	r3, #0
 800529e:	e02b      	b.n	80052f8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80052a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052a2:	3310      	adds	r3, #16
 80052a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a6:	4413      	add	r3, r2
 80052a8:	3303      	adds	r3, #3
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	4618      	mov	r0, r3
 80052b0:	88b9      	ldrh	r1, [r7, #4]
 80052b2:	88ba      	ldrh	r2, [r7, #4]
 80052b4:	2300      	movs	r3, #0
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	887b      	ldrh	r3, [r7, #2]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	460b      	mov	r3, r1
 80052be:	4601      	mov	r1, r0
 80052c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052c2:	f7ff ff09 	bl	80050d8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d010      	beq.n	80052f4 <pbuf_alloc+0x1c8>
 80052d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005300 <pbuf_alloc+0x1d4>)
 80052d4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80052d8:	490d      	ldr	r1, [pc, #52]	@ (8005310 <pbuf_alloc+0x1e4>)
 80052da:	480b      	ldr	r0, [pc, #44]	@ (8005308 <pbuf_alloc+0x1dc>)
 80052dc:	f008 fcba 	bl	800dc54 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80052e0:	e008      	b.n	80052f4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80052e2:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <pbuf_alloc+0x1d4>)
 80052e4:	f240 1227 	movw	r2, #295	@ 0x127
 80052e8:	490a      	ldr	r1, [pc, #40]	@ (8005314 <pbuf_alloc+0x1e8>)
 80052ea:	4807      	ldr	r0, [pc, #28]	@ (8005308 <pbuf_alloc+0x1dc>)
 80052ec:	f008 fcb2 	bl	800dc54 <iprintf>
      return NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e001      	b.n	80052f8 <pbuf_alloc+0x1cc>
      break;
 80052f4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3728      	adds	r7, #40	@ 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	0800f048 	.word	0x0800f048
 8005304:	0800f078 	.word	0x0800f078
 8005308:	0800f0a8 	.word	0x0800f0a8
 800530c:	0800f0d0 	.word	0x0800f0d0
 8005310:	0800f104 	.word	0x0800f104
 8005314:	0800f130 	.word	0x0800f130

08005318 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	807b      	strh	r3, [r7, #2]
 8005324:	4613      	mov	r3, r2
 8005326:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005328:	883b      	ldrh	r3, [r7, #0]
 800532a:	2b41      	cmp	r3, #65	@ 0x41
 800532c:	d009      	beq.n	8005342 <pbuf_alloc_reference+0x2a>
 800532e:	883b      	ldrh	r3, [r7, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d006      	beq.n	8005342 <pbuf_alloc_reference+0x2a>
 8005334:	4b0f      	ldr	r3, [pc, #60]	@ (8005374 <pbuf_alloc_reference+0x5c>)
 8005336:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800533a:	490f      	ldr	r1, [pc, #60]	@ (8005378 <pbuf_alloc_reference+0x60>)
 800533c:	480f      	ldr	r0, [pc, #60]	@ (800537c <pbuf_alloc_reference+0x64>)
 800533e:	f008 fc89 	bl	800dc54 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005342:	2007      	movs	r0, #7
 8005344:	f7ff faf0 	bl	8004928 <memp_malloc>
 8005348:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	e00b      	b.n	800536c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005354:	8879      	ldrh	r1, [r7, #2]
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	2300      	movs	r3, #0
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	883b      	ldrh	r3, [r7, #0]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	460b      	mov	r3, r1
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff feb7 	bl	80050d8 <pbuf_init_alloced_pbuf>
  return p;
 800536a:	68fb      	ldr	r3, [r7, #12]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	0800f048 	.word	0x0800f048
 8005378:	0800f14c 	.word	0x0800f14c
 800537c:	0800f0a8 	.word	0x0800f0a8

08005380 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af02      	add	r7, sp, #8
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	4603      	mov	r3, r0
 800538a:	73fb      	strb	r3, [r7, #15]
 800538c:	460b      	mov	r3, r1
 800538e:	81bb      	strh	r3, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005398:	8a7b      	ldrh	r3, [r7, #18]
 800539a:	3303      	adds	r3, #3
 800539c:	f023 0203 	bic.w	r2, r3, #3
 80053a0:	89bb      	ldrh	r3, [r7, #12]
 80053a2:	441a      	add	r2, r3
 80053a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d901      	bls.n	80053ae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e018      	b.n	80053e0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80053b4:	8a7b      	ldrh	r3, [r7, #18]
 80053b6:	3303      	adds	r3, #3
 80053b8:	f023 0303 	bic.w	r3, r3, #3
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	4413      	add	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e001      	b.n	80053c8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	89b9      	ldrh	r1, [r7, #12]
 80053cc:	89ba      	ldrh	r2, [r7, #12]
 80053ce:	2302      	movs	r3, #2
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	897b      	ldrh	r3, [r7, #10]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	460b      	mov	r3, r1
 80053d8:	6979      	ldr	r1, [r7, #20]
 80053da:	f7ff fe7d 	bl	80050d8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80053de:	687b      	ldr	r3, [r7, #4]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <pbuf_realloc+0x20>
 80053fa:	4b3a      	ldr	r3, [pc, #232]	@ (80054e4 <pbuf_realloc+0xfc>)
 80053fc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8005400:	4939      	ldr	r1, [pc, #228]	@ (80054e8 <pbuf_realloc+0x100>)
 8005402:	483a      	ldr	r0, [pc, #232]	@ (80054ec <pbuf_realloc+0x104>)
 8005404:	f008 fc26 	bl	800dc54 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	891b      	ldrh	r3, [r3, #8]
 800540c:	887a      	ldrh	r2, [r7, #2]
 800540e:	429a      	cmp	r2, r3
 8005410:	d263      	bcs.n	80054da <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	891a      	ldrh	r2, [r3, #8]
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800541c:	887b      	ldrh	r3, [r7, #2]
 800541e:	817b      	strh	r3, [r7, #10]
  q = p;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005424:	e018      	b.n	8005458 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	895b      	ldrh	r3, [r3, #10]
 800542a:	897a      	ldrh	r2, [r7, #10]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	891a      	ldrh	r2, [r3, #8]
 8005434:	893b      	ldrh	r3, [r7, #8]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <pbuf_realloc+0x70>
 800544a:	4b26      	ldr	r3, [pc, #152]	@ (80054e4 <pbuf_realloc+0xfc>)
 800544c:	f240 12af 	movw	r2, #431	@ 0x1af
 8005450:	4927      	ldr	r1, [pc, #156]	@ (80054f0 <pbuf_realloc+0x108>)
 8005452:	4826      	ldr	r0, [pc, #152]	@ (80054ec <pbuf_realloc+0x104>)
 8005454:	f008 fbfe 	bl	800dc54 <iprintf>
  while (rem_len > q->len) {
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	895b      	ldrh	r3, [r3, #10]
 800545c:	897a      	ldrh	r2, [r7, #10]
 800545e:	429a      	cmp	r2, r3
 8005460:	d8e1      	bhi.n	8005426 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	7b1b      	ldrb	r3, [r3, #12]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	2b00      	cmp	r3, #0
 800546c:	d121      	bne.n	80054b2 <pbuf_realloc+0xca>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	895b      	ldrh	r3, [r3, #10]
 8005472:	897a      	ldrh	r2, [r7, #10]
 8005474:	429a      	cmp	r2, r3
 8005476:	d01c      	beq.n	80054b2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	7b5b      	ldrb	r3, [r3, #13]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	b29a      	uxth	r2, r3
 800548e:	897b      	ldrh	r3, [r7, #10]
 8005490:	4413      	add	r3, r2
 8005492:	b29b      	uxth	r3, r3
 8005494:	4619      	mov	r1, r3
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7fe ffba 	bl	8004410 <mem_trim>
 800549c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <pbuf_realloc+0xca>
 80054a4:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <pbuf_realloc+0xfc>)
 80054a6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80054aa:	4912      	ldr	r1, [pc, #72]	@ (80054f4 <pbuf_realloc+0x10c>)
 80054ac:	480f      	ldr	r0, [pc, #60]	@ (80054ec <pbuf_realloc+0x104>)
 80054ae:	f008 fbd1 	bl	800dc54 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	897a      	ldrh	r2, [r7, #10]
 80054b6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	895a      	ldrh	r2, [r3, #10]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f911 	bl	80056f4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e000      	b.n	80054dc <pbuf_realloc+0xf4>
    return;
 80054da:	bf00      	nop

}
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	0800f048 	.word	0x0800f048
 80054e8:	0800f160 	.word	0x0800f160
 80054ec:	0800f0a8 	.word	0x0800f0a8
 80054f0:	0800f178 	.word	0x0800f178
 80054f4:	0800f190 	.word	0x0800f190

080054f8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	4613      	mov	r3, r2
 8005504:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <pbuf_add_header_impl+0x22>
 800550c:	4b2b      	ldr	r3, [pc, #172]	@ (80055bc <pbuf_add_header_impl+0xc4>)
 800550e:	f240 12df 	movw	r2, #479	@ 0x1df
 8005512:	492b      	ldr	r1, [pc, #172]	@ (80055c0 <pbuf_add_header_impl+0xc8>)
 8005514:	482b      	ldr	r0, [pc, #172]	@ (80055c4 <pbuf_add_header_impl+0xcc>)
 8005516:	f008 fb9d 	bl	800dc54 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <pbuf_add_header_impl+0x30>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005526:	d301      	bcc.n	800552c <pbuf_add_header_impl+0x34>
    return 1;
 8005528:	2301      	movs	r3, #1
 800552a:	e043      	b.n	80055b4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <pbuf_add_header_impl+0x3e>
    return 0;
 8005532:	2300      	movs	r3, #0
 8005534:	e03e      	b.n	80055b4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	891a      	ldrh	r2, [r3, #8]
 800553e:	8a7b      	ldrh	r3, [r7, #18]
 8005540:	4413      	add	r3, r2
 8005542:	b29b      	uxth	r3, r3
 8005544:	8a7a      	ldrh	r2, [r7, #18]
 8005546:	429a      	cmp	r2, r3
 8005548:	d901      	bls.n	800554e <pbuf_add_header_impl+0x56>
    return 1;
 800554a:	2301      	movs	r3, #1
 800554c:	e032      	b.n	80055b4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	7b1b      	ldrb	r3, [r3, #12]
 8005552:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005554:	8a3b      	ldrh	r3, [r7, #16]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	425b      	negs	r3, r3
 8005566:	4413      	add	r3, r2
 8005568:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3310      	adds	r3, #16
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	429a      	cmp	r2, r3
 8005572:	d20d      	bcs.n	8005590 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005574:	2301      	movs	r3, #1
 8005576:	e01d      	b.n	80055b4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	425b      	negs	r3, r3
 8005586:	4413      	add	r3, r2
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e001      	b.n	8005590 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800558c:	2301      	movs	r3, #1
 800558e:	e011      	b.n	80055b4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	895a      	ldrh	r2, [r3, #10]
 800559a:	8a7b      	ldrh	r3, [r7, #18]
 800559c:	4413      	add	r3, r2
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	891a      	ldrh	r2, [r3, #8]
 80055a8:	8a7b      	ldrh	r3, [r7, #18]
 80055aa:	4413      	add	r3, r2
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	811a      	strh	r2, [r3, #8]


  return 0;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	0800f048 	.word	0x0800f048
 80055c0:	0800f1ac 	.word	0x0800f1ac
 80055c4:	0800f0a8 	.word	0x0800f0a8

080055c8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80055d2:	2200      	movs	r2, #0
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff ff8e 	bl	80054f8 <pbuf_add_header_impl>
 80055dc:	4603      	mov	r3, r0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <pbuf_remove_header+0x1e>
 80055f8:	4b20      	ldr	r3, [pc, #128]	@ (800567c <pbuf_remove_header+0x94>)
 80055fa:	f240 224b 	movw	r2, #587	@ 0x24b
 80055fe:	4920      	ldr	r1, [pc, #128]	@ (8005680 <pbuf_remove_header+0x98>)
 8005600:	4820      	ldr	r0, [pc, #128]	@ (8005684 <pbuf_remove_header+0x9c>)
 8005602:	f008 fb27 	bl	800dc54 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <pbuf_remove_header+0x2c>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005612:	d301      	bcc.n	8005618 <pbuf_remove_header+0x30>
    return 1;
 8005614:	2301      	movs	r3, #1
 8005616:	e02c      	b.n	8005672 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <pbuf_remove_header+0x3a>
    return 0;
 800561e:	2300      	movs	r3, #0
 8005620:	e027      	b.n	8005672 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	895b      	ldrh	r3, [r3, #10]
 800562a:	89fa      	ldrh	r2, [r7, #14]
 800562c:	429a      	cmp	r2, r3
 800562e:	d908      	bls.n	8005642 <pbuf_remove_header+0x5a>
 8005630:	4b12      	ldr	r3, [pc, #72]	@ (800567c <pbuf_remove_header+0x94>)
 8005632:	f240 2255 	movw	r2, #597	@ 0x255
 8005636:	4914      	ldr	r1, [pc, #80]	@ (8005688 <pbuf_remove_header+0xa0>)
 8005638:	4812      	ldr	r0, [pc, #72]	@ (8005684 <pbuf_remove_header+0x9c>)
 800563a:	f008 fb0b 	bl	800dc54 <iprintf>
 800563e:	2301      	movs	r3, #1
 8005640:	e017      	b.n	8005672 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	441a      	add	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	895a      	ldrh	r2, [r3, #10]
 8005658:	89fb      	ldrh	r3, [r7, #14]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	b29a      	uxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	891a      	ldrh	r2, [r3, #8]
 8005666:	89fb      	ldrh	r3, [r7, #14]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	0800f048 	.word	0x0800f048
 8005680:	0800f1ac 	.word	0x0800f1ac
 8005684:	0800f0a8 	.word	0x0800f0a8
 8005688:	0800f1b8 	.word	0x0800f1b8

0800568c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	807b      	strh	r3, [r7, #2]
 8005698:	4613      	mov	r3, r2
 800569a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800569c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da08      	bge.n	80056b6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80056a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056a8:	425b      	negs	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ff9b 	bl	80055e8 <pbuf_remove_header>
 80056b2:	4603      	mov	r3, r0
 80056b4:	e007      	b.n	80056c6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80056b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056ba:	787a      	ldrb	r2, [r7, #1]
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ff1a 	bl	80054f8 <pbuf_add_header_impl>
 80056c4:	4603      	mov	r3, r0
  }
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	460b      	mov	r3, r1
 80056d8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80056da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056de:	2201      	movs	r2, #1
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff ffd2 	bl	800568c <pbuf_header_impl>
 80056e8:	4603      	mov	r3, r0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10b      	bne.n	800571a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d106      	bne.n	8005716 <pbuf_free+0x22>
 8005708:	4b38      	ldr	r3, [pc, #224]	@ (80057ec <pbuf_free+0xf8>)
 800570a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800570e:	4938      	ldr	r1, [pc, #224]	@ (80057f0 <pbuf_free+0xfc>)
 8005710:	4838      	ldr	r0, [pc, #224]	@ (80057f4 <pbuf_free+0x100>)
 8005712:	f008 fa9f 	bl	800dc54 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005716:	2300      	movs	r3, #0
 8005718:	e063      	b.n	80057e2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800571e:	e05c      	b.n	80057da <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	7b9b      	ldrb	r3, [r3, #14]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <pbuf_free+0x42>
 8005728:	4b30      	ldr	r3, [pc, #192]	@ (80057ec <pbuf_free+0xf8>)
 800572a:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800572e:	4932      	ldr	r1, [pc, #200]	@ (80057f8 <pbuf_free+0x104>)
 8005730:	4830      	ldr	r0, [pc, #192]	@ (80057f4 <pbuf_free+0x100>)
 8005732:	f008 fa8f 	bl	800dc54 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	7b9b      	ldrb	r3, [r3, #14]
 800573a:	3b01      	subs	r3, #1
 800573c:	b2da      	uxtb	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	739a      	strb	r2, [r3, #14]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7b9b      	ldrb	r3, [r3, #14]
 8005746:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005748:	7dbb      	ldrb	r3, [r7, #22]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d143      	bne.n	80057d6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	7b1b      	ldrb	r3, [r3, #12]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	7b5b      	ldrb	r3, [r3, #13]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d011      	beq.n	800578e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <pbuf_free+0x90>
 8005776:	4b1d      	ldr	r3, [pc, #116]	@ (80057ec <pbuf_free+0xf8>)
 8005778:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800577c:	491f      	ldr	r1, [pc, #124]	@ (80057fc <pbuf_free+0x108>)
 800577e:	481d      	ldr	r0, [pc, #116]	@ (80057f4 <pbuf_free+0x100>)
 8005780:	f008 fa68 	bl	800dc54 <iprintf>
        pc->custom_free_function(p);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	e01d      	b.n	80057ca <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d104      	bne.n	800579e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	2008      	movs	r0, #8
 8005798:	f7ff f936 	bl	8004a08 <memp_free>
 800579c:	e015      	b.n	80057ca <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d104      	bne.n	80057ae <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	2007      	movs	r0, #7
 80057a8:	f7ff f92e 	bl	8004a08 <memp_free>
 80057ac:	e00d      	b.n	80057ca <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <pbuf_free+0xc8>
          mem_free(p);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fe fdc1 	bl	800433c <mem_free>
 80057ba:	e006      	b.n	80057ca <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80057bc:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <pbuf_free+0xf8>)
 80057be:	f240 320f 	movw	r2, #783	@ 0x30f
 80057c2:	490f      	ldr	r1, [pc, #60]	@ (8005800 <pbuf_free+0x10c>)
 80057c4:	480b      	ldr	r0, [pc, #44]	@ (80057f4 <pbuf_free+0x100>)
 80057c6:	f008 fa45 	bl	800dc54 <iprintf>
        }
      }
      count++;
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
 80057cc:	3301      	adds	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	e001      	b.n	80057da <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d19f      	bne.n	8005720 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0800f048 	.word	0x0800f048
 80057f0:	0800f1ac 	.word	0x0800f1ac
 80057f4:	0800f0a8 	.word	0x0800f0a8
 80057f8:	0800f1d8 	.word	0x0800f1d8
 80057fc:	0800f1f0 	.word	0x0800f1f0
 8005800:	0800f214 	.word	0x0800f214

08005804 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005810:	e005      	b.n	800581e <pbuf_clen+0x1a>
    ++len;
 8005812:	89fb      	ldrh	r3, [r7, #14]
 8005814:	3301      	adds	r3, #1
 8005816:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f6      	bne.n	8005812 <pbuf_clen+0xe>
  }
  return len;
 8005824:	89fb      	ldrh	r3, [r7, #14]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d010      	beq.n	8005864 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7b9b      	ldrb	r3, [r3, #14]
 8005846:	3301      	adds	r3, #1
 8005848:	b2da      	uxtb	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	7b9b      	ldrb	r3, [r3, #14]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <pbuf_ref+0x30>
 8005856:	4b05      	ldr	r3, [pc, #20]	@ (800586c <pbuf_ref+0x38>)
 8005858:	f240 3242 	movw	r2, #834	@ 0x342
 800585c:	4904      	ldr	r1, [pc, #16]	@ (8005870 <pbuf_ref+0x3c>)
 800585e:	4805      	ldr	r0, [pc, #20]	@ (8005874 <pbuf_ref+0x40>)
 8005860:	f008 f9f8 	bl	800dc54 <iprintf>
  }
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	0800f048 	.word	0x0800f048
 8005870:	0800f228 	.word	0x0800f228
 8005874:	0800f0a8 	.word	0x0800f0a8

08005878 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <pbuf_cat+0x16>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <pbuf_cat+0x26>
 800588e:	4b20      	ldr	r3, [pc, #128]	@ (8005910 <pbuf_cat+0x98>)
 8005890:	f240 3259 	movw	r2, #857	@ 0x359
 8005894:	491f      	ldr	r1, [pc, #124]	@ (8005914 <pbuf_cat+0x9c>)
 8005896:	4820      	ldr	r0, [pc, #128]	@ (8005918 <pbuf_cat+0xa0>)
 8005898:	f008 f9dc 	bl	800dc54 <iprintf>
 800589c:	e034      	b.n	8005908 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e00a      	b.n	80058ba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	891a      	ldrh	r2, [r3, #8]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	891b      	ldrh	r3, [r3, #8]
 80058ac:	4413      	add	r3, r2
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	891a      	ldrh	r2, [r3, #8]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	895b      	ldrh	r3, [r3, #10]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d006      	beq.n	80058dc <pbuf_cat+0x64>
 80058ce:	4b10      	ldr	r3, [pc, #64]	@ (8005910 <pbuf_cat+0x98>)
 80058d0:	f240 3262 	movw	r2, #866	@ 0x362
 80058d4:	4911      	ldr	r1, [pc, #68]	@ (800591c <pbuf_cat+0xa4>)
 80058d6:	4810      	ldr	r0, [pc, #64]	@ (8005918 <pbuf_cat+0xa0>)
 80058d8:	f008 f9bc 	bl	800dc54 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d006      	beq.n	80058f2 <pbuf_cat+0x7a>
 80058e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <pbuf_cat+0x98>)
 80058e6:	f240 3263 	movw	r2, #867	@ 0x363
 80058ea:	490d      	ldr	r1, [pc, #52]	@ (8005920 <pbuf_cat+0xa8>)
 80058ec:	480a      	ldr	r0, [pc, #40]	@ (8005918 <pbuf_cat+0xa0>)
 80058ee:	f008 f9b1 	bl	800dc54 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	891a      	ldrh	r2, [r3, #8]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	891b      	ldrh	r3, [r3, #8]
 80058fa:	4413      	add	r3, r2
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	0800f048 	.word	0x0800f048
 8005914:	0800f23c 	.word	0x0800f23c
 8005918:	0800f0a8 	.word	0x0800f0a8
 800591c:	0800f274 	.word	0x0800f274
 8005920:	0800f2a4 	.word	0x0800f2a4

08005924 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <pbuf_copy+0x2a>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <pbuf_copy+0x2a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	891a      	ldrh	r2, [r3, #8]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	891b      	ldrh	r3, [r3, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	d209      	bcs.n	8005962 <pbuf_copy+0x3e>
 800594e:	4b57      	ldr	r3, [pc, #348]	@ (8005aac <pbuf_copy+0x188>)
 8005950:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8005954:	4956      	ldr	r1, [pc, #344]	@ (8005ab0 <pbuf_copy+0x18c>)
 8005956:	4857      	ldr	r0, [pc, #348]	@ (8005ab4 <pbuf_copy+0x190>)
 8005958:	f008 f97c 	bl	800dc54 <iprintf>
 800595c:	f06f 030f 	mvn.w	r3, #15
 8005960:	e09f      	b.n	8005aa2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	895b      	ldrh	r3, [r3, #10]
 8005966:	461a      	mov	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	895b      	ldrh	r3, [r3, #10]
 8005970:	4619      	mov	r1, r3
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1acb      	subs	r3, r1, r3
 8005976:	429a      	cmp	r2, r3
 8005978:	d306      	bcc.n	8005988 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	895b      	ldrh	r3, [r3, #10]
 800597e:	461a      	mov	r2, r3
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	e005      	b.n	8005994 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	895b      	ldrh	r3, [r3, #10]
 800598c:	461a      	mov	r2, r3
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	18d0      	adds	r0, r2, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4413      	add	r3, r2
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4619      	mov	r1, r3
 80059a8:	f008 fa2f 	bl	800de0a <memcpy>
    offset_to += len;
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	895b      	ldrh	r3, [r3, #10]
 80059c0:	461a      	mov	r2, r3
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d906      	bls.n	80059d6 <pbuf_copy+0xb2>
 80059c8:	4b38      	ldr	r3, [pc, #224]	@ (8005aac <pbuf_copy+0x188>)
 80059ca:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80059ce:	493a      	ldr	r1, [pc, #232]	@ (8005ab8 <pbuf_copy+0x194>)
 80059d0:	4838      	ldr	r0, [pc, #224]	@ (8005ab4 <pbuf_copy+0x190>)
 80059d2:	f008 f93f 	bl	800dc54 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	895b      	ldrh	r3, [r3, #10]
 80059da:	461a      	mov	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4293      	cmp	r3, r2
 80059e0:	d906      	bls.n	80059f0 <pbuf_copy+0xcc>
 80059e2:	4b32      	ldr	r3, [pc, #200]	@ (8005aac <pbuf_copy+0x188>)
 80059e4:	f240 32da 	movw	r2, #986	@ 0x3da
 80059e8:	4934      	ldr	r1, [pc, #208]	@ (8005abc <pbuf_copy+0x198>)
 80059ea:	4832      	ldr	r0, [pc, #200]	@ (8005ab4 <pbuf_copy+0x190>)
 80059ec:	f008 f932 	bl	800dc54 <iprintf>
    if (offset_from >= p_from->len) {
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	895b      	ldrh	r3, [r3, #10]
 80059f4:	461a      	mov	r2, r3
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d304      	bcc.n	8005a06 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	895b      	ldrh	r3, [r3, #10]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d114      	bne.n	8005a3c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10c      	bne.n	8005a3c <pbuf_copy+0x118>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <pbuf_copy+0x118>
 8005a28:	4b20      	ldr	r3, [pc, #128]	@ (8005aac <pbuf_copy+0x188>)
 8005a2a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8005a2e:	4924      	ldr	r1, [pc, #144]	@ (8005ac0 <pbuf_copy+0x19c>)
 8005a30:	4820      	ldr	r0, [pc, #128]	@ (8005ab4 <pbuf_copy+0x190>)
 8005a32:	f008 f90f 	bl	800dc54 <iprintf>
 8005a36:	f06f 030f 	mvn.w	r3, #15
 8005a3a:	e032      	b.n	8005aa2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d013      	beq.n	8005a6a <pbuf_copy+0x146>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	895a      	ldrh	r2, [r3, #10]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	891b      	ldrh	r3, [r3, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d10d      	bne.n	8005a6a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <pbuf_copy+0x146>
 8005a56:	4b15      	ldr	r3, [pc, #84]	@ (8005aac <pbuf_copy+0x188>)
 8005a58:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8005a5c:	4919      	ldr	r1, [pc, #100]	@ (8005ac4 <pbuf_copy+0x1a0>)
 8005a5e:	4815      	ldr	r0, [pc, #84]	@ (8005ab4 <pbuf_copy+0x190>)
 8005a60:	f008 f8f8 	bl	800dc54 <iprintf>
 8005a64:	f06f 0305 	mvn.w	r3, #5
 8005a68:	e01b      	b.n	8005aa2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d013      	beq.n	8005a98 <pbuf_copy+0x174>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	895a      	ldrh	r2, [r3, #10]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	891b      	ldrh	r3, [r3, #8]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d10d      	bne.n	8005a98 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d009      	beq.n	8005a98 <pbuf_copy+0x174>
 8005a84:	4b09      	ldr	r3, [pc, #36]	@ (8005aac <pbuf_copy+0x188>)
 8005a86:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8005a8a:	490e      	ldr	r1, [pc, #56]	@ (8005ac4 <pbuf_copy+0x1a0>)
 8005a8c:	4809      	ldr	r0, [pc, #36]	@ (8005ab4 <pbuf_copy+0x190>)
 8005a8e:	f008 f8e1 	bl	800dc54 <iprintf>
 8005a92:	f06f 0305 	mvn.w	r3, #5
 8005a96:	e004      	b.n	8005aa2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f47f af61 	bne.w	8005962 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	0800f048 	.word	0x0800f048
 8005ab0:	0800f2f0 	.word	0x0800f2f0
 8005ab4:	0800f0a8 	.word	0x0800f0a8
 8005ab8:	0800f320 	.word	0x0800f320
 8005abc:	0800f338 	.word	0x0800f338
 8005ac0:	0800f354 	.word	0x0800f354
 8005ac4:	0800f364 	.word	0x0800f364

08005ac8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	80fb      	strh	r3, [r7, #6]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d108      	bne.n	8005afe <pbuf_copy_partial+0x36>
 8005aec:	4b2b      	ldr	r3, [pc, #172]	@ (8005b9c <pbuf_copy_partial+0xd4>)
 8005aee:	f240 420a 	movw	r2, #1034	@ 0x40a
 8005af2:	492b      	ldr	r1, [pc, #172]	@ (8005ba0 <pbuf_copy_partial+0xd8>)
 8005af4:	482b      	ldr	r0, [pc, #172]	@ (8005ba4 <pbuf_copy_partial+0xdc>)
 8005af6:	f008 f8ad 	bl	800dc54 <iprintf>
 8005afa:	2300      	movs	r3, #0
 8005afc:	e04a      	b.n	8005b94 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d108      	bne.n	8005b16 <pbuf_copy_partial+0x4e>
 8005b04:	4b25      	ldr	r3, [pc, #148]	@ (8005b9c <pbuf_copy_partial+0xd4>)
 8005b06:	f240 420b 	movw	r2, #1035	@ 0x40b
 8005b0a:	4927      	ldr	r1, [pc, #156]	@ (8005ba8 <pbuf_copy_partial+0xe0>)
 8005b0c:	4825      	ldr	r0, [pc, #148]	@ (8005ba4 <pbuf_copy_partial+0xdc>)
 8005b0e:	f008 f8a1 	bl	800dc54 <iprintf>
 8005b12:	2300      	movs	r3, #0
 8005b14:	e03e      	b.n	8005b94 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	61fb      	str	r3, [r7, #28]
 8005b1a:	e034      	b.n	8005b86 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005b1c:	88bb      	ldrh	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <pbuf_copy_partial+0x70>
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	895b      	ldrh	r3, [r3, #10]
 8005b26:	88ba      	ldrh	r2, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d305      	bcc.n	8005b38 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	895b      	ldrh	r3, [r3, #10]
 8005b30:	88ba      	ldrh	r2, [r7, #4]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	80bb      	strh	r3, [r7, #4]
 8005b36:	e023      	b.n	8005b80 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	895a      	ldrh	r2, [r3, #10]
 8005b3c:	88bb      	ldrh	r3, [r7, #4]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005b42:	8b3a      	ldrh	r2, [r7, #24]
 8005b44:	88fb      	ldrh	r3, [r7, #6]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d901      	bls.n	8005b4e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005b4e:	8b7b      	ldrh	r3, [r7, #26]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	18d0      	adds	r0, r2, r3
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	88bb      	ldrh	r3, [r7, #4]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	8b3a      	ldrh	r2, [r7, #24]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f008 f953 	bl	800de0a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005b64:	8afa      	ldrh	r2, [r7, #22]
 8005b66:	8b3b      	ldrh	r3, [r7, #24]
 8005b68:	4413      	add	r3, r2
 8005b6a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005b6c:	8b7a      	ldrh	r2, [r7, #26]
 8005b6e:	8b3b      	ldrh	r3, [r7, #24]
 8005b70:	4413      	add	r3, r2
 8005b72:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005b74:	88fa      	ldrh	r2, [r7, #6]
 8005b76:	8b3b      	ldrh	r3, [r7, #24]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <pbuf_copy_partial+0xca>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1c4      	bne.n	8005b1c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005b92:	8afb      	ldrh	r3, [r7, #22]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	0800f048 	.word	0x0800f048
 8005ba0:	0800f390 	.word	0x0800f390
 8005ba4:	0800f0a8 	.word	0x0800f0a8
 8005ba8:	0800f3b0 	.word	0x0800f3b0

08005bac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	603a      	str	r2, [r7, #0]
 8005bb6:	71fb      	strb	r3, [r7, #7]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	8919      	ldrh	r1, [r3, #8]
 8005bc0:	88ba      	ldrh	r2, [r7, #4]
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fab1 	bl	800512c <pbuf_alloc>
 8005bca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <pbuf_clone+0x2a>
    return NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e011      	b.n	8005bfa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff fea3 	bl	8005924 <pbuf_copy>
 8005bde:	4603      	mov	r3, r0
 8005be0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005be2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d006      	beq.n	8005bf8 <pbuf_clone+0x4c>
 8005bea:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <pbuf_clone+0x58>)
 8005bec:	f240 5224 	movw	r2, #1316	@ 0x524
 8005bf0:	4905      	ldr	r1, [pc, #20]	@ (8005c08 <pbuf_clone+0x5c>)
 8005bf2:	4806      	ldr	r0, [pc, #24]	@ (8005c0c <pbuf_clone+0x60>)
 8005bf4:	f008 f82e 	bl	800dc54 <iprintf>
  return q;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	0800f048 	.word	0x0800f048
 8005c08:	0800f4bc 	.word	0x0800f4bc
 8005c0c:	0800f0a8 	.word	0x0800f0a8

08005c10 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005c14:	f007 ff1e 	bl	800da54 <rand>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	4b01      	ldr	r3, [pc, #4]	@ (8005c30 <tcp_init+0x20>)
 8005c2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005c2c:	bf00      	nop
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000020 	.word	0x20000020

08005c34 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	7d1b      	ldrb	r3, [r3, #20]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d105      	bne.n	8005c50 <tcp_free+0x1c>
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <tcp_free+0x2c>)
 8005c46:	22d4      	movs	r2, #212	@ 0xd4
 8005c48:	4906      	ldr	r1, [pc, #24]	@ (8005c64 <tcp_free+0x30>)
 8005c4a:	4807      	ldr	r0, [pc, #28]	@ (8005c68 <tcp_free+0x34>)
 8005c4c:	f008 f802 	bl	800dc54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	2001      	movs	r0, #1
 8005c54:	f7fe fed8 	bl	8004a08 <memp_free>
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	0800f548 	.word	0x0800f548
 8005c64:	0800f578 	.word	0x0800f578
 8005c68:	0800f58c 	.word	0x0800f58c

08005c6c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	7d1b      	ldrb	r3, [r3, #20]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d105      	bne.n	8005c88 <tcp_free_listen+0x1c>
 8005c7c:	4b06      	ldr	r3, [pc, #24]	@ (8005c98 <tcp_free_listen+0x2c>)
 8005c7e:	22df      	movs	r2, #223	@ 0xdf
 8005c80:	4906      	ldr	r1, [pc, #24]	@ (8005c9c <tcp_free_listen+0x30>)
 8005c82:	4807      	ldr	r0, [pc, #28]	@ (8005ca0 <tcp_free_listen+0x34>)
 8005c84:	f007 ffe6 	bl	800dc54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	2002      	movs	r0, #2
 8005c8c:	f7fe febc 	bl	8004a08 <memp_free>
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	0800f548 	.word	0x0800f548
 8005c9c:	0800f5b4 	.word	0x0800f5b4
 8005ca0:	0800f58c 	.word	0x0800f58c

08005ca4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005ca8:	f000 fea4 	bl	80069f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005cac:	4b07      	ldr	r3, [pc, #28]	@ (8005ccc <tcp_tmr+0x28>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <tcp_tmr+0x28>)
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	4b04      	ldr	r3, [pc, #16]	@ (8005ccc <tcp_tmr+0x28>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005cc4:	f000 fb54 	bl	8006370 <tcp_slowtmr>
  }
}
 8005cc8:	bf00      	nop
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20008299 	.word	0x20008299

08005cd0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <tcp_remove_listener+0x1c>
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d18 <tcp_remove_listener+0x48>)
 8005ce2:	22ff      	movs	r2, #255	@ 0xff
 8005ce4:	490d      	ldr	r1, [pc, #52]	@ (8005d1c <tcp_remove_listener+0x4c>)
 8005ce6:	480e      	ldr	r0, [pc, #56]	@ (8005d20 <tcp_remove_listener+0x50>)
 8005ce8:	f007 ffb4 	bl	800dc54 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e00a      	b.n	8005d08 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d102      	bne.n	8005d02 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f1      	bne.n	8005cf2 <tcp_remove_listener+0x22>
    }
  }
}
 8005d0e:	bf00      	nop
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	0800f548 	.word	0x0800f548
 8005d1c:	0800f5d0 	.word	0x0800f5d0
 8005d20:	0800f58c 	.word	0x0800f58c

08005d24 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <tcp_listen_closed+0x1c>
 8005d32:	4b14      	ldr	r3, [pc, #80]	@ (8005d84 <tcp_listen_closed+0x60>)
 8005d34:	f240 1211 	movw	r2, #273	@ 0x111
 8005d38:	4913      	ldr	r1, [pc, #76]	@ (8005d88 <tcp_listen_closed+0x64>)
 8005d3a:	4814      	ldr	r0, [pc, #80]	@ (8005d8c <tcp_listen_closed+0x68>)
 8005d3c:	f007 ff8a 	bl	800dc54 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7d1b      	ldrb	r3, [r3, #20]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d006      	beq.n	8005d56 <tcp_listen_closed+0x32>
 8005d48:	4b0e      	ldr	r3, [pc, #56]	@ (8005d84 <tcp_listen_closed+0x60>)
 8005d4a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8005d4e:	4910      	ldr	r1, [pc, #64]	@ (8005d90 <tcp_listen_closed+0x6c>)
 8005d50:	480e      	ldr	r0, [pc, #56]	@ (8005d8c <tcp_listen_closed+0x68>)
 8005d52:	f007 ff7f 	bl	800dc54 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d56:	2301      	movs	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	e00b      	b.n	8005d74 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d94 <tcp_listen_closed+0x70>)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff ffb1 	bl	8005cd0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d9f0      	bls.n	8005d5c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	0800f548 	.word	0x0800f548
 8005d88:	0800f5f8 	.word	0x0800f5f8
 8005d8c:	0800f58c 	.word	0x0800f58c
 8005d90:	0800f604 	.word	0x0800f604
 8005d94:	08011528 	.word	0x08011528

08005d98 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005d98:	b5b0      	push	{r4, r5, r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af04      	add	r7, sp, #16
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <tcp_close_shutdown+0x20>
 8005daa:	4b63      	ldr	r3, [pc, #396]	@ (8005f38 <tcp_close_shutdown+0x1a0>)
 8005dac:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8005db0:	4962      	ldr	r1, [pc, #392]	@ (8005f3c <tcp_close_shutdown+0x1a4>)
 8005db2:	4863      	ldr	r0, [pc, #396]	@ (8005f40 <tcp_close_shutdown+0x1a8>)
 8005db4:	f007 ff4e 	bl	800dc54 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d066      	beq.n	8005e8c <tcp_close_shutdown+0xf4>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	7d1b      	ldrb	r3, [r3, #20]
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d003      	beq.n	8005dce <tcp_close_shutdown+0x36>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	7d1b      	ldrb	r3, [r3, #20]
 8005dca:	2b07      	cmp	r3, #7
 8005dcc:	d15e      	bne.n	8005e8c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <tcp_close_shutdown+0x48>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dda:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005dde:	d055      	beq.n	8005e8c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	8b5b      	ldrh	r3, [r3, #26]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d106      	bne.n	8005dfa <tcp_close_shutdown+0x62>
 8005dec:	4b52      	ldr	r3, [pc, #328]	@ (8005f38 <tcp_close_shutdown+0x1a0>)
 8005dee:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8005df2:	4954      	ldr	r1, [pc, #336]	@ (8005f44 <tcp_close_shutdown+0x1ac>)
 8005df4:	4852      	ldr	r0, [pc, #328]	@ (8005f40 <tcp_close_shutdown+0x1a8>)
 8005df6:	f007 ff2d 	bl	800dc54 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005e02:	687d      	ldr	r5, [r7, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	8ad2      	ldrh	r2, [r2, #22]
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	8b09      	ldrh	r1, [r1, #24]
 8005e10:	9102      	str	r1, [sp, #8]
 8005e12:	9201      	str	r2, [sp, #4]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	462b      	mov	r3, r5
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f004 fe8d 	bl	800ab3c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 f8c8 	bl	8006fb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005e28:	4b47      	ldr	r3, [pc, #284]	@ (8005f48 <tcp_close_shutdown+0x1b0>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d105      	bne.n	8005e3e <tcp_close_shutdown+0xa6>
 8005e32:	4b45      	ldr	r3, [pc, #276]	@ (8005f48 <tcp_close_shutdown+0x1b0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a43      	ldr	r2, [pc, #268]	@ (8005f48 <tcp_close_shutdown+0x1b0>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	e013      	b.n	8005e66 <tcp_close_shutdown+0xce>
 8005e3e:	4b42      	ldr	r3, [pc, #264]	@ (8005f48 <tcp_close_shutdown+0x1b0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e00c      	b.n	8005e60 <tcp_close_shutdown+0xc8>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d104      	bne.n	8005e5a <tcp_close_shutdown+0xc2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	60da      	str	r2, [r3, #12]
 8005e58:	e005      	b.n	8005e66 <tcp_close_shutdown+0xce>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1ef      	bne.n	8005e46 <tcp_close_shutdown+0xae>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	60da      	str	r2, [r3, #12]
 8005e6c:	4b37      	ldr	r3, [pc, #220]	@ (8005f4c <tcp_close_shutdown+0x1b4>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005e72:	4b37      	ldr	r3, [pc, #220]	@ (8005f50 <tcp_close_shutdown+0x1b8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d102      	bne.n	8005e82 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005e7c:	f003 fd5c 	bl	8009938 <tcp_trigger_input_pcb_close>
 8005e80:	e002      	b.n	8005e88 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff fed6 	bl	8005c34 <tcp_free>
      }
      return ERR_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e050      	b.n	8005f2e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	7d1b      	ldrb	r3, [r3, #20]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d03b      	beq.n	8005f0c <tcp_close_shutdown+0x174>
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	dc44      	bgt.n	8005f22 <tcp_close_shutdown+0x18a>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <tcp_close_shutdown+0x10a>
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d02a      	beq.n	8005ef6 <tcp_close_shutdown+0x15e>
 8005ea0:	e03f      	b.n	8005f22 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8adb      	ldrh	r3, [r3, #22]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d021      	beq.n	8005eee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8005f54 <tcp_close_shutdown+0x1bc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d105      	bne.n	8005ec0 <tcp_close_shutdown+0x128>
 8005eb4:	4b27      	ldr	r3, [pc, #156]	@ (8005f54 <tcp_close_shutdown+0x1bc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	4a26      	ldr	r2, [pc, #152]	@ (8005f54 <tcp_close_shutdown+0x1bc>)
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e013      	b.n	8005ee8 <tcp_close_shutdown+0x150>
 8005ec0:	4b24      	ldr	r3, [pc, #144]	@ (8005f54 <tcp_close_shutdown+0x1bc>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	e00c      	b.n	8005ee2 <tcp_close_shutdown+0x14a>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d104      	bne.n	8005edc <tcp_close_shutdown+0x144>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	60da      	str	r2, [r3, #12]
 8005eda:	e005      	b.n	8005ee8 <tcp_close_shutdown+0x150>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1ef      	bne.n	8005ec8 <tcp_close_shutdown+0x130>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff fea0 	bl	8005c34 <tcp_free>
      break;
 8005ef4:	e01a      	b.n	8005f2c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff ff14 	bl	8005d24 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	4816      	ldr	r0, [pc, #88]	@ (8005f58 <tcp_close_shutdown+0x1c0>)
 8005f00:	f001 f8aa 	bl	8007058 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff feb1 	bl	8005c6c <tcp_free_listen>
      break;
 8005f0a:	e00f      	b.n	8005f2c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	480e      	ldr	r0, [pc, #56]	@ (8005f48 <tcp_close_shutdown+0x1b0>)
 8005f10:	f001 f8a2 	bl	8007058 <tcp_pcb_remove>
 8005f14:	4b0d      	ldr	r3, [pc, #52]	@ (8005f4c <tcp_close_shutdown+0x1b4>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fe8a 	bl	8005c34 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005f20:	e004      	b.n	8005f2c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f81a 	bl	8005f5c <tcp_close_shutdown_fin>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	e000      	b.n	8005f2e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bdb0      	pop	{r4, r5, r7, pc}
 8005f36:	bf00      	nop
 8005f38:	0800f548 	.word	0x0800f548
 8005f3c:	0800f61c 	.word	0x0800f61c
 8005f40:	0800f58c 	.word	0x0800f58c
 8005f44:	0800f63c 	.word	0x0800f63c
 8005f48:	20008290 	.word	0x20008290
 8005f4c:	20008298 	.word	0x20008298
 8005f50:	200082d0 	.word	0x200082d0
 8005f54:	20008288 	.word	0x20008288
 8005f58:	2000828c 	.word	0x2000828c

08005f5c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <tcp_close_shutdown_fin+0x1c>
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8006024 <tcp_close_shutdown_fin+0xc8>)
 8005f6c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8005f70:	492d      	ldr	r1, [pc, #180]	@ (8006028 <tcp_close_shutdown_fin+0xcc>)
 8005f72:	482e      	ldr	r0, [pc, #184]	@ (800602c <tcp_close_shutdown_fin+0xd0>)
 8005f74:	f007 fe6e 	bl	800dc54 <iprintf>

  switch (pcb->state) {
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	7d1b      	ldrb	r3, [r3, #20]
 8005f7c:	2b07      	cmp	r3, #7
 8005f7e:	d020      	beq.n	8005fc2 <tcp_close_shutdown_fin+0x66>
 8005f80:	2b07      	cmp	r3, #7
 8005f82:	dc2b      	bgt.n	8005fdc <tcp_close_shutdown_fin+0x80>
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d002      	beq.n	8005f8e <tcp_close_shutdown_fin+0x32>
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d00d      	beq.n	8005fa8 <tcp_close_shutdown_fin+0x4c>
 8005f8c:	e026      	b.n	8005fdc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f003 fee2 	bl	8009d58 <tcp_send_fin>
 8005f94:	4603      	mov	r3, r0
 8005f96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11f      	bne.n	8005fe0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2205      	movs	r2, #5
 8005fa4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005fa6:	e01b      	b.n	8005fe0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f003 fed5 	bl	8009d58 <tcp_send_fin>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d114      	bne.n	8005fe4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2205      	movs	r2, #5
 8005fbe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005fc0:	e010      	b.n	8005fe4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f003 fec8 	bl	8009d58 <tcp_send_fin>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d109      	bne.n	8005fe8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2209      	movs	r2, #9
 8005fd8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005fda:	e005      	b.n	8005fe8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e01c      	b.n	800601a <tcp_close_shutdown_fin+0xbe>
      break;
 8005fe0:	bf00      	nop
 8005fe2:	e002      	b.n	8005fea <tcp_close_shutdown_fin+0x8e>
      break;
 8005fe4:	bf00      	nop
 8005fe6:	e000      	b.n	8005fea <tcp_close_shutdown_fin+0x8e>
      break;
 8005fe8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f003 ffee 	bl	8009fd4 <tcp_output>
 8005ff8:	e00d      	b.n	8006016 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d108      	bne.n	8006016 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8b5b      	ldrh	r3, [r3, #26]
 8006008:	f043 0308 	orr.w	r3, r3, #8
 800600c:	b29a      	uxth	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e001      	b.n	800601a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006016:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	0800f548 	.word	0x0800f548
 8006028:	0800f5f8 	.word	0x0800f5f8
 800602c:	0800f58c 	.word	0x0800f58c

08006030 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <tcp_close+0x22>
 800603e:	4b0f      	ldr	r3, [pc, #60]	@ (800607c <tcp_close+0x4c>)
 8006040:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006044:	490e      	ldr	r1, [pc, #56]	@ (8006080 <tcp_close+0x50>)
 8006046:	480f      	ldr	r0, [pc, #60]	@ (8006084 <tcp_close+0x54>)
 8006048:	f007 fe04 	bl	800dc54 <iprintf>
 800604c:	f06f 030f 	mvn.w	r3, #15
 8006050:	e00f      	b.n	8006072 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	7d1b      	ldrb	r3, [r3, #20]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d006      	beq.n	8006068 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8b5b      	ldrh	r3, [r3, #26]
 800605e:	f043 0310 	orr.w	r3, r3, #16
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006068:	2101      	movs	r1, #1
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff fe94 	bl	8005d98 <tcp_close_shutdown>
 8006070:	4603      	mov	r3, r0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	0800f548 	.word	0x0800f548
 8006080:	0800f658 	.word	0x0800f658
 8006084:	0800f58c 	.word	0x0800f58c

08006088 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08e      	sub	sp, #56	@ 0x38
 800608c:	af04      	add	r7, sp, #16
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d107      	bne.n	80060a8 <tcp_abandon+0x20>
 8006098:	4b52      	ldr	r3, [pc, #328]	@ (80061e4 <tcp_abandon+0x15c>)
 800609a:	f240 223d 	movw	r2, #573	@ 0x23d
 800609e:	4952      	ldr	r1, [pc, #328]	@ (80061e8 <tcp_abandon+0x160>)
 80060a0:	4852      	ldr	r0, [pc, #328]	@ (80061ec <tcp_abandon+0x164>)
 80060a2:	f007 fdd7 	bl	800dc54 <iprintf>
 80060a6:	e099      	b.n	80061dc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	7d1b      	ldrb	r3, [r3, #20]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d106      	bne.n	80060be <tcp_abandon+0x36>
 80060b0:	4b4c      	ldr	r3, [pc, #304]	@ (80061e4 <tcp_abandon+0x15c>)
 80060b2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80060b6:	494e      	ldr	r1, [pc, #312]	@ (80061f0 <tcp_abandon+0x168>)
 80060b8:	484c      	ldr	r0, [pc, #304]	@ (80061ec <tcp_abandon+0x164>)
 80060ba:	f007 fdcb 	bl	800dc54 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7d1b      	ldrb	r3, [r3, #20]
 80060c2:	2b0a      	cmp	r3, #10
 80060c4:	d107      	bne.n	80060d6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	484a      	ldr	r0, [pc, #296]	@ (80061f4 <tcp_abandon+0x16c>)
 80060ca:	f000 ffc5 	bl	8007058 <tcp_pcb_remove>
    tcp_free(pcb);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff fdb0 	bl	8005c34 <tcp_free>
 80060d4:	e082      	b.n	80061dc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	7d1b      	ldrb	r3, [r3, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d126      	bne.n	800614e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8adb      	ldrh	r3, [r3, #22]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d02e      	beq.n	8006166 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006108:	4b3b      	ldr	r3, [pc, #236]	@ (80061f8 <tcp_abandon+0x170>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	429a      	cmp	r2, r3
 8006110:	d105      	bne.n	800611e <tcp_abandon+0x96>
 8006112:	4b39      	ldr	r3, [pc, #228]	@ (80061f8 <tcp_abandon+0x170>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a37      	ldr	r2, [pc, #220]	@ (80061f8 <tcp_abandon+0x170>)
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	e013      	b.n	8006146 <tcp_abandon+0xbe>
 800611e:	4b36      	ldr	r3, [pc, #216]	@ (80061f8 <tcp_abandon+0x170>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	e00c      	b.n	8006140 <tcp_abandon+0xb8>
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d104      	bne.n	800613a <tcp_abandon+0xb2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	e005      	b.n	8006146 <tcp_abandon+0xbe>
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	61fb      	str	r3, [r7, #28]
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1ef      	bne.n	8006126 <tcp_abandon+0x9e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	60da      	str	r2, [r3, #12]
 800614c:	e00b      	b.n	8006166 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	8adb      	ldrh	r3, [r3, #22]
 8006156:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4828      	ldr	r0, [pc, #160]	@ (80061fc <tcp_abandon+0x174>)
 800615c:	f000 ff7c 	bl	8007058 <tcp_pcb_remove>
 8006160:	4b27      	ldr	r3, [pc, #156]	@ (8006200 <tcp_abandon+0x178>)
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fd1e 	bl	8006bb4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fd15 	bl	8006bb4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fd0c 	bl	8006bb4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	8b12      	ldrh	r2, [r2, #24]
 80061ac:	9202      	str	r2, [sp, #8]
 80061ae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80061b0:	9201      	str	r2, [sp, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	460b      	mov	r3, r1
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	69b9      	ldr	r1, [r7, #24]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f004 fcbe 	bl	800ab3c <tcp_rst>
    }
    last_state = pcb->state;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	7d1b      	ldrb	r3, [r3, #20]
 80061c4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff fd34 	bl	8005c34 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <tcp_abandon+0x154>
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f06f 010c 	mvn.w	r1, #12
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	4798      	blx	r3
  }
}
 80061dc:	3728      	adds	r7, #40	@ 0x28
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	0800f548 	.word	0x0800f548
 80061e8:	0800f68c 	.word	0x0800f68c
 80061ec:	0800f58c 	.word	0x0800f58c
 80061f0:	0800f6a8 	.word	0x0800f6a8
 80061f4:	20008294 	.word	0x20008294
 80061f8:	20008288 	.word	0x20008288
 80061fc:	20008290 	.word	0x20008290
 8006200:	20008298 	.word	0x20008298

08006204 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800620c:	2101      	movs	r1, #1
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff ff3a 	bl	8006088 <tcp_abandon>
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <tcp_update_rcv_ann_wnd+0x1c>
 800622a:	4b25      	ldr	r3, [pc, #148]	@ (80062c0 <tcp_update_rcv_ann_wnd+0xa4>)
 800622c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8006230:	4924      	ldr	r1, [pc, #144]	@ (80062c4 <tcp_update_rcv_ann_wnd+0xa8>)
 8006232:	4825      	ldr	r0, [pc, #148]	@ (80062c8 <tcp_update_rcv_ann_wnd+0xac>)
 8006234:	f007 fd0e 	bl	800dc54 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006240:	4413      	add	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800624c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006250:	bf28      	it	cs
 8006252:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006256:	b292      	uxth	r2, r2
 8006258:	4413      	add	r3, r2
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	db08      	blt.n	8006274 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	e020      	b.n	80062b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	dd03      	ble.n	800628a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006288:	e014      	b.n	80062b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800629c:	d306      	bcc.n	80062ac <tcp_update_rcv_ann_wnd+0x90>
 800629e:	4b08      	ldr	r3, [pc, #32]	@ (80062c0 <tcp_update_rcv_ann_wnd+0xa4>)
 80062a0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80062a4:	4909      	ldr	r1, [pc, #36]	@ (80062cc <tcp_update_rcv_ann_wnd+0xb0>)
 80062a6:	4808      	ldr	r0, [pc, #32]	@ (80062c8 <tcp_update_rcv_ann_wnd+0xac>)
 80062a8:	f007 fcd4 	bl	800dc54 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80062b4:	2300      	movs	r3, #0
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	0800f548 	.word	0x0800f548
 80062c4:	0800f7a4 	.word	0x0800f7a4
 80062c8:	0800f58c 	.word	0x0800f58c
 80062cc:	0800f7c8 	.word	0x0800f7c8

080062d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <tcp_recved+0x22>
 80062e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006360 <tcp_recved+0x90>)
 80062e4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80062e8:	491e      	ldr	r1, [pc, #120]	@ (8006364 <tcp_recved+0x94>)
 80062ea:	481f      	ldr	r0, [pc, #124]	@ (8006368 <tcp_recved+0x98>)
 80062ec:	f007 fcb2 	bl	800dc54 <iprintf>
 80062f0:	e032      	b.n	8006358 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	7d1b      	ldrb	r3, [r3, #20]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d106      	bne.n	8006308 <tcp_recved+0x38>
 80062fa:	4b19      	ldr	r3, [pc, #100]	@ (8006360 <tcp_recved+0x90>)
 80062fc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006300:	491a      	ldr	r1, [pc, #104]	@ (800636c <tcp_recved+0x9c>)
 8006302:	4819      	ldr	r0, [pc, #100]	@ (8006368 <tcp_recved+0x98>)
 8006304:	f007 fca6 	bl	800dc54 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800630c:	887b      	ldrh	r3, [r7, #2]
 800630e:	4413      	add	r3, r2
 8006310:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006312:	89fb      	ldrh	r3, [r7, #14]
 8006314:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006318:	d804      	bhi.n	8006324 <tcp_recved+0x54>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631e:	89fa      	ldrh	r2, [r7, #14]
 8006320:	429a      	cmp	r2, r3
 8006322:	d204      	bcs.n	800632e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800632a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800632c:	e002      	b.n	8006334 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	89fa      	ldrh	r2, [r7, #14]
 8006332:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff ff71 	bl	800621c <tcp_update_rcv_ann_wnd>
 800633a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006342:	d309      	bcc.n	8006358 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8b5b      	ldrh	r3, [r3, #26]
 8006348:	f043 0302 	orr.w	r3, r3, #2
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f003 fe3e 	bl	8009fd4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	0800f548 	.word	0x0800f548
 8006364:	0800f7e4 	.word	0x0800f7e4
 8006368:	0800f58c 	.word	0x0800f58c
 800636c:	0800f7fc 	.word	0x0800f7fc

08006370 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006370:	b5b0      	push	{r4, r5, r7, lr}
 8006372:	b090      	sub	sp, #64	@ 0x40
 8006374:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800637c:	4b95      	ldr	r3, [pc, #596]	@ (80065d4 <tcp_slowtmr+0x264>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3301      	adds	r3, #1
 8006382:	4a94      	ldr	r2, [pc, #592]	@ (80065d4 <tcp_slowtmr+0x264>)
 8006384:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006386:	4b94      	ldr	r3, [pc, #592]	@ (80065d8 <tcp_slowtmr+0x268>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	3301      	adds	r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	4b92      	ldr	r3, [pc, #584]	@ (80065d8 <tcp_slowtmr+0x268>)
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	e000      	b.n	8006396 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006394:	bf00      	nop
  prev = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800639a:	4b90      	ldr	r3, [pc, #576]	@ (80065dc <tcp_slowtmr+0x26c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80063a0:	e29f      	b.n	80068e2 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80063a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a4:	7d1b      	ldrb	r3, [r3, #20]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <tcp_slowtmr+0x48>
 80063aa:	4b8d      	ldr	r3, [pc, #564]	@ (80065e0 <tcp_slowtmr+0x270>)
 80063ac:	f240 42be 	movw	r2, #1214	@ 0x4be
 80063b0:	498c      	ldr	r1, [pc, #560]	@ (80065e4 <tcp_slowtmr+0x274>)
 80063b2:	488d      	ldr	r0, [pc, #564]	@ (80065e8 <tcp_slowtmr+0x278>)
 80063b4:	f007 fc4e 	bl	800dc54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80063b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ba:	7d1b      	ldrb	r3, [r3, #20]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d106      	bne.n	80063ce <tcp_slowtmr+0x5e>
 80063c0:	4b87      	ldr	r3, [pc, #540]	@ (80065e0 <tcp_slowtmr+0x270>)
 80063c2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80063c6:	4989      	ldr	r1, [pc, #548]	@ (80065ec <tcp_slowtmr+0x27c>)
 80063c8:	4887      	ldr	r0, [pc, #540]	@ (80065e8 <tcp_slowtmr+0x278>)
 80063ca:	f007 fc43 	bl	800dc54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80063ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d0:	7d1b      	ldrb	r3, [r3, #20]
 80063d2:	2b0a      	cmp	r3, #10
 80063d4:	d106      	bne.n	80063e4 <tcp_slowtmr+0x74>
 80063d6:	4b82      	ldr	r3, [pc, #520]	@ (80065e0 <tcp_slowtmr+0x270>)
 80063d8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80063dc:	4984      	ldr	r1, [pc, #528]	@ (80065f0 <tcp_slowtmr+0x280>)
 80063de:	4882      	ldr	r0, [pc, #520]	@ (80065e8 <tcp_slowtmr+0x278>)
 80063e0:	f007 fc38 	bl	800dc54 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80063e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e6:	7f9a      	ldrb	r2, [r3, #30]
 80063e8:	4b7b      	ldr	r3, [pc, #492]	@ (80065d8 <tcp_slowtmr+0x268>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d105      	bne.n	80063fc <tcp_slowtmr+0x8c>
      prev = pcb;
 80063f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80063f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80063fa:	e272      	b.n	80068e2 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80063fc:	4b76      	ldr	r3, [pc, #472]	@ (80065d8 <tcp_slowtmr+0x268>)
 80063fe:	781a      	ldrb	r2, [r3, #0]
 8006400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006402:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006412:	7d1b      	ldrb	r3, [r3, #20]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d10a      	bne.n	800642e <tcp_slowtmr+0xbe>
 8006418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800641e:	2b05      	cmp	r3, #5
 8006420:	d905      	bls.n	800642e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8006422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006426:	3301      	adds	r3, #1
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800642c:	e11e      	b.n	800666c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800642e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006430:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006434:	2b0b      	cmp	r3, #11
 8006436:	d905      	bls.n	8006444 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8006438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800643c:	3301      	adds	r3, #1
 800643e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006442:	e113      	b.n	800666c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800644a:	2b00      	cmp	r3, #0
 800644c:	d075      	beq.n	800653a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006452:	2b00      	cmp	r3, #0
 8006454:	d006      	beq.n	8006464 <tcp_slowtmr+0xf4>
 8006456:	4b62      	ldr	r3, [pc, #392]	@ (80065e0 <tcp_slowtmr+0x270>)
 8006458:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800645c:	4965      	ldr	r1, [pc, #404]	@ (80065f4 <tcp_slowtmr+0x284>)
 800645e:	4862      	ldr	r0, [pc, #392]	@ (80065e8 <tcp_slowtmr+0x278>)
 8006460:	f007 fbf8 	bl	800dc54 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <tcp_slowtmr+0x10a>
 800646c:	4b5c      	ldr	r3, [pc, #368]	@ (80065e0 <tcp_slowtmr+0x270>)
 800646e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8006472:	4961      	ldr	r1, [pc, #388]	@ (80065f8 <tcp_slowtmr+0x288>)
 8006474:	485c      	ldr	r0, [pc, #368]	@ (80065e8 <tcp_slowtmr+0x278>)
 8006476:	f007 fbed 	bl	800dc54 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800647a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8006480:	2b0b      	cmp	r3, #11
 8006482:	d905      	bls.n	8006490 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8006484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006488:	3301      	adds	r3, #1
 800648a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800648e:	e0ed      	b.n	800666c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006492:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006496:	3b01      	subs	r3, #1
 8006498:	4a58      	ldr	r2, [pc, #352]	@ (80065fc <tcp_slowtmr+0x28c>)
 800649a:	5cd3      	ldrb	r3, [r2, r3]
 800649c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80064a4:	7c7a      	ldrb	r2, [r7, #17]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d907      	bls.n	80064ba <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80064aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80064b0:	3301      	adds	r3, #1
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80064ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80064c0:	7c7a      	ldrb	r2, [r7, #17]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	f200 80d2 	bhi.w	800666c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80064c8:	2301      	movs	r3, #1
 80064ca:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80064cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d108      	bne.n	80064e8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80064d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064d8:	f004 fc24 	bl	800ad24 <tcp_zero_window_probe>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d014      	beq.n	800650c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80064e2:	2300      	movs	r3, #0
 80064e4:	623b      	str	r3, [r7, #32]
 80064e6:	e011      	b.n	800650c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80064ee:	4619      	mov	r1, r3
 80064f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064f2:	f003 fae9 	bl	8009ac8 <tcp_split_unsent_seg>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d107      	bne.n	800650c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80064fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064fe:	f003 fd69 	bl	8009fd4 <tcp_output>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80ac 	beq.w	800666c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8006514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006522:	2b06      	cmp	r3, #6
 8006524:	f200 80a2 	bhi.w	800666c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800652e:	3301      	adds	r3, #1
 8006530:	b2da      	uxtb	r2, r3
 8006532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006534:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8006538:	e098      	b.n	800666c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800653a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006540:	2b00      	cmp	r3, #0
 8006542:	db0f      	blt.n	8006564 <tcp_slowtmr+0x1f4>
 8006544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006546:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800654a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800654e:	4293      	cmp	r3, r2
 8006550:	d008      	beq.n	8006564 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8006552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006554:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006558:	b29b      	uxth	r3, r3
 800655a:	3301      	adds	r3, #1
 800655c:	b29b      	uxth	r3, r3
 800655e:	b21a      	sxth	r2, r3
 8006560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006562:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006570:	429a      	cmp	r2, r3
 8006572:	db7b      	blt.n	800666c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006574:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006576:	f004 f821 	bl	800a5bc <tcp_rexmit_rto_prepare>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <tcp_slowtmr+0x220>
 8006580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006584:	2b00      	cmp	r3, #0
 8006586:	d171      	bne.n	800666c <tcp_slowtmr+0x2fc>
 8006588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d06d      	beq.n	800666c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8006590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006592:	7d1b      	ldrb	r3, [r3, #20]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d03a      	beq.n	800660e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	bf28      	it	cs
 80065a2:	230c      	movcs	r3, #12
 80065a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80065a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80065ac:	10db      	asrs	r3, r3, #3
 80065ae:	b21b      	sxth	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80065b8:	4413      	add	r3, r2
 80065ba:	7efa      	ldrb	r2, [r7, #27]
 80065bc:	4910      	ldr	r1, [pc, #64]	@ (8006600 <tcp_slowtmr+0x290>)
 80065be:	5c8a      	ldrb	r2, [r1, r2]
 80065c0:	4093      	lsls	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80065ca:	4293      	cmp	r3, r2
 80065cc:	dc1a      	bgt.n	8006604 <tcp_slowtmr+0x294>
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	b21a      	sxth	r2, r3
 80065d2:	e019      	b.n	8006608 <tcp_slowtmr+0x298>
 80065d4:	20008284 	.word	0x20008284
 80065d8:	2000829a 	.word	0x2000829a
 80065dc:	20008290 	.word	0x20008290
 80065e0:	0800f548 	.word	0x0800f548
 80065e4:	0800f88c 	.word	0x0800f88c
 80065e8:	0800f58c 	.word	0x0800f58c
 80065ec:	0800f8b8 	.word	0x0800f8b8
 80065f0:	0800f8e4 	.word	0x0800f8e4
 80065f4:	0800f914 	.word	0x0800f914
 80065f8:	0800f948 	.word	0x0800f948
 80065fc:	08011520 	.word	0x08011520
 8006600:	08011510 	.word	0x08011510
 8006604:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006610:	2200      	movs	r2, #0
 8006612:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006616:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8006620:	4293      	cmp	r3, r2
 8006622:	bf28      	it	cs
 8006624:	4613      	movcs	r3, r2
 8006626:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006628:	8a7b      	ldrh	r3, [r7, #18]
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006630:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800663a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	b29b      	uxth	r3, r3
 8006642:	429a      	cmp	r2, r3
 8006644:	d206      	bcs.n	8006654 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006650:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006660:	2200      	movs	r2, #0
 8006662:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8006666:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006668:	f004 f818 	bl	800a69c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800666c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666e:	7d1b      	ldrb	r3, [r3, #20]
 8006670:	2b06      	cmp	r3, #6
 8006672:	d111      	bne.n	8006698 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8006674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006676:	8b5b      	ldrh	r3, [r3, #26]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006680:	4b9d      	ldr	r3, [pc, #628]	@ (80068f8 <tcp_slowtmr+0x588>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b28      	cmp	r3, #40	@ 0x28
 800668c:	d904      	bls.n	8006698 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800668e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006692:	3301      	adds	r3, #1
 8006694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	7a5b      	ldrb	r3, [r3, #9]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d04c      	beq.n	800673e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d003      	beq.n	80066b4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80066ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80066b0:	2b07      	cmp	r3, #7
 80066b2:	d144      	bne.n	800673e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066b4:	4b90      	ldr	r3, [pc, #576]	@ (80068f8 <tcp_slowtmr+0x588>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80066be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066c4:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80066c8:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80066cc:	498b      	ldr	r1, [pc, #556]	@ (80068fc <tcp_slowtmr+0x58c>)
 80066ce:	fba1 1303 	umull	r1, r3, r1, r3
 80066d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d90a      	bls.n	80066ee <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80066d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066dc:	3301      	adds	r3, #1
 80066de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80066e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066e6:	3301      	adds	r3, #1
 80066e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80066ec:	e027      	b.n	800673e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066ee:	4b82      	ldr	r3, [pc, #520]	@ (80068f8 <tcp_slowtmr+0x588>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80066f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80066fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006700:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006704:	4618      	mov	r0, r3
 8006706:	4b7e      	ldr	r3, [pc, #504]	@ (8006900 <tcp_slowtmr+0x590>)
 8006708:	fb00 f303 	mul.w	r3, r0, r3
 800670c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800670e:	497b      	ldr	r1, [pc, #492]	@ (80068fc <tcp_slowtmr+0x58c>)
 8006710:	fba1 1303 	umull	r1, r3, r1, r3
 8006714:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006716:	429a      	cmp	r2, r3
 8006718:	d911      	bls.n	800673e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800671a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800671c:	f004 fac2 	bl	800aca4 <tcp_keepalive>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8006726:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800672a:	2b00      	cmp	r3, #0
 800672c:	d107      	bne.n	800673e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800672e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006730:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006734:	3301      	adds	r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800673e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006742:	2b00      	cmp	r3, #0
 8006744:	d011      	beq.n	800676a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006746:	4b6c      	ldr	r3, [pc, #432]	@ (80068f8 <tcp_slowtmr+0x588>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006756:	4619      	mov	r1, r3
 8006758:	460b      	mov	r3, r1
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	440b      	add	r3, r1
 800675e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006760:	429a      	cmp	r2, r3
 8006762:	d302      	bcc.n	800676a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8006764:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006766:	f000 fddb 	bl	8007320 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800676a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676c:	7d1b      	ldrb	r3, [r3, #20]
 800676e:	2b03      	cmp	r3, #3
 8006770:	d10b      	bne.n	800678a <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006772:	4b61      	ldr	r3, [pc, #388]	@ (80068f8 <tcp_slowtmr+0x588>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b28      	cmp	r3, #40	@ 0x28
 800677e:	d904      	bls.n	800678a <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8006780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006784:	3301      	adds	r3, #1
 8006786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800678a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678c:	7d1b      	ldrb	r3, [r3, #20]
 800678e:	2b09      	cmp	r3, #9
 8006790:	d10b      	bne.n	80067aa <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006792:	4b59      	ldr	r3, [pc, #356]	@ (80068f8 <tcp_slowtmr+0x588>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2bf0      	cmp	r3, #240	@ 0xf0
 800679e:	d904      	bls.n	80067aa <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80067a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067a4:	3301      	adds	r3, #1
 80067a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80067aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d060      	beq.n	8006874 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80067ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067bc:	f000 fbfc 	bl	8006fb8 <tcp_pcb_purge>
      if (prev != NULL) {
 80067c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d010      	beq.n	80067e8 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80067c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006904 <tcp_slowtmr+0x594>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d106      	bne.n	80067de <tcp_slowtmr+0x46e>
 80067d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006908 <tcp_slowtmr+0x598>)
 80067d2:	f240 526d 	movw	r2, #1389	@ 0x56d
 80067d6:	494d      	ldr	r1, [pc, #308]	@ (800690c <tcp_slowtmr+0x59c>)
 80067d8:	484d      	ldr	r0, [pc, #308]	@ (8006910 <tcp_slowtmr+0x5a0>)
 80067da:	f007 fa3b 	bl	800dc54 <iprintf>
        prev->next = pcb->next;
 80067de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	e00f      	b.n	8006808 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80067e8:	4b46      	ldr	r3, [pc, #280]	@ (8006904 <tcp_slowtmr+0x594>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d006      	beq.n	8006800 <tcp_slowtmr+0x490>
 80067f2:	4b45      	ldr	r3, [pc, #276]	@ (8006908 <tcp_slowtmr+0x598>)
 80067f4:	f240 5271 	movw	r2, #1393	@ 0x571
 80067f8:	4946      	ldr	r1, [pc, #280]	@ (8006914 <tcp_slowtmr+0x5a4>)
 80067fa:	4845      	ldr	r0, [pc, #276]	@ (8006910 <tcp_slowtmr+0x5a0>)
 80067fc:	f007 fa2a 	bl	800dc54 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4a3f      	ldr	r2, [pc, #252]	@ (8006904 <tcp_slowtmr+0x594>)
 8006806:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8006808:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800680c:	2b00      	cmp	r3, #0
 800680e:	d013      	beq.n	8006838 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006812:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006816:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006818:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800681a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681c:	3304      	adds	r3, #4
 800681e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006820:	8ad2      	ldrh	r2, [r2, #22]
 8006822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006824:	8b09      	ldrh	r1, [r1, #24]
 8006826:	9102      	str	r1, [sp, #8]
 8006828:	9201      	str	r2, [sp, #4]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	462b      	mov	r3, r5
 800682e:	4622      	mov	r2, r4
 8006830:	4601      	mov	r1, r0
 8006832:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006834:	f004 f982 	bl	800ab3c <tcp_rst>
      err_arg = pcb->callback_arg;
 8006838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800683e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006840:	7d1b      	ldrb	r3, [r3, #20]
 8006842:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006846:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800684e:	6838      	ldr	r0, [r7, #0]
 8006850:	f7ff f9f0 	bl	8005c34 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8006854:	4b30      	ldr	r3, [pc, #192]	@ (8006918 <tcp_slowtmr+0x5a8>)
 8006856:	2200      	movs	r2, #0
 8006858:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <tcp_slowtmr+0x4fa>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f06f 010c 	mvn.w	r1, #12
 8006866:	68b8      	ldr	r0, [r7, #8]
 8006868:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800686a:	4b2b      	ldr	r3, [pc, #172]	@ (8006918 <tcp_slowtmr+0x5a8>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d037      	beq.n	80068e2 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8006872:	e590      	b.n	8006396 <tcp_slowtmr+0x26>
      prev = pcb;
 8006874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006876:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	7f1b      	ldrb	r3, [r3, #28]
 8006882:	3301      	adds	r3, #1
 8006884:	b2da      	uxtb	r2, r3
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	7f1a      	ldrb	r2, [r3, #28]
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	7f5b      	ldrb	r3, [r3, #29]
 8006892:	429a      	cmp	r2, r3
 8006894:	d325      	bcc.n	80068e2 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8006896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006898:	2200      	movs	r2, #0
 800689a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800689c:	4b1e      	ldr	r3, [pc, #120]	@ (8006918 <tcp_slowtmr+0x5a8>)
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <tcp_slowtmr+0x554>
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068b4:	6912      	ldr	r2, [r2, #16]
 80068b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068b8:	4610      	mov	r0, r2
 80068ba:	4798      	blx	r3
 80068bc:	4603      	mov	r3, r0
 80068be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80068c2:	e002      	b.n	80068ca <tcp_slowtmr+0x55a>
 80068c4:	2300      	movs	r3, #0
 80068c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80068ca:	4b13      	ldr	r3, [pc, #76]	@ (8006918 <tcp_slowtmr+0x5a8>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f47f ad60 	bne.w	8006394 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80068d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <tcp_slowtmr+0x572>
          tcp_output(prev);
 80068dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068de:	f003 fb79 	bl	8009fd4 <tcp_output>
  while (pcb != NULL) {
 80068e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f47f ad5c 	bne.w	80063a2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <tcp_slowtmr+0x5ac>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80068f4:	e067      	b.n	80069c6 <tcp_slowtmr+0x656>
 80068f6:	bf00      	nop
 80068f8:	20008284 	.word	0x20008284
 80068fc:	10624dd3 	.word	0x10624dd3
 8006900:	000124f8 	.word	0x000124f8
 8006904:	20008290 	.word	0x20008290
 8006908:	0800f548 	.word	0x0800f548
 800690c:	0800f980 	.word	0x0800f980
 8006910:	0800f58c 	.word	0x0800f58c
 8006914:	0800f9ac 	.word	0x0800f9ac
 8006918:	20008298 	.word	0x20008298
 800691c:	20008294 	.word	0x20008294
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006922:	7d1b      	ldrb	r3, [r3, #20]
 8006924:	2b0a      	cmp	r3, #10
 8006926:	d006      	beq.n	8006936 <tcp_slowtmr+0x5c6>
 8006928:	4b2b      	ldr	r3, [pc, #172]	@ (80069d8 <tcp_slowtmr+0x668>)
 800692a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800692e:	492b      	ldr	r1, [pc, #172]	@ (80069dc <tcp_slowtmr+0x66c>)
 8006930:	482b      	ldr	r0, [pc, #172]	@ (80069e0 <tcp_slowtmr+0x670>)
 8006932:	f007 f98f 	bl	800dc54 <iprintf>
    pcb_remove = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800693c:	4b29      	ldr	r3, [pc, #164]	@ (80069e4 <tcp_slowtmr+0x674>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2bf0      	cmp	r3, #240	@ 0xf0
 8006948:	d904      	bls.n	8006954 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800694a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800694e:	3301      	adds	r3, #1
 8006950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006958:	2b00      	cmp	r3, #0
 800695a:	d02f      	beq.n	80069bc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800695c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800695e:	f000 fb2b 	bl	8006fb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d010      	beq.n	800698a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006968:	4b1f      	ldr	r3, [pc, #124]	@ (80069e8 <tcp_slowtmr+0x678>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800696e:	429a      	cmp	r2, r3
 8006970:	d106      	bne.n	8006980 <tcp_slowtmr+0x610>
 8006972:	4b19      	ldr	r3, [pc, #100]	@ (80069d8 <tcp_slowtmr+0x668>)
 8006974:	f240 52af 	movw	r2, #1455	@ 0x5af
 8006978:	491c      	ldr	r1, [pc, #112]	@ (80069ec <tcp_slowtmr+0x67c>)
 800697a:	4819      	ldr	r0, [pc, #100]	@ (80069e0 <tcp_slowtmr+0x670>)
 800697c:	f007 f96a 	bl	800dc54 <iprintf>
        prev->next = pcb->next;
 8006980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006986:	60da      	str	r2, [r3, #12]
 8006988:	e00f      	b.n	80069aa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800698a:	4b17      	ldr	r3, [pc, #92]	@ (80069e8 <tcp_slowtmr+0x678>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006990:	429a      	cmp	r2, r3
 8006992:	d006      	beq.n	80069a2 <tcp_slowtmr+0x632>
 8006994:	4b10      	ldr	r3, [pc, #64]	@ (80069d8 <tcp_slowtmr+0x668>)
 8006996:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800699a:	4915      	ldr	r1, [pc, #84]	@ (80069f0 <tcp_slowtmr+0x680>)
 800699c:	4810      	ldr	r0, [pc, #64]	@ (80069e0 <tcp_slowtmr+0x670>)
 800699e:	f007 f959 	bl	800dc54 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80069a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	4a10      	ldr	r2, [pc, #64]	@ (80069e8 <tcp_slowtmr+0x678>)
 80069a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80069aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80069ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80069b4:	69f8      	ldr	r0, [r7, #28]
 80069b6:	f7ff f93d 	bl	8005c34 <tcp_free>
 80069ba:	e004      	b.n	80069c6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80069c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1a9      	bne.n	8006920 <tcp_slowtmr+0x5b0>
    }
  }
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	3730      	adds	r7, #48	@ 0x30
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bdb0      	pop	{r4, r5, r7, pc}
 80069d6:	bf00      	nop
 80069d8:	0800f548 	.word	0x0800f548
 80069dc:	0800f9d8 	.word	0x0800f9d8
 80069e0:	0800f58c 	.word	0x0800f58c
 80069e4:	20008284 	.word	0x20008284
 80069e8:	20008294 	.word	0x20008294
 80069ec:	0800fa08 	.word	0x0800fa08
 80069f0:	0800fa30 	.word	0x0800fa30

080069f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80069fa:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab0 <tcp_fasttmr+0xbc>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	3301      	adds	r3, #1
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab0 <tcp_fasttmr+0xbc>)
 8006a04:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006a06:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab4 <tcp_fasttmr+0xc0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006a0c:	e048      	b.n	8006aa0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7f9a      	ldrb	r2, [r3, #30]
 8006a12:	4b27      	ldr	r3, [pc, #156]	@ (8006ab0 <tcp_fasttmr+0xbc>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d03f      	beq.n	8006a9a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006a1a:	4b25      	ldr	r3, [pc, #148]	@ (8006ab0 <tcp_fasttmr+0xbc>)
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8b5b      	ldrh	r3, [r3, #26]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d010      	beq.n	8006a50 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	8b5b      	ldrh	r3, [r3, #26]
 8006a32:	f043 0302 	orr.w	r3, r3, #2
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f003 fac9 	bl	8009fd4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8b5b      	ldrh	r3, [r3, #26]
 8006a46:	f023 0303 	bic.w	r3, r3, #3
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8b5b      	ldrh	r3, [r3, #26]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8b5b      	ldrh	r3, [r3, #26]
 8006a60:	f023 0308 	bic.w	r3, r3, #8
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fa76 	bl	8005f5c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ab8 <tcp_fasttmr+0xc4>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f819 	bl	8006abc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <tcp_fasttmr+0xc4>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d000      	beq.n	8006a94 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006a92:	e7b8      	b.n	8006a06 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	e002      	b.n	8006aa0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1b3      	bne.n	8006a0e <tcp_fasttmr+0x1a>
    }
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	bf00      	nop
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	2000829a 	.word	0x2000829a
 8006ab4:	20008290 	.word	0x20008290
 8006ab8:	20008298 	.word	0x20008298

08006abc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <tcp_process_refused_data+0x22>
 8006aca:	4b37      	ldr	r3, [pc, #220]	@ (8006ba8 <tcp_process_refused_data+0xec>)
 8006acc:	f240 6209 	movw	r2, #1545	@ 0x609
 8006ad0:	4936      	ldr	r1, [pc, #216]	@ (8006bac <tcp_process_refused_data+0xf0>)
 8006ad2:	4837      	ldr	r0, [pc, #220]	@ (8006bb0 <tcp_process_refused_data+0xf4>)
 8006ad4:	f007 f8be 	bl	800dc54 <iprintf>
 8006ad8:	f06f 030f 	mvn.w	r3, #15
 8006adc:	e060      	b.n	8006ba0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ae2:	7b5b      	ldrb	r3, [r3, #13]
 8006ae4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006aea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <tcp_process_refused_data+0x58>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6918      	ldr	r0, [r3, #16]
 8006b06:	2300      	movs	r3, #0
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	47a0      	blx	r4
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]
 8006b12:	e007      	b.n	8006b24 <tcp_process_refused_data+0x68>
 8006b14:	2300      	movs	r3, #0
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f000 f8a4 	bl	8006c68 <tcp_recv_null>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d12a      	bne.n	8006b82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d033      	beq.n	8006b9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006b3e:	d005      	beq.n	8006b4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b44:	3301      	adds	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <tcp_process_refused_data+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6918      	ldr	r0, [r3, #16]
 8006b60:	2300      	movs	r3, #0
 8006b62:	2200      	movs	r2, #0
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	47a0      	blx	r4
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
 8006b6c:	e001      	b.n	8006b72 <tcp_process_refused_data+0xb6>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b76:	f113 0f0d 	cmn.w	r3, #13
 8006b7a:	d110      	bne.n	8006b9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006b7c:	f06f 030c 	mvn.w	r3, #12
 8006b80:	e00e      	b.n	8006ba0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b86:	f113 0f0d 	cmn.w	r3, #13
 8006b8a:	d102      	bne.n	8006b92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006b8c:	f06f 030c 	mvn.w	r3, #12
 8006b90:	e006      	b.n	8006ba0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8006b98:	f06f 0304 	mvn.w	r3, #4
 8006b9c:	e000      	b.n	8006ba0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd90      	pop	{r4, r7, pc}
 8006ba8:	0800f548 	.word	0x0800f548
 8006bac:	0800fa58 	.word	0x0800fa58
 8006bb0:	0800f58c 	.word	0x0800f58c

08006bb4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006bbc:	e007      	b.n	8006bce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f80a 	bl	8006bde <tcp_seg_free>
    seg = next;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f4      	bne.n	8006bbe <tcp_segs_free+0xa>
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00c      	beq.n	8006c06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fe fd7b 	bl	80056f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	2003      	movs	r0, #3
 8006c02:	f7fd ff01 	bl	8004a08 <memp_free>
  }
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <tcp_seg_copy+0x1c>
 8006c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c5c <tcp_seg_copy+0x4c>)
 8006c20:	f240 6282 	movw	r2, #1666	@ 0x682
 8006c24:	490e      	ldr	r1, [pc, #56]	@ (8006c60 <tcp_seg_copy+0x50>)
 8006c26:	480f      	ldr	r0, [pc, #60]	@ (8006c64 <tcp_seg_copy+0x54>)
 8006c28:	f007 f814 	bl	800dc54 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006c2c:	2003      	movs	r0, #3
 8006c2e:	f7fd fe7b 	bl	8004928 <memp_malloc>
 8006c32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <tcp_seg_copy+0x2e>
    return NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e00a      	b.n	8006c54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006c3e:	2210      	movs	r2, #16
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f007 f8e1 	bl	800de0a <memcpy>
  pbuf_ref(cseg->p);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fe fdf1 	bl	8005834 <pbuf_ref>
  return cseg;
 8006c52:	68fb      	ldr	r3, [r7, #12]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	0800f548 	.word	0x0800f548
 8006c60:	0800fa9c 	.word	0x0800fa9c
 8006c64:	0800f58c 	.word	0x0800f58c

08006c68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <tcp_recv_null+0x28>
 8006c7c:	4b12      	ldr	r3, [pc, #72]	@ (8006cc8 <tcp_recv_null+0x60>)
 8006c7e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8006c82:	4912      	ldr	r1, [pc, #72]	@ (8006ccc <tcp_recv_null+0x64>)
 8006c84:	4812      	ldr	r0, [pc, #72]	@ (8006cd0 <tcp_recv_null+0x68>)
 8006c86:	f006 ffe5 	bl	800dc54 <iprintf>
 8006c8a:	f06f 030f 	mvn.w	r3, #15
 8006c8e:	e016      	b.n	8006cbe <tcp_recv_null+0x56>

  if (p != NULL) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	891b      	ldrh	r3, [r3, #8]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	68b8      	ldr	r0, [r7, #8]
 8006c9e:	f7ff fb17 	bl	80062d0 <tcp_recved>
    pbuf_free(p);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fe fd26 	bl	80056f4 <pbuf_free>
 8006ca8:	e008      	b.n	8006cbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006cb2:	68b8      	ldr	r0, [r7, #8]
 8006cb4:	f7ff f9bc 	bl	8006030 <tcp_close>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	e000      	b.n	8006cbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	0800f548 	.word	0x0800f548
 8006ccc:	0800fab8 	.word	0x0800fab8
 8006cd0:	0800f58c 	.word	0x0800f58c

08006cd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	db01      	blt.n	8006cea <tcp_kill_prio+0x16>
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	e000      	b.n	8006cec <tcp_kill_prio+0x18>
 8006cea:	237f      	movs	r3, #127	@ 0x7f
 8006cec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006cee:	7afb      	ldrb	r3, [r7, #11]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d034      	beq.n	8006d5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d02:	4b19      	ldr	r3, [pc, #100]	@ (8006d68 <tcp_kill_prio+0x94>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	e01f      	b.n	8006d4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	7d5b      	ldrb	r3, [r3, #21]
 8006d0e:	7afa      	ldrb	r2, [r7, #11]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d80c      	bhi.n	8006d2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006d18:	7afa      	ldrb	r2, [r7, #11]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d112      	bne.n	8006d44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006d1e:	4b13      	ldr	r3, [pc, #76]	@ (8006d6c <tcp_kill_prio+0x98>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d80a      	bhi.n	8006d44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d6c <tcp_kill_prio+0x98>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	7d5b      	ldrb	r3, [r3, #21]
 8006d42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1dc      	bne.n	8006d0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d004      	beq.n	8006d60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006d56:	6938      	ldr	r0, [r7, #16]
 8006d58:	f7ff fa54 	bl	8006204 <tcp_abort>
 8006d5c:	e000      	b.n	8006d60 <tcp_kill_prio+0x8c>
    return;
 8006d5e:	bf00      	nop
  }
}
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20008290 	.word	0x20008290
 8006d6c:	20008284 	.word	0x20008284

08006d70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d009      	beq.n	8006d94 <tcp_kill_state+0x24>
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b09      	cmp	r3, #9
 8006d84:	d006      	beq.n	8006d94 <tcp_kill_state+0x24>
 8006d86:	4b1a      	ldr	r3, [pc, #104]	@ (8006df0 <tcp_kill_state+0x80>)
 8006d88:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8006d8c:	4919      	ldr	r1, [pc, #100]	@ (8006df4 <tcp_kill_state+0x84>)
 8006d8e:	481a      	ldr	r0, [pc, #104]	@ (8006df8 <tcp_kill_state+0x88>)
 8006d90:	f006 ff60 	bl	800dc54 <iprintf>

  inactivity = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d9c:	4b17      	ldr	r3, [pc, #92]	@ (8006dfc <tcp_kill_state+0x8c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e017      	b.n	8006dd4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	7d1b      	ldrb	r3, [r3, #20]
 8006da8:	79fa      	ldrb	r2, [r7, #7]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d10f      	bne.n	8006dce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006dae:	4b14      	ldr	r3, [pc, #80]	@ (8006e00 <tcp_kill_state+0x90>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d807      	bhi.n	8006dce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006dbe:	4b10      	ldr	r3, [pc, #64]	@ (8006e00 <tcp_kill_state+0x90>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e4      	bne.n	8006da4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006de0:	2100      	movs	r1, #0
 8006de2:	6938      	ldr	r0, [r7, #16]
 8006de4:	f7ff f950 	bl	8006088 <tcp_abandon>
  }
}
 8006de8:	bf00      	nop
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	0800f548 	.word	0x0800f548
 8006df4:	0800fad4 	.word	0x0800fad4
 8006df8:	0800f58c 	.word	0x0800f58c
 8006dfc:	20008290 	.word	0x20008290
 8006e00:	20008284 	.word	0x20008284

08006e04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e12:	4b12      	ldr	r3, [pc, #72]	@ (8006e5c <tcp_kill_timewait+0x58>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e012      	b.n	8006e40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006e1a:	4b11      	ldr	r3, [pc, #68]	@ (8006e60 <tcp_kill_timewait+0x5c>)
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d807      	bhi.n	8006e3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <tcp_kill_timewait+0x5c>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e9      	bne.n	8006e1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006e4c:	68b8      	ldr	r0, [r7, #8]
 8006e4e:	f7ff f9d9 	bl	8006204 <tcp_abort>
  }
}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20008294 	.word	0x20008294
 8006e60:	20008284 	.word	0x20008284

08006e64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006e6a:	4b10      	ldr	r3, [pc, #64]	@ (8006eac <tcp_handle_closepend+0x48>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006e70:	e014      	b.n	8006e9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8b5b      	ldrh	r3, [r3, #26]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8b5b      	ldrh	r3, [r3, #26]
 8006e88:	f023 0308 	bic.w	r3, r3, #8
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff f862 	bl	8005f5c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e7      	bne.n	8006e72 <tcp_handle_closepend+0xe>
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20008290 	.word	0x20008290

08006eb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006eba:	2001      	movs	r0, #1
 8006ebc:	f7fd fd34 	bl	8004928 <memp_malloc>
 8006ec0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d126      	bne.n	8006f16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006ec8:	f7ff ffcc 	bl	8006e64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006ecc:	f7ff ff9a 	bl	8006e04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	f7fd fd29 	bl	8004928 <memp_malloc>
 8006ed6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d11b      	bne.n	8006f16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006ede:	2009      	movs	r0, #9
 8006ee0:	f7ff ff46 	bl	8006d70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	f7fd fd1f 	bl	8004928 <memp_malloc>
 8006eea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d111      	bne.n	8006f16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006ef2:	2008      	movs	r0, #8
 8006ef4:	f7ff ff3c 	bl	8006d70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ef8:	2001      	movs	r0, #1
 8006efa:	f7fd fd15 	bl	8004928 <memp_malloc>
 8006efe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d107      	bne.n	8006f16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fee3 	bl	8006cd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f0e:	2001      	movs	r0, #1
 8006f10:	f7fd fd0a 	bl	8004928 <memp_malloc>
 8006f14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d03f      	beq.n	8006f9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006f1c:	229c      	movs	r2, #156	@ 0x9c
 8006f1e:	2100      	movs	r1, #0
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f006 fefc 	bl	800dd1e <memset>
    pcb->prio = prio;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	79fa      	ldrb	r2, [r7, #7]
 8006f2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006f32:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	22ff      	movs	r2, #255	@ 0xff
 8006f4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006f52:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2206      	movs	r2, #6
 8006f58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2206      	movs	r2, #6
 8006f60:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f68:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8006f72:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa8 <tcp_alloc+0xf8>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fac <tcp_alloc+0xfc>)
 8006f7c:	781a      	ldrb	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006f88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4a08      	ldr	r2, [pc, #32]	@ (8006fb0 <tcp_alloc+0x100>)
 8006f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4a07      	ldr	r2, [pc, #28]	@ (8006fb4 <tcp_alloc+0x104>)
 8006f98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20008284 	.word	0x20008284
 8006fac:	2000829a 	.word	0x2000829a
 8006fb0:	08006c69 	.word	0x08006c69
 8006fb4:	006ddd00 	.word	0x006ddd00

08006fb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d107      	bne.n	8006fd6 <tcp_pcb_purge+0x1e>
 8006fc6:	4b21      	ldr	r3, [pc, #132]	@ (800704c <tcp_pcb_purge+0x94>)
 8006fc8:	f640 0251 	movw	r2, #2129	@ 0x851
 8006fcc:	4920      	ldr	r1, [pc, #128]	@ (8007050 <tcp_pcb_purge+0x98>)
 8006fce:	4821      	ldr	r0, [pc, #132]	@ (8007054 <tcp_pcb_purge+0x9c>)
 8006fd0:	f006 fe40 	bl	800dc54 <iprintf>
 8006fd4:	e037      	b.n	8007046 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7d1b      	ldrb	r3, [r3, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d033      	beq.n	8007046 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006fe2:	2b0a      	cmp	r3, #10
 8006fe4:	d02f      	beq.n	8007046 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d02b      	beq.n	8007046 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fb7a 	bl	80056f4 <pbuf_free>
      pcb->refused_data = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f986 	bl	8007320 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800701a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff fdc7 	bl	8006bb4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fdc2 	bl	8006bb4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	0800f548 	.word	0x0800f548
 8007050:	0800fb94 	.word	0x0800fb94
 8007054:	0800f58c 	.word	0x0800f58c

08007058 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <tcp_pcb_remove+0x1e>
 8007068:	4b3e      	ldr	r3, [pc, #248]	@ (8007164 <tcp_pcb_remove+0x10c>)
 800706a:	f640 0283 	movw	r2, #2179	@ 0x883
 800706e:	493e      	ldr	r1, [pc, #248]	@ (8007168 <tcp_pcb_remove+0x110>)
 8007070:	483e      	ldr	r0, [pc, #248]	@ (800716c <tcp_pcb_remove+0x114>)
 8007072:	f006 fdef 	bl	800dc54 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <tcp_pcb_remove+0x32>
 800707c:	4b39      	ldr	r3, [pc, #228]	@ (8007164 <tcp_pcb_remove+0x10c>)
 800707e:	f640 0284 	movw	r2, #2180	@ 0x884
 8007082:	493b      	ldr	r1, [pc, #236]	@ (8007170 <tcp_pcb_remove+0x118>)
 8007084:	4839      	ldr	r0, [pc, #228]	@ (800716c <tcp_pcb_remove+0x114>)
 8007086:	f006 fde5 	bl	800dc54 <iprintf>

  TCP_RMV(pcblist, pcb);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d105      	bne.n	80070a0 <tcp_pcb_remove+0x48>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e013      	b.n	80070c8 <tcp_pcb_remove+0x70>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e00c      	b.n	80070c2 <tcp_pcb_remove+0x6a>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d104      	bne.n	80070bc <tcp_pcb_remove+0x64>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	60da      	str	r2, [r3, #12]
 80070ba:	e005      	b.n	80070c8 <tcp_pcb_remove+0x70>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1ef      	bne.n	80070a8 <tcp_pcb_remove+0x50>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80070ce:	6838      	ldr	r0, [r7, #0]
 80070d0:	f7ff ff72 	bl	8006fb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	7d1b      	ldrb	r3, [r3, #20]
 80070d8:	2b0a      	cmp	r3, #10
 80070da:	d013      	beq.n	8007104 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d00f      	beq.n	8007104 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	8b5b      	ldrh	r3, [r3, #26]
 80070e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	8b5b      	ldrh	r3, [r3, #26]
 80070f4:	f043 0302 	orr.w	r3, r3, #2
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80070fe:	6838      	ldr	r0, [r7, #0]
 8007100:	f002 ff68 	bl	8009fd4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	7d1b      	ldrb	r3, [r3, #20]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d020      	beq.n	800714e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <tcp_pcb_remove+0xca>
 8007114:	4b13      	ldr	r3, [pc, #76]	@ (8007164 <tcp_pcb_remove+0x10c>)
 8007116:	f640 0293 	movw	r2, #2195	@ 0x893
 800711a:	4916      	ldr	r1, [pc, #88]	@ (8007174 <tcp_pcb_remove+0x11c>)
 800711c:	4813      	ldr	r0, [pc, #76]	@ (800716c <tcp_pcb_remove+0x114>)
 800711e:	f006 fd99 	bl	800dc54 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007126:	2b00      	cmp	r3, #0
 8007128:	d006      	beq.n	8007138 <tcp_pcb_remove+0xe0>
 800712a:	4b0e      	ldr	r3, [pc, #56]	@ (8007164 <tcp_pcb_remove+0x10c>)
 800712c:	f640 0294 	movw	r2, #2196	@ 0x894
 8007130:	4911      	ldr	r1, [pc, #68]	@ (8007178 <tcp_pcb_remove+0x120>)
 8007132:	480e      	ldr	r0, [pc, #56]	@ (800716c <tcp_pcb_remove+0x114>)
 8007134:	f006 fd8e 	bl	800dc54 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800713c:	2b00      	cmp	r3, #0
 800713e:	d006      	beq.n	800714e <tcp_pcb_remove+0xf6>
 8007140:	4b08      	ldr	r3, [pc, #32]	@ (8007164 <tcp_pcb_remove+0x10c>)
 8007142:	f640 0296 	movw	r2, #2198	@ 0x896
 8007146:	490d      	ldr	r1, [pc, #52]	@ (800717c <tcp_pcb_remove+0x124>)
 8007148:	4808      	ldr	r0, [pc, #32]	@ (800716c <tcp_pcb_remove+0x114>)
 800714a:	f006 fd83 	bl	800dc54 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2200      	movs	r2, #0
 8007152:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2200      	movs	r2, #0
 8007158:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	0800f548 	.word	0x0800f548
 8007168:	0800fbb0 	.word	0x0800fbb0
 800716c:	0800f58c 	.word	0x0800f58c
 8007170:	0800fbcc 	.word	0x0800fbcc
 8007174:	0800fbec 	.word	0x0800fbec
 8007178:	0800fc04 	.word	0x0800fc04
 800717c:	0800fc20 	.word	0x0800fc20

08007180 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <tcp_next_iss+0x1c>
 800718e:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <tcp_next_iss+0x38>)
 8007190:	f640 02af 	movw	r2, #2223	@ 0x8af
 8007194:	4909      	ldr	r1, [pc, #36]	@ (80071bc <tcp_next_iss+0x3c>)
 8007196:	480a      	ldr	r0, [pc, #40]	@ (80071c0 <tcp_next_iss+0x40>)
 8007198:	f006 fd5c 	bl	800dc54 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800719c:	4b09      	ldr	r3, [pc, #36]	@ (80071c4 <tcp_next_iss+0x44>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4b09      	ldr	r3, [pc, #36]	@ (80071c8 <tcp_next_iss+0x48>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4413      	add	r3, r2
 80071a6:	4a07      	ldr	r2, [pc, #28]	@ (80071c4 <tcp_next_iss+0x44>)
 80071a8:	6013      	str	r3, [r2, #0]
  return iss;
 80071aa:	4b06      	ldr	r3, [pc, #24]	@ (80071c4 <tcp_next_iss+0x44>)
 80071ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	0800f548 	.word	0x0800f548
 80071bc:	0800fc38 	.word	0x0800fc38
 80071c0:	0800f58c 	.word	0x0800f58c
 80071c4:	20000024 	.word	0x20000024
 80071c8:	20008284 	.word	0x20008284

080071cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <tcp_eff_send_mss_netif+0x22>
 80071e0:	4b14      	ldr	r3, [pc, #80]	@ (8007234 <tcp_eff_send_mss_netif+0x68>)
 80071e2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80071e6:	4914      	ldr	r1, [pc, #80]	@ (8007238 <tcp_eff_send_mss_netif+0x6c>)
 80071e8:	4814      	ldr	r0, [pc, #80]	@ (800723c <tcp_eff_send_mss_netif+0x70>)
 80071ea:	f006 fd33 	bl	800dc54 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80071f4:	89fb      	ldrh	r3, [r7, #14]
 80071f6:	e019      	b.n	800722c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80071fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80071fe:	8afb      	ldrh	r3, [r7, #22]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d012      	beq.n	800722a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007204:	2328      	movs	r3, #40	@ 0x28
 8007206:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007208:	8afa      	ldrh	r2, [r7, #22]
 800720a:	8abb      	ldrh	r3, [r7, #20]
 800720c:	429a      	cmp	r2, r3
 800720e:	d904      	bls.n	800721a <tcp_eff_send_mss_netif+0x4e>
 8007210:	8afa      	ldrh	r2, [r7, #22]
 8007212:	8abb      	ldrh	r3, [r7, #20]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	b29b      	uxth	r3, r3
 8007218:	e000      	b.n	800721c <tcp_eff_send_mss_netif+0x50>
 800721a:	2300      	movs	r3, #0
 800721c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800721e:	8a7a      	ldrh	r2, [r7, #18]
 8007220:	89fb      	ldrh	r3, [r7, #14]
 8007222:	4293      	cmp	r3, r2
 8007224:	bf28      	it	cs
 8007226:	4613      	movcs	r3, r2
 8007228:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800722a:	89fb      	ldrh	r3, [r7, #14]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	0800f548 	.word	0x0800f548
 8007238:	0800fc54 	.word	0x0800fc54
 800723c:	0800f58c 	.word	0x0800f58c

08007240 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d119      	bne.n	8007288 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007254:	4b10      	ldr	r3, [pc, #64]	@ (8007298 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007256:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800725a:	4910      	ldr	r1, [pc, #64]	@ (800729c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800725c:	4810      	ldr	r0, [pc, #64]	@ (80072a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800725e:	f006 fcf9 	bl	800dc54 <iprintf>

  while (pcb != NULL) {
 8007262:	e011      	b.n	8007288 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d108      	bne.n	8007282 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7fe ffc4 	bl	8006204 <tcp_abort>
      pcb = next;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e002      	b.n	8007288 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1ea      	bne.n	8007264 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	0800f548 	.word	0x0800f548
 800729c:	0800fc7c 	.word	0x0800fc7c
 80072a0:	0800f58c 	.word	0x0800f58c

080072a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d02a      	beq.n	800730a <tcp_netif_ip_addr_changed+0x66>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d026      	beq.n	800730a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80072bc:	4b15      	ldr	r3, [pc, #84]	@ (8007314 <tcp_netif_ip_addr_changed+0x70>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff ffbc 	bl	8007240 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80072c8:	4b13      	ldr	r3, [pc, #76]	@ (8007318 <tcp_netif_ip_addr_changed+0x74>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff ffb6 	bl	8007240 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d017      	beq.n	800730a <tcp_netif_ip_addr_changed+0x66>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d013      	beq.n	800730a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80072e2:	4b0e      	ldr	r3, [pc, #56]	@ (800731c <tcp_netif_ip_addr_changed+0x78>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e00c      	b.n	8007304 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d103      	bne.n	80072fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1ef      	bne.n	80072ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800730a:	bf00      	nop
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20008290 	.word	0x20008290
 8007318:	20008288 	.word	0x20008288
 800731c:	2000828c 	.word	0x2000828c

08007320 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff fc3d 	bl	8006bb4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007348:	b590      	push	{r4, r7, lr}
 800734a:	b08d      	sub	sp, #52	@ 0x34
 800734c:	af04      	add	r7, sp, #16
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d105      	bne.n	8007364 <tcp_input+0x1c>
 8007358:	4b9b      	ldr	r3, [pc, #620]	@ (80075c8 <tcp_input+0x280>)
 800735a:	2283      	movs	r2, #131	@ 0x83
 800735c:	499b      	ldr	r1, [pc, #620]	@ (80075cc <tcp_input+0x284>)
 800735e:	489c      	ldr	r0, [pc, #624]	@ (80075d0 <tcp_input+0x288>)
 8007360:	f006 fc78 	bl	800dc54 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4a9a      	ldr	r2, [pc, #616]	@ (80075d4 <tcp_input+0x28c>)
 800736a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	895b      	ldrh	r3, [r3, #10]
 8007370:	2b13      	cmp	r3, #19
 8007372:	f240 83d1 	bls.w	8007b18 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007376:	4b98      	ldr	r3, [pc, #608]	@ (80075d8 <tcp_input+0x290>)
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	4a97      	ldr	r2, [pc, #604]	@ (80075d8 <tcp_input+0x290>)
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	4611      	mov	r1, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f005 fc11 	bl	800cba8 <ip4_addr_isbroadcast_u32>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	f040 83c7 	bne.w	8007b1c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800738e:	4b92      	ldr	r3, [pc, #584]	@ (80075d8 <tcp_input+0x290>)
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007396:	2be0      	cmp	r3, #224	@ 0xe0
 8007398:	f000 83c0 	beq.w	8007b1c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800739c:	4b8d      	ldr	r3, [pc, #564]	@ (80075d4 <tcp_input+0x28c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	899b      	ldrh	r3, [r3, #12]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fc fe47 	bl	8004038 <lwip_htons>
 80073aa:	4603      	mov	r3, r0
 80073ac:	0b1b      	lsrs	r3, r3, #12
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80073b6:	7cbb      	ldrb	r3, [r7, #18]
 80073b8:	2b13      	cmp	r3, #19
 80073ba:	f240 83b1 	bls.w	8007b20 <tcp_input+0x7d8>
 80073be:	7cbb      	ldrb	r3, [r7, #18]
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	891b      	ldrh	r3, [r3, #8]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	f200 83aa 	bhi.w	8007b20 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80073cc:	7cbb      	ldrb	r3, [r7, #18]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b14      	subs	r3, #20
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	4b81      	ldr	r3, [pc, #516]	@ (80075dc <tcp_input+0x294>)
 80073d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80073d8:	4b81      	ldr	r3, [pc, #516]	@ (80075e0 <tcp_input+0x298>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	895a      	ldrh	r2, [r3, #10]
 80073e2:	7cbb      	ldrb	r3, [r7, #18]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d309      	bcc.n	80073fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80073ea:	4b7c      	ldr	r3, [pc, #496]	@ (80075dc <tcp_input+0x294>)
 80073ec:	881a      	ldrh	r2, [r3, #0]
 80073ee:	4b7d      	ldr	r3, [pc, #500]	@ (80075e4 <tcp_input+0x29c>)
 80073f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80073f2:	7cbb      	ldrb	r3, [r7, #18]
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fe f8f6 	bl	80055e8 <pbuf_remove_header>
 80073fc:	e04e      	b.n	800749c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d105      	bne.n	8007412 <tcp_input+0xca>
 8007406:	4b70      	ldr	r3, [pc, #448]	@ (80075c8 <tcp_input+0x280>)
 8007408:	22c2      	movs	r2, #194	@ 0xc2
 800740a:	4977      	ldr	r1, [pc, #476]	@ (80075e8 <tcp_input+0x2a0>)
 800740c:	4870      	ldr	r0, [pc, #448]	@ (80075d0 <tcp_input+0x288>)
 800740e:	f006 fc21 	bl	800dc54 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007412:	2114      	movs	r1, #20
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7fe f8e7 	bl	80055e8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	895a      	ldrh	r2, [r3, #10]
 800741e:	4b71      	ldr	r3, [pc, #452]	@ (80075e4 <tcp_input+0x29c>)
 8007420:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007422:	4b6e      	ldr	r3, [pc, #440]	@ (80075dc <tcp_input+0x294>)
 8007424:	881a      	ldrh	r2, [r3, #0]
 8007426:	4b6f      	ldr	r3, [pc, #444]	@ (80075e4 <tcp_input+0x29c>)
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800742e:	4b6d      	ldr	r3, [pc, #436]	@ (80075e4 <tcp_input+0x29c>)
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fe f8d7 	bl	80055e8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	895b      	ldrh	r3, [r3, #10]
 8007440:	8a3a      	ldrh	r2, [r7, #16]
 8007442:	429a      	cmp	r2, r3
 8007444:	f200 836e 	bhi.w	8007b24 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4a64      	ldr	r2, [pc, #400]	@ (80075e0 <tcp_input+0x298>)
 8007450:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	8a3a      	ldrh	r2, [r7, #16]
 8007458:	4611      	mov	r1, r2
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe f8c4 	bl	80055e8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	891a      	ldrh	r2, [r3, #8]
 8007464:	8a3b      	ldrh	r3, [r7, #16]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	b29a      	uxth	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	895b      	ldrh	r3, [r3, #10]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <tcp_input+0x13a>
 8007476:	4b54      	ldr	r3, [pc, #336]	@ (80075c8 <tcp_input+0x280>)
 8007478:	22df      	movs	r2, #223	@ 0xdf
 800747a:	495c      	ldr	r1, [pc, #368]	@ (80075ec <tcp_input+0x2a4>)
 800747c:	4854      	ldr	r0, [pc, #336]	@ (80075d0 <tcp_input+0x288>)
 800747e:	f006 fbe9 	bl	800dc54 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	891a      	ldrh	r2, [r3, #8]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	891b      	ldrh	r3, [r3, #8]
 800748c:	429a      	cmp	r2, r3
 800748e:	d005      	beq.n	800749c <tcp_input+0x154>
 8007490:	4b4d      	ldr	r3, [pc, #308]	@ (80075c8 <tcp_input+0x280>)
 8007492:	22e0      	movs	r2, #224	@ 0xe0
 8007494:	4956      	ldr	r1, [pc, #344]	@ (80075f0 <tcp_input+0x2a8>)
 8007496:	484e      	ldr	r0, [pc, #312]	@ (80075d0 <tcp_input+0x288>)
 8007498:	f006 fbdc 	bl	800dc54 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800749c:	4b4d      	ldr	r3, [pc, #308]	@ (80075d4 <tcp_input+0x28c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4a4b      	ldr	r2, [pc, #300]	@ (80075d4 <tcp_input+0x28c>)
 80074a6:	6814      	ldr	r4, [r2, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fc fdc5 	bl	8004038 <lwip_htons>
 80074ae:	4603      	mov	r3, r0
 80074b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80074b2:	4b48      	ldr	r3, [pc, #288]	@ (80075d4 <tcp_input+0x28c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	885b      	ldrh	r3, [r3, #2]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	4a46      	ldr	r2, [pc, #280]	@ (80075d4 <tcp_input+0x28c>)
 80074bc:	6814      	ldr	r4, [r2, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fc fdba 	bl	8004038 <lwip_htons>
 80074c4:	4603      	mov	r3, r0
 80074c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80074c8:	4b42      	ldr	r3, [pc, #264]	@ (80075d4 <tcp_input+0x28c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	4a41      	ldr	r2, [pc, #260]	@ (80075d4 <tcp_input+0x28c>)
 80074d0:	6814      	ldr	r4, [r2, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fc fdc6 	bl	8004064 <lwip_htonl>
 80074d8:	4603      	mov	r3, r0
 80074da:	6063      	str	r3, [r4, #4]
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	4a45      	ldr	r2, [pc, #276]	@ (80075f4 <tcp_input+0x2ac>)
 80074e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80074e2:	4b3c      	ldr	r3, [pc, #240]	@ (80075d4 <tcp_input+0x28c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	4a3a      	ldr	r2, [pc, #232]	@ (80075d4 <tcp_input+0x28c>)
 80074ea:	6814      	ldr	r4, [r2, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fc fdb9 	bl	8004064 <lwip_htonl>
 80074f2:	4603      	mov	r3, r0
 80074f4:	60a3      	str	r3, [r4, #8]
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	4a3f      	ldr	r2, [pc, #252]	@ (80075f8 <tcp_input+0x2b0>)
 80074fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80074fc:	4b35      	ldr	r3, [pc, #212]	@ (80075d4 <tcp_input+0x28c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	89db      	ldrh	r3, [r3, #14]
 8007502:	b29b      	uxth	r3, r3
 8007504:	4a33      	ldr	r2, [pc, #204]	@ (80075d4 <tcp_input+0x28c>)
 8007506:	6814      	ldr	r4, [r2, #0]
 8007508:	4618      	mov	r0, r3
 800750a:	f7fc fd95 	bl	8004038 <lwip_htons>
 800750e:	4603      	mov	r3, r0
 8007510:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007512:	4b30      	ldr	r3, [pc, #192]	@ (80075d4 <tcp_input+0x28c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	899b      	ldrh	r3, [r3, #12]
 8007518:	b29b      	uxth	r3, r3
 800751a:	4618      	mov	r0, r3
 800751c:	f7fc fd8c 	bl	8004038 <lwip_htons>
 8007520:	4603      	mov	r3, r0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007528:	b2da      	uxtb	r2, r3
 800752a:	4b34      	ldr	r3, [pc, #208]	@ (80075fc <tcp_input+0x2b4>)
 800752c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	891a      	ldrh	r2, [r3, #8]
 8007532:	4b33      	ldr	r3, [pc, #204]	@ (8007600 <tcp_input+0x2b8>)
 8007534:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007536:	4b31      	ldr	r3, [pc, #196]	@ (80075fc <tcp_input+0x2b4>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <tcp_input+0x214>
    tcplen++;
 8007542:	4b2f      	ldr	r3, [pc, #188]	@ (8007600 <tcp_input+0x2b8>)
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	4b2d      	ldr	r3, [pc, #180]	@ (8007600 <tcp_input+0x2b8>)
 800754c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	891a      	ldrh	r2, [r3, #8]
 8007552:	4b2b      	ldr	r3, [pc, #172]	@ (8007600 <tcp_input+0x2b8>)
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	f200 82e6 	bhi.w	8007b28 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800755c:	2300      	movs	r3, #0
 800755e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007560:	4b28      	ldr	r3, [pc, #160]	@ (8007604 <tcp_input+0x2bc>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	e09d      	b.n	80076a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	7d1b      	ldrb	r3, [r3, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <tcp_input+0x234>
 8007570:	4b15      	ldr	r3, [pc, #84]	@ (80075c8 <tcp_input+0x280>)
 8007572:	22fb      	movs	r2, #251	@ 0xfb
 8007574:	4924      	ldr	r1, [pc, #144]	@ (8007608 <tcp_input+0x2c0>)
 8007576:	4816      	ldr	r0, [pc, #88]	@ (80075d0 <tcp_input+0x288>)
 8007578:	f006 fb6c 	bl	800dc54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	7d1b      	ldrb	r3, [r3, #20]
 8007580:	2b0a      	cmp	r3, #10
 8007582:	d105      	bne.n	8007590 <tcp_input+0x248>
 8007584:	4b10      	ldr	r3, [pc, #64]	@ (80075c8 <tcp_input+0x280>)
 8007586:	22fc      	movs	r2, #252	@ 0xfc
 8007588:	4920      	ldr	r1, [pc, #128]	@ (800760c <tcp_input+0x2c4>)
 800758a:	4811      	ldr	r0, [pc, #68]	@ (80075d0 <tcp_input+0x288>)
 800758c:	f006 fb62 	bl	800dc54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	7d1b      	ldrb	r3, [r3, #20]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d105      	bne.n	80075a4 <tcp_input+0x25c>
 8007598:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <tcp_input+0x280>)
 800759a:	22fd      	movs	r2, #253	@ 0xfd
 800759c:	491c      	ldr	r1, [pc, #112]	@ (8007610 <tcp_input+0x2c8>)
 800759e:	480c      	ldr	r0, [pc, #48]	@ (80075d0 <tcp_input+0x288>)
 80075a0:	f006 fb58 	bl	800dc54 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	7a1b      	ldrb	r3, [r3, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d033      	beq.n	8007614 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	7a1a      	ldrb	r2, [r3, #8]
 80075b0:	4b09      	ldr	r3, [pc, #36]	@ (80075d8 <tcp_input+0x290>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80075b8:	3301      	adds	r3, #1
 80075ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80075bc:	429a      	cmp	r2, r3
 80075be:	d029      	beq.n	8007614 <tcp_input+0x2cc>
      prev = pcb;
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	61bb      	str	r3, [r7, #24]
      continue;
 80075c4:	e06b      	b.n	800769e <tcp_input+0x356>
 80075c6:	bf00      	nop
 80075c8:	0800fcb0 	.word	0x0800fcb0
 80075cc:	0800fce4 	.word	0x0800fce4
 80075d0:	0800fcfc 	.word	0x0800fcfc
 80075d4:	200082ac 	.word	0x200082ac
 80075d8:	20004d14 	.word	0x20004d14
 80075dc:	200082b0 	.word	0x200082b0
 80075e0:	200082b4 	.word	0x200082b4
 80075e4:	200082b2 	.word	0x200082b2
 80075e8:	0800fd24 	.word	0x0800fd24
 80075ec:	0800fd34 	.word	0x0800fd34
 80075f0:	0800fd40 	.word	0x0800fd40
 80075f4:	200082bc 	.word	0x200082bc
 80075f8:	200082c0 	.word	0x200082c0
 80075fc:	200082c8 	.word	0x200082c8
 8007600:	200082c6 	.word	0x200082c6
 8007604:	20008290 	.word	0x20008290
 8007608:	0800fd60 	.word	0x0800fd60
 800760c:	0800fd88 	.word	0x0800fd88
 8007610:	0800fdb4 	.word	0x0800fdb4
    }

    if (pcb->remote_port == tcphdr->src &&
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	8b1a      	ldrh	r2, [r3, #24]
 8007618:	4b72      	ldr	r3, [pc, #456]	@ (80077e4 <tcp_input+0x49c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	429a      	cmp	r2, r3
 8007622:	d13a      	bne.n	800769a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	8ada      	ldrh	r2, [r3, #22]
 8007628:	4b6e      	ldr	r3, [pc, #440]	@ (80077e4 <tcp_input+0x49c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	885b      	ldrh	r3, [r3, #2]
 800762e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007630:	429a      	cmp	r2, r3
 8007632:	d132      	bne.n	800769a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	4b6b      	ldr	r3, [pc, #428]	@ (80077e8 <tcp_input+0x4a0>)
 800763a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800763c:	429a      	cmp	r2, r3
 800763e:	d12c      	bne.n	800769a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	4b68      	ldr	r3, [pc, #416]	@ (80077e8 <tcp_input+0x4a0>)
 8007646:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007648:	429a      	cmp	r2, r3
 800764a:	d126      	bne.n	800769a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	429a      	cmp	r2, r3
 8007654:	d106      	bne.n	8007664 <tcp_input+0x31c>
 8007656:	4b65      	ldr	r3, [pc, #404]	@ (80077ec <tcp_input+0x4a4>)
 8007658:	f240 120d 	movw	r2, #269	@ 0x10d
 800765c:	4964      	ldr	r1, [pc, #400]	@ (80077f0 <tcp_input+0x4a8>)
 800765e:	4865      	ldr	r0, [pc, #404]	@ (80077f4 <tcp_input+0x4ac>)
 8007660:	f006 faf8 	bl	800dc54 <iprintf>
      if (prev != NULL) {
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <tcp_input+0x338>
        prev->next = pcb->next;
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007672:	4b61      	ldr	r3, [pc, #388]	@ (80077f8 <tcp_input+0x4b0>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800767a:	4a5f      	ldr	r2, [pc, #380]	@ (80077f8 <tcp_input+0x4b0>)
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	429a      	cmp	r2, r3
 8007688:	d111      	bne.n	80076ae <tcp_input+0x366>
 800768a:	4b58      	ldr	r3, [pc, #352]	@ (80077ec <tcp_input+0x4a4>)
 800768c:	f240 1215 	movw	r2, #277	@ 0x115
 8007690:	495a      	ldr	r1, [pc, #360]	@ (80077fc <tcp_input+0x4b4>)
 8007692:	4858      	ldr	r0, [pc, #352]	@ (80077f4 <tcp_input+0x4ac>)
 8007694:	f006 fade 	bl	800dc54 <iprintf>
      break;
 8007698:	e009      	b.n	80076ae <tcp_input+0x366>
    }
    prev = pcb;
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f47f af5e 	bne.w	8007568 <tcp_input+0x220>
 80076ac:	e000      	b.n	80076b0 <tcp_input+0x368>
      break;
 80076ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 80aa 	bne.w	800780c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80076b8:	4b51      	ldr	r3, [pc, #324]	@ (8007800 <tcp_input+0x4b8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	e03f      	b.n	8007740 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	7d1b      	ldrb	r3, [r3, #20]
 80076c4:	2b0a      	cmp	r3, #10
 80076c6:	d006      	beq.n	80076d6 <tcp_input+0x38e>
 80076c8:	4b48      	ldr	r3, [pc, #288]	@ (80077ec <tcp_input+0x4a4>)
 80076ca:	f240 121f 	movw	r2, #287	@ 0x11f
 80076ce:	494d      	ldr	r1, [pc, #308]	@ (8007804 <tcp_input+0x4bc>)
 80076d0:	4848      	ldr	r0, [pc, #288]	@ (80077f4 <tcp_input+0x4ac>)
 80076d2:	f006 fabf 	bl	800dc54 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	7a1b      	ldrb	r3, [r3, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	7a1a      	ldrb	r2, [r3, #8]
 80076e2:	4b41      	ldr	r3, [pc, #260]	@ (80077e8 <tcp_input+0x4a0>)
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80076ea:	3301      	adds	r3, #1
 80076ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d122      	bne.n	8007738 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	8b1a      	ldrh	r2, [r3, #24]
 80076f6:	4b3b      	ldr	r3, [pc, #236]	@ (80077e4 <tcp_input+0x49c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	429a      	cmp	r2, r3
 8007700:	d11b      	bne.n	800773a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	8ada      	ldrh	r2, [r3, #22]
 8007706:	4b37      	ldr	r3, [pc, #220]	@ (80077e4 <tcp_input+0x49c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	885b      	ldrh	r3, [r3, #2]
 800770c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800770e:	429a      	cmp	r2, r3
 8007710:	d113      	bne.n	800773a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	4b34      	ldr	r3, [pc, #208]	@ (80077e8 <tcp_input+0x4a0>)
 8007718:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800771a:	429a      	cmp	r2, r3
 800771c:	d10d      	bne.n	800773a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b31      	ldr	r3, [pc, #196]	@ (80077e8 <tcp_input+0x4a0>)
 8007724:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007726:	429a      	cmp	r2, r3
 8007728:	d107      	bne.n	800773a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800772a:	69f8      	ldr	r0, [r7, #28]
 800772c:	f000 fb56 	bl	8007ddc <tcp_timewait_input>
        }
        pbuf_free(p);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7fd ffdf 	bl	80056f4 <pbuf_free>
        return;
 8007736:	e1fd      	b.n	8007b34 <tcp_input+0x7ec>
        continue;
 8007738:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	61fb      	str	r3, [r7, #28]
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1bc      	bne.n	80076c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800774a:	4b2f      	ldr	r3, [pc, #188]	@ (8007808 <tcp_input+0x4c0>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	e02a      	b.n	80077a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	7a1b      	ldrb	r3, [r3, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00c      	beq.n	8007774 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	7a1a      	ldrb	r2, [r3, #8]
 800775e:	4b22      	ldr	r3, [pc, #136]	@ (80077e8 <tcp_input+0x4a0>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007766:	3301      	adds	r3, #1
 8007768:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800776a:	429a      	cmp	r2, r3
 800776c:	d002      	beq.n	8007774 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	61bb      	str	r3, [r7, #24]
        continue;
 8007772:	e016      	b.n	80077a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	8ada      	ldrh	r2, [r3, #22]
 8007778:	4b1a      	ldr	r3, [pc, #104]	@ (80077e4 <tcp_input+0x49c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	885b      	ldrh	r3, [r3, #2]
 800777e:	b29b      	uxth	r3, r3
 8007780:	429a      	cmp	r2, r3
 8007782:	d10c      	bne.n	800779e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	4b17      	ldr	r3, [pc, #92]	@ (80077e8 <tcp_input+0x4a0>)
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	429a      	cmp	r2, r3
 800778e:	d00f      	beq.n	80077b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00d      	beq.n	80077b2 <tcp_input+0x46a>
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1d1      	bne.n	8007752 <tcp_input+0x40a>
 80077ae:	e000      	b.n	80077b2 <tcp_input+0x46a>
            break;
 80077b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d029      	beq.n	800780c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80077c6:	4b10      	ldr	r3, [pc, #64]	@ (8007808 <tcp_input+0x4c0>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80077ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007808 <tcp_input+0x4c0>)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80077d4:	6978      	ldr	r0, [r7, #20]
 80077d6:	f000 fa03 	bl	8007be0 <tcp_listen_input>
      }
      pbuf_free(p);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fd ff8a 	bl	80056f4 <pbuf_free>
      return;
 80077e0:	e1a8      	b.n	8007b34 <tcp_input+0x7ec>
 80077e2:	bf00      	nop
 80077e4:	200082ac 	.word	0x200082ac
 80077e8:	20004d14 	.word	0x20004d14
 80077ec:	0800fcb0 	.word	0x0800fcb0
 80077f0:	0800fddc 	.word	0x0800fddc
 80077f4:	0800fcfc 	.word	0x0800fcfc
 80077f8:	20008290 	.word	0x20008290
 80077fc:	0800fe08 	.word	0x0800fe08
 8007800:	20008294 	.word	0x20008294
 8007804:	0800fe34 	.word	0x0800fe34
 8007808:	2000828c 	.word	0x2000828c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8158 	beq.w	8007ac4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007814:	4b95      	ldr	r3, [pc, #596]	@ (8007a6c <tcp_input+0x724>)
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	891a      	ldrh	r2, [r3, #8]
 800781e:	4b93      	ldr	r3, [pc, #588]	@ (8007a6c <tcp_input+0x724>)
 8007820:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007822:	4a92      	ldr	r2, [pc, #584]	@ (8007a6c <tcp_input+0x724>)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007828:	4b91      	ldr	r3, [pc, #580]	@ (8007a70 <tcp_input+0x728>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a8f      	ldr	r2, [pc, #572]	@ (8007a6c <tcp_input+0x724>)
 800782e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007830:	4b90      	ldr	r3, [pc, #576]	@ (8007a74 <tcp_input+0x72c>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007836:	4b90      	ldr	r3, [pc, #576]	@ (8007a78 <tcp_input+0x730>)
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800783c:	4b8f      	ldr	r3, [pc, #572]	@ (8007a7c <tcp_input+0x734>)
 800783e:	2200      	movs	r2, #0
 8007840:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007842:	4b8f      	ldr	r3, [pc, #572]	@ (8007a80 <tcp_input+0x738>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d006      	beq.n	800785c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7b5b      	ldrb	r3, [r3, #13]
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	b2da      	uxtb	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007860:	2b00      	cmp	r3, #0
 8007862:	d017      	beq.n	8007894 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007864:	69f8      	ldr	r0, [r7, #28]
 8007866:	f7ff f929 	bl	8006abc <tcp_process_refused_data>
 800786a:	4603      	mov	r3, r0
 800786c:	f113 0f0d 	cmn.w	r3, #13
 8007870:	d007      	beq.n	8007882 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00c      	beq.n	8007894 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800787a:	4b82      	ldr	r3, [pc, #520]	@ (8007a84 <tcp_input+0x73c>)
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d008      	beq.n	8007894 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 80e3 	bne.w	8007a52 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800788c:	69f8      	ldr	r0, [r7, #28]
 800788e:	f003 f9a7 	bl	800abe0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007892:	e0de      	b.n	8007a52 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007894:	4a7c      	ldr	r2, [pc, #496]	@ (8007a88 <tcp_input+0x740>)
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800789a:	69f8      	ldr	r0, [r7, #28]
 800789c:	f000 fb18 	bl	8007ed0 <tcp_process>
 80078a0:	4603      	mov	r3, r0
 80078a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80078a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80078a8:	f113 0f0d 	cmn.w	r3, #13
 80078ac:	f000 80d3 	beq.w	8007a56 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80078b0:	4b71      	ldr	r3, [pc, #452]	@ (8007a78 <tcp_input+0x730>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d015      	beq.n	80078e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d008      	beq.n	80078d8 <tcp_input+0x590>
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	6912      	ldr	r2, [r2, #16]
 80078d0:	f06f 010d 	mvn.w	r1, #13
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80078d8:	69f9      	ldr	r1, [r7, #28]
 80078da:	486c      	ldr	r0, [pc, #432]	@ (8007a8c <tcp_input+0x744>)
 80078dc:	f7ff fbbc 	bl	8007058 <tcp_pcb_remove>
        tcp_free(pcb);
 80078e0:	69f8      	ldr	r0, [r7, #28]
 80078e2:	f7fe f9a7 	bl	8005c34 <tcp_free>
 80078e6:	e0da      	b.n	8007a9e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80078ec:	4b63      	ldr	r3, [pc, #396]	@ (8007a7c <tcp_input+0x734>)
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01d      	beq.n	8007930 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80078f4:	4b61      	ldr	r3, [pc, #388]	@ (8007a7c <tcp_input+0x734>)
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <tcp_input+0x5d2>
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	6910      	ldr	r0, [r2, #16]
 800790e:	89fa      	ldrh	r2, [r7, #14]
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	4798      	blx	r3
 8007914:	4603      	mov	r3, r0
 8007916:	74fb      	strb	r3, [r7, #19]
 8007918:	e001      	b.n	800791e <tcp_input+0x5d6>
 800791a:	2300      	movs	r3, #0
 800791c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800791e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007922:	f113 0f0d 	cmn.w	r3, #13
 8007926:	f000 8098 	beq.w	8007a5a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800792a:	4b54      	ldr	r3, [pc, #336]	@ (8007a7c <tcp_input+0x734>)
 800792c:	2200      	movs	r2, #0
 800792e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007930:	69f8      	ldr	r0, [r7, #28]
 8007932:	f000 f915 	bl	8007b60 <tcp_input_delayed_close>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	f040 8090 	bne.w	8007a5e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800793e:	4b4d      	ldr	r3, [pc, #308]	@ (8007a74 <tcp_input+0x72c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d041      	beq.n	80079ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800794a:	2b00      	cmp	r3, #0
 800794c:	d006      	beq.n	800795c <tcp_input+0x614>
 800794e:	4b50      	ldr	r3, [pc, #320]	@ (8007a90 <tcp_input+0x748>)
 8007950:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8007954:	494f      	ldr	r1, [pc, #316]	@ (8007a94 <tcp_input+0x74c>)
 8007956:	4850      	ldr	r0, [pc, #320]	@ (8007a98 <tcp_input+0x750>)
 8007958:	f006 f97c 	bl	800dc54 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	8b5b      	ldrh	r3, [r3, #26]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007968:	4b42      	ldr	r3, [pc, #264]	@ (8007a74 <tcp_input+0x72c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4618      	mov	r0, r3
 800796e:	f7fd fec1 	bl	80056f4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007972:	69f8      	ldr	r0, [r7, #28]
 8007974:	f7fe fc46 	bl	8006204 <tcp_abort>
            goto aborted;
 8007978:	e091      	b.n	8007a9e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <tcp_input+0x656>
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	6918      	ldr	r0, [r3, #16]
 800798e:	4b39      	ldr	r3, [pc, #228]	@ (8007a74 <tcp_input+0x72c>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	2300      	movs	r3, #0
 8007994:	69f9      	ldr	r1, [r7, #28]
 8007996:	47a0      	blx	r4
 8007998:	4603      	mov	r3, r0
 800799a:	74fb      	strb	r3, [r7, #19]
 800799c:	e008      	b.n	80079b0 <tcp_input+0x668>
 800799e:	4b35      	ldr	r3, [pc, #212]	@ (8007a74 <tcp_input+0x72c>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	2300      	movs	r3, #0
 80079a4:	69f9      	ldr	r1, [r7, #28]
 80079a6:	2000      	movs	r0, #0
 80079a8:	f7ff f95e 	bl	8006c68 <tcp_recv_null>
 80079ac:	4603      	mov	r3, r0
 80079ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80079b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079b4:	f113 0f0d 	cmn.w	r3, #13
 80079b8:	d053      	beq.n	8007a62 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80079ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80079c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007a74 <tcp_input+0x72c>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80079ca:	4b2b      	ldr	r3, [pc, #172]	@ (8007a78 <tcp_input+0x730>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d030      	beq.n	8007a38 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079e2:	7b5a      	ldrb	r2, [r3, #13]
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079e8:	f042 0220 	orr.w	r2, r2, #32
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	735a      	strb	r2, [r3, #13]
 80079f0:	e022      	b.n	8007a38 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80079fa:	d005      	beq.n	8007a08 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a00:	3301      	adds	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <tcp_input+0x6e2>
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	6918      	ldr	r0, [r3, #16]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2200      	movs	r2, #0
 8007a20:	69f9      	ldr	r1, [r7, #28]
 8007a22:	47a0      	blx	r4
 8007a24:	4603      	mov	r3, r0
 8007a26:	74fb      	strb	r3, [r7, #19]
 8007a28:	e001      	b.n	8007a2e <tcp_input+0x6e6>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007a2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a32:	f113 0f0d 	cmn.w	r3, #13
 8007a36:	d016      	beq.n	8007a66 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007a38:	4b13      	ldr	r3, [pc, #76]	@ (8007a88 <tcp_input+0x740>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007a3e:	69f8      	ldr	r0, [r7, #28]
 8007a40:	f000 f88e 	bl	8007b60 <tcp_input_delayed_close>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d128      	bne.n	8007a9c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007a4a:	69f8      	ldr	r0, [r7, #28]
 8007a4c:	f002 fac2 	bl	8009fd4 <tcp_output>
 8007a50:	e025      	b.n	8007a9e <tcp_input+0x756>
        goto aborted;
 8007a52:	bf00      	nop
 8007a54:	e023      	b.n	8007a9e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007a56:	bf00      	nop
 8007a58:	e021      	b.n	8007a9e <tcp_input+0x756>
              goto aborted;
 8007a5a:	bf00      	nop
 8007a5c:	e01f      	b.n	8007a9e <tcp_input+0x756>
          goto aborted;
 8007a5e:	bf00      	nop
 8007a60:	e01d      	b.n	8007a9e <tcp_input+0x756>
            goto aborted;
 8007a62:	bf00      	nop
 8007a64:	e01b      	b.n	8007a9e <tcp_input+0x756>
              goto aborted;
 8007a66:	bf00      	nop
 8007a68:	e019      	b.n	8007a9e <tcp_input+0x756>
 8007a6a:	bf00      	nop
 8007a6c:	2000829c 	.word	0x2000829c
 8007a70:	200082ac 	.word	0x200082ac
 8007a74:	200082cc 	.word	0x200082cc
 8007a78:	200082c9 	.word	0x200082c9
 8007a7c:	200082c4 	.word	0x200082c4
 8007a80:	200082c8 	.word	0x200082c8
 8007a84:	200082c6 	.word	0x200082c6
 8007a88:	200082d0 	.word	0x200082d0
 8007a8c:	20008290 	.word	0x20008290
 8007a90:	0800fcb0 	.word	0x0800fcb0
 8007a94:	0800fe64 	.word	0x0800fe64
 8007a98:	0800fcfc 	.word	0x0800fcfc
          goto aborted;
 8007a9c:	bf00      	nop
    tcp_input_pcb = NULL;
 8007a9e:	4b27      	ldr	r3, [pc, #156]	@ (8007b3c <tcp_input+0x7f4>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007aa4:	4b26      	ldr	r3, [pc, #152]	@ (8007b40 <tcp_input+0x7f8>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007aaa:	4b26      	ldr	r3, [pc, #152]	@ (8007b44 <tcp_input+0x7fc>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d03f      	beq.n	8007b32 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007ab2:	4b24      	ldr	r3, [pc, #144]	@ (8007b44 <tcp_input+0x7fc>)
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fd fe1c 	bl	80056f4 <pbuf_free>
      inseg.p = NULL;
 8007abc:	4b21      	ldr	r3, [pc, #132]	@ (8007b44 <tcp_input+0x7fc>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007ac2:	e036      	b.n	8007b32 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007ac4:	4b20      	ldr	r3, [pc, #128]	@ (8007b48 <tcp_input+0x800>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	899b      	ldrh	r3, [r3, #12]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fc fab3 	bl	8004038 <lwip_htons>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d118      	bne.n	8007b10 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ade:	4b1b      	ldr	r3, [pc, #108]	@ (8007b4c <tcp_input+0x804>)
 8007ae0:	6819      	ldr	r1, [r3, #0]
 8007ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b50 <tcp_input+0x808>)
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8007b54 <tcp_input+0x80c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007aee:	4b16      	ldr	r3, [pc, #88]	@ (8007b48 <tcp_input+0x800>)
 8007af0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007af2:	885b      	ldrh	r3, [r3, #2]
 8007af4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007af6:	4a14      	ldr	r2, [pc, #80]	@ (8007b48 <tcp_input+0x800>)
 8007af8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007afa:	8812      	ldrh	r2, [r2, #0]
 8007afc:	b292      	uxth	r2, r2
 8007afe:	9202      	str	r2, [sp, #8]
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	4b15      	ldr	r3, [pc, #84]	@ (8007b58 <tcp_input+0x810>)
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4b15      	ldr	r3, [pc, #84]	@ (8007b5c <tcp_input+0x814>)
 8007b08:	4602      	mov	r2, r0
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	f003 f816 	bl	800ab3c <tcp_rst>
    pbuf_free(p);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7fd fdef 	bl	80056f4 <pbuf_free>
  return;
 8007b16:	e00c      	b.n	8007b32 <tcp_input+0x7ea>
    goto dropped;
 8007b18:	bf00      	nop
 8007b1a:	e006      	b.n	8007b2a <tcp_input+0x7e2>
    goto dropped;
 8007b1c:	bf00      	nop
 8007b1e:	e004      	b.n	8007b2a <tcp_input+0x7e2>
    goto dropped;
 8007b20:	bf00      	nop
 8007b22:	e002      	b.n	8007b2a <tcp_input+0x7e2>
      goto dropped;
 8007b24:	bf00      	nop
 8007b26:	e000      	b.n	8007b2a <tcp_input+0x7e2>
      goto dropped;
 8007b28:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7fd fde2 	bl	80056f4 <pbuf_free>
 8007b30:	e000      	b.n	8007b34 <tcp_input+0x7ec>
  return;
 8007b32:	bf00      	nop
}
 8007b34:	3724      	adds	r7, #36	@ 0x24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd90      	pop	{r4, r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200082d0 	.word	0x200082d0
 8007b40:	200082cc 	.word	0x200082cc
 8007b44:	2000829c 	.word	0x2000829c
 8007b48:	200082ac 	.word	0x200082ac
 8007b4c:	200082c0 	.word	0x200082c0
 8007b50:	200082c6 	.word	0x200082c6
 8007b54:	200082bc 	.word	0x200082bc
 8007b58:	20004d24 	.word	0x20004d24
 8007b5c:	20004d28 	.word	0x20004d28

08007b60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <tcp_input_delayed_close+0x1c>
 8007b6e:	4b17      	ldr	r3, [pc, #92]	@ (8007bcc <tcp_input_delayed_close+0x6c>)
 8007b70:	f240 225a 	movw	r2, #602	@ 0x25a
 8007b74:	4916      	ldr	r1, [pc, #88]	@ (8007bd0 <tcp_input_delayed_close+0x70>)
 8007b76:	4817      	ldr	r0, [pc, #92]	@ (8007bd4 <tcp_input_delayed_close+0x74>)
 8007b78:	f006 f86c 	bl	800dc54 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007b7c:	4b16      	ldr	r3, [pc, #88]	@ (8007bd8 <tcp_input_delayed_close+0x78>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f003 0310 	and.w	r3, r3, #16
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01c      	beq.n	8007bc2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	8b5b      	ldrh	r3, [r3, #26]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10d      	bne.n	8007bb0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d008      	beq.n	8007bb0 <tcp_input_delayed_close+0x50>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6912      	ldr	r2, [r2, #16]
 8007ba8:	f06f 010e 	mvn.w	r1, #14
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	480a      	ldr	r0, [pc, #40]	@ (8007bdc <tcp_input_delayed_close+0x7c>)
 8007bb4:	f7ff fa50 	bl	8007058 <tcp_pcb_remove>
    tcp_free(pcb);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fe f83b 	bl	8005c34 <tcp_free>
    return 1;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	0800fcb0 	.word	0x0800fcb0
 8007bd0:	0800fe80 	.word	0x0800fe80
 8007bd4:	0800fcfc 	.word	0x0800fcfc
 8007bd8:	200082c9 	.word	0x200082c9
 8007bdc:	20008290 	.word	0x20008290

08007be0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b08b      	sub	sp, #44	@ 0x2c
 8007be4:	af04      	add	r7, sp, #16
 8007be6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007be8:	4b6f      	ldr	r3, [pc, #444]	@ (8007da8 <tcp_listen_input+0x1c8>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f040 80d2 	bne.w	8007d9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d106      	bne.n	8007c0a <tcp_listen_input+0x2a>
 8007bfc:	4b6b      	ldr	r3, [pc, #428]	@ (8007dac <tcp_listen_input+0x1cc>)
 8007bfe:	f240 2281 	movw	r2, #641	@ 0x281
 8007c02:	496b      	ldr	r1, [pc, #428]	@ (8007db0 <tcp_listen_input+0x1d0>)
 8007c04:	486b      	ldr	r0, [pc, #428]	@ (8007db4 <tcp_listen_input+0x1d4>)
 8007c06:	f006 f825 	bl	800dc54 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007c0a:	4b67      	ldr	r3, [pc, #412]	@ (8007da8 <tcp_listen_input+0x1c8>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	f003 0310 	and.w	r3, r3, #16
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d019      	beq.n	8007c4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c16:	4b68      	ldr	r3, [pc, #416]	@ (8007db8 <tcp_listen_input+0x1d8>)
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	4b68      	ldr	r3, [pc, #416]	@ (8007dbc <tcp_listen_input+0x1dc>)
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	4b67      	ldr	r3, [pc, #412]	@ (8007dc0 <tcp_listen_input+0x1e0>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c26:	4b67      	ldr	r3, [pc, #412]	@ (8007dc4 <tcp_listen_input+0x1e4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c2a:	885b      	ldrh	r3, [r3, #2]
 8007c2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c2e:	4a65      	ldr	r2, [pc, #404]	@ (8007dc4 <tcp_listen_input+0x1e4>)
 8007c30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c32:	8812      	ldrh	r2, [r2, #0]
 8007c34:	b292      	uxth	r2, r2
 8007c36:	9202      	str	r2, [sp, #8]
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	4b63      	ldr	r3, [pc, #396]	@ (8007dc8 <tcp_listen_input+0x1e8>)
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	4b63      	ldr	r3, [pc, #396]	@ (8007dcc <tcp_listen_input+0x1ec>)
 8007c40:	4602      	mov	r2, r0
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f002 ff7a 	bl	800ab3c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007c48:	e0a9      	b.n	8007d9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007c4a:	4b57      	ldr	r3, [pc, #348]	@ (8007da8 <tcp_listen_input+0x1c8>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 80a3 	beq.w	8007d9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	7d5b      	ldrb	r3, [r3, #21]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff f927 	bl	8006eb0 <tcp_alloc>
 8007c62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d111      	bne.n	8007c8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <tcp_listen_input+0xa8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6910      	ldr	r0, [r2, #16]
 8007c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4798      	blx	r3
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]
      return;
 8007c86:	e08b      	b.n	8007da0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007c88:	23f0      	movs	r3, #240	@ 0xf0
 8007c8a:	73bb      	strb	r3, [r7, #14]
      return;
 8007c8c:	e088      	b.n	8007da0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007c8e:	4b50      	ldr	r3, [pc, #320]	@ (8007dd0 <tcp_listen_input+0x1f0>)
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007c96:	4b4e      	ldr	r3, [pc, #312]	@ (8007dd0 <tcp_listen_input+0x1f0>)
 8007c98:	691a      	ldr	r2, [r3, #16]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8ada      	ldrh	r2, [r3, #22]
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007ca6:	4b47      	ldr	r3, [pc, #284]	@ (8007dc4 <tcp_listen_input+0x1e4>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007cb8:	4b41      	ldr	r3, [pc, #260]	@ (8007dc0 <tcp_listen_input+0x1e0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8007cca:	6978      	ldr	r0, [r7, #20]
 8007ccc:	f7ff fa58 	bl	8007180 <tcp_next_iss>
 8007cd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007cea:	4b35      	ldr	r3, [pc, #212]	@ (8007dc0 <tcp_listen_input+0x1e0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	1e5a      	subs	r2, r3, #1
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7a5b      	ldrb	r3, [r3, #9]
 8007d06:	f003 030c 	and.w	r3, r3, #12
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7a1a      	ldrb	r2, [r3, #8]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007d18:	4b2e      	ldr	r3, [pc, #184]	@ (8007dd4 <tcp_listen_input+0x1f4>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	60da      	str	r2, [r3, #12]
 8007d20:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd4 <tcp_listen_input+0x1f4>)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	f003 f8cb 	bl	800aec0 <tcp_timer_needed>
 8007d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd8 <tcp_listen_input+0x1f8>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007d30:	6978      	ldr	r0, [r7, #20]
 8007d32:	f001 fd8b 	bl	800984c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007d36:	4b23      	ldr	r3, [pc, #140]	@ (8007dc4 <tcp_listen_input+0x1e4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	89db      	ldrh	r3, [r3, #14]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f004 fc8f 	bl	800c67c <ip4_route>
 8007d5e:	4601      	mov	r1, r0
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	3304      	adds	r3, #4
 8007d64:	461a      	mov	r2, r3
 8007d66:	4620      	mov	r0, r4
 8007d68:	f7ff fa30 	bl	80071cc <tcp_eff_send_mss_netif>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461a      	mov	r2, r3
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007d74:	2112      	movs	r1, #18
 8007d76:	6978      	ldr	r0, [r7, #20]
 8007d78:	f002 f83e 	bl	8009df8 <tcp_enqueue_flags>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d004      	beq.n	8007d92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007d88:	2100      	movs	r1, #0
 8007d8a:	6978      	ldr	r0, [r7, #20]
 8007d8c:	f7fe f97c 	bl	8006088 <tcp_abandon>
      return;
 8007d90:	e006      	b.n	8007da0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007d92:	6978      	ldr	r0, [r7, #20]
 8007d94:	f002 f91e 	bl	8009fd4 <tcp_output>
  return;
 8007d98:	e001      	b.n	8007d9e <tcp_listen_input+0x1be>
    return;
 8007d9a:	bf00      	nop
 8007d9c:	e000      	b.n	8007da0 <tcp_listen_input+0x1c0>
  return;
 8007d9e:	bf00      	nop
}
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd90      	pop	{r4, r7, pc}
 8007da6:	bf00      	nop
 8007da8:	200082c8 	.word	0x200082c8
 8007dac:	0800fcb0 	.word	0x0800fcb0
 8007db0:	0800fea8 	.word	0x0800fea8
 8007db4:	0800fcfc 	.word	0x0800fcfc
 8007db8:	200082c0 	.word	0x200082c0
 8007dbc:	200082c6 	.word	0x200082c6
 8007dc0:	200082bc 	.word	0x200082bc
 8007dc4:	200082ac 	.word	0x200082ac
 8007dc8:	20004d24 	.word	0x20004d24
 8007dcc:	20004d28 	.word	0x20004d28
 8007dd0:	20004d14 	.word	0x20004d14
 8007dd4:	20008290 	.word	0x20008290
 8007dd8:	20008298 	.word	0x20008298

08007ddc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af04      	add	r7, sp, #16
 8007de2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007de4:	4b2f      	ldr	r3, [pc, #188]	@ (8007ea4 <tcp_timewait_input+0xc8>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d153      	bne.n	8007e98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <tcp_timewait_input+0x28>
 8007df6:	4b2c      	ldr	r3, [pc, #176]	@ (8007ea8 <tcp_timewait_input+0xcc>)
 8007df8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8007dfc:	492b      	ldr	r1, [pc, #172]	@ (8007eac <tcp_timewait_input+0xd0>)
 8007dfe:	482c      	ldr	r0, [pc, #176]	@ (8007eb0 <tcp_timewait_input+0xd4>)
 8007e00:	f005 ff28 	bl	800dc54 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007e04:	4b27      	ldr	r3, [pc, #156]	@ (8007ea4 <tcp_timewait_input+0xc8>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d02a      	beq.n	8007e66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007e10:	4b28      	ldr	r3, [pc, #160]	@ (8007eb4 <tcp_timewait_input+0xd8>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	db2d      	blt.n	8007e7a <tcp_timewait_input+0x9e>
 8007e1e:	4b25      	ldr	r3, [pc, #148]	@ (8007eb4 <tcp_timewait_input+0xd8>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007e2a:	440b      	add	r3, r1
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dc23      	bgt.n	8007e7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e32:	4b21      	ldr	r3, [pc, #132]	@ (8007eb8 <tcp_timewait_input+0xdc>)
 8007e34:	6819      	ldr	r1, [r3, #0]
 8007e36:	4b21      	ldr	r3, [pc, #132]	@ (8007ebc <tcp_timewait_input+0xe0>)
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb4 <tcp_timewait_input+0xd8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e42:	4b1f      	ldr	r3, [pc, #124]	@ (8007ec0 <tcp_timewait_input+0xe4>)
 8007e44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e46:	885b      	ldrh	r3, [r3, #2]
 8007e48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec0 <tcp_timewait_input+0xe4>)
 8007e4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e4e:	8812      	ldrh	r2, [r2, #0]
 8007e50:	b292      	uxth	r2, r2
 8007e52:	9202      	str	r2, [sp, #8]
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec4 <tcp_timewait_input+0xe8>)
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec8 <tcp_timewait_input+0xec>)
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f002 fe6c 	bl	800ab3c <tcp_rst>
      return;
 8007e64:	e01b      	b.n	8007e9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007e66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea4 <tcp_timewait_input+0xc8>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007e72:	4b16      	ldr	r3, [pc, #88]	@ (8007ecc <tcp_timewait_input+0xf0>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007e7a:	4b10      	ldr	r3, [pc, #64]	@ (8007ebc <tcp_timewait_input+0xe0>)
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00c      	beq.n	8007e9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	8b5b      	ldrh	r3, [r3, #26]
 8007e86:	f043 0302 	orr.w	r3, r3, #2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f002 f89f 	bl	8009fd4 <tcp_output>
  }
  return;
 8007e96:	e001      	b.n	8007e9c <tcp_timewait_input+0xc0>
    return;
 8007e98:	bf00      	nop
 8007e9a:	e000      	b.n	8007e9e <tcp_timewait_input+0xc2>
  return;
 8007e9c:	bf00      	nop
}
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	200082c8 	.word	0x200082c8
 8007ea8:	0800fcb0 	.word	0x0800fcb0
 8007eac:	0800fec8 	.word	0x0800fec8
 8007eb0:	0800fcfc 	.word	0x0800fcfc
 8007eb4:	200082bc 	.word	0x200082bc
 8007eb8:	200082c0 	.word	0x200082c0
 8007ebc:	200082c6 	.word	0x200082c6
 8007ec0:	200082ac 	.word	0x200082ac
 8007ec4:	20004d24 	.word	0x20004d24
 8007ec8:	20004d28 	.word	0x20004d28
 8007ecc:	20008284 	.word	0x20008284

08007ed0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007ed0:	b590      	push	{r4, r7, lr}
 8007ed2:	b08d      	sub	sp, #52	@ 0x34
 8007ed4:	af04      	add	r7, sp, #16
 8007ed6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <tcp_process+0x24>
 8007ee6:	4b9d      	ldr	r3, [pc, #628]	@ (800815c <tcp_process+0x28c>)
 8007ee8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8007eec:	499c      	ldr	r1, [pc, #624]	@ (8008160 <tcp_process+0x290>)
 8007eee:	489d      	ldr	r0, [pc, #628]	@ (8008164 <tcp_process+0x294>)
 8007ef0:	f005 feb0 	bl	800dc54 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007ef4:	4b9c      	ldr	r3, [pc, #624]	@ (8008168 <tcp_process+0x298>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d04e      	beq.n	8007f9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7d1b      	ldrb	r3, [r3, #20]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d108      	bne.n	8007f1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f0c:	4b97      	ldr	r3, [pc, #604]	@ (800816c <tcp_process+0x29c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d123      	bne.n	8007f5c <tcp_process+0x8c>
        acceptable = 1;
 8007f14:	2301      	movs	r3, #1
 8007f16:	76fb      	strb	r3, [r7, #27]
 8007f18:	e020      	b.n	8007f5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f1e:	4b94      	ldr	r3, [pc, #592]	@ (8008170 <tcp_process+0x2a0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d102      	bne.n	8007f2c <tcp_process+0x5c>
        acceptable = 1;
 8007f26:	2301      	movs	r3, #1
 8007f28:	76fb      	strb	r3, [r7, #27]
 8007f2a:	e017      	b.n	8007f5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007f2c:	4b90      	ldr	r3, [pc, #576]	@ (8008170 <tcp_process+0x2a0>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	db10      	blt.n	8007f5c <tcp_process+0x8c>
 8007f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8008170 <tcp_process+0x2a0>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007f46:	440b      	add	r3, r1
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	dc06      	bgt.n	8007f5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	8b5b      	ldrh	r3, [r3, #26]
 8007f52:	f043 0302 	orr.w	r3, r3, #2
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007f5c:	7efb      	ldrb	r3, [r7, #27]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01b      	beq.n	8007f9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	7d1b      	ldrb	r3, [r3, #20]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <tcp_process+0xa8>
 8007f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800815c <tcp_process+0x28c>)
 8007f6c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8007f70:	4980      	ldr	r1, [pc, #512]	@ (8008174 <tcp_process+0x2a4>)
 8007f72:	487c      	ldr	r0, [pc, #496]	@ (8008164 <tcp_process+0x294>)
 8007f74:	f005 fe6e 	bl	800dc54 <iprintf>
      recv_flags |= TF_RESET;
 8007f78:	4b7f      	ldr	r3, [pc, #508]	@ (8008178 <tcp_process+0x2a8>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	f043 0308 	orr.w	r3, r3, #8
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	4b7d      	ldr	r3, [pc, #500]	@ (8008178 <tcp_process+0x2a8>)
 8007f84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	8b5b      	ldrh	r3, [r3, #26]
 8007f8a:	f023 0301 	bic.w	r3, r3, #1
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007f94:	f06f 030d 	mvn.w	r3, #13
 8007f98:	e37a      	b.n	8008690 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e378      	b.n	8008690 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007f9e:	4b72      	ldr	r3, [pc, #456]	@ (8008168 <tcp_process+0x298>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d010      	beq.n	8007fcc <tcp_process+0xfc>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7d1b      	ldrb	r3, [r3, #20]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d00c      	beq.n	8007fcc <tcp_process+0xfc>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	7d1b      	ldrb	r3, [r3, #20]
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d008      	beq.n	8007fcc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	8b5b      	ldrh	r3, [r3, #26]
 8007fbe:	f043 0302 	orr.w	r3, r3, #2
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e361      	b.n	8008690 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8b5b      	ldrh	r3, [r3, #26]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d103      	bne.n	8007fe0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007fd8:	4b68      	ldr	r3, [pc, #416]	@ (800817c <tcp_process+0x2ac>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 fc2b 	bl	800984c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	7d1b      	ldrb	r3, [r3, #20]
 8007ffa:	3b02      	subs	r3, #2
 8007ffc:	2b07      	cmp	r3, #7
 8007ffe:	f200 8337 	bhi.w	8008670 <tcp_process+0x7a0>
 8008002:	a201      	add	r2, pc, #4	@ (adr r2, 8008008 <tcp_process+0x138>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	08008029 	.word	0x08008029
 800800c:	08008259 	.word	0x08008259
 8008010:	080083d1 	.word	0x080083d1
 8008014:	080083fb 	.word	0x080083fb
 8008018:	0800851f 	.word	0x0800851f
 800801c:	080083d1 	.word	0x080083d1
 8008020:	080085ab 	.word	0x080085ab
 8008024:	0800863b 	.word	0x0800863b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008028:	4b4f      	ldr	r3, [pc, #316]	@ (8008168 <tcp_process+0x298>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80e4 	beq.w	80081fe <tcp_process+0x32e>
 8008036:	4b4c      	ldr	r3, [pc, #304]	@ (8008168 <tcp_process+0x298>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 80dd 	beq.w	80081fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	4b48      	ldr	r3, [pc, #288]	@ (800816c <tcp_process+0x29c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	429a      	cmp	r2, r3
 8008050:	f040 80d5 	bne.w	80081fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008054:	4b46      	ldr	r3, [pc, #280]	@ (8008170 <tcp_process+0x2a0>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8008066:	4b41      	ldr	r3, [pc, #260]	@ (800816c <tcp_process+0x29c>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800806e:	4b44      	ldr	r3, [pc, #272]	@ (8008180 <tcp_process+0x2b0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	89db      	ldrh	r3, [r3, #14]
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008088:	4b39      	ldr	r3, [pc, #228]	@ (8008170 <tcp_process+0x2a0>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	1e5a      	subs	r2, r3, #1
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2204      	movs	r2, #4
 8008096:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3304      	adds	r3, #4
 80080a0:	4618      	mov	r0, r3
 80080a2:	f004 faeb 	bl	800c67c <ip4_route>
 80080a6:	4601      	mov	r1, r0
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3304      	adds	r3, #4
 80080ac:	461a      	mov	r2, r3
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7ff f88c 	bl	80071cc <tcp_eff_send_mss_netif>
 80080b4:	4603      	mov	r3, r0
 80080b6:	461a      	mov	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080c0:	009a      	lsls	r2, r3, #2
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80080cc:	428b      	cmp	r3, r1
 80080ce:	bf38      	it	cc
 80080d0:	460b      	movcc	r3, r1
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d204      	bcs.n	80080e0 <tcp_process+0x210>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	b29b      	uxth	r3, r3
 80080de:	e00d      	b.n	80080fc <tcp_process+0x22c>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d904      	bls.n	80080f8 <tcp_process+0x228>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	e001      	b.n	80080fc <tcp_process+0x22c>
 80080f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <tcp_process+0x24a>
 800810c:	4b13      	ldr	r3, [pc, #76]	@ (800815c <tcp_process+0x28c>)
 800810e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8008112:	491c      	ldr	r1, [pc, #112]	@ (8008184 <tcp_process+0x2b4>)
 8008114:	4813      	ldr	r0, [pc, #76]	@ (8008164 <tcp_process+0x294>)
 8008116:	f005 fd9d 	bl	800dc54 <iprintf>
        --pcb->snd_queuelen;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008120:	3b01      	subs	r3, #1
 8008122:	b29a      	uxth	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800812e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d12a      	bne.n	800818c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800813a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <tcp_process+0x280>
 8008142:	4b06      	ldr	r3, [pc, #24]	@ (800815c <tcp_process+0x28c>)
 8008144:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008148:	490f      	ldr	r1, [pc, #60]	@ (8008188 <tcp_process+0x2b8>)
 800814a:	4806      	ldr	r0, [pc, #24]	@ (8008164 <tcp_process+0x294>)
 800814c:	f005 fd82 	bl	800dc54 <iprintf>
          pcb->unsent = rseg->next;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008158:	e01c      	b.n	8008194 <tcp_process+0x2c4>
 800815a:	bf00      	nop
 800815c:	0800fcb0 	.word	0x0800fcb0
 8008160:	0800fee8 	.word	0x0800fee8
 8008164:	0800fcfc 	.word	0x0800fcfc
 8008168:	200082c8 	.word	0x200082c8
 800816c:	200082c0 	.word	0x200082c0
 8008170:	200082bc 	.word	0x200082bc
 8008174:	0800ff04 	.word	0x0800ff04
 8008178:	200082c9 	.word	0x200082c9
 800817c:	20008284 	.word	0x20008284
 8008180:	200082ac 	.word	0x200082ac
 8008184:	0800ff24 	.word	0x0800ff24
 8008188:	0800ff3c 	.word	0x0800ff3c
        } else {
          pcb->unacked = rseg->next;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8008194:	69f8      	ldr	r0, [r7, #28]
 8008196:	f7fe fd22 	bl	8006bde <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081a8:	861a      	strh	r2, [r3, #48]	@ 0x30
 80081aa:	e006      	b.n	80081ba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <tcp_process+0x30a>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6910      	ldr	r0, [r2, #16]
 80081ce:	2200      	movs	r2, #0
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4798      	blx	r3
 80081d4:	4603      	mov	r3, r0
 80081d6:	76bb      	strb	r3, [r7, #26]
 80081d8:	e001      	b.n	80081de <tcp_process+0x30e>
 80081da:	2300      	movs	r3, #0
 80081dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80081de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80081e2:	f113 0f0d 	cmn.w	r3, #13
 80081e6:	d102      	bne.n	80081ee <tcp_process+0x31e>
          return ERR_ABRT;
 80081e8:	f06f 030c 	mvn.w	r3, #12
 80081ec:	e250      	b.n	8008690 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	8b5b      	ldrh	r3, [r3, #26]
 80081f2:	f043 0302 	orr.w	r3, r3, #2
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80081fc:	e23a      	b.n	8008674 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80081fe:	4b98      	ldr	r3, [pc, #608]	@ (8008460 <tcp_process+0x590>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	f003 0310 	and.w	r3, r3, #16
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 8234 	beq.w	8008674 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800820c:	4b95      	ldr	r3, [pc, #596]	@ (8008464 <tcp_process+0x594>)
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	4b95      	ldr	r3, [pc, #596]	@ (8008468 <tcp_process+0x598>)
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	461a      	mov	r2, r3
 8008216:	4b95      	ldr	r3, [pc, #596]	@ (800846c <tcp_process+0x59c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800821c:	4b94      	ldr	r3, [pc, #592]	@ (8008470 <tcp_process+0x5a0>)
 800821e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008220:	885b      	ldrh	r3, [r3, #2]
 8008222:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008224:	4a92      	ldr	r2, [pc, #584]	@ (8008470 <tcp_process+0x5a0>)
 8008226:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008228:	8812      	ldrh	r2, [r2, #0]
 800822a:	b292      	uxth	r2, r2
 800822c:	9202      	str	r2, [sp, #8]
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	4b90      	ldr	r3, [pc, #576]	@ (8008474 <tcp_process+0x5a4>)
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	4b90      	ldr	r3, [pc, #576]	@ (8008478 <tcp_process+0x5a8>)
 8008236:	4602      	mov	r2, r0
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f002 fc7f 	bl	800ab3c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008244:	2b05      	cmp	r3, #5
 8008246:	f200 8215 	bhi.w	8008674 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f002 fa4b 	bl	800a6ec <tcp_rexmit_rto>
      break;
 8008256:	e20d      	b.n	8008674 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008258:	4b81      	ldr	r3, [pc, #516]	@ (8008460 <tcp_process+0x590>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80a1 	beq.w	80083a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008266:	4b7f      	ldr	r3, [pc, #508]	@ (8008464 <tcp_process+0x594>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	db7e      	blt.n	8008374 <tcp_process+0x4a4>
 8008276:	4b7b      	ldr	r3, [pc, #492]	@ (8008464 <tcp_process+0x594>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	dc77      	bgt.n	8008374 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2204      	movs	r2, #4
 8008288:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008292:	23fa      	movs	r3, #250	@ 0xfa
 8008294:	76bb      	strb	r3, [r7, #26]
 8008296:	e01d      	b.n	80082d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <tcp_process+0x3e0>
 80082a2:	4b76      	ldr	r3, [pc, #472]	@ (800847c <tcp_process+0x5ac>)
 80082a4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80082a8:	4975      	ldr	r1, [pc, #468]	@ (8008480 <tcp_process+0x5b0>)
 80082aa:	4876      	ldr	r0, [pc, #472]	@ (8008484 <tcp_process+0x5b4>)
 80082ac:	f005 fcd2 	bl	800dc54 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <tcp_process+0x400>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6910      	ldr	r0, [r2, #16]
 80082c4:	2200      	movs	r2, #0
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4798      	blx	r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	76bb      	strb	r3, [r7, #26]
 80082ce:	e001      	b.n	80082d4 <tcp_process+0x404>
 80082d0:	23f0      	movs	r3, #240	@ 0xf0
 80082d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80082d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80082dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082e0:	f113 0f0d 	cmn.w	r3, #13
 80082e4:	d002      	beq.n	80082ec <tcp_process+0x41c>
              tcp_abort(pcb);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fd ff8c 	bl	8006204 <tcp_abort>
            }
            return ERR_ABRT;
 80082ec:	f06f 030c 	mvn.w	r3, #12
 80082f0:	e1ce      	b.n	8008690 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fae0 	bl	80088b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80082f8:	4b63      	ldr	r3, [pc, #396]	@ (8008488 <tcp_process+0x5b8>)
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <tcp_process+0x43c>
            recv_acked--;
 8008300:	4b61      	ldr	r3, [pc, #388]	@ (8008488 <tcp_process+0x5b8>)
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	3b01      	subs	r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	4b5f      	ldr	r3, [pc, #380]	@ (8008488 <tcp_process+0x5b8>)
 800830a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008310:	009a      	lsls	r2, r3, #2
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	f241 111c 	movw	r1, #4380	@ 0x111c
 800831c:	428b      	cmp	r3, r1
 800831e:	bf38      	it	cc
 8008320:	460b      	movcc	r3, r1
 8008322:	429a      	cmp	r2, r3
 8008324:	d204      	bcs.n	8008330 <tcp_process+0x460>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	b29b      	uxth	r3, r3
 800832e:	e00d      	b.n	800834c <tcp_process+0x47c>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	f241 121c 	movw	r2, #4380	@ 0x111c
 800833a:	4293      	cmp	r3, r2
 800833c:	d904      	bls.n	8008348 <tcp_process+0x478>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	b29b      	uxth	r3, r3
 8008346:	e001      	b.n	800834c <tcp_process+0x47c>
 8008348:	f241 131c 	movw	r3, #4380	@ 0x111c
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008352:	4b4e      	ldr	r3, [pc, #312]	@ (800848c <tcp_process+0x5bc>)
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	f003 0320 	and.w	r3, r3, #32
 800835a:	2b00      	cmp	r3, #0
 800835c:	d037      	beq.n	80083ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	8b5b      	ldrh	r3, [r3, #26]
 8008362:	f043 0302 	orr.w	r3, r3, #2
 8008366:	b29a      	uxth	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2207      	movs	r2, #7
 8008370:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008372:	e02c      	b.n	80083ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008374:	4b3b      	ldr	r3, [pc, #236]	@ (8008464 <tcp_process+0x594>)
 8008376:	6819      	ldr	r1, [r3, #0]
 8008378:	4b3b      	ldr	r3, [pc, #236]	@ (8008468 <tcp_process+0x598>)
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	4b3b      	ldr	r3, [pc, #236]	@ (800846c <tcp_process+0x59c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008384:	4b3a      	ldr	r3, [pc, #232]	@ (8008470 <tcp_process+0x5a0>)
 8008386:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008388:	885b      	ldrh	r3, [r3, #2]
 800838a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800838c:	4a38      	ldr	r2, [pc, #224]	@ (8008470 <tcp_process+0x5a0>)
 800838e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008390:	8812      	ldrh	r2, [r2, #0]
 8008392:	b292      	uxth	r2, r2
 8008394:	9202      	str	r2, [sp, #8]
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	4b36      	ldr	r3, [pc, #216]	@ (8008474 <tcp_process+0x5a4>)
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	4b36      	ldr	r3, [pc, #216]	@ (8008478 <tcp_process+0x5a8>)
 800839e:	4602      	mov	r2, r0
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f002 fbcb 	bl	800ab3c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80083a6:	e167      	b.n	8008678 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80083a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008460 <tcp_process+0x590>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 8161 	beq.w	8008678 <tcp_process+0x7a8>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	1e5a      	subs	r2, r3, #1
 80083bc:	4b2b      	ldr	r3, [pc, #172]	@ (800846c <tcp_process+0x59c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	f040 8159 	bne.w	8008678 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f002 f9b2 	bl	800a730 <tcp_rexmit>
      break;
 80083cc:	e154      	b.n	8008678 <tcp_process+0x7a8>
 80083ce:	e153      	b.n	8008678 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fa71 	bl	80088b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80083d6:	4b2d      	ldr	r3, [pc, #180]	@ (800848c <tcp_process+0x5bc>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 814c 	beq.w	800867c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	8b5b      	ldrh	r3, [r3, #26]
 80083e8:	f043 0302 	orr.w	r3, r3, #2
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2207      	movs	r2, #7
 80083f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80083f8:	e140      	b.n	800867c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa5c 	bl	80088b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008400:	4b22      	ldr	r3, [pc, #136]	@ (800848c <tcp_process+0x5bc>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d071      	beq.n	80084f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800840c:	4b14      	ldr	r3, [pc, #80]	@ (8008460 <tcp_process+0x590>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 0310 	and.w	r3, r3, #16
 8008414:	2b00      	cmp	r3, #0
 8008416:	d060      	beq.n	80084da <tcp_process+0x60a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800841c:	4b11      	ldr	r3, [pc, #68]	@ (8008464 <tcp_process+0x594>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	429a      	cmp	r2, r3
 8008422:	d15a      	bne.n	80084da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008428:	2b00      	cmp	r3, #0
 800842a:	d156      	bne.n	80084da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	8b5b      	ldrh	r3, [r3, #26]
 8008430:	f043 0302 	orr.w	r3, r3, #2
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fe fdbc 	bl	8006fb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008440:	4b13      	ldr	r3, [pc, #76]	@ (8008490 <tcp_process+0x5c0>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	429a      	cmp	r2, r3
 8008448:	d105      	bne.n	8008456 <tcp_process+0x586>
 800844a:	4b11      	ldr	r3, [pc, #68]	@ (8008490 <tcp_process+0x5c0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	4a0f      	ldr	r2, [pc, #60]	@ (8008490 <tcp_process+0x5c0>)
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	e02e      	b.n	80084b4 <tcp_process+0x5e4>
 8008456:	4b0e      	ldr	r3, [pc, #56]	@ (8008490 <tcp_process+0x5c0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	e027      	b.n	80084ae <tcp_process+0x5de>
 800845e:	bf00      	nop
 8008460:	200082c8 	.word	0x200082c8
 8008464:	200082c0 	.word	0x200082c0
 8008468:	200082c6 	.word	0x200082c6
 800846c:	200082bc 	.word	0x200082bc
 8008470:	200082ac 	.word	0x200082ac
 8008474:	20004d24 	.word	0x20004d24
 8008478:	20004d28 	.word	0x20004d28
 800847c:	0800fcb0 	.word	0x0800fcb0
 8008480:	0800ff50 	.word	0x0800ff50
 8008484:	0800fcfc 	.word	0x0800fcfc
 8008488:	200082c4 	.word	0x200082c4
 800848c:	200082c9 	.word	0x200082c9
 8008490:	20008290 	.word	0x20008290
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	429a      	cmp	r2, r3
 800849c:	d104      	bne.n	80084a8 <tcp_process+0x5d8>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	60da      	str	r2, [r3, #12]
 80084a6:	e005      	b.n	80084b4 <tcp_process+0x5e4>
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1ef      	bne.n	8008494 <tcp_process+0x5c4>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	60da      	str	r2, [r3, #12]
 80084ba:	4b77      	ldr	r3, [pc, #476]	@ (8008698 <tcp_process+0x7c8>)
 80084bc:	2201      	movs	r2, #1
 80084be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	220a      	movs	r2, #10
 80084c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80084c6:	4b75      	ldr	r3, [pc, #468]	@ (800869c <tcp_process+0x7cc>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60da      	str	r2, [r3, #12]
 80084ce:	4a73      	ldr	r2, [pc, #460]	@ (800869c <tcp_process+0x7cc>)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	f002 fcf4 	bl	800aec0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80084d8:	e0d2      	b.n	8008680 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	8b5b      	ldrh	r3, [r3, #26]
 80084de:	f043 0302 	orr.w	r3, r3, #2
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2208      	movs	r2, #8
 80084ec:	751a      	strb	r2, [r3, #20]
      break;
 80084ee:	e0c7      	b.n	8008680 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084f0:	4b6b      	ldr	r3, [pc, #428]	@ (80086a0 <tcp_process+0x7d0>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 0310 	and.w	r3, r3, #16
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 80c1 	beq.w	8008680 <tcp_process+0x7b0>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008502:	4b68      	ldr	r3, [pc, #416]	@ (80086a4 <tcp_process+0x7d4>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	f040 80ba 	bne.w	8008680 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008510:	2b00      	cmp	r3, #0
 8008512:	f040 80b5 	bne.w	8008680 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2206      	movs	r2, #6
 800851a:	751a      	strb	r2, [r3, #20]
      break;
 800851c:	e0b0      	b.n	8008680 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f9ca 	bl	80088b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008524:	4b60      	ldr	r3, [pc, #384]	@ (80086a8 <tcp_process+0x7d8>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 80a9 	beq.w	8008684 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	8b5b      	ldrh	r3, [r3, #26]
 8008536:	f043 0302 	orr.w	r3, r3, #2
 800853a:	b29a      	uxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7fe fd39 	bl	8006fb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008546:	4b59      	ldr	r3, [pc, #356]	@ (80086ac <tcp_process+0x7dc>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d105      	bne.n	800855c <tcp_process+0x68c>
 8008550:	4b56      	ldr	r3, [pc, #344]	@ (80086ac <tcp_process+0x7dc>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	4a55      	ldr	r2, [pc, #340]	@ (80086ac <tcp_process+0x7dc>)
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	e013      	b.n	8008584 <tcp_process+0x6b4>
 800855c:	4b53      	ldr	r3, [pc, #332]	@ (80086ac <tcp_process+0x7dc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	e00c      	b.n	800857e <tcp_process+0x6ae>
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d104      	bne.n	8008578 <tcp_process+0x6a8>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	60da      	str	r2, [r3, #12]
 8008576:	e005      	b.n	8008584 <tcp_process+0x6b4>
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1ef      	bne.n	8008564 <tcp_process+0x694>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	60da      	str	r2, [r3, #12]
 800858a:	4b43      	ldr	r3, [pc, #268]	@ (8008698 <tcp_process+0x7c8>)
 800858c:	2201      	movs	r2, #1
 800858e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	220a      	movs	r2, #10
 8008594:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008596:	4b41      	ldr	r3, [pc, #260]	@ (800869c <tcp_process+0x7cc>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
 800859e:	4a3f      	ldr	r2, [pc, #252]	@ (800869c <tcp_process+0x7cc>)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	f002 fc8c 	bl	800aec0 <tcp_timer_needed>
      }
      break;
 80085a8:	e06c      	b.n	8008684 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f984 	bl	80088b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80085b0:	4b3b      	ldr	r3, [pc, #236]	@ (80086a0 <tcp_process+0x7d0>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d065      	beq.n	8008688 <tcp_process+0x7b8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085c0:	4b38      	ldr	r3, [pc, #224]	@ (80086a4 <tcp_process+0x7d4>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d15f      	bne.n	8008688 <tcp_process+0x7b8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d15b      	bne.n	8008688 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7fe fcf1 	bl	8006fb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80085d6:	4b35      	ldr	r3, [pc, #212]	@ (80086ac <tcp_process+0x7dc>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d105      	bne.n	80085ec <tcp_process+0x71c>
 80085e0:	4b32      	ldr	r3, [pc, #200]	@ (80086ac <tcp_process+0x7dc>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	4a31      	ldr	r2, [pc, #196]	@ (80086ac <tcp_process+0x7dc>)
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	e013      	b.n	8008614 <tcp_process+0x744>
 80085ec:	4b2f      	ldr	r3, [pc, #188]	@ (80086ac <tcp_process+0x7dc>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	e00c      	b.n	800860e <tcp_process+0x73e>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d104      	bne.n	8008608 <tcp_process+0x738>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	60da      	str	r2, [r3, #12]
 8008606:	e005      	b.n	8008614 <tcp_process+0x744>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1ef      	bne.n	80085f4 <tcp_process+0x724>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	4b1f      	ldr	r3, [pc, #124]	@ (8008698 <tcp_process+0x7c8>)
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	220a      	movs	r2, #10
 8008624:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008626:	4b1d      	ldr	r3, [pc, #116]	@ (800869c <tcp_process+0x7cc>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60da      	str	r2, [r3, #12]
 800862e:	4a1b      	ldr	r2, [pc, #108]	@ (800869c <tcp_process+0x7cc>)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	f002 fc44 	bl	800aec0 <tcp_timer_needed>
      }
      break;
 8008638:	e026      	b.n	8008688 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f93c 	bl	80088b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008640:	4b17      	ldr	r3, [pc, #92]	@ (80086a0 <tcp_process+0x7d0>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	f003 0310 	and.w	r3, r3, #16
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01f      	beq.n	800868c <tcp_process+0x7bc>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008650:	4b14      	ldr	r3, [pc, #80]	@ (80086a4 <tcp_process+0x7d4>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d119      	bne.n	800868c <tcp_process+0x7bc>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d115      	bne.n	800868c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008660:	4b11      	ldr	r3, [pc, #68]	@ (80086a8 <tcp_process+0x7d8>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	f043 0310 	orr.w	r3, r3, #16
 8008668:	b2da      	uxtb	r2, r3
 800866a:	4b0f      	ldr	r3, [pc, #60]	@ (80086a8 <tcp_process+0x7d8>)
 800866c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800866e:	e00d      	b.n	800868c <tcp_process+0x7bc>
    default:
      break;
 8008670:	bf00      	nop
 8008672:	e00c      	b.n	800868e <tcp_process+0x7be>
      break;
 8008674:	bf00      	nop
 8008676:	e00a      	b.n	800868e <tcp_process+0x7be>
      break;
 8008678:	bf00      	nop
 800867a:	e008      	b.n	800868e <tcp_process+0x7be>
      break;
 800867c:	bf00      	nop
 800867e:	e006      	b.n	800868e <tcp_process+0x7be>
      break;
 8008680:	bf00      	nop
 8008682:	e004      	b.n	800868e <tcp_process+0x7be>
      break;
 8008684:	bf00      	nop
 8008686:	e002      	b.n	800868e <tcp_process+0x7be>
      break;
 8008688:	bf00      	nop
 800868a:	e000      	b.n	800868e <tcp_process+0x7be>
      break;
 800868c:	bf00      	nop
  }
  return ERR_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3724      	adds	r7, #36	@ 0x24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd90      	pop	{r4, r7, pc}
 8008698:	20008298 	.word	0x20008298
 800869c:	20008294 	.word	0x20008294
 80086a0:	200082c8 	.word	0x200082c8
 80086a4:	200082c0 	.word	0x200082c0
 80086a8:	200082c9 	.word	0x200082c9
 80086ac:	20008290 	.word	0x20008290

080086b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80086b0:	b590      	push	{r4, r7, lr}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d106      	bne.n	80086ce <tcp_oos_insert_segment+0x1e>
 80086c0:	4b3b      	ldr	r3, [pc, #236]	@ (80087b0 <tcp_oos_insert_segment+0x100>)
 80086c2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80086c6:	493b      	ldr	r1, [pc, #236]	@ (80087b4 <tcp_oos_insert_segment+0x104>)
 80086c8:	483b      	ldr	r0, [pc, #236]	@ (80087b8 <tcp_oos_insert_segment+0x108>)
 80086ca:	f005 fac3 	bl	800dc54 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	899b      	ldrh	r3, [r3, #12]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fb fcae 	bl	8004038 <lwip_htons>
 80086dc:	4603      	mov	r3, r0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d028      	beq.n	800873a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80086e8:	6838      	ldr	r0, [r7, #0]
 80086ea:	f7fe fa63 	bl	8006bb4 <tcp_segs_free>
    next = NULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	e056      	b.n	80087a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	899b      	ldrh	r3, [r3, #12]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fb fc9b 	bl	8004038 <lwip_htons>
 8008702:	4603      	mov	r3, r0
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00d      	beq.n	800872a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	899b      	ldrh	r3, [r3, #12]
 8008714:	b29c      	uxth	r4, r3
 8008716:	2001      	movs	r0, #1
 8008718:	f7fb fc8e 	bl	8004038 <lwip_htons>
 800871c:	4603      	mov	r3, r0
 800871e:	461a      	mov	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	4322      	orrs	r2, r4
 8008726:	b292      	uxth	r2, r2
 8008728:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7fe fa52 	bl	8006bde <tcp_seg_free>
    while (next &&
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00e      	beq.n	800875e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	891b      	ldrh	r3, [r3, #8]
 8008744:	461a      	mov	r2, r3
 8008746:	4b1d      	ldr	r3, [pc, #116]	@ (80087bc <tcp_oos_insert_segment+0x10c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	441a      	add	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	8909      	ldrh	r1, [r1, #8]
 8008756:	440b      	add	r3, r1
 8008758:	1ad3      	subs	r3, r2, r3
    while (next &&
 800875a:	2b00      	cmp	r3, #0
 800875c:	daca      	bge.n	80086f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01e      	beq.n	80087a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	891b      	ldrh	r3, [r3, #8]
 8008768:	461a      	mov	r2, r3
 800876a:	4b14      	ldr	r3, [pc, #80]	@ (80087bc <tcp_oos_insert_segment+0x10c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	441a      	add	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008778:	2b00      	cmp	r3, #0
 800877a:	dd12      	ble.n	80087a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	b29a      	uxth	r2, r3
 8008784:	4b0d      	ldr	r3, [pc, #52]	@ (80087bc <tcp_oos_insert_segment+0x10c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	b29a      	uxth	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	891b      	ldrh	r3, [r3, #8]
 800879a:	4619      	mov	r1, r3
 800879c:	4610      	mov	r0, r2
 800879e:	f7fc fe23 	bl	80053e8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	601a      	str	r2, [r3, #0]
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd90      	pop	{r4, r7, pc}
 80087b0:	0800fcb0 	.word	0x0800fcb0
 80087b4:	0800ff70 	.word	0x0800ff70
 80087b8:	0800fcfc 	.word	0x0800fcfc
 80087bc:	200082bc 	.word	0x200082bc

080087c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80087c0:	b5b0      	push	{r4, r5, r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
 80087cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80087ce:	e03e      	b.n	800884e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fd f810 	bl	8005804 <pbuf_clen>
 80087e4:	4603      	mov	r3, r0
 80087e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80087ee:	8a7a      	ldrh	r2, [r7, #18]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d906      	bls.n	8008802 <tcp_free_acked_segments+0x42>
 80087f4:	4b2a      	ldr	r3, [pc, #168]	@ (80088a0 <tcp_free_acked_segments+0xe0>)
 80087f6:	f240 4257 	movw	r2, #1111	@ 0x457
 80087fa:	492a      	ldr	r1, [pc, #168]	@ (80088a4 <tcp_free_acked_segments+0xe4>)
 80087fc:	482a      	ldr	r0, [pc, #168]	@ (80088a8 <tcp_free_acked_segments+0xe8>)
 80087fe:	f005 fa29 	bl	800dc54 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8008808:	8a7b      	ldrh	r3, [r7, #18]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	891a      	ldrh	r2, [r3, #8]
 8008818:	4b24      	ldr	r3, [pc, #144]	@ (80088ac <tcp_free_acked_segments+0xec>)
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	4413      	add	r3, r2
 800881e:	b29a      	uxth	r2, r3
 8008820:	4b22      	ldr	r3, [pc, #136]	@ (80088ac <tcp_free_acked_segments+0xec>)
 8008822:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008824:	6978      	ldr	r0, [r7, #20]
 8008826:	f7fe f9da 	bl	8006bde <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00c      	beq.n	800884e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d109      	bne.n	800884e <tcp_free_acked_segments+0x8e>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d106      	bne.n	800884e <tcp_free_acked_segments+0x8e>
 8008840:	4b17      	ldr	r3, [pc, #92]	@ (80088a0 <tcp_free_acked_segments+0xe0>)
 8008842:	f240 4261 	movw	r2, #1121	@ 0x461
 8008846:	491a      	ldr	r1, [pc, #104]	@ (80088b0 <tcp_free_acked_segments+0xf0>)
 8008848:	4817      	ldr	r0, [pc, #92]	@ (80088a8 <tcp_free_acked_segments+0xe8>)
 800884a:	f005 fa03 	bl	800dc54 <iprintf>
  while (seg_list != NULL &&
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d020      	beq.n	8008896 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	4618      	mov	r0, r3
 800885c:	f7fb fc02 	bl	8004064 <lwip_htonl>
 8008860:	4604      	mov	r4, r0
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	891b      	ldrh	r3, [r3, #8]
 8008866:	461d      	mov	r5, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	899b      	ldrh	r3, [r3, #12]
 800886e:	b29b      	uxth	r3, r3
 8008870:	4618      	mov	r0, r3
 8008872:	f7fb fbe1 	bl	8004038 <lwip_htons>
 8008876:	4603      	mov	r3, r0
 8008878:	b2db      	uxtb	r3, r3
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <tcp_free_acked_segments+0xc6>
 8008882:	2301      	movs	r3, #1
 8008884:	e000      	b.n	8008888 <tcp_free_acked_segments+0xc8>
 8008886:	2300      	movs	r3, #0
 8008888:	442b      	add	r3, r5
 800888a:	18e2      	adds	r2, r4, r3
 800888c:	4b09      	ldr	r3, [pc, #36]	@ (80088b4 <tcp_free_acked_segments+0xf4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008892:	2b00      	cmp	r3, #0
 8008894:	dd9c      	ble.n	80087d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008896:	68bb      	ldr	r3, [r7, #8]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bdb0      	pop	{r4, r5, r7, pc}
 80088a0:	0800fcb0 	.word	0x0800fcb0
 80088a4:	0800ff98 	.word	0x0800ff98
 80088a8:	0800fcfc 	.word	0x0800fcfc
 80088ac:	200082c4 	.word	0x200082c4
 80088b0:	0800ffc0 	.word	0x0800ffc0
 80088b4:	200082c0 	.word	0x200082c0

080088b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80088b8:	b5b0      	push	{r4, r5, r7, lr}
 80088ba:	b094      	sub	sp, #80	@ 0x50
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <tcp_receive+0x20>
 80088ca:	4b91      	ldr	r3, [pc, #580]	@ (8008b10 <tcp_receive+0x258>)
 80088cc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80088d0:	4990      	ldr	r1, [pc, #576]	@ (8008b14 <tcp_receive+0x25c>)
 80088d2:	4891      	ldr	r0, [pc, #580]	@ (8008b18 <tcp_receive+0x260>)
 80088d4:	f005 f9be 	bl	800dc54 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7d1b      	ldrb	r3, [r3, #20]
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d806      	bhi.n	80088ee <tcp_receive+0x36>
 80088e0:	4b8b      	ldr	r3, [pc, #556]	@ (8008b10 <tcp_receive+0x258>)
 80088e2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80088e6:	498d      	ldr	r1, [pc, #564]	@ (8008b1c <tcp_receive+0x264>)
 80088e8:	488b      	ldr	r0, [pc, #556]	@ (8008b18 <tcp_receive+0x260>)
 80088ea:	f005 f9b3 	bl	800dc54 <iprintf>

  if (flags & TCP_ACK) {
 80088ee:	4b8c      	ldr	r3, [pc, #560]	@ (8008b20 <tcp_receive+0x268>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	f003 0310 	and.w	r3, r3, #16
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 8264 	beq.w	8008dc4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008908:	4413      	add	r3, r2
 800890a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008910:	4b84      	ldr	r3, [pc, #528]	@ (8008b24 <tcp_receive+0x26c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	db1b      	blt.n	8008952 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800891e:	4b81      	ldr	r3, [pc, #516]	@ (8008b24 <tcp_receive+0x26c>)
 8008920:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008922:	429a      	cmp	r2, r3
 8008924:	d106      	bne.n	8008934 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800892a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b28 <tcp_receive+0x270>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	db0e      	blt.n	8008952 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008938:	4b7b      	ldr	r3, [pc, #492]	@ (8008b28 <tcp_receive+0x270>)
 800893a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800893c:	429a      	cmp	r2, r3
 800893e:	d125      	bne.n	800898c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008940:	4b7a      	ldr	r3, [pc, #488]	@ (8008b2c <tcp_receive+0x274>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	89db      	ldrh	r3, [r3, #14]
 8008946:	b29a      	uxth	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800894e:	429a      	cmp	r2, r3
 8008950:	d91c      	bls.n	800898c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008952:	4b76      	ldr	r3, [pc, #472]	@ (8008b2c <tcp_receive+0x274>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	89db      	ldrh	r3, [r3, #14]
 8008958:	b29a      	uxth	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800896c:	429a      	cmp	r2, r3
 800896e:	d205      	bcs.n	800897c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800897c:	4b69      	ldr	r3, [pc, #420]	@ (8008b24 <tcp_receive+0x26c>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8008984:	4b68      	ldr	r3, [pc, #416]	@ (8008b28 <tcp_receive+0x270>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800898c:	4b66      	ldr	r3, [pc, #408]	@ (8008b28 <tcp_receive+0x270>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	dc58      	bgt.n	8008a4c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800899a:	4b65      	ldr	r3, [pc, #404]	@ (8008b30 <tcp_receive+0x278>)
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d14b      	bne.n	8008a3a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80089ac:	4413      	add	r3, r2
 80089ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d142      	bne.n	8008a3a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	db3d      	blt.n	8008a3a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089c2:	4b59      	ldr	r3, [pc, #356]	@ (8008b28 <tcp_receive+0x270>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d137      	bne.n	8008a3a <tcp_receive+0x182>
              found_dupack = 1;
 80089ca:	2301      	movs	r3, #1
 80089cc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089d4:	2bff      	cmp	r3, #255	@ 0xff
 80089d6:	d007      	beq.n	80089e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089de:	3301      	adds	r3, #1
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d91b      	bls.n	8008a2a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089fc:	4413      	add	r3, r2
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d30a      	bcc.n	8008a20 <tcp_receive+0x168>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a14:	4413      	add	r3, r2
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008a1e:	e004      	b.n	8008a2a <tcp_receive+0x172>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d902      	bls.n	8008a3a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 fee7 	bl	800a808 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f040 8161 	bne.w	8008d04 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a4a:	e15b      	b.n	8008d04 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008a4c:	4b36      	ldr	r3, [pc, #216]	@ (8008b28 <tcp_receive+0x270>)
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	3b01      	subs	r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f2c0 814e 	blt.w	8008cfa <tcp_receive+0x442>
 8008a5e:	4b32      	ldr	r3, [pc, #200]	@ (8008b28 <tcp_receive+0x270>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f300 8146 	bgt.w	8008cfa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	8b5b      	ldrh	r3, [r3, #26]
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d010      	beq.n	8008a9c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	8b5b      	ldrh	r3, [r3, #26]
 8008a7e:	f023 0304 	bic.w	r3, r3, #4
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008aaa:	10db      	asrs	r3, r3, #3
 8008aac:	b21b      	sxth	r3, r3
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	4413      	add	r3, r2
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	b21a      	sxth	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008ac4:	4b18      	ldr	r3, [pc, #96]	@ (8008b28 <tcp_receive+0x270>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8008adc:	4b12      	ldr	r3, [pc, #72]	@ (8008b28 <tcp_receive+0x270>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7d1b      	ldrb	r3, [r3, #20]
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	f240 8097 	bls.w	8008c1c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d245      	bcs.n	8008b8a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	8b5b      	ldrh	r3, [r3, #26]
 8008b02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d014      	beq.n	8008b34 <tcp_receive+0x27c>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e013      	b.n	8008b36 <tcp_receive+0x27e>
 8008b0e:	bf00      	nop
 8008b10:	0800fcb0 	.word	0x0800fcb0
 8008b14:	0800ffe0 	.word	0x0800ffe0
 8008b18:	0800fcfc 	.word	0x0800fcfc
 8008b1c:	0800fffc 	.word	0x0800fffc
 8008b20:	200082c8 	.word	0x200082c8
 8008b24:	200082bc 	.word	0x200082bc
 8008b28:	200082c0 	.word	0x200082c0
 8008b2c:	200082ac 	.word	0x200082ac
 8008b30:	200082c6 	.word	0x200082c6
 8008b34:	2302      	movs	r3, #2
 8008b36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008b3a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008b44:	fb12 f303 	smulbb	r3, r2, r3
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	bf28      	it	cs
 8008b50:	4613      	movcs	r3, r2
 8008b52:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008b5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008b5c:	4413      	add	r3, r2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d309      	bcc.n	8008b7e <tcp_receive+0x2c6>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008b70:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008b72:	4413      	add	r3, r2
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008b7c:	e04e      	b.n	8008c1c <tcp_receive+0x364>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008b88:	e048      	b.n	8008c1c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008b90:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b92:	4413      	add	r3, r2
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d309      	bcc.n	8008bb4 <tcp_receive+0x2fc>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008ba6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008ba8:	4413      	add	r3, r2
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bb2:	e004      	b.n	8008bbe <tcp_receive+0x306>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008bba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d326      	bcc.n	8008c1c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008bee:	4413      	add	r3, r2
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d30a      	bcc.n	8008c12 <tcp_receive+0x35a>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c06:	4413      	add	r3, r2
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008c10:	e004      	b.n	8008c1c <tcp_receive+0x364>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c24:	4a98      	ldr	r2, [pc, #608]	@ (8008e88 <tcp_receive+0x5d0>)
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fdca 	bl	80087c0 <tcp_free_acked_segments>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c3a:	4a94      	ldr	r2, [pc, #592]	@ (8008e8c <tcp_receive+0x5d4>)
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff fdbf 	bl	80087c0 <tcp_free_acked_segments>
 8008c42:	4602      	mov	r2, r0
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d104      	bne.n	8008c5a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c56:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008c58:	e002      	b.n	8008c60 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d103      	bne.n	8008c76 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8008c7c:	4b84      	ldr	r3, [pc, #528]	@ (8008e90 <tcp_receive+0x5d8>)
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	4413      	add	r3, r2
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8b5b      	ldrh	r3, [r3, #26]
 8008c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d035      	beq.n	8008d02 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d118      	bne.n	8008cd0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00c      	beq.n	8008cc0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fb f9d6 	bl	8004064 <lwip_htonl>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dc20      	bgt.n	8008d02 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	8b5b      	ldrh	r3, [r3, #26]
 8008cc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008cce:	e018      	b.n	8008d02 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fb f9c1 	bl	8004064 <lwip_htonl>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	1ae3      	subs	r3, r4, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	dc0b      	bgt.n	8008d02 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	8b5b      	ldrh	r3, [r3, #26]
 8008cee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008cf8:	e003      	b.n	8008d02 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 ff70 	bl	800abe0 <tcp_send_empty_ack>
 8008d00:	e000      	b.n	8008d04 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d02:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d05b      	beq.n	8008dc4 <tcp_receive+0x50c>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d10:	4b60      	ldr	r3, [pc, #384]	@ (8008e94 <tcp_receive+0x5dc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	da54      	bge.n	8008dc4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8008e98 <tcp_receive+0x5e0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008d2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008d38:	10db      	asrs	r3, r3, #3
 8008d3a:	b21b      	sxth	r3, r3
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008d52:	4413      	add	r3, r2
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	b21a      	sxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008d5c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da05      	bge.n	8008d70 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008d64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008d68:	425b      	negs	r3, r3
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008d70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008d7a:	109b      	asrs	r3, r3, #2
 8008d7c:	b21b      	sxth	r3, r3
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008d94:	4413      	add	r3, r2
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	b21a      	sxth	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008da4:	10db      	asrs	r3, r3, #3
 8008da6:	b21b      	sxth	r3, r3
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4413      	add	r3, r2
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	b21a      	sxth	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008dc4:	4b35      	ldr	r3, [pc, #212]	@ (8008e9c <tcp_receive+0x5e4>)
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 84df 	beq.w	800978c <tcp_receive+0xed4>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	7d1b      	ldrb	r3, [r3, #20]
 8008dd2:	2b06      	cmp	r3, #6
 8008dd4:	f200 84da 	bhi.w	800978c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ddc:	4b30      	ldr	r3, [pc, #192]	@ (8008ea0 <tcp_receive+0x5e8>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f2c0 808f 	blt.w	8008f08 <tcp_receive+0x650>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dee:	4b2b      	ldr	r3, [pc, #172]	@ (8008e9c <tcp_receive+0x5e4>)
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	4619      	mov	r1, r3
 8008df4:	4b2a      	ldr	r3, [pc, #168]	@ (8008ea0 <tcp_receive+0x5e8>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	440b      	add	r3, r1
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f300 8082 	bgt.w	8008f08 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008e04:	4b27      	ldr	r3, [pc, #156]	@ (8008ea4 <tcp_receive+0x5ec>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e0e:	4b24      	ldr	r3, [pc, #144]	@ (8008ea0 <tcp_receive+0x5e8>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008e16:	4b23      	ldr	r3, [pc, #140]	@ (8008ea4 <tcp_receive+0x5ec>)
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <tcp_receive+0x574>
 8008e1e:	4b22      	ldr	r3, [pc, #136]	@ (8008ea8 <tcp_receive+0x5f0>)
 8008e20:	f240 5294 	movw	r2, #1428	@ 0x594
 8008e24:	4921      	ldr	r1, [pc, #132]	@ (8008eac <tcp_receive+0x5f4>)
 8008e26:	4822      	ldr	r0, [pc, #136]	@ (8008eb0 <tcp_receive+0x5f8>)
 8008e28:	f004 ff14 	bl	800dc54 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d906      	bls.n	8008e44 <tcp_receive+0x58c>
 8008e36:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea8 <tcp_receive+0x5f0>)
 8008e38:	f240 5295 	movw	r2, #1429	@ 0x595
 8008e3c:	491d      	ldr	r1, [pc, #116]	@ (8008eb4 <tcp_receive+0x5fc>)
 8008e3e:	481c      	ldr	r0, [pc, #112]	@ (8008eb0 <tcp_receive+0x5f8>)
 8008e40:	f004 ff08 	bl	800dc54 <iprintf>
      off = (u16_t)off32;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008e4a:	4b16      	ldr	r3, [pc, #88]	@ (8008ea4 <tcp_receive+0x5ec>)
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	891b      	ldrh	r3, [r3, #8]
 8008e50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d906      	bls.n	8008e66 <tcp_receive+0x5ae>
 8008e58:	4b13      	ldr	r3, [pc, #76]	@ (8008ea8 <tcp_receive+0x5f0>)
 8008e5a:	f240 5297 	movw	r2, #1431	@ 0x597
 8008e5e:	4916      	ldr	r1, [pc, #88]	@ (8008eb8 <tcp_receive+0x600>)
 8008e60:	4813      	ldr	r0, [pc, #76]	@ (8008eb0 <tcp_receive+0x5f8>)
 8008e62:	f004 fef7 	bl	800dc54 <iprintf>
      inseg.len -= off;
 8008e66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea4 <tcp_receive+0x5ec>)
 8008e68:	891a      	ldrh	r2, [r3, #8]
 8008e6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea4 <tcp_receive+0x5ec>)
 8008e74:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008e76:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea4 <tcp_receive+0x5ec>)
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	891a      	ldrh	r2, [r3, #8]
 8008e7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8008e84:	e02a      	b.n	8008edc <tcp_receive+0x624>
 8008e86:	bf00      	nop
 8008e88:	08010018 	.word	0x08010018
 8008e8c:	08010020 	.word	0x08010020
 8008e90:	200082c4 	.word	0x200082c4
 8008e94:	200082c0 	.word	0x200082c0
 8008e98:	20008284 	.word	0x20008284
 8008e9c:	200082c6 	.word	0x200082c6
 8008ea0:	200082bc 	.word	0x200082bc
 8008ea4:	2000829c 	.word	0x2000829c
 8008ea8:	0800fcb0 	.word	0x0800fcb0
 8008eac:	08010028 	.word	0x08010028
 8008eb0:	0800fcfc 	.word	0x0800fcfc
 8008eb4:	08010038 	.word	0x08010038
 8008eb8:	08010048 	.word	0x08010048
        off -= p->len;
 8008ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ebe:	895b      	ldrh	r3, [r3, #10]
 8008ec0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ecc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008ece:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8008edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ede:	895b      	ldrh	r3, [r3, #10]
 8008ee0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d8e9      	bhi.n	8008ebc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008ee8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008eec:	4619      	mov	r1, r3
 8008eee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008ef0:	f7fc fb7a 	bl	80055e8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef8:	4a90      	ldr	r2, [pc, #576]	@ (800913c <tcp_receive+0x884>)
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	4b90      	ldr	r3, [pc, #576]	@ (8009140 <tcp_receive+0x888>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	4a8e      	ldr	r2, [pc, #568]	@ (800913c <tcp_receive+0x884>)
 8008f02:	6812      	ldr	r2, [r2, #0]
 8008f04:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f06:	e00d      	b.n	8008f24 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008f08:	4b8c      	ldr	r3, [pc, #560]	@ (800913c <tcp_receive+0x884>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	da06      	bge.n	8008f24 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	8b5b      	ldrh	r3, [r3, #26]
 8008f1a:	f043 0302 	orr.w	r3, r3, #2
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f24:	4b85      	ldr	r3, [pc, #532]	@ (800913c <tcp_receive+0x884>)
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f2c0 8427 	blt.w	8009782 <tcp_receive+0xeca>
 8008f34:	4b81      	ldr	r3, [pc, #516]	@ (800913c <tcp_receive+0x884>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008f40:	440b      	add	r3, r1
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	3301      	adds	r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f300 841b 	bgt.w	8009782 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f50:	4b7a      	ldr	r3, [pc, #488]	@ (800913c <tcp_receive+0x884>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	f040 8298 	bne.w	800948a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008f5a:	4b79      	ldr	r3, [pc, #484]	@ (8009140 <tcp_receive+0x888>)
 8008f5c:	891c      	ldrh	r4, [r3, #8]
 8008f5e:	4b78      	ldr	r3, [pc, #480]	@ (8009140 <tcp_receive+0x888>)
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	899b      	ldrh	r3, [r3, #12]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fb f866 	bl	8004038 <lwip_htons>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	f003 0303 	and.w	r3, r3, #3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <tcp_receive+0x6c4>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e000      	b.n	8008f7e <tcp_receive+0x6c6>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4423      	add	r3, r4
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	4b70      	ldr	r3, [pc, #448]	@ (8009144 <tcp_receive+0x88c>)
 8008f84:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8009144 <tcp_receive+0x88c>)
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d274      	bcs.n	800907c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f92:	4b6b      	ldr	r3, [pc, #428]	@ (8009140 <tcp_receive+0x888>)
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	899b      	ldrh	r3, [r3, #12]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fb f84c 	bl	8004038 <lwip_htons>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01e      	beq.n	8008fea <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008fac:	4b64      	ldr	r3, [pc, #400]	@ (8009140 <tcp_receive+0x888>)
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	899b      	ldrh	r3, [r3, #12]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	b21b      	sxth	r3, r3
 8008fb6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008fba:	b21c      	sxth	r4, r3
 8008fbc:	4b60      	ldr	r3, [pc, #384]	@ (8009140 <tcp_receive+0x888>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	899b      	ldrh	r3, [r3, #12]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fb f837 	bl	8004038 <lwip_htons>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fb f82f 	bl	8004038 <lwip_htons>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	b21b      	sxth	r3, r3
 8008fde:	4323      	orrs	r3, r4
 8008fe0:	b21a      	sxth	r2, r3
 8008fe2:	4b57      	ldr	r3, [pc, #348]	@ (8009140 <tcp_receive+0x888>)
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	b292      	uxth	r2, r2
 8008fe8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008fee:	4b54      	ldr	r3, [pc, #336]	@ (8009140 <tcp_receive+0x888>)
 8008ff0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008ff2:	4b53      	ldr	r3, [pc, #332]	@ (8009140 <tcp_receive+0x888>)
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	899b      	ldrh	r3, [r3, #12]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fb f81c 	bl	8004038 <lwip_htons>
 8009000:	4603      	mov	r3, r0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <tcp_receive+0x760>
            inseg.len -= 1;
 800900c:	4b4c      	ldr	r3, [pc, #304]	@ (8009140 <tcp_receive+0x888>)
 800900e:	891b      	ldrh	r3, [r3, #8]
 8009010:	3b01      	subs	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	4b4a      	ldr	r3, [pc, #296]	@ (8009140 <tcp_receive+0x888>)
 8009016:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009018:	4b49      	ldr	r3, [pc, #292]	@ (8009140 <tcp_receive+0x888>)
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4a48      	ldr	r2, [pc, #288]	@ (8009140 <tcp_receive+0x888>)
 800901e:	8912      	ldrh	r2, [r2, #8]
 8009020:	4611      	mov	r1, r2
 8009022:	4618      	mov	r0, r3
 8009024:	f7fc f9e0 	bl	80053e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009028:	4b45      	ldr	r3, [pc, #276]	@ (8009140 <tcp_receive+0x888>)
 800902a:	891c      	ldrh	r4, [r3, #8]
 800902c:	4b44      	ldr	r3, [pc, #272]	@ (8009140 <tcp_receive+0x888>)
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	899b      	ldrh	r3, [r3, #12]
 8009032:	b29b      	uxth	r3, r3
 8009034:	4618      	mov	r0, r3
 8009036:	f7fa ffff 	bl	8004038 <lwip_htons>
 800903a:	4603      	mov	r3, r0
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <tcp_receive+0x792>
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <tcp_receive+0x794>
 800904a:	2300      	movs	r3, #0
 800904c:	4423      	add	r3, r4
 800904e:	b29a      	uxth	r2, r3
 8009050:	4b3c      	ldr	r3, [pc, #240]	@ (8009144 <tcp_receive+0x88c>)
 8009052:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009054:	4b3b      	ldr	r3, [pc, #236]	@ (8009144 <tcp_receive+0x88c>)
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	461a      	mov	r2, r3
 800905a:	4b38      	ldr	r3, [pc, #224]	@ (800913c <tcp_receive+0x884>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	441a      	add	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009068:	440b      	add	r3, r1
 800906a:	429a      	cmp	r2, r3
 800906c:	d006      	beq.n	800907c <tcp_receive+0x7c4>
 800906e:	4b36      	ldr	r3, [pc, #216]	@ (8009148 <tcp_receive+0x890>)
 8009070:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8009074:	4935      	ldr	r1, [pc, #212]	@ (800914c <tcp_receive+0x894>)
 8009076:	4836      	ldr	r0, [pc, #216]	@ (8009150 <tcp_receive+0x898>)
 8009078:	f004 fdec 	bl	800dc54 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 80e6 	beq.w	8009252 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009086:	4b2e      	ldr	r3, [pc, #184]	@ (8009140 <tcp_receive+0x888>)
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	899b      	ldrh	r3, [r3, #12]
 800908c:	b29b      	uxth	r3, r3
 800908e:	4618      	mov	r0, r3
 8009090:	f7fa ffd2 	bl	8004038 <lwip_htons>
 8009094:	4603      	mov	r3, r0
 8009096:	b2db      	uxtb	r3, r3
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d010      	beq.n	80090c2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80090a0:	e00a      	b.n	80090b8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7fd fd93 	bl	8006bde <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1f0      	bne.n	80090a2 <tcp_receive+0x7ea>
 80090c0:	e0c7      	b.n	8009252 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80090c8:	e051      	b.n	800916e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	899b      	ldrh	r3, [r3, #12]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fa ffb0 	bl	8004038 <lwip_htons>
 80090d8:	4603      	mov	r3, r0
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d03c      	beq.n	800915e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80090e4:	4b16      	ldr	r3, [pc, #88]	@ (8009140 <tcp_receive+0x888>)
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	899b      	ldrh	r3, [r3, #12]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fa ffa3 	bl	8004038 <lwip_htons>
 80090f2:	4603      	mov	r3, r0
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d12f      	bne.n	800915e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80090fe:	4b10      	ldr	r3, [pc, #64]	@ (8009140 <tcp_receive+0x888>)
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	899b      	ldrh	r3, [r3, #12]
 8009104:	b29c      	uxth	r4, r3
 8009106:	2001      	movs	r0, #1
 8009108:	f7fa ff96 	bl	8004038 <lwip_htons>
 800910c:	4603      	mov	r3, r0
 800910e:	461a      	mov	r2, r3
 8009110:	4b0b      	ldr	r3, [pc, #44]	@ (8009140 <tcp_receive+0x888>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	4322      	orrs	r2, r4
 8009116:	b292      	uxth	r2, r2
 8009118:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800911a:	4b09      	ldr	r3, [pc, #36]	@ (8009140 <tcp_receive+0x888>)
 800911c:	891c      	ldrh	r4, [r3, #8]
 800911e:	4b08      	ldr	r3, [pc, #32]	@ (8009140 <tcp_receive+0x888>)
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	899b      	ldrh	r3, [r3, #12]
 8009124:	b29b      	uxth	r3, r3
 8009126:	4618      	mov	r0, r3
 8009128:	f7fa ff86 	bl	8004038 <lwip_htons>
 800912c:	4603      	mov	r3, r0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00d      	beq.n	8009154 <tcp_receive+0x89c>
 8009138:	2301      	movs	r3, #1
 800913a:	e00c      	b.n	8009156 <tcp_receive+0x89e>
 800913c:	200082bc 	.word	0x200082bc
 8009140:	2000829c 	.word	0x2000829c
 8009144:	200082c6 	.word	0x200082c6
 8009148:	0800fcb0 	.word	0x0800fcb0
 800914c:	08010058 	.word	0x08010058
 8009150:	0800fcfc 	.word	0x0800fcfc
 8009154:	2300      	movs	r3, #0
 8009156:	4423      	add	r3, r4
 8009158:	b29a      	uxth	r2, r3
 800915a:	4b98      	ldr	r3, [pc, #608]	@ (80093bc <tcp_receive+0xb04>)
 800915c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800915e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009160:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009168:	6938      	ldr	r0, [r7, #16]
 800916a:	f7fd fd38 	bl	8006bde <tcp_seg_free>
            while (next &&
 800916e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00e      	beq.n	8009192 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009174:	4b91      	ldr	r3, [pc, #580]	@ (80093bc <tcp_receive+0xb04>)
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	4b91      	ldr	r3, [pc, #580]	@ (80093c0 <tcp_receive+0xb08>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	441a      	add	r2, r3
 8009180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009188:	8909      	ldrh	r1, [r1, #8]
 800918a:	440b      	add	r3, r1
 800918c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800918e:	2b00      	cmp	r3, #0
 8009190:	da9b      	bge.n	80090ca <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009194:	2b00      	cmp	r3, #0
 8009196:	d059      	beq.n	800924c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009198:	4b88      	ldr	r3, [pc, #544]	@ (80093bc <tcp_receive+0xb04>)
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	4b88      	ldr	r3, [pc, #544]	@ (80093c0 <tcp_receive+0xb08>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	441a      	add	r2, r3
 80091a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	dd4d      	ble.n	800924c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80091b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	4b81      	ldr	r3, [pc, #516]	@ (80093c0 <tcp_receive+0xb08>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	4b80      	ldr	r3, [pc, #512]	@ (80093c4 <tcp_receive+0xb0c>)
 80091c4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80091c6:	4b7f      	ldr	r3, [pc, #508]	@ (80093c4 <tcp_receive+0xb0c>)
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	899b      	ldrh	r3, [r3, #12]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fa ff32 	bl	8004038 <lwip_htons>
 80091d4:	4603      	mov	r3, r0
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <tcp_receive+0x934>
                inseg.len -= 1;
 80091e0:	4b78      	ldr	r3, [pc, #480]	@ (80093c4 <tcp_receive+0xb0c>)
 80091e2:	891b      	ldrh	r3, [r3, #8]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	4b76      	ldr	r3, [pc, #472]	@ (80093c4 <tcp_receive+0xb0c>)
 80091ea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80091ec:	4b75      	ldr	r3, [pc, #468]	@ (80093c4 <tcp_receive+0xb0c>)
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	4a74      	ldr	r2, [pc, #464]	@ (80093c4 <tcp_receive+0xb0c>)
 80091f2:	8912      	ldrh	r2, [r2, #8]
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fc f8f6 	bl	80053e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80091fc:	4b71      	ldr	r3, [pc, #452]	@ (80093c4 <tcp_receive+0xb0c>)
 80091fe:	891c      	ldrh	r4, [r3, #8]
 8009200:	4b70      	ldr	r3, [pc, #448]	@ (80093c4 <tcp_receive+0xb0c>)
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	899b      	ldrh	r3, [r3, #12]
 8009206:	b29b      	uxth	r3, r3
 8009208:	4618      	mov	r0, r3
 800920a:	f7fa ff15 	bl	8004038 <lwip_htons>
 800920e:	4603      	mov	r3, r0
 8009210:	b2db      	uxtb	r3, r3
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <tcp_receive+0x966>
 800921a:	2301      	movs	r3, #1
 800921c:	e000      	b.n	8009220 <tcp_receive+0x968>
 800921e:	2300      	movs	r3, #0
 8009220:	4423      	add	r3, r4
 8009222:	b29a      	uxth	r2, r3
 8009224:	4b65      	ldr	r3, [pc, #404]	@ (80093bc <tcp_receive+0xb04>)
 8009226:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009228:	4b64      	ldr	r3, [pc, #400]	@ (80093bc <tcp_receive+0xb04>)
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	4b64      	ldr	r3, [pc, #400]	@ (80093c0 <tcp_receive+0xb08>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	441a      	add	r2, r3
 8009234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	429a      	cmp	r2, r3
 800923c:	d006      	beq.n	800924c <tcp_receive+0x994>
 800923e:	4b62      	ldr	r3, [pc, #392]	@ (80093c8 <tcp_receive+0xb10>)
 8009240:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8009244:	4961      	ldr	r1, [pc, #388]	@ (80093cc <tcp_receive+0xb14>)
 8009246:	4862      	ldr	r0, [pc, #392]	@ (80093d0 <tcp_receive+0xb18>)
 8009248:	f004 fd04 	bl	800dc54 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009250:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009252:	4b5a      	ldr	r3, [pc, #360]	@ (80093bc <tcp_receive+0xb04>)
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	4b59      	ldr	r3, [pc, #356]	@ (80093c0 <tcp_receive+0xb08>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	441a      	add	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009266:	4b55      	ldr	r3, [pc, #340]	@ (80093bc <tcp_receive+0xb04>)
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d206      	bcs.n	800927c <tcp_receive+0x9c4>
 800926e:	4b56      	ldr	r3, [pc, #344]	@ (80093c8 <tcp_receive+0xb10>)
 8009270:	f240 6207 	movw	r2, #1543	@ 0x607
 8009274:	4957      	ldr	r1, [pc, #348]	@ (80093d4 <tcp_receive+0xb1c>)
 8009276:	4856      	ldr	r0, [pc, #344]	@ (80093d0 <tcp_receive+0xb18>)
 8009278:	f004 fcec 	bl	800dc54 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009280:	4b4e      	ldr	r3, [pc, #312]	@ (80093bc <tcp_receive+0xb04>)
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	b29a      	uxth	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7fc ffc5 	bl	800621c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009292:	4b4c      	ldr	r3, [pc, #304]	@ (80093c4 <tcp_receive+0xb0c>)
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	891b      	ldrh	r3, [r3, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d006      	beq.n	80092aa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800929c:	4b49      	ldr	r3, [pc, #292]	@ (80093c4 <tcp_receive+0xb0c>)
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	4a4d      	ldr	r2, [pc, #308]	@ (80093d8 <tcp_receive+0xb20>)
 80092a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80092a4:	4b47      	ldr	r3, [pc, #284]	@ (80093c4 <tcp_receive+0xb0c>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80092aa:	4b46      	ldr	r3, [pc, #280]	@ (80093c4 <tcp_receive+0xb0c>)
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	899b      	ldrh	r3, [r3, #12]
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fa fec0 	bl	8004038 <lwip_htons>
 80092b8:	4603      	mov	r3, r0
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80b8 	beq.w	8009436 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80092c6:	4b45      	ldr	r3, [pc, #276]	@ (80093dc <tcp_receive+0xb24>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	f043 0320 	orr.w	r3, r3, #32
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	4b42      	ldr	r3, [pc, #264]	@ (80093dc <tcp_receive+0xb24>)
 80092d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80092d4:	e0af      	b.n	8009436 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4a36      	ldr	r2, [pc, #216]	@ (80093c0 <tcp_receive+0xb08>)
 80092e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	891b      	ldrh	r3, [r3, #8]
 80092ec:	461c      	mov	r4, r3
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	899b      	ldrh	r3, [r3, #12]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fa fe9e 	bl	8004038 <lwip_htons>
 80092fc:	4603      	mov	r3, r0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f003 0303 	and.w	r3, r3, #3
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <tcp_receive+0xa54>
 8009308:	2301      	movs	r3, #1
 800930a:	e000      	b.n	800930e <tcp_receive+0xa56>
 800930c:	2300      	movs	r3, #0
 800930e:	191a      	adds	r2, r3, r4
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009314:	441a      	add	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800931e:	461c      	mov	r4, r3
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	891b      	ldrh	r3, [r3, #8]
 8009324:	461d      	mov	r5, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	899b      	ldrh	r3, [r3, #12]
 800932c:	b29b      	uxth	r3, r3
 800932e:	4618      	mov	r0, r3
 8009330:	f7fa fe82 	bl	8004038 <lwip_htons>
 8009334:	4603      	mov	r3, r0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f003 0303 	and.w	r3, r3, #3
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <tcp_receive+0xa8c>
 8009340:	2301      	movs	r3, #1
 8009342:	e000      	b.n	8009346 <tcp_receive+0xa8e>
 8009344:	2300      	movs	r3, #0
 8009346:	442b      	add	r3, r5
 8009348:	429c      	cmp	r4, r3
 800934a:	d206      	bcs.n	800935a <tcp_receive+0xaa2>
 800934c:	4b1e      	ldr	r3, [pc, #120]	@ (80093c8 <tcp_receive+0xb10>)
 800934e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8009352:	4923      	ldr	r1, [pc, #140]	@ (80093e0 <tcp_receive+0xb28>)
 8009354:	481e      	ldr	r0, [pc, #120]	@ (80093d0 <tcp_receive+0xb18>)
 8009356:	f004 fc7d 	bl	800dc54 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	891b      	ldrh	r3, [r3, #8]
 800935e:	461c      	mov	r4, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	899b      	ldrh	r3, [r3, #12]
 8009366:	b29b      	uxth	r3, r3
 8009368:	4618      	mov	r0, r3
 800936a:	f7fa fe65 	bl	8004038 <lwip_htons>
 800936e:	4603      	mov	r3, r0
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <tcp_receive+0xac6>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <tcp_receive+0xac8>
 800937e:	2300      	movs	r3, #0
 8009380:	1919      	adds	r1, r3, r4
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009386:	b28b      	uxth	r3, r1
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fc ff43 	bl	800621c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	891b      	ldrh	r3, [r3, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d028      	beq.n	80093f2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80093a0:	4b0d      	ldr	r3, [pc, #52]	@ (80093d8 <tcp_receive+0xb20>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01d      	beq.n	80093e4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80093a8:	4b0b      	ldr	r3, [pc, #44]	@ (80093d8 <tcp_receive+0xb20>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f7fc fa60 	bl	8005878 <pbuf_cat>
 80093b8:	e018      	b.n	80093ec <tcp_receive+0xb34>
 80093ba:	bf00      	nop
 80093bc:	200082c6 	.word	0x200082c6
 80093c0:	200082bc 	.word	0x200082bc
 80093c4:	2000829c 	.word	0x2000829c
 80093c8:	0800fcb0 	.word	0x0800fcb0
 80093cc:	08010090 	.word	0x08010090
 80093d0:	0800fcfc 	.word	0x0800fcfc
 80093d4:	080100cc 	.word	0x080100cc
 80093d8:	200082cc 	.word	0x200082cc
 80093dc:	200082c9 	.word	0x200082c9
 80093e0:	080100ec 	.word	0x080100ec
            } else {
              recv_data = cseg->p;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	4a70      	ldr	r2, [pc, #448]	@ (80095ac <tcp_receive+0xcf4>)
 80093ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2200      	movs	r2, #0
 80093f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	899b      	ldrh	r3, [r3, #12]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fa fe1c 	bl	8004038 <lwip_htons>
 8009400:	4603      	mov	r3, r0
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00d      	beq.n	8009428 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800940c:	4b68      	ldr	r3, [pc, #416]	@ (80095b0 <tcp_receive+0xcf8>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	f043 0320 	orr.w	r3, r3, #32
 8009414:	b2da      	uxtb	r2, r3
 8009416:	4b66      	ldr	r3, [pc, #408]	@ (80095b0 <tcp_receive+0xcf8>)
 8009418:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	7d1b      	ldrb	r3, [r3, #20]
 800941e:	2b04      	cmp	r3, #4
 8009420:	d102      	bne.n	8009428 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2207      	movs	r2, #7
 8009426:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8009430:	68b8      	ldr	r0, [r7, #8]
 8009432:	f7fd fbd4 	bl	8006bde <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800943a:	2b00      	cmp	r3, #0
 800943c:	d008      	beq.n	8009450 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800944a:	429a      	cmp	r2, r3
 800944c:	f43f af43 	beq.w	80092d6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	8b5b      	ldrh	r3, [r3, #26]
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00e      	beq.n	800947a <tcp_receive+0xbc2>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8b5b      	ldrh	r3, [r3, #26]
 8009460:	f023 0301 	bic.w	r3, r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	835a      	strh	r2, [r3, #26]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	8b5b      	ldrh	r3, [r3, #26]
 800946e:	f043 0302 	orr.w	r3, r3, #2
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009478:	e187      	b.n	800978a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	8b5b      	ldrh	r3, [r3, #26]
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009488:	e17f      	b.n	800978a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800948e:	2b00      	cmp	r3, #0
 8009490:	d106      	bne.n	80094a0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009492:	4848      	ldr	r0, [pc, #288]	@ (80095b4 <tcp_receive+0xcfc>)
 8009494:	f7fd fbbc 	bl	8006c10 <tcp_seg_copy>
 8009498:	4602      	mov	r2, r0
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	675a      	str	r2, [r3, #116]	@ 0x74
 800949e:	e16c      	b.n	800977a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80094a0:	2300      	movs	r3, #0
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094aa:	e156      	b.n	800975a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80094ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	4b41      	ldr	r3, [pc, #260]	@ (80095b8 <tcp_receive+0xd00>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d11d      	bne.n	80094f6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80094ba:	4b3e      	ldr	r3, [pc, #248]	@ (80095b4 <tcp_receive+0xcfc>)
 80094bc:	891a      	ldrh	r2, [r3, #8]
 80094be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c0:	891b      	ldrh	r3, [r3, #8]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	f240 814e 	bls.w	8009764 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80094c8:	483a      	ldr	r0, [pc, #232]	@ (80095b4 <tcp_receive+0xcfc>)
 80094ca:	f7fd fba1 	bl	8006c10 <tcp_seg_copy>
 80094ce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 8148 	beq.w	8009768 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80094d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80094de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	e002      	b.n	80094ec <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80094ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80094ee:	6978      	ldr	r0, [r7, #20]
 80094f0:	f7ff f8de 	bl	80086b0 <tcp_oos_insert_segment>
                }
                break;
 80094f4:	e138      	b.n	8009768 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80094f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d117      	bne.n	800952c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80094fc:	4b2e      	ldr	r3, [pc, #184]	@ (80095b8 <tcp_receive+0xd00>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	da57      	bge.n	80095bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800950c:	4829      	ldr	r0, [pc, #164]	@ (80095b4 <tcp_receive+0xcfc>)
 800950e:	f7fd fb7f 	bl	8006c10 <tcp_seg_copy>
 8009512:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 8128 	beq.w	800976c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009522:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009524:	69b8      	ldr	r0, [r7, #24]
 8009526:	f7ff f8c3 	bl	80086b0 <tcp_oos_insert_segment>
                  }
                  break;
 800952a:	e11f      	b.n	800976c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800952c:	4b22      	ldr	r3, [pc, #136]	@ (80095b8 <tcp_receive+0xd00>)
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	3b01      	subs	r3, #1
 800953a:	2b00      	cmp	r3, #0
 800953c:	db3e      	blt.n	80095bc <tcp_receive+0xd04>
 800953e:	4b1e      	ldr	r3, [pc, #120]	@ (80095b8 <tcp_receive+0xd00>)
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	3301      	adds	r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	dc35      	bgt.n	80095bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009550:	4818      	ldr	r0, [pc, #96]	@ (80095b4 <tcp_receive+0xcfc>)
 8009552:	f7fd fb5d 	bl	8006c10 <tcp_seg_copy>
 8009556:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 8108 	beq.w	8009770 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009568:	8912      	ldrh	r2, [r2, #8]
 800956a:	441a      	add	r2, r3
 800956c:	4b12      	ldr	r3, [pc, #72]	@ (80095b8 <tcp_receive+0xd00>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	dd12      	ble.n	800959c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009576:	4b10      	ldr	r3, [pc, #64]	@ (80095b8 <tcp_receive+0xd00>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	b29a      	uxth	r2, r3
 800957c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	b29b      	uxth	r3, r3
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	b29a      	uxth	r2, r3
 8009588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800958c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009592:	891b      	ldrh	r3, [r3, #8]
 8009594:	4619      	mov	r1, r3
 8009596:	4610      	mov	r0, r2
 8009598:	f7fb ff26 	bl	80053e8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800959c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80095a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80095a4:	69f8      	ldr	r0, [r7, #28]
 80095a6:	f7ff f883 	bl	80086b0 <tcp_oos_insert_segment>
                  }
                  break;
 80095aa:	e0e1      	b.n	8009770 <tcp_receive+0xeb8>
 80095ac:	200082cc 	.word	0x200082cc
 80095b0:	200082c9 	.word	0x200082c9
 80095b4:	2000829c 	.word	0x2000829c
 80095b8:	200082bc 	.word	0x200082bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80095bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095be:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80095c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f040 80c5 	bne.w	8009754 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80095ca:	4b7f      	ldr	r3, [pc, #508]	@ (80097c8 <tcp_receive+0xf10>)
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f340 80bc 	ble.w	8009754 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	899b      	ldrh	r3, [r3, #12]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fa fd27 	bl	8004038 <lwip_htons>
 80095ea:	4603      	mov	r3, r0
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f040 80be 	bne.w	8009774 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80095f8:	4874      	ldr	r0, [pc, #464]	@ (80097cc <tcp_receive+0xf14>)
 80095fa:	f7fd fb09 	bl	8006c10 <tcp_seg_copy>
 80095fe:	4602      	mov	r2, r0
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 80b5 	beq.w	8009778 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800960e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009616:	8912      	ldrh	r2, [r2, #8]
 8009618:	441a      	add	r2, r3
 800961a:	4b6b      	ldr	r3, [pc, #428]	@ (80097c8 <tcp_receive+0xf10>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	dd12      	ble.n	800964a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009624:	4b68      	ldr	r3, [pc, #416]	@ (80097c8 <tcp_receive+0xf10>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	b29a      	uxth	r2, r3
 800962a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	b29b      	uxth	r3, r3
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	b29a      	uxth	r2, r3
 8009636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009638:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800963a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009640:	891b      	ldrh	r3, [r3, #8]
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fb fecf 	bl	80053e8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800964a:	4b61      	ldr	r3, [pc, #388]	@ (80097d0 <tcp_receive+0xf18>)
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	4b5d      	ldr	r3, [pc, #372]	@ (80097c8 <tcp_receive+0xf10>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	441a      	add	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965a:	6879      	ldr	r1, [r7, #4]
 800965c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800965e:	440b      	add	r3, r1
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	f340 8088 	ble.w	8009778 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	899b      	ldrh	r3, [r3, #12]
 8009670:	b29b      	uxth	r3, r3
 8009672:	4618      	mov	r0, r3
 8009674:	f7fa fce0 	bl	8004038 <lwip_htons>
 8009678:	4603      	mov	r3, r0
 800967a:	b2db      	uxtb	r3, r3
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	d021      	beq.n	80096c8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	899b      	ldrh	r3, [r3, #12]
 800968c:	b29b      	uxth	r3, r3
 800968e:	b21b      	sxth	r3, r3
 8009690:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009694:	b21c      	sxth	r4, r3
 8009696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	899b      	ldrh	r3, [r3, #12]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fa fcc9 	bl	8004038 <lwip_htons>
 80096a6:	4603      	mov	r3, r0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fa fcc1 	bl	8004038 <lwip_htons>
 80096b6:	4603      	mov	r3, r0
 80096b8:	b21b      	sxth	r3, r3
 80096ba:	4323      	orrs	r3, r4
 80096bc:	b21a      	sxth	r2, r3
 80096be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	b292      	uxth	r2, r2
 80096c6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096d2:	4413      	add	r3, r2
 80096d4:	b299      	uxth	r1, r3
 80096d6:	4b3c      	ldr	r3, [pc, #240]	@ (80097c8 <tcp_receive+0xf10>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	b29a      	uxth	r2, r3
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	1a8a      	subs	r2, r1, r2
 80096e2:	b292      	uxth	r2, r2
 80096e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80096e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	891b      	ldrh	r3, [r3, #8]
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7fb fe77 	bl	80053e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	891c      	ldrh	r4, [r3, #8]
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	899b      	ldrh	r3, [r3, #12]
 8009708:	b29b      	uxth	r3, r3
 800970a:	4618      	mov	r0, r3
 800970c:	f7fa fc94 	bl	8004038 <lwip_htons>
 8009710:	4603      	mov	r3, r0
 8009712:	b2db      	uxtb	r3, r3
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <tcp_receive+0xe68>
 800971c:	2301      	movs	r3, #1
 800971e:	e000      	b.n	8009722 <tcp_receive+0xe6a>
 8009720:	2300      	movs	r3, #0
 8009722:	4423      	add	r3, r4
 8009724:	b29a      	uxth	r2, r3
 8009726:	4b2a      	ldr	r3, [pc, #168]	@ (80097d0 <tcp_receive+0xf18>)
 8009728:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800972a:	4b29      	ldr	r3, [pc, #164]	@ (80097d0 <tcp_receive+0xf18>)
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	4b25      	ldr	r3, [pc, #148]	@ (80097c8 <tcp_receive+0xf10>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	441a      	add	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800973e:	440b      	add	r3, r1
 8009740:	429a      	cmp	r2, r3
 8009742:	d019      	beq.n	8009778 <tcp_receive+0xec0>
 8009744:	4b23      	ldr	r3, [pc, #140]	@ (80097d4 <tcp_receive+0xf1c>)
 8009746:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800974a:	4923      	ldr	r1, [pc, #140]	@ (80097d8 <tcp_receive+0xf20>)
 800974c:	4823      	ldr	r0, [pc, #140]	@ (80097dc <tcp_receive+0xf24>)
 800974e:	f004 fa81 	bl	800dc54 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009752:	e011      	b.n	8009778 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800975a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975c:	2b00      	cmp	r3, #0
 800975e:	f47f aea5 	bne.w	80094ac <tcp_receive+0xbf4>
 8009762:	e00a      	b.n	800977a <tcp_receive+0xec2>
                break;
 8009764:	bf00      	nop
 8009766:	e008      	b.n	800977a <tcp_receive+0xec2>
                break;
 8009768:	bf00      	nop
 800976a:	e006      	b.n	800977a <tcp_receive+0xec2>
                  break;
 800976c:	bf00      	nop
 800976e:	e004      	b.n	800977a <tcp_receive+0xec2>
                  break;
 8009770:	bf00      	nop
 8009772:	e002      	b.n	800977a <tcp_receive+0xec2>
                  break;
 8009774:	bf00      	nop
 8009776:	e000      	b.n	800977a <tcp_receive+0xec2>
                break;
 8009778:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fa30 	bl	800abe0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009780:	e003      	b.n	800978a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 fa2c 	bl	800abe0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009788:	e01a      	b.n	80097c0 <tcp_receive+0xf08>
 800978a:	e019      	b.n	80097c0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800978c:	4b0e      	ldr	r3, [pc, #56]	@ (80097c8 <tcp_receive+0xf10>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	db0a      	blt.n	80097b0 <tcp_receive+0xef8>
 800979a:	4b0b      	ldr	r3, [pc, #44]	@ (80097c8 <tcp_receive+0xf10>)
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80097a6:	440b      	add	r3, r1
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	3301      	adds	r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dd07      	ble.n	80097c0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	8b5b      	ldrh	r3, [r3, #26]
 80097b4:	f043 0302 	orr.w	r3, r3, #2
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80097be:	e7ff      	b.n	80097c0 <tcp_receive+0xf08>
 80097c0:	bf00      	nop
 80097c2:	3750      	adds	r7, #80	@ 0x50
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bdb0      	pop	{r4, r5, r7, pc}
 80097c8:	200082bc 	.word	0x200082bc
 80097cc:	2000829c 	.word	0x2000829c
 80097d0:	200082c6 	.word	0x200082c6
 80097d4:	0800fcb0 	.word	0x0800fcb0
 80097d8:	08010058 	.word	0x08010058
 80097dc:	0800fcfc 	.word	0x0800fcfc

080097e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80097e6:	4b15      	ldr	r3, [pc, #84]	@ (800983c <tcp_get_next_optbyte+0x5c>)
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	b291      	uxth	r1, r2
 80097ee:	4a13      	ldr	r2, [pc, #76]	@ (800983c <tcp_get_next_optbyte+0x5c>)
 80097f0:	8011      	strh	r1, [r2, #0]
 80097f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80097f4:	4b12      	ldr	r3, [pc, #72]	@ (8009840 <tcp_get_next_optbyte+0x60>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <tcp_get_next_optbyte+0x26>
 80097fc:	4b11      	ldr	r3, [pc, #68]	@ (8009844 <tcp_get_next_optbyte+0x64>)
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	88fa      	ldrh	r2, [r7, #6]
 8009802:	429a      	cmp	r2, r3
 8009804:	d208      	bcs.n	8009818 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009806:	4b10      	ldr	r3, [pc, #64]	@ (8009848 <tcp_get_next_optbyte+0x68>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3314      	adds	r3, #20
 800980c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	4413      	add	r3, r2
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	e00b      	b.n	8009830 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009818:	88fb      	ldrh	r3, [r7, #6]
 800981a:	b2da      	uxtb	r2, r3
 800981c:	4b09      	ldr	r3, [pc, #36]	@ (8009844 <tcp_get_next_optbyte+0x64>)
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	b2db      	uxtb	r3, r3
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009826:	4b06      	ldr	r3, [pc, #24]	@ (8009840 <tcp_get_next_optbyte+0x60>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	797b      	ldrb	r3, [r7, #5]
 800982c:	4413      	add	r3, r2
 800982e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	200082b8 	.word	0x200082b8
 8009840:	200082b4 	.word	0x200082b4
 8009844:	200082b2 	.word	0x200082b2
 8009848:	200082ac 	.word	0x200082ac

0800984c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d106      	bne.n	8009868 <tcp_parseopt+0x1c>
 800985a:	4b32      	ldr	r3, [pc, #200]	@ (8009924 <tcp_parseopt+0xd8>)
 800985c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8009860:	4931      	ldr	r1, [pc, #196]	@ (8009928 <tcp_parseopt+0xdc>)
 8009862:	4832      	ldr	r0, [pc, #200]	@ (800992c <tcp_parseopt+0xe0>)
 8009864:	f004 f9f6 	bl	800dc54 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009868:	4b31      	ldr	r3, [pc, #196]	@ (8009930 <tcp_parseopt+0xe4>)
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d056      	beq.n	800991e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009870:	4b30      	ldr	r3, [pc, #192]	@ (8009934 <tcp_parseopt+0xe8>)
 8009872:	2200      	movs	r2, #0
 8009874:	801a      	strh	r2, [r3, #0]
 8009876:	e046      	b.n	8009906 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8009878:	f7ff ffb2 	bl	80097e0 <tcp_get_next_optbyte>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d006      	beq.n	8009894 <tcp_parseopt+0x48>
 8009886:	2b02      	cmp	r3, #2
 8009888:	dc2a      	bgt.n	80098e0 <tcp_parseopt+0x94>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d042      	beq.n	8009914 <tcp_parseopt+0xc8>
 800988e:	2b01      	cmp	r3, #1
 8009890:	d038      	beq.n	8009904 <tcp_parseopt+0xb8>
 8009892:	e025      	b.n	80098e0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009894:	f7ff ffa4 	bl	80097e0 <tcp_get_next_optbyte>
 8009898:	4603      	mov	r3, r0
 800989a:	2b04      	cmp	r3, #4
 800989c:	d13c      	bne.n	8009918 <tcp_parseopt+0xcc>
 800989e:	4b25      	ldr	r3, [pc, #148]	@ (8009934 <tcp_parseopt+0xe8>)
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	3301      	adds	r3, #1
 80098a4:	4a22      	ldr	r2, [pc, #136]	@ (8009930 <tcp_parseopt+0xe4>)
 80098a6:	8812      	ldrh	r2, [r2, #0]
 80098a8:	4293      	cmp	r3, r2
 80098aa:	da35      	bge.n	8009918 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80098ac:	f7ff ff98 	bl	80097e0 <tcp_get_next_optbyte>
 80098b0:	4603      	mov	r3, r0
 80098b2:	021b      	lsls	r3, r3, #8
 80098b4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80098b6:	f7ff ff93 	bl	80097e0 <tcp_get_next_optbyte>
 80098ba:	4603      	mov	r3, r0
 80098bc:	461a      	mov	r2, r3
 80098be:	89bb      	ldrh	r3, [r7, #12]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80098c4:	89bb      	ldrh	r3, [r7, #12]
 80098c6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80098ca:	d804      	bhi.n	80098d6 <tcp_parseopt+0x8a>
 80098cc:	89bb      	ldrh	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <tcp_parseopt+0x8a>
 80098d2:	89ba      	ldrh	r2, [r7, #12]
 80098d4:	e001      	b.n	80098da <tcp_parseopt+0x8e>
 80098d6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80098de:	e012      	b.n	8009906 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80098e0:	f7ff ff7e 	bl	80097e0 <tcp_get_next_optbyte>
 80098e4:	4603      	mov	r3, r0
 80098e6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80098e8:	7afb      	ldrb	r3, [r7, #11]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d916      	bls.n	800991c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	4b10      	ldr	r3, [pc, #64]	@ (8009934 <tcp_parseopt+0xe8>)
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	4413      	add	r3, r2
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3b02      	subs	r3, #2
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009934 <tcp_parseopt+0xe8>)
 8009900:	801a      	strh	r2, [r3, #0]
 8009902:	e000      	b.n	8009906 <tcp_parseopt+0xba>
          break;
 8009904:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009906:	4b0b      	ldr	r3, [pc, #44]	@ (8009934 <tcp_parseopt+0xe8>)
 8009908:	881a      	ldrh	r2, [r3, #0]
 800990a:	4b09      	ldr	r3, [pc, #36]	@ (8009930 <tcp_parseopt+0xe4>)
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	429a      	cmp	r2, r3
 8009910:	d3b2      	bcc.n	8009878 <tcp_parseopt+0x2c>
 8009912:	e004      	b.n	800991e <tcp_parseopt+0xd2>
          return;
 8009914:	bf00      	nop
 8009916:	e002      	b.n	800991e <tcp_parseopt+0xd2>
            return;
 8009918:	bf00      	nop
 800991a:	e000      	b.n	800991e <tcp_parseopt+0xd2>
            return;
 800991c:	bf00      	nop
      }
    }
  }
}
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	0800fcb0 	.word	0x0800fcb0
 8009928:	08010114 	.word	0x08010114
 800992c:	0800fcfc 	.word	0x0800fcfc
 8009930:	200082b0 	.word	0x200082b0
 8009934:	200082b8 	.word	0x200082b8

08009938 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800993c:	4b05      	ldr	r3, [pc, #20]	@ (8009954 <tcp_trigger_input_pcb_close+0x1c>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f043 0310 	orr.w	r3, r3, #16
 8009944:	b2da      	uxtb	r2, r3
 8009946:	4b03      	ldr	r3, [pc, #12]	@ (8009954 <tcp_trigger_input_pcb_close+0x1c>)
 8009948:	701a      	strb	r2, [r3, #0]
}
 800994a:	bf00      	nop
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	200082c9 	.word	0x200082c9

08009958 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <tcp_route+0x28>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	7a1b      	ldrb	r3, [r3, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d006      	beq.n	8009980 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	7a1b      	ldrb	r3, [r3, #8]
 8009976:	4618      	mov	r0, r3
 8009978:	f7fb fb5c 	bl	8005034 <netif_get_by_index>
 800997c:	4603      	mov	r3, r0
 800997e:	e003      	b.n	8009988 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f002 fe7b 	bl	800c67c <ip4_route>
 8009986:	4603      	mov	r3, r0
  }
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009990:	b590      	push	{r4, r7, lr}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	4613      	mov	r3, r2
 800999e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d105      	bne.n	80099b2 <tcp_create_segment+0x22>
 80099a6:	4b43      	ldr	r3, [pc, #268]	@ (8009ab4 <tcp_create_segment+0x124>)
 80099a8:	22a3      	movs	r2, #163	@ 0xa3
 80099aa:	4943      	ldr	r1, [pc, #268]	@ (8009ab8 <tcp_create_segment+0x128>)
 80099ac:	4843      	ldr	r0, [pc, #268]	@ (8009abc <tcp_create_segment+0x12c>)
 80099ae:	f004 f951 	bl	800dc54 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d105      	bne.n	80099c4 <tcp_create_segment+0x34>
 80099b8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ab4 <tcp_create_segment+0x124>)
 80099ba:	22a4      	movs	r2, #164	@ 0xa4
 80099bc:	4940      	ldr	r1, [pc, #256]	@ (8009ac0 <tcp_create_segment+0x130>)
 80099be:	483f      	ldr	r0, [pc, #252]	@ (8009abc <tcp_create_segment+0x12c>)
 80099c0:	f004 f948 	bl	800dc54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80099c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80099d2:	2003      	movs	r0, #3
 80099d4:	f7fa ffa8 	bl	8004928 <memp_malloc>
 80099d8:	6138      	str	r0, [r7, #16]
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80099e0:	68b8      	ldr	r0, [r7, #8]
 80099e2:	f7fb fe87 	bl	80056f4 <pbuf_free>
    return NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	e060      	b.n	8009aac <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80099f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	891a      	ldrh	r2, [r3, #8]
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d205      	bcs.n	8009a16 <tcp_create_segment+0x86>
 8009a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8009ab4 <tcp_create_segment+0x124>)
 8009a0c:	22b0      	movs	r2, #176	@ 0xb0
 8009a0e:	492d      	ldr	r1, [pc, #180]	@ (8009ac4 <tcp_create_segment+0x134>)
 8009a10:	482a      	ldr	r0, [pc, #168]	@ (8009abc <tcp_create_segment+0x12c>)
 8009a12:	f004 f91f 	bl	800dc54 <iprintf>
  seg->len = p->tot_len - optlen;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	891a      	ldrh	r2, [r3, #8]
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009a26:	2114      	movs	r1, #20
 8009a28:	68b8      	ldr	r0, [r7, #8]
 8009a2a:	f7fb fdcd 	bl	80055c8 <pbuf_add_header>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009a34:	6938      	ldr	r0, [r7, #16]
 8009a36:	f7fd f8d2 	bl	8006bde <tcp_seg_free>
    return NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e036      	b.n	8009aac <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8ada      	ldrh	r2, [r3, #22]
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	68dc      	ldr	r4, [r3, #12]
 8009a50:	4610      	mov	r0, r2
 8009a52:	f7fa faf1 	bl	8004038 <lwip_htons>
 8009a56:	4603      	mov	r3, r0
 8009a58:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8b1a      	ldrh	r2, [r3, #24]
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	68dc      	ldr	r4, [r3, #12]
 8009a62:	4610      	mov	r0, r2
 8009a64:	f7fa fae8 	bl	8004038 <lwip_htons>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	68dc      	ldr	r4, [r3, #12]
 8009a70:	6838      	ldr	r0, [r7, #0]
 8009a72:	f7fa faf7 	bl	8004064 <lwip_htonl>
 8009a76:	4603      	mov	r3, r0
 8009a78:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	089b      	lsrs	r3, r3, #2
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	3305      	adds	r3, #5
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	031b      	lsls	r3, r3, #12
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	68dc      	ldr	r4, [r3, #12]
 8009a94:	4610      	mov	r0, r2
 8009a96:	f7fa facf 	bl	8004038 <lwip_htons>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	749a      	strb	r2, [r3, #18]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	74da      	strb	r2, [r3, #19]
  return seg;
 8009aaa:	693b      	ldr	r3, [r7, #16]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	371c      	adds	r7, #28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd90      	pop	{r4, r7, pc}
 8009ab4:	08010130 	.word	0x08010130
 8009ab8:	08010164 	.word	0x08010164
 8009abc:	08010184 	.word	0x08010184
 8009ac0:	080101ac 	.word	0x080101ac
 8009ac4:	080101d0 	.word	0x080101d0

08009ac8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009ac8:	b590      	push	{r4, r7, lr}
 8009aca:	b08b      	sub	sp, #44	@ 0x2c
 8009acc:	af02      	add	r7, sp, #8
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	61fb      	str	r3, [r7, #28]
 8009ad8:	2300      	movs	r3, #0
 8009ada:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009adc:	2300      	movs	r3, #0
 8009ade:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <tcp_split_unsent_seg+0x2c>
 8009ae6:	4b95      	ldr	r3, [pc, #596]	@ (8009d3c <tcp_split_unsent_seg+0x274>)
 8009ae8:	f240 324b 	movw	r2, #843	@ 0x34b
 8009aec:	4994      	ldr	r1, [pc, #592]	@ (8009d40 <tcp_split_unsent_seg+0x278>)
 8009aee:	4895      	ldr	r0, [pc, #596]	@ (8009d44 <tcp_split_unsent_seg+0x27c>)
 8009af0:	f004 f8b0 	bl	800dc54 <iprintf>

  useg = pcb->unsent;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d102      	bne.n	8009b06 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009b00:	f04f 33ff 	mov.w	r3, #4294967295
 8009b04:	e116      	b.n	8009d34 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009b06:	887b      	ldrh	r3, [r7, #2]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d109      	bne.n	8009b20 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009b0c:	4b8b      	ldr	r3, [pc, #556]	@ (8009d3c <tcp_split_unsent_seg+0x274>)
 8009b0e:	f240 3253 	movw	r2, #851	@ 0x353
 8009b12:	498d      	ldr	r1, [pc, #564]	@ (8009d48 <tcp_split_unsent_seg+0x280>)
 8009b14:	488b      	ldr	r0, [pc, #556]	@ (8009d44 <tcp_split_unsent_seg+0x27c>)
 8009b16:	f004 f89d 	bl	800dc54 <iprintf>
    return ERR_VAL;
 8009b1a:	f06f 0305 	mvn.w	r3, #5
 8009b1e:	e109      	b.n	8009d34 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	891b      	ldrh	r3, [r3, #8]
 8009b24:	887a      	ldrh	r2, [r7, #2]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d301      	bcc.n	8009b2e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e102      	b.n	8009d34 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b32:	887a      	ldrh	r2, [r7, #2]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d906      	bls.n	8009b46 <tcp_split_unsent_seg+0x7e>
 8009b38:	4b80      	ldr	r3, [pc, #512]	@ (8009d3c <tcp_split_unsent_seg+0x274>)
 8009b3a:	f240 325b 	movw	r2, #859	@ 0x35b
 8009b3e:	4983      	ldr	r1, [pc, #524]	@ (8009d4c <tcp_split_unsent_seg+0x284>)
 8009b40:	4880      	ldr	r0, [pc, #512]	@ (8009d44 <tcp_split_unsent_seg+0x27c>)
 8009b42:	f004 f887 	bl	800dc54 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	891b      	ldrh	r3, [r3, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d106      	bne.n	8009b5c <tcp_split_unsent_seg+0x94>
 8009b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8009d3c <tcp_split_unsent_seg+0x274>)
 8009b50:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8009b54:	497e      	ldr	r1, [pc, #504]	@ (8009d50 <tcp_split_unsent_seg+0x288>)
 8009b56:	487b      	ldr	r0, [pc, #492]	@ (8009d44 <tcp_split_unsent_seg+0x27c>)
 8009b58:	f004 f87c 	bl	800dc54 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	7a9b      	ldrb	r3, [r3, #10]
 8009b60:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	891a      	ldrh	r2, [r3, #8]
 8009b72:	887b      	ldrh	r3, [r7, #2]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	89bb      	ldrh	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009b86:	4619      	mov	r1, r3
 8009b88:	2036      	movs	r0, #54	@ 0x36
 8009b8a:	f7fb facf 	bl	800512c <pbuf_alloc>
 8009b8e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80b7 	beq.w	8009d06 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	891a      	ldrh	r2, [r3, #8]
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	891b      	ldrh	r3, [r3, #8]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	887b      	ldrh	r3, [r7, #2]
 8009ba8:	4413      	add	r3, r2
 8009baa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	6858      	ldr	r0, [r3, #4]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
 8009bb6:	18d1      	adds	r1, r2, r3
 8009bb8:	897b      	ldrh	r3, [r7, #10]
 8009bba:	89ba      	ldrh	r2, [r7, #12]
 8009bbc:	f7fb ff84 	bl	8005ac8 <pbuf_copy_partial>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	89bb      	ldrh	r3, [r7, #12]
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	f040 809f 	bne.w	8009d0a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	899b      	ldrh	r3, [r3, #12]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fa fa2f 	bl	8004038 <lwip_htons>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009be2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009be4:	2300      	movs	r3, #0
 8009be6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009be8:	7efb      	ldrb	r3, [r7, #27]
 8009bea:	f003 0308 	and.w	r3, r3, #8
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d007      	beq.n	8009c02 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009bf2:	7efb      	ldrb	r3, [r7, #27]
 8009bf4:	f023 0308 	bic.w	r3, r3, #8
 8009bf8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009bfa:	7ebb      	ldrb	r3, [r7, #26]
 8009bfc:	f043 0308 	orr.w	r3, r3, #8
 8009c00:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009c02:	7efb      	ldrb	r3, [r7, #27]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d007      	beq.n	8009c1c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009c0c:	7efb      	ldrb	r3, [r7, #27]
 8009c0e:	f023 0301 	bic.w	r3, r3, #1
 8009c12:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009c14:	7ebb      	ldrb	r3, [r7, #26]
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fa fa1e 	bl	8004064 <lwip_htonl>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	887b      	ldrh	r3, [r7, #2]
 8009c2c:	18d1      	adds	r1, r2, r3
 8009c2e:	7eba      	ldrb	r2, [r7, #26]
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	460b      	mov	r3, r1
 8009c36:	6939      	ldr	r1, [r7, #16]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff fea9 	bl	8009990 <tcp_create_segment>
 8009c3e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d063      	beq.n	8009d0e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fb fdda 	bl	8005804 <pbuf_clen>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009c5a:	1a9b      	subs	r3, r3, r2
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	6858      	ldr	r0, [r3, #4]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	891a      	ldrh	r2, [r3, #8]
 8009c6e:	89bb      	ldrh	r3, [r7, #12]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	4619      	mov	r1, r3
 8009c76:	f7fb fbb7 	bl	80053e8 <pbuf_realloc>
  useg->len -= remainder;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	891a      	ldrh	r2, [r3, #8]
 8009c7e:	89bb      	ldrh	r3, [r7, #12]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	899b      	ldrh	r3, [r3, #12]
 8009c8e:	b29c      	uxth	r4, r3
 8009c90:	7efb      	ldrb	r3, [r7, #27]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fa f9cf 	bl	8004038 <lwip_htons>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	4322      	orrs	r2, r4
 8009ca4:	b292      	uxth	r2, r2
 8009ca6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fb fda9 	bl	8005804 <pbuf_clen>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009cbc:	4413      	add	r3, r2
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fb fd9a 	bl	8005804 <pbuf_clen>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009cda:	4413      	add	r3, r2
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	69fa      	ldr	r2, [r7, #28]
 8009cf0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d103      	bne.n	8009d02 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	e016      	b.n	8009d34 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009d06:	bf00      	nop
 8009d08:	e002      	b.n	8009d10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009d0a:	bf00      	nop
 8009d0c:	e000      	b.n	8009d10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009d0e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d006      	beq.n	8009d24 <tcp_split_unsent_seg+0x25c>
 8009d16:	4b09      	ldr	r3, [pc, #36]	@ (8009d3c <tcp_split_unsent_seg+0x274>)
 8009d18:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8009d1c:	490d      	ldr	r1, [pc, #52]	@ (8009d54 <tcp_split_unsent_seg+0x28c>)
 8009d1e:	4809      	ldr	r0, [pc, #36]	@ (8009d44 <tcp_split_unsent_seg+0x27c>)
 8009d20:	f003 ff98 	bl	800dc54 <iprintf>
  if (p != NULL) {
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009d2a:	6938      	ldr	r0, [r7, #16]
 8009d2c:	f7fb fce2 	bl	80056f4 <pbuf_free>
  }

  return ERR_MEM;
 8009d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3724      	adds	r7, #36	@ 0x24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd90      	pop	{r4, r7, pc}
 8009d3c:	08010130 	.word	0x08010130
 8009d40:	080104c4 	.word	0x080104c4
 8009d44:	08010184 	.word	0x08010184
 8009d48:	080104e8 	.word	0x080104e8
 8009d4c:	0801050c 	.word	0x0801050c
 8009d50:	0801051c 	.word	0x0801051c
 8009d54:	0801052c 	.word	0x0801052c

08009d58 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009d58:	b590      	push	{r4, r7, lr}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d106      	bne.n	8009d74 <tcp_send_fin+0x1c>
 8009d66:	4b21      	ldr	r3, [pc, #132]	@ (8009dec <tcp_send_fin+0x94>)
 8009d68:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8009d6c:	4920      	ldr	r1, [pc, #128]	@ (8009df0 <tcp_send_fin+0x98>)
 8009d6e:	4821      	ldr	r0, [pc, #132]	@ (8009df4 <tcp_send_fin+0x9c>)
 8009d70:	f003 ff70 	bl	800dc54 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d02e      	beq.n	8009dda <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	e002      	b.n	8009d8a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f8      	bne.n	8009d84 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	899b      	ldrh	r3, [r3, #12]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fa f94c 	bl	8004038 <lwip_htons>
 8009da0:	4603      	mov	r3, r0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0307 	and.w	r3, r3, #7
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d116      	bne.n	8009dda <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	899b      	ldrh	r3, [r3, #12]
 8009db2:	b29c      	uxth	r4, r3
 8009db4:	2001      	movs	r0, #1
 8009db6:	f7fa f93f 	bl	8004038 <lwip_htons>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	4322      	orrs	r2, r4
 8009dc4:	b292      	uxth	r2, r2
 8009dc6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	8b5b      	ldrh	r3, [r3, #26]
 8009dcc:	f043 0320 	orr.w	r3, r3, #32
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	e004      	b.n	8009de4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009dda:	2101      	movs	r1, #1
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f80b 	bl	8009df8 <tcp_enqueue_flags>
 8009de2:	4603      	mov	r3, r0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd90      	pop	{r4, r7, pc}
 8009dec:	08010130 	.word	0x08010130
 8009df0:	08010538 	.word	0x08010538
 8009df4:	08010184 	.word	0x08010184

08009df8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08a      	sub	sp, #40	@ 0x28
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d106      	bne.n	8009e24 <tcp_enqueue_flags+0x2c>
 8009e16:	4b67      	ldr	r3, [pc, #412]	@ (8009fb4 <tcp_enqueue_flags+0x1bc>)
 8009e18:	f240 4211 	movw	r2, #1041	@ 0x411
 8009e1c:	4966      	ldr	r1, [pc, #408]	@ (8009fb8 <tcp_enqueue_flags+0x1c0>)
 8009e1e:	4867      	ldr	r0, [pc, #412]	@ (8009fbc <tcp_enqueue_flags+0x1c4>)
 8009e20:	f003 ff18 	bl	800dc54 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d106      	bne.n	8009e38 <tcp_enqueue_flags+0x40>
 8009e2a:	4b62      	ldr	r3, [pc, #392]	@ (8009fb4 <tcp_enqueue_flags+0x1bc>)
 8009e2c:	f240 4213 	movw	r2, #1043	@ 0x413
 8009e30:	4963      	ldr	r1, [pc, #396]	@ (8009fc0 <tcp_enqueue_flags+0x1c8>)
 8009e32:	4862      	ldr	r0, [pc, #392]	@ (8009fbc <tcp_enqueue_flags+0x1c4>)
 8009e34:	f003 ff0e 	bl	800dc54 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009e38:	78fb      	ldrb	r3, [r7, #3]
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009e42:	2301      	movs	r3, #1
 8009e44:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009e46:	7ffb      	ldrb	r3, [r7, #31]
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	2036      	movs	r0, #54	@ 0x36
 8009e5e:	f7fb f965 	bl	800512c <pbuf_alloc>
 8009e62:	6138      	str	r0, [r7, #16]
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d109      	bne.n	8009e7e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	8b5b      	ldrh	r3, [r3, #26]
 8009e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009e78:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7c:	e095      	b.n	8009faa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	895a      	ldrh	r2, [r3, #10]
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d206      	bcs.n	8009e98 <tcp_enqueue_flags+0xa0>
 8009e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8009fb4 <tcp_enqueue_flags+0x1bc>)
 8009e8c:	f240 4239 	movw	r2, #1081	@ 0x439
 8009e90:	494c      	ldr	r1, [pc, #304]	@ (8009fc4 <tcp_enqueue_flags+0x1cc>)
 8009e92:	484a      	ldr	r0, [pc, #296]	@ (8009fbc <tcp_enqueue_flags+0x1c4>)
 8009e94:	f003 fede 	bl	800dc54 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	7ffb      	ldrb	r3, [r7, #31]
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	6939      	ldr	r1, [r7, #16]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fd72 	bl	8009990 <tcp_create_segment>
 8009eac:	60f8      	str	r0, [r7, #12]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d109      	bne.n	8009ec8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	8b5b      	ldrh	r3, [r3, #26]
 8009eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec6:	e070      	b.n	8009faa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0303 	and.w	r3, r3, #3
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d006      	beq.n	8009ee2 <tcp_enqueue_flags+0xea>
 8009ed4:	4b37      	ldr	r3, [pc, #220]	@ (8009fb4 <tcp_enqueue_flags+0x1bc>)
 8009ed6:	f240 4242 	movw	r2, #1090	@ 0x442
 8009eda:	493b      	ldr	r1, [pc, #236]	@ (8009fc8 <tcp_enqueue_flags+0x1d0>)
 8009edc:	4837      	ldr	r0, [pc, #220]	@ (8009fbc <tcp_enqueue_flags+0x1c4>)
 8009ede:	f003 feb9 	bl	800dc54 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	891b      	ldrh	r3, [r3, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d006      	beq.n	8009ef8 <tcp_enqueue_flags+0x100>
 8009eea:	4b32      	ldr	r3, [pc, #200]	@ (8009fb4 <tcp_enqueue_flags+0x1bc>)
 8009eec:	f240 4243 	movw	r2, #1091	@ 0x443
 8009ef0:	4936      	ldr	r1, [pc, #216]	@ (8009fcc <tcp_enqueue_flags+0x1d4>)
 8009ef2:	4832      	ldr	r0, [pc, #200]	@ (8009fbc <tcp_enqueue_flags+0x1c4>)
 8009ef4:	f003 feae 	bl	800dc54 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d103      	bne.n	8009f08 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009f06:	e00d      	b.n	8009f24 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	e002      	b.n	8009f16 <tcp_enqueue_flags+0x11e>
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	61bb      	str	r3, [r7, #24]
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1f8      	bne.n	8009f10 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009f2c:	78fb      	ldrb	r3, [r7, #3]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <tcp_enqueue_flags+0x148>
 8009f36:	78fb      	ldrb	r3, [r7, #3]
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d004      	beq.n	8009f4a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009f4a:	78fb      	ldrb	r3, [r7, #3]
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d006      	beq.n	8009f62 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	8b5b      	ldrh	r3, [r3, #26]
 8009f58:	f043 0320 	orr.w	r3, r3, #32
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fb fc4c 	bl	8005804 <pbuf_clen>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009f76:	4413      	add	r3, r2
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00e      	beq.n	8009fa8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10a      	bne.n	8009fa8 <tcp_enqueue_flags+0x1b0>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d106      	bne.n	8009fa8 <tcp_enqueue_flags+0x1b0>
 8009f9a:	4b06      	ldr	r3, [pc, #24]	@ (8009fb4 <tcp_enqueue_flags+0x1bc>)
 8009f9c:	f240 4265 	movw	r2, #1125	@ 0x465
 8009fa0:	490b      	ldr	r1, [pc, #44]	@ (8009fd0 <tcp_enqueue_flags+0x1d8>)
 8009fa2:	4806      	ldr	r0, [pc, #24]	@ (8009fbc <tcp_enqueue_flags+0x1c4>)
 8009fa4:	f003 fe56 	bl	800dc54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3720      	adds	r7, #32
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	08010130 	.word	0x08010130
 8009fb8:	08010554 	.word	0x08010554
 8009fbc:	08010184 	.word	0x08010184
 8009fc0:	080105ac 	.word	0x080105ac
 8009fc4:	080105cc 	.word	0x080105cc
 8009fc8:	08010608 	.word	0x08010608
 8009fcc:	08010620 	.word	0x08010620
 8009fd0:	0801064c 	.word	0x0801064c

08009fd4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009fd4:	b5b0      	push	{r4, r5, r7, lr}
 8009fd6:	b08a      	sub	sp, #40	@ 0x28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <tcp_output+0x1c>
 8009fe2:	4b8a      	ldr	r3, [pc, #552]	@ (800a20c <tcp_output+0x238>)
 8009fe4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8009fe8:	4989      	ldr	r1, [pc, #548]	@ (800a210 <tcp_output+0x23c>)
 8009fea:	488a      	ldr	r0, [pc, #552]	@ (800a214 <tcp_output+0x240>)
 8009fec:	f003 fe32 	bl	800dc54 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	7d1b      	ldrb	r3, [r3, #20]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d106      	bne.n	800a006 <tcp_output+0x32>
 8009ff8:	4b84      	ldr	r3, [pc, #528]	@ (800a20c <tcp_output+0x238>)
 8009ffa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8009ffe:	4986      	ldr	r1, [pc, #536]	@ (800a218 <tcp_output+0x244>)
 800a000:	4884      	ldr	r0, [pc, #528]	@ (800a214 <tcp_output+0x240>)
 800a002:	f003 fe27 	bl	800dc54 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a006:	4b85      	ldr	r3, [pc, #532]	@ (800a21c <tcp_output+0x248>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d101      	bne.n	800a014 <tcp_output+0x40>
    return ERR_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	e1ce      	b.n	800a3b2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a020:	4293      	cmp	r3, r2
 800a022:	bf28      	it	cs
 800a024:	4613      	movcs	r3, r2
 800a026:	b29b      	uxth	r3, r3
 800a028:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a02e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10b      	bne.n	800a04e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	8b5b      	ldrh	r3, [r3, #26]
 800a03a:	f003 0302 	and.w	r3, r3, #2
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 81aa 	beq.w	800a398 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fdcb 	bl	800abe0 <tcp_send_empty_ack>
 800a04a:	4603      	mov	r3, r0
 800a04c:	e1b1      	b.n	800a3b2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3304      	adds	r3, #4
 800a054:	461a      	mov	r2, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff fc7e 	bl	8009958 <tcp_route>
 800a05c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <tcp_output+0x96>
    return ERR_RTE;
 800a064:	f06f 0303 	mvn.w	r3, #3
 800a068:	e1a3      	b.n	800a3b2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d003      	beq.n	800a078 <tcp_output+0xa4>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d111      	bne.n	800a09c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <tcp_output+0xb0>
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	3304      	adds	r3, #4
 800a082:	e000      	b.n	800a086 <tcp_output+0xb2>
 800a084:	2300      	movs	r3, #0
 800a086:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <tcp_output+0xc0>
      return ERR_RTE;
 800a08e:	f06f 0303 	mvn.w	r3, #3
 800a092:	e18e      	b.n	800a3b2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f9 ffde 	bl	8004064 <lwip_htonl>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0b2:	8912      	ldrh	r2, [r2, #8]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d227      	bcs.n	800a10c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d114      	bne.n	800a0f4 <tcp_output+0x120>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d110      	bne.n	800a0f4 <tcp_output+0x120>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10b      	bne.n	800a0f4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8b5b      	ldrh	r3, [r3, #26]
 800a0f8:	f003 0302 	and.w	r3, r3, #2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 814d 	beq.w	800a39c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fd6c 	bl	800abe0 <tcp_send_empty_ack>
 800a108:	4603      	mov	r3, r0
 800a10a:	e152      	b.n	800a3b2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a118:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 811c 	beq.w	800a35a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a122:	e002      	b.n	800a12a <tcp_output+0x156>
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	623b      	str	r3, [r7, #32]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1f8      	bne.n	800a124 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a132:	e112      	b.n	800a35a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	899b      	ldrh	r3, [r3, #12]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7f9 ff7b 	bl	8004038 <lwip_htons>
 800a142:	4603      	mov	r3, r0
 800a144:	b2db      	uxtb	r3, r3
 800a146:	f003 0304 	and.w	r3, r3, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d006      	beq.n	800a15c <tcp_output+0x188>
 800a14e:	4b2f      	ldr	r3, [pc, #188]	@ (800a20c <tcp_output+0x238>)
 800a150:	f240 5236 	movw	r2, #1334	@ 0x536
 800a154:	4932      	ldr	r1, [pc, #200]	@ (800a220 <tcp_output+0x24c>)
 800a156:	482f      	ldr	r0, [pc, #188]	@ (800a214 <tcp_output+0x240>)
 800a158:	f003 fd7c 	bl	800dc54 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01f      	beq.n	800a1a4 <tcp_output+0x1d0>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	8b5b      	ldrh	r3, [r3, #26]
 800a168:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d119      	bne.n	800a1a4 <tcp_output+0x1d0>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00b      	beq.n	800a190 <tcp_output+0x1bc>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d110      	bne.n	800a1a4 <tcp_output+0x1d0>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a186:	891a      	ldrh	r2, [r3, #8]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d209      	bcs.n	800a1a4 <tcp_output+0x1d0>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a196:	2b00      	cmp	r3, #0
 800a198:	d004      	beq.n	800a1a4 <tcp_output+0x1d0>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	d901      	bls.n	800a1a8 <tcp_output+0x1d4>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e000      	b.n	800a1aa <tcp_output+0x1d6>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	8b5b      	ldrh	r3, [r3, #26]
 800a1b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 80e4 	beq.w	800a384 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	7d1b      	ldrb	r3, [r3, #20]
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d00d      	beq.n	800a1e0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	899b      	ldrh	r3, [r3, #12]
 800a1ca:	b29c      	uxth	r4, r3
 800a1cc:	2010      	movs	r0, #16
 800a1ce:	f7f9 ff33 	bl	8004038 <lwip_htons>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	4322      	orrs	r2, r4
 800a1dc:	b292      	uxth	r2, r2
 800a1de:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1e6:	f000 f909 	bl	800a3fc <tcp_output_segment>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d016      	beq.n	800a224 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	8b5b      	ldrh	r3, [r3, #26]
 800a1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	835a      	strh	r2, [r3, #26]
      return err;
 800a204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a208:	e0d3      	b.n	800a3b2 <tcp_output+0x3de>
 800a20a:	bf00      	nop
 800a20c:	08010130 	.word	0x08010130
 800a210:	08010674 	.word	0x08010674
 800a214:	08010184 	.word	0x08010184
 800a218:	0801068c 	.word	0x0801068c
 800a21c:	200082d0 	.word	0x200082d0
 800a220:	080106b4 	.word	0x080106b4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	7d1b      	ldrb	r3, [r3, #20]
 800a230:	2b02      	cmp	r3, #2
 800a232:	d006      	beq.n	800a242 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	8b5b      	ldrh	r3, [r3, #26]
 800a238:	f023 0303 	bic.w	r3, r3, #3
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	4618      	mov	r0, r3
 800a24a:	f7f9 ff0b 	bl	8004064 <lwip_htonl>
 800a24e:	4604      	mov	r4, r0
 800a250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a252:	891b      	ldrh	r3, [r3, #8]
 800a254:	461d      	mov	r5, r3
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	899b      	ldrh	r3, [r3, #12]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	4618      	mov	r0, r3
 800a260:	f7f9 feea 	bl	8004038 <lwip_htons>
 800a264:	4603      	mov	r3, r0
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <tcp_output+0x2a0>
 800a270:	2301      	movs	r3, #1
 800a272:	e000      	b.n	800a276 <tcp_output+0x2a2>
 800a274:	2300      	movs	r3, #0
 800a276:	442b      	add	r3, r5
 800a278:	4423      	add	r3, r4
 800a27a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	da02      	bge.n	800a28e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	891b      	ldrh	r3, [r3, #8]
 800a292:	461c      	mov	r4, r3
 800a294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	899b      	ldrh	r3, [r3, #12]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7f9 fecb 	bl	8004038 <lwip_htons>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <tcp_output+0x2de>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <tcp_output+0x2e0>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	4423      	add	r3, r4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d049      	beq.n	800a34e <tcp_output+0x37a>
      seg->next = NULL;
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	2200      	movs	r2, #0
 800a2be:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d105      	bne.n	800a2d4 <tcp_output+0x300>
        pcb->unacked = seg;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2cc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d0:	623b      	str	r3, [r7, #32]
 800a2d2:	e03f      	b.n	800a354 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f9 fec2 	bl	8004064 <lwip_htonl>
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7f9 febb 	bl	8004064 <lwip_htonl>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	1ae3      	subs	r3, r4, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	da24      	bge.n	800a340 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3370      	adds	r3, #112	@ 0x70
 800a2fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a2fc:	e002      	b.n	800a304 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d011      	beq.n	800a330 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	4618      	mov	r0, r3
 800a316:	f7f9 fea5 	bl	8004064 <lwip_htonl>
 800a31a:	4604      	mov	r4, r0
 800a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	4618      	mov	r0, r3
 800a324:	f7f9 fe9e 	bl	8004064 <lwip_htonl>
 800a328:	4603      	mov	r3, r0
 800a32a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dbe6      	blt.n	800a2fe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	e009      	b.n	800a354 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a344:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	623b      	str	r3, [r7, #32]
 800a34c:	e002      	b.n	800a354 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a34e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a350:	f7fc fc45 	bl	8006bde <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a358:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d012      	beq.n	800a386 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	4618      	mov	r0, r3
 800a368:	f7f9 fe7c 	bl	8004064 <lwip_htonl>
 800a36c:	4602      	mov	r2, r0
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a376:	8912      	ldrh	r2, [r2, #8]
 800a378:	4413      	add	r3, r2
  while (seg != NULL &&
 800a37a:	69ba      	ldr	r2, [r7, #24]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	f4bf aed9 	bcs.w	800a134 <tcp_output+0x160>
 800a382:	e000      	b.n	800a386 <tcp_output+0x3b2>
      break;
 800a384:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d108      	bne.n	800a3a0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800a396:	e004      	b.n	800a3a2 <tcp_output+0x3ce>
    goto output_done;
 800a398:	bf00      	nop
 800a39a:	e002      	b.n	800a3a2 <tcp_output+0x3ce>
    goto output_done;
 800a39c:	bf00      	nop
 800a39e:	e000      	b.n	800a3a2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a3a0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	8b5b      	ldrh	r3, [r3, #26]
 800a3a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3728      	adds	r7, #40	@ 0x28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ba:	bf00      	nop

0800a3bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d106      	bne.n	800a3d8 <tcp_output_segment_busy+0x1c>
 800a3ca:	4b09      	ldr	r3, [pc, #36]	@ (800a3f0 <tcp_output_segment_busy+0x34>)
 800a3cc:	f240 529a 	movw	r2, #1434	@ 0x59a
 800a3d0:	4908      	ldr	r1, [pc, #32]	@ (800a3f4 <tcp_output_segment_busy+0x38>)
 800a3d2:	4809      	ldr	r0, [pc, #36]	@ (800a3f8 <tcp_output_segment_busy+0x3c>)
 800a3d4:	f003 fc3e 	bl	800dc54 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	7b9b      	ldrb	r3, [r3, #14]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d001      	beq.n	800a3e6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e000      	b.n	800a3e8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	08010130 	.word	0x08010130
 800a3f4:	080106cc 	.word	0x080106cc
 800a3f8:	08010184 	.word	0x08010184

0800a3fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a3fc:	b5b0      	push	{r4, r5, r7, lr}
 800a3fe:	b08c      	sub	sp, #48	@ 0x30
 800a400:	af04      	add	r7, sp, #16
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d106      	bne.n	800a41c <tcp_output_segment+0x20>
 800a40e:	4b64      	ldr	r3, [pc, #400]	@ (800a5a0 <tcp_output_segment+0x1a4>)
 800a410:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800a414:	4963      	ldr	r1, [pc, #396]	@ (800a5a4 <tcp_output_segment+0x1a8>)
 800a416:	4864      	ldr	r0, [pc, #400]	@ (800a5a8 <tcp_output_segment+0x1ac>)
 800a418:	f003 fc1c 	bl	800dc54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <tcp_output_segment+0x34>
 800a422:	4b5f      	ldr	r3, [pc, #380]	@ (800a5a0 <tcp_output_segment+0x1a4>)
 800a424:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800a428:	4960      	ldr	r1, [pc, #384]	@ (800a5ac <tcp_output_segment+0x1b0>)
 800a42a:	485f      	ldr	r0, [pc, #380]	@ (800a5a8 <tcp_output_segment+0x1ac>)
 800a42c:	f003 fc12 	bl	800dc54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d106      	bne.n	800a444 <tcp_output_segment+0x48>
 800a436:	4b5a      	ldr	r3, [pc, #360]	@ (800a5a0 <tcp_output_segment+0x1a4>)
 800a438:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800a43c:	495c      	ldr	r1, [pc, #368]	@ (800a5b0 <tcp_output_segment+0x1b4>)
 800a43e:	485a      	ldr	r0, [pc, #360]	@ (800a5a8 <tcp_output_segment+0x1ac>)
 800a440:	f003 fc08 	bl	800dc54 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f7ff ffb9 	bl	800a3bc <tcp_output_segment_busy>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	e0a1      	b.n	800a598 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68dc      	ldr	r4, [r3, #12]
 800a45c:	4610      	mov	r0, r2
 800a45e:	f7f9 fe01 	bl	8004064 <lwip_htonl>
 800a462:	4603      	mov	r3, r0
 800a464:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	68dc      	ldr	r4, [r3, #12]
 800a46e:	4610      	mov	r0, r2
 800a470:	f7f9 fde2 	bl	8004038 <lwip_htons>
 800a474:	4603      	mov	r3, r0
 800a476:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a480:	441a      	add	r2, r3
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	3314      	adds	r3, #20
 800a48c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	7a9b      	ldrb	r3, [r3, #10]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d015      	beq.n	800a4c6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	3304      	adds	r3, #4
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6879      	ldr	r1, [r7, #4]
 800a4a2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800a4a6:	f7fc fe91 	bl	80071cc <tcp_eff_send_mss_netif>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a4ae:	8b7b      	ldrh	r3, [r7, #26]
 800a4b0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7f9 fdd5 	bl	8004064 <lwip_htonl>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	da02      	bge.n	800a4d6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10c      	bne.n	800a4f8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a4de:	4b35      	ldr	r3, [pc, #212]	@ (800a5b4 <tcp_output_segment+0x1b8>)
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7f9 fdb9 	bl	8004064 <lwip_htonl>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68da      	ldr	r2, [r3, #12]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	8959      	ldrh	r1, [r3, #10]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	8b3a      	ldrh	r2, [r7, #24]
 800a512:	1a8a      	subs	r2, r1, r2
 800a514:	b292      	uxth	r2, r2
 800a516:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	8919      	ldrh	r1, [r3, #8]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	8b3a      	ldrh	r2, [r7, #24]
 800a524:	1a8a      	subs	r2, r1, r2
 800a526:	b292      	uxth	r2, r2
 800a528:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	68d2      	ldr	r2, [r2, #12]
 800a532:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	741a      	strb	r2, [r3, #16]
 800a53c:	2200      	movs	r2, #0
 800a53e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	68da      	ldr	r2, [r3, #12]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	7a9b      	ldrb	r3, [r3, #10]
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d001      	beq.n	800a554 <tcp_output_segment+0x158>
 800a550:	2318      	movs	r3, #24
 800a552:	e000      	b.n	800a556 <tcp_output_segment+0x15a>
 800a554:	2314      	movs	r3, #20
 800a556:	4413      	add	r3, r2
 800a558:	69fa      	ldr	r2, [r7, #28]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d006      	beq.n	800a56c <tcp_output_segment+0x170>
 800a55e:	4b10      	ldr	r3, [pc, #64]	@ (800a5a0 <tcp_output_segment+0x1a4>)
 800a560:	f240 621c 	movw	r2, #1564	@ 0x61c
 800a564:	4914      	ldr	r1, [pc, #80]	@ (800a5b8 <tcp_output_segment+0x1bc>)
 800a566:	4810      	ldr	r0, [pc, #64]	@ (800a5a8 <tcp_output_segment+0x1ac>)
 800a568:	f003 fb74 	bl	800dc54 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6858      	ldr	r0, [r3, #4]
 800a570:	68b9      	ldr	r1, [r7, #8]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	1d1c      	adds	r4, r3, #4
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	7add      	ldrb	r5, [r3, #11]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	7a9b      	ldrb	r3, [r3, #10]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	9202      	str	r2, [sp, #8]
 800a582:	2206      	movs	r2, #6
 800a584:	9201      	str	r2, [sp, #4]
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	462b      	mov	r3, r5
 800a58a:	4622      	mov	r2, r4
 800a58c:	f002 fa34 	bl	800c9f8 <ip4_output_if>
 800a590:	4603      	mov	r3, r0
 800a592:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a594:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3720      	adds	r7, #32
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bdb0      	pop	{r4, r5, r7, pc}
 800a5a0:	08010130 	.word	0x08010130
 800a5a4:	080106f4 	.word	0x080106f4
 800a5a8:	08010184 	.word	0x08010184
 800a5ac:	08010714 	.word	0x08010714
 800a5b0:	08010734 	.word	0x08010734
 800a5b4:	20008284 	.word	0x20008284
 800a5b8:	08010758 	.word	0x08010758

0800a5bc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a5bc:	b5b0      	push	{r4, r5, r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d106      	bne.n	800a5d8 <tcp_rexmit_rto_prepare+0x1c>
 800a5ca:	4b31      	ldr	r3, [pc, #196]	@ (800a690 <tcp_rexmit_rto_prepare+0xd4>)
 800a5cc:	f240 6263 	movw	r2, #1635	@ 0x663
 800a5d0:	4930      	ldr	r1, [pc, #192]	@ (800a694 <tcp_rexmit_rto_prepare+0xd8>)
 800a5d2:	4831      	ldr	r0, [pc, #196]	@ (800a698 <tcp_rexmit_rto_prepare+0xdc>)
 800a5d4:	f003 fb3e 	bl	800dc54 <iprintf>

  if (pcb->unacked == NULL) {
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d102      	bne.n	800a5e6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a5e0:	f06f 0305 	mvn.w	r3, #5
 800a5e4:	e050      	b.n	800a688 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	e00b      	b.n	800a606 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7ff fee4 	bl	800a3bc <tcp_output_segment_busy>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a5fa:	f06f 0305 	mvn.w	r3, #5
 800a5fe:	e043      	b.n	800a688 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	60fb      	str	r3, [r7, #12]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1ef      	bne.n	800a5ee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f7ff fed4 	bl	800a3bc <tcp_output_segment_busy>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a61a:	f06f 0305 	mvn.w	r3, #5
 800a61e:	e033      	b.n	800a688 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	8b5b      	ldrh	r3, [r3, #26]
 800a63a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7f9 fd0a 	bl	8004064 <lwip_htonl>
 800a650:	4604      	mov	r4, r0
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	891b      	ldrh	r3, [r3, #8]
 800a656:	461d      	mov	r5, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	899b      	ldrh	r3, [r3, #12]
 800a65e:	b29b      	uxth	r3, r3
 800a660:	4618      	mov	r0, r3
 800a662:	f7f9 fce9 	bl	8004038 <lwip_htons>
 800a666:	4603      	mov	r3, r0
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <tcp_rexmit_rto_prepare+0xba>
 800a672:	2301      	movs	r3, #1
 800a674:	e000      	b.n	800a678 <tcp_rexmit_rto_prepare+0xbc>
 800a676:	2300      	movs	r3, #0
 800a678:	442b      	add	r3, r5
 800a67a:	18e2      	adds	r2, r4, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bdb0      	pop	{r4, r5, r7, pc}
 800a690:	08010130 	.word	0x08010130
 800a694:	0801076c 	.word	0x0801076c
 800a698:	08010184 	.word	0x08010184

0800a69c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d106      	bne.n	800a6b8 <tcp_rexmit_rto_commit+0x1c>
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e0 <tcp_rexmit_rto_commit+0x44>)
 800a6ac:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a6b0:	490c      	ldr	r1, [pc, #48]	@ (800a6e4 <tcp_rexmit_rto_commit+0x48>)
 800a6b2:	480d      	ldr	r0, [pc, #52]	@ (800a6e8 <tcp_rexmit_rto_commit+0x4c>)
 800a6b4:	f003 face 	bl	800dc54 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6be:	2bff      	cmp	r3, #255	@ 0xff
 800a6c0:	d007      	beq.n	800a6d2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff fc7e 	bl	8009fd4 <tcp_output>
}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	08010130 	.word	0x08010130
 800a6e4:	08010790 	.word	0x08010790
 800a6e8:	08010184 	.word	0x08010184

0800a6ec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <tcp_rexmit_rto+0x1c>
 800a6fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a724 <tcp_rexmit_rto+0x38>)
 800a6fc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800a700:	4909      	ldr	r1, [pc, #36]	@ (800a728 <tcp_rexmit_rto+0x3c>)
 800a702:	480a      	ldr	r0, [pc, #40]	@ (800a72c <tcp_rexmit_rto+0x40>)
 800a704:	f003 faa6 	bl	800dc54 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7ff ff57 	bl	800a5bc <tcp_rexmit_rto_prepare>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d102      	bne.n	800a71a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7ff ffc1 	bl	800a69c <tcp_rexmit_rto_commit>
  }
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	08010130 	.word	0x08010130
 800a728:	080107b4 	.word	0x080107b4
 800a72c:	08010184 	.word	0x08010184

0800a730 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a730:	b590      	push	{r4, r7, lr}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d106      	bne.n	800a74c <tcp_rexmit+0x1c>
 800a73e:	4b2f      	ldr	r3, [pc, #188]	@ (800a7fc <tcp_rexmit+0xcc>)
 800a740:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800a744:	492e      	ldr	r1, [pc, #184]	@ (800a800 <tcp_rexmit+0xd0>)
 800a746:	482f      	ldr	r0, [pc, #188]	@ (800a804 <tcp_rexmit+0xd4>)
 800a748:	f003 fa84 	bl	800dc54 <iprintf>

  if (pcb->unacked == NULL) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a750:	2b00      	cmp	r3, #0
 800a752:	d102      	bne.n	800a75a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a754:	f06f 0305 	mvn.w	r3, #5
 800a758:	e04c      	b.n	800a7f4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a75e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a760:	68b8      	ldr	r0, [r7, #8]
 800a762:	f7ff fe2b 	bl	800a3bc <tcp_output_segment_busy>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a76c:	f06f 0305 	mvn.w	r3, #5
 800a770:	e040      	b.n	800a7f4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	336c      	adds	r3, #108	@ 0x6c
 800a77e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a780:	e002      	b.n	800a788 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d011      	beq.n	800a7b4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7f9 fc63 	bl	8004064 <lwip_htonl>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7f9 fc5c 	bl	8004064 <lwip_htonl>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	dbe6      	blt.n	800a782 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d103      	bne.n	800a7d2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a7d8:	2bff      	cmp	r3, #255	@ 0xff
 800a7da:	d007      	beq.n	800a7ec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd90      	pop	{r4, r7, pc}
 800a7fc:	08010130 	.word	0x08010130
 800a800:	080107d0 	.word	0x080107d0
 800a804:	08010184 	.word	0x08010184

0800a808 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d106      	bne.n	800a824 <tcp_rexmit_fast+0x1c>
 800a816:	4b2a      	ldr	r3, [pc, #168]	@ (800a8c0 <tcp_rexmit_fast+0xb8>)
 800a818:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800a81c:	4929      	ldr	r1, [pc, #164]	@ (800a8c4 <tcp_rexmit_fast+0xbc>)
 800a81e:	482a      	ldr	r0, [pc, #168]	@ (800a8c8 <tcp_rexmit_fast+0xc0>)
 800a820:	f003 fa18 	bl	800dc54 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d044      	beq.n	800a8b6 <tcp_rexmit_fast+0xae>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	8b5b      	ldrh	r3, [r3, #26]
 800a830:	f003 0304 	and.w	r3, r3, #4
 800a834:	2b00      	cmp	r3, #0
 800a836:	d13e      	bne.n	800a8b6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff ff79 	bl	800a730 <tcp_rexmit>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d138      	bne.n	800a8b6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a850:	4293      	cmp	r3, r2
 800a852:	bf28      	it	cs
 800a854:	4613      	movcs	r3, r2
 800a856:	b29b      	uxth	r3, r3
 800a858:	0fda      	lsrs	r2, r3, #31
 800a85a:	4413      	add	r3, r2
 800a85c:	105b      	asrs	r3, r3, #1
 800a85e:	b29a      	uxth	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a86c:	461a      	mov	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	429a      	cmp	r2, r3
 800a876:	d206      	bcs.n	800a886 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	b29a      	uxth	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a890:	4619      	mov	r1, r3
 800a892:	0049      	lsls	r1, r1, #1
 800a894:	440b      	add	r3, r1
 800a896:	b29b      	uxth	r3, r3
 800a898:	4413      	add	r3, r2
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	8b5b      	ldrh	r3, [r3, #26]
 800a8a6:	f043 0304 	orr.w	r3, r3, #4
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800a8b6:	bf00      	nop
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	08010130 	.word	0x08010130
 800a8c4:	080107e8 	.word	0x080107e8
 800a8c8:	08010184 	.word	0x08010184

0800a8cc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	607b      	str	r3, [r7, #4]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	817b      	strh	r3, [r7, #10]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a8de:	897a      	ldrh	r2, [r7, #10]
 800a8e0:	893b      	ldrh	r3, [r7, #8]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	3314      	adds	r3, #20
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	2022      	movs	r0, #34	@ 0x22
 800a8f2:	f7fa fc1b 	bl	800512c <pbuf_alloc>
 800a8f6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d04d      	beq.n	800a99a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a8fe:	897b      	ldrh	r3, [r7, #10]
 800a900:	3313      	adds	r3, #19
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	8952      	ldrh	r2, [r2, #10]
 800a906:	4293      	cmp	r3, r2
 800a908:	db06      	blt.n	800a918 <tcp_output_alloc_header_common+0x4c>
 800a90a:	4b26      	ldr	r3, [pc, #152]	@ (800a9a4 <tcp_output_alloc_header_common+0xd8>)
 800a90c:	f240 7223 	movw	r2, #1827	@ 0x723
 800a910:	4925      	ldr	r1, [pc, #148]	@ (800a9a8 <tcp_output_alloc_header_common+0xdc>)
 800a912:	4826      	ldr	r0, [pc, #152]	@ (800a9ac <tcp_output_alloc_header_common+0xe0>)
 800a914:	f003 f99e 	bl	800dc54 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a91e:	8c3b      	ldrh	r3, [r7, #32]
 800a920:	4618      	mov	r0, r3
 800a922:	f7f9 fb89 	bl	8004038 <lwip_htons>
 800a926:	4603      	mov	r3, r0
 800a928:	461a      	mov	r2, r3
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a92e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a930:	4618      	mov	r0, r3
 800a932:	f7f9 fb81 	bl	8004038 <lwip_htons>
 800a936:	4603      	mov	r3, r0
 800a938:	461a      	mov	r2, r3
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f7f9 fb8d 	bl	8004064 <lwip_htonl>
 800a94a:	4602      	mov	r2, r0
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a950:	897b      	ldrh	r3, [r7, #10]
 800a952:	089b      	lsrs	r3, r3, #2
 800a954:	b29b      	uxth	r3, r3
 800a956:	3305      	adds	r3, #5
 800a958:	b29b      	uxth	r3, r3
 800a95a:	031b      	lsls	r3, r3, #12
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a962:	b29b      	uxth	r3, r3
 800a964:	4313      	orrs	r3, r2
 800a966:	b29b      	uxth	r3, r3
 800a968:	4618      	mov	r0, r3
 800a96a:	f7f9 fb65 	bl	8004038 <lwip_htons>
 800a96e:	4603      	mov	r3, r0
 800a970:	461a      	mov	r2, r3
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a976:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a978:	4618      	mov	r0, r3
 800a97a:	f7f9 fb5d 	bl	8004038 <lwip_htons>
 800a97e:	4603      	mov	r3, r0
 800a980:	461a      	mov	r2, r3
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2200      	movs	r2, #0
 800a98a:	741a      	strb	r2, [r3, #16]
 800a98c:	2200      	movs	r2, #0
 800a98e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2200      	movs	r2, #0
 800a994:	749a      	strb	r2, [r3, #18]
 800a996:	2200      	movs	r2, #0
 800a998:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a99a:	697b      	ldr	r3, [r7, #20]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	08010130 	.word	0x08010130
 800a9a8:	08010808 	.word	0x08010808
 800a9ac:	08010184 	.word	0x08010184

0800a9b0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a9b0:	b5b0      	push	{r4, r5, r7, lr}
 800a9b2:	b08a      	sub	sp, #40	@ 0x28
 800a9b4:	af04      	add	r7, sp, #16
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	607b      	str	r3, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	817b      	strh	r3, [r7, #10]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <tcp_output_alloc_header+0x26>
 800a9c8:	4b15      	ldr	r3, [pc, #84]	@ (800aa20 <tcp_output_alloc_header+0x70>)
 800a9ca:	f240 7242 	movw	r2, #1858	@ 0x742
 800a9ce:	4915      	ldr	r1, [pc, #84]	@ (800aa24 <tcp_output_alloc_header+0x74>)
 800a9d0:	4815      	ldr	r0, [pc, #84]	@ (800aa28 <tcp_output_alloc_header+0x78>)
 800a9d2:	f003 f93f 	bl	800dc54 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	8adb      	ldrh	r3, [r3, #22]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	8b12      	ldrh	r2, [r2, #24]
 800a9e2:	68f9      	ldr	r1, [r7, #12]
 800a9e4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800a9e6:	893d      	ldrh	r5, [r7, #8]
 800a9e8:	897c      	ldrh	r4, [r7, #10]
 800a9ea:	9103      	str	r1, [sp, #12]
 800a9ec:	2110      	movs	r1, #16
 800a9ee:	9102      	str	r1, [sp, #8]
 800a9f0:	9201      	str	r2, [sp, #4]
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	462a      	mov	r2, r5
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	f7ff ff67 	bl	800a8cc <tcp_output_alloc_header_common>
 800a9fe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d006      	beq.n	800aa14 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800aa0e:	441a      	add	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800aa14:	697b      	ldr	r3, [r7, #20]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bdb0      	pop	{r4, r5, r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	08010130 	.word	0x08010130
 800aa24:	08010838 	.word	0x08010838
 800aa28:	08010184 	.word	0x08010184

0800aa2c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b088      	sub	sp, #32
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	4611      	mov	r1, r2
 800aa38:	461a      	mov	r2, r3
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	71fb      	strb	r3, [r7, #7]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d106      	bne.n	800aa5a <tcp_output_fill_options+0x2e>
 800aa4c:	4b12      	ldr	r3, [pc, #72]	@ (800aa98 <tcp_output_fill_options+0x6c>)
 800aa4e:	f240 7256 	movw	r2, #1878	@ 0x756
 800aa52:	4912      	ldr	r1, [pc, #72]	@ (800aa9c <tcp_output_fill_options+0x70>)
 800aa54:	4812      	ldr	r0, [pc, #72]	@ (800aaa0 <tcp_output_fill_options+0x74>)
 800aa56:	f003 f8fd 	bl	800dc54 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	3314      	adds	r3, #20
 800aa64:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800aa66:	8bfb      	ldrh	r3, [r7, #30]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	4413      	add	r3, r2
 800aa76:	3314      	adds	r3, #20
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d006      	beq.n	800aa90 <tcp_output_fill_options+0x64>
 800aa82:	4b05      	ldr	r3, [pc, #20]	@ (800aa98 <tcp_output_fill_options+0x6c>)
 800aa84:	f240 7275 	movw	r2, #1909	@ 0x775
 800aa88:	4906      	ldr	r1, [pc, #24]	@ (800aaa4 <tcp_output_fill_options+0x78>)
 800aa8a:	4805      	ldr	r0, [pc, #20]	@ (800aaa0 <tcp_output_fill_options+0x74>)
 800aa8c:	f003 f8e2 	bl	800dc54 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800aa90:	bf00      	nop
 800aa92:	3720      	adds	r7, #32
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	08010130 	.word	0x08010130
 800aa9c:	08010860 	.word	0x08010860
 800aaa0:	08010184 	.word	0x08010184
 800aaa4:	08010758 	.word	0x08010758

0800aaa8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08a      	sub	sp, #40	@ 0x28
 800aaac:	af04      	add	r7, sp, #16
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d106      	bne.n	800aaca <tcp_output_control_segment+0x22>
 800aabc:	4b1c      	ldr	r3, [pc, #112]	@ (800ab30 <tcp_output_control_segment+0x88>)
 800aabe:	f240 7287 	movw	r2, #1927	@ 0x787
 800aac2:	491c      	ldr	r1, [pc, #112]	@ (800ab34 <tcp_output_control_segment+0x8c>)
 800aac4:	481c      	ldr	r0, [pc, #112]	@ (800ab38 <tcp_output_control_segment+0x90>)
 800aac6:	f003 f8c5 	bl	800dc54 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7fe ff42 	bl	8009958 <tcp_route>
 800aad4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d102      	bne.n	800aae2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800aadc:	23fc      	movs	r3, #252	@ 0xfc
 800aade:	75fb      	strb	r3, [r7, #23]
 800aae0:	e01c      	b.n	800ab1c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d006      	beq.n	800aaf6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	7adb      	ldrb	r3, [r3, #11]
 800aaec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	7a9b      	ldrb	r3, [r3, #10]
 800aaf2:	757b      	strb	r3, [r7, #21]
 800aaf4:	e003      	b.n	800aafe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800aaf6:	23ff      	movs	r3, #255	@ 0xff
 800aaf8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800aafe:	7dba      	ldrb	r2, [r7, #22]
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	9302      	str	r3, [sp, #8]
 800ab04:	2306      	movs	r3, #6
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	7d7b      	ldrb	r3, [r7, #21]
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	68b8      	ldr	r0, [r7, #8]
 800ab14:	f001 ff70 	bl	800c9f8 <ip4_output_if>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ab1c:	68b8      	ldr	r0, [r7, #8]
 800ab1e:	f7fa fde9 	bl	80056f4 <pbuf_free>
  return err;
 800ab22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3718      	adds	r7, #24
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	08010130 	.word	0x08010130
 800ab34:	08010888 	.word	0x08010888
 800ab38:	08010184 	.word	0x08010184

0800ab3c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ab3c:	b590      	push	{r4, r7, lr}
 800ab3e:	b08b      	sub	sp, #44	@ 0x2c
 800ab40:	af04      	add	r7, sp, #16
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d106      	bne.n	800ab5e <tcp_rst+0x22>
 800ab50:	4b1f      	ldr	r3, [pc, #124]	@ (800abd0 <tcp_rst+0x94>)
 800ab52:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800ab56:	491f      	ldr	r1, [pc, #124]	@ (800abd4 <tcp_rst+0x98>)
 800ab58:	481f      	ldr	r0, [pc, #124]	@ (800abd8 <tcp_rst+0x9c>)
 800ab5a:	f003 f87b 	bl	800dc54 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ab5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d106      	bne.n	800ab72 <tcp_rst+0x36>
 800ab64:	4b1a      	ldr	r3, [pc, #104]	@ (800abd0 <tcp_rst+0x94>)
 800ab66:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800ab6a:	491c      	ldr	r1, [pc, #112]	@ (800abdc <tcp_rst+0xa0>)
 800ab6c:	481a      	ldr	r0, [pc, #104]	@ (800abd8 <tcp_rst+0x9c>)
 800ab6e:	f003 f871 	bl	800dc54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ab72:	2300      	movs	r3, #0
 800ab74:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ab76:	f246 0308 	movw	r3, #24584	@ 0x6008
 800ab7a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
 800ab7e:	b29c      	uxth	r4, r3
 800ab80:	68b8      	ldr	r0, [r7, #8]
 800ab82:	f7f9 fa6f 	bl	8004064 <lwip_htonl>
 800ab86:	4602      	mov	r2, r0
 800ab88:	8abb      	ldrh	r3, [r7, #20]
 800ab8a:	9303      	str	r3, [sp, #12]
 800ab8c:	2314      	movs	r3, #20
 800ab8e:	9302      	str	r3, [sp, #8]
 800ab90:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ab92:	9301      	str	r3, [sp, #4]
 800ab94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff fe94 	bl	800a8cc <tcp_output_alloc_header_common>
 800aba4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00c      	beq.n	800abc6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800abac:	7dfb      	ldrb	r3, [r7, #23]
 800abae:	2200      	movs	r2, #0
 800abb0:	6939      	ldr	r1, [r7, #16]
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7ff ff3a 	bl	800aa2c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800abb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abba:	683a      	ldr	r2, [r7, #0]
 800abbc:	6939      	ldr	r1, [r7, #16]
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7ff ff72 	bl	800aaa8 <tcp_output_control_segment>
 800abc4:	e000      	b.n	800abc8 <tcp_rst+0x8c>
    return;
 800abc6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800abc8:	371c      	adds	r7, #28
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd90      	pop	{r4, r7, pc}
 800abce:	bf00      	nop
 800abd0:	08010130 	.word	0x08010130
 800abd4:	080108b4 	.word	0x080108b4
 800abd8:	08010184 	.word	0x08010184
 800abdc:	080108d0 	.word	0x080108d0

0800abe0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800abe0:	b590      	push	{r4, r7, lr}
 800abe2:	b087      	sub	sp, #28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d106      	bne.n	800ac04 <tcp_send_empty_ack+0x24>
 800abf6:	4b28      	ldr	r3, [pc, #160]	@ (800ac98 <tcp_send_empty_ack+0xb8>)
 800abf8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800abfc:	4927      	ldr	r1, [pc, #156]	@ (800ac9c <tcp_send_empty_ack+0xbc>)
 800abfe:	4828      	ldr	r0, [pc, #160]	@ (800aca0 <tcp_send_empty_ack+0xc0>)
 800ac00:	f003 f828 	bl	800dc54 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac04:	7dfb      	ldrb	r3, [r7, #23]
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	f003 0304 	and.w	r3, r3, #4
 800ac0e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ac10:	7d7b      	ldrb	r3, [r7, #21]
 800ac12:	b29c      	uxth	r4, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7f9 fa23 	bl	8004064 <lwip_htonl>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2200      	movs	r2, #0
 800ac22:	4621      	mov	r1, r4
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff fec3 	bl	800a9b0 <tcp_output_alloc_header>
 800ac2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d109      	bne.n	800ac46 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	8b5b      	ldrh	r3, [r3, #26]
 800ac36:	f043 0303 	orr.w	r3, r3, #3
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ac40:	f06f 0301 	mvn.w	r3, #1
 800ac44:	e023      	b.n	800ac8e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ac46:	7dbb      	ldrb	r3, [r7, #22]
 800ac48:	7dfa      	ldrb	r2, [r7, #23]
 800ac4a:	6939      	ldr	r1, [r7, #16]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff feed 	bl	800aa2c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3304      	adds	r3, #4
 800ac58:	6939      	ldr	r1, [r7, #16]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff ff24 	bl	800aaa8 <tcp_output_control_segment>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ac64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d007      	beq.n	800ac7c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	8b5b      	ldrh	r3, [r3, #26]
 800ac70:	f043 0303 	orr.w	r3, r3, #3
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	835a      	strh	r2, [r3, #26]
 800ac7a:	e006      	b.n	800ac8a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	8b5b      	ldrh	r3, [r3, #26]
 800ac80:	f023 0303 	bic.w	r3, r3, #3
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ac8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	371c      	adds	r7, #28
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd90      	pop	{r4, r7, pc}
 800ac96:	bf00      	nop
 800ac98:	08010130 	.word	0x08010130
 800ac9c:	080108ec 	.word	0x080108ec
 800aca0:	08010184 	.word	0x08010184

0800aca4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800aca4:	b590      	push	{r4, r7, lr}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800acac:	2300      	movs	r3, #0
 800acae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <tcp_keepalive+0x20>
 800acb6:	4b18      	ldr	r3, [pc, #96]	@ (800ad18 <tcp_keepalive+0x74>)
 800acb8:	f640 0224 	movw	r2, #2084	@ 0x824
 800acbc:	4917      	ldr	r1, [pc, #92]	@ (800ad1c <tcp_keepalive+0x78>)
 800acbe:	4818      	ldr	r0, [pc, #96]	@ (800ad20 <tcp_keepalive+0x7c>)
 800acc0:	f002 ffc8 	bl	800dc54 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800acc4:	7dfb      	ldrb	r3, [r7, #23]
 800acc6:	b29c      	uxth	r4, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800accc:	3b01      	subs	r3, #1
 800acce:	4618      	mov	r0, r3
 800acd0:	f7f9 f9c8 	bl	8004064 <lwip_htonl>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2200      	movs	r2, #0
 800acd8:	4621      	mov	r1, r4
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff fe68 	bl	800a9b0 <tcp_output_alloc_header>
 800ace0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ace8:	f04f 33ff 	mov.w	r3, #4294967295
 800acec:	e010      	b.n	800ad10 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800acee:	7dfb      	ldrb	r3, [r7, #23]
 800acf0:	2200      	movs	r2, #0
 800acf2:	6939      	ldr	r1, [r7, #16]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff fe99 	bl	800aa2c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3304      	adds	r3, #4
 800ad00:	6939      	ldr	r1, [r7, #16]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff fed0 	bl	800aaa8 <tcp_output_control_segment>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ad0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	371c      	adds	r7, #28
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd90      	pop	{r4, r7, pc}
 800ad18:	08010130 	.word	0x08010130
 800ad1c:	0801090c 	.word	0x0801090c
 800ad20:	08010184 	.word	0x08010184

0800ad24 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ad24:	b590      	push	{r4, r7, lr}
 800ad26:	b08b      	sub	sp, #44	@ 0x2c
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d106      	bne.n	800ad46 <tcp_zero_window_probe+0x22>
 800ad38:	4b4c      	ldr	r3, [pc, #304]	@ (800ae6c <tcp_zero_window_probe+0x148>)
 800ad3a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800ad3e:	494c      	ldr	r1, [pc, #304]	@ (800ae70 <tcp_zero_window_probe+0x14c>)
 800ad40:	484c      	ldr	r0, [pc, #304]	@ (800ae74 <tcp_zero_window_probe+0x150>)
 800ad42:	f002 ff87 	bl	800dc54 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad4a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ad4c:	6a3b      	ldr	r3, [r7, #32]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e086      	b.n	800ae64 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ad5c:	2bff      	cmp	r3, #255	@ 0xff
 800ad5e:	d007      	beq.n	800ad70 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ad66:	3301      	adds	r3, #1
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ad70:	6a3b      	ldr	r3, [r7, #32]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	899b      	ldrh	r3, [r3, #12]
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7f9 f95d 	bl	8004038 <lwip_htons>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <tcp_zero_window_probe+0x72>
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	891b      	ldrh	r3, [r3, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <tcp_zero_window_probe+0x72>
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <tcp_zero_window_probe+0x74>
 800ad96:	2300      	movs	r3, #0
 800ad98:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ad9a:	7ffb      	ldrb	r3, [r7, #31]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	bf0c      	ite	eq
 800ada0:	2301      	moveq	r3, #1
 800ada2:	2300      	movne	r3, #0
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ada8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adac:	b299      	uxth	r1, r3
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	8bba      	ldrh	r2, [r7, #28]
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff fdfa 	bl	800a9b0 <tcp_output_alloc_header>
 800adbc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d102      	bne.n	800adca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800adc4:	f04f 33ff 	mov.w	r3, #4294967295
 800adc8:	e04c      	b.n	800ae64 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800add0:	7ffb      	ldrb	r3, [r7, #31]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d011      	beq.n	800adfa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	899b      	ldrh	r3, [r3, #12]
 800adda:	b29b      	uxth	r3, r3
 800addc:	b21b      	sxth	r3, r3
 800adde:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ade2:	b21c      	sxth	r4, r3
 800ade4:	2011      	movs	r0, #17
 800ade6:	f7f9 f927 	bl	8004038 <lwip_htons>
 800adea:	4603      	mov	r3, r0
 800adec:	b21b      	sxth	r3, r3
 800adee:	4323      	orrs	r3, r4
 800adf0:	b21b      	sxth	r3, r3
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	819a      	strh	r2, [r3, #12]
 800adf8:	e010      	b.n	800ae1c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	3314      	adds	r3, #20
 800ae00:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	6858      	ldr	r0, [r3, #4]
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	891a      	ldrh	r2, [r3, #8]
 800ae0c:	6a3b      	ldr	r3, [r7, #32]
 800ae0e:	891b      	ldrh	r3, [r3, #8]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	2201      	movs	r2, #1
 800ae16:	6939      	ldr	r1, [r7, #16]
 800ae18:	f7fa fe56 	bl	8005ac8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7f9 f91e 	bl	8004064 <lwip_htonl>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	da02      	bge.n	800ae40 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ae40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae44:	2200      	movs	r2, #0
 800ae46:	69b9      	ldr	r1, [r7, #24]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7ff fdef 	bl	800aa2c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3304      	adds	r3, #4
 800ae54:	69b9      	ldr	r1, [r7, #24]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff fe26 	bl	800aaa8 <tcp_output_control_segment>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ae60:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	372c      	adds	r7, #44	@ 0x2c
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd90      	pop	{r4, r7, pc}
 800ae6c:	08010130 	.word	0x08010130
 800ae70:	08010928 	.word	0x08010928
 800ae74:	08010184 	.word	0x08010184

0800ae78 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ae80:	f7fa ff10 	bl	8005ca4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ae84:	4b0a      	ldr	r3, [pc, #40]	@ (800aeb0 <tcpip_tcp_timer+0x38>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d103      	bne.n	800ae94 <tcpip_tcp_timer+0x1c>
 800ae8c:	4b09      	ldr	r3, [pc, #36]	@ (800aeb4 <tcpip_tcp_timer+0x3c>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d005      	beq.n	800aea0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae94:	2200      	movs	r2, #0
 800ae96:	4908      	ldr	r1, [pc, #32]	@ (800aeb8 <tcpip_tcp_timer+0x40>)
 800ae98:	20fa      	movs	r0, #250	@ 0xfa
 800ae9a:	f000 f8f3 	bl	800b084 <sys_timeout>
 800ae9e:	e003      	b.n	800aea8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800aea0:	4b06      	ldr	r3, [pc, #24]	@ (800aebc <tcpip_tcp_timer+0x44>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
  }
}
 800aea6:	bf00      	nop
 800aea8:	bf00      	nop
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	20008290 	.word	0x20008290
 800aeb4:	20008294 	.word	0x20008294
 800aeb8:	0800ae79 	.word	0x0800ae79
 800aebc:	200082dc 	.word	0x200082dc

0800aec0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aec4:	4b0a      	ldr	r3, [pc, #40]	@ (800aef0 <tcp_timer_needed+0x30>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10f      	bne.n	800aeec <tcp_timer_needed+0x2c>
 800aecc:	4b09      	ldr	r3, [pc, #36]	@ (800aef4 <tcp_timer_needed+0x34>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d103      	bne.n	800aedc <tcp_timer_needed+0x1c>
 800aed4:	4b08      	ldr	r3, [pc, #32]	@ (800aef8 <tcp_timer_needed+0x38>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d007      	beq.n	800aeec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800aedc:	4b04      	ldr	r3, [pc, #16]	@ (800aef0 <tcp_timer_needed+0x30>)
 800aede:	2201      	movs	r2, #1
 800aee0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aee2:	2200      	movs	r2, #0
 800aee4:	4905      	ldr	r1, [pc, #20]	@ (800aefc <tcp_timer_needed+0x3c>)
 800aee6:	20fa      	movs	r0, #250	@ 0xfa
 800aee8:	f000 f8cc 	bl	800b084 <sys_timeout>
  }
}
 800aeec:	bf00      	nop
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	200082dc 	.word	0x200082dc
 800aef4:	20008290 	.word	0x20008290
 800aef8:	20008294 	.word	0x20008294
 800aefc:	0800ae79 	.word	0x0800ae79

0800af00 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800af0c:	2006      	movs	r0, #6
 800af0e:	f7f9 fd0b 	bl	8004928 <memp_malloc>
 800af12:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d109      	bne.n	800af2e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d151      	bne.n	800afc4 <sys_timeout_abs+0xc4>
 800af20:	4b2a      	ldr	r3, [pc, #168]	@ (800afcc <sys_timeout_abs+0xcc>)
 800af22:	22be      	movs	r2, #190	@ 0xbe
 800af24:	492a      	ldr	r1, [pc, #168]	@ (800afd0 <sys_timeout_abs+0xd0>)
 800af26:	482b      	ldr	r0, [pc, #172]	@ (800afd4 <sys_timeout_abs+0xd4>)
 800af28:	f002 fe94 	bl	800dc54 <iprintf>
    return;
 800af2c:	e04a      	b.n	800afc4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2200      	movs	r2, #0
 800af32:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800af46:	4b24      	ldr	r3, [pc, #144]	@ (800afd8 <sys_timeout_abs+0xd8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d103      	bne.n	800af56 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800af4e:	4a22      	ldr	r2, [pc, #136]	@ (800afd8 <sys_timeout_abs+0xd8>)
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	6013      	str	r3, [r2, #0]
    return;
 800af54:	e037      	b.n	800afc6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	4b1f      	ldr	r3, [pc, #124]	@ (800afd8 <sys_timeout_abs+0xd8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	0fdb      	lsrs	r3, r3, #31
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d007      	beq.n	800af7e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800af6e:	4b1a      	ldr	r3, [pc, #104]	@ (800afd8 <sys_timeout_abs+0xd8>)
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800af76:	4a18      	ldr	r2, [pc, #96]	@ (800afd8 <sys_timeout_abs+0xd8>)
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	e023      	b.n	800afc6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800af7e:	4b16      	ldr	r3, [pc, #88]	@ (800afd8 <sys_timeout_abs+0xd8>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	617b      	str	r3, [r7, #20]
 800af84:	e01a      	b.n	800afbc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00b      	beq.n	800afa6 <sys_timeout_abs+0xa6>
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	0fdb      	lsrs	r3, r3, #31
 800af9c:	f003 0301 	and.w	r3, r3, #1
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d007      	beq.n	800afb6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	601a      	str	r2, [r3, #0]
        break;
 800afb4:	e007      	b.n	800afc6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	617b      	str	r3, [r7, #20]
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1e1      	bne.n	800af86 <sys_timeout_abs+0x86>
 800afc2:	e000      	b.n	800afc6 <sys_timeout_abs+0xc6>
    return;
 800afc4:	bf00      	nop
      }
    }
  }
}
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	0801094c 	.word	0x0801094c
 800afd0:	08010980 	.word	0x08010980
 800afd4:	080109c0 	.word	0x080109c0
 800afd8:	200082d4 	.word	0x200082d4

0800afdc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4798      	blx	r3

  now = sys_now();
 800afee:	f7f8 fe0b 	bl	8003c08 <sys_now>
 800aff2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	4b0f      	ldr	r3, [pc, #60]	@ (800b038 <lwip_cyclic_timer+0x5c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4413      	add	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	0fdb      	lsrs	r3, r3, #31
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d009      	beq.n	800b026 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	4413      	add	r3, r2
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	4907      	ldr	r1, [pc, #28]	@ (800b03c <lwip_cyclic_timer+0x60>)
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff ff6e 	bl	800af00 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b024:	e004      	b.n	800b030 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	4904      	ldr	r1, [pc, #16]	@ (800b03c <lwip_cyclic_timer+0x60>)
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f7ff ff68 	bl	800af00 <sys_timeout_abs>
}
 800b030:	bf00      	nop
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	200082d8 	.word	0x200082d8
 800b03c:	0800afdd 	.word	0x0800afdd

0800b040 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b046:	2301      	movs	r3, #1
 800b048:	607b      	str	r3, [r7, #4]
 800b04a:	e00e      	b.n	800b06a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b04c:	4a0b      	ldr	r2, [pc, #44]	@ (800b07c <sys_timeouts_init+0x3c>)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	00db      	lsls	r3, r3, #3
 800b058:	4a08      	ldr	r2, [pc, #32]	@ (800b07c <sys_timeouts_init+0x3c>)
 800b05a:	4413      	add	r3, r2
 800b05c:	461a      	mov	r2, r3
 800b05e:	4908      	ldr	r1, [pc, #32]	@ (800b080 <sys_timeouts_init+0x40>)
 800b060:	f000 f810 	bl	800b084 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3301      	adds	r3, #1
 800b068:	607b      	str	r3, [r7, #4]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d9ed      	bls.n	800b04c <sys_timeouts_init+0xc>
  }
}
 800b070:	bf00      	nop
 800b072:	bf00      	nop
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	08011538 	.word	0x08011538
 800b080:	0800afdd 	.word	0x0800afdd

0800b084 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b096:	d306      	bcc.n	800b0a6 <sys_timeout+0x22>
 800b098:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c4 <sys_timeout+0x40>)
 800b09a:	f240 1229 	movw	r2, #297	@ 0x129
 800b09e:	490a      	ldr	r1, [pc, #40]	@ (800b0c8 <sys_timeout+0x44>)
 800b0a0:	480a      	ldr	r0, [pc, #40]	@ (800b0cc <sys_timeout+0x48>)
 800b0a2:	f002 fdd7 	bl	800dc54 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b0a6:	f7f8 fdaf 	bl	8003c08 <sys_now>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	68b9      	ldr	r1, [r7, #8]
 800b0b6:	6978      	ldr	r0, [r7, #20]
 800b0b8:	f7ff ff22 	bl	800af00 <sys_timeout_abs>
#endif
}
 800b0bc:	bf00      	nop
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	0801094c 	.word	0x0801094c
 800b0c8:	080109e8 	.word	0x080109e8
 800b0cc:	080109c0 	.word	0x080109c0

0800b0d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b0d6:	f7f8 fd97 	bl	8003c08 <sys_now>
 800b0da:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b0dc:	4b1a      	ldr	r3, [pc, #104]	@ (800b148 <sys_check_timeouts+0x78>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <sys_check_timeouts+0x1a>
 800b0e6:	f7f9 ffcb 	bl	8005080 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b0ea:	4b18      	ldr	r3, [pc, #96]	@ (800b14c <sys_check_timeouts+0x7c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d022      	beq.n	800b13c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	0fdb      	lsrs	r3, r3, #31
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	b2db      	uxtb	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	d11a      	bne.n	800b140 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a0f      	ldr	r2, [pc, #60]	@ (800b14c <sys_check_timeouts+0x7c>)
 800b110:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	4a0b      	ldr	r2, [pc, #44]	@ (800b150 <sys_check_timeouts+0x80>)
 800b124:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	2006      	movs	r0, #6
 800b12a:	f7f9 fc6d 	bl	8004a08 <memp_free>
    if (handler != NULL) {
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0d3      	beq.n	800b0dc <sys_check_timeouts+0xc>
      handler(arg);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6838      	ldr	r0, [r7, #0]
 800b138:	4798      	blx	r3
  do {
 800b13a:	e7cf      	b.n	800b0dc <sys_check_timeouts+0xc>
      return;
 800b13c:	bf00      	nop
 800b13e:	e000      	b.n	800b142 <sys_check_timeouts+0x72>
      return;
 800b140:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20008281 	.word	0x20008281
 800b14c:	200082d4 	.word	0x200082d4
 800b150:	200082d8 	.word	0x200082d8

0800b154 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b158:	f002 fc7c 	bl	800da54 <rand>
 800b15c:	4603      	mov	r3, r0
 800b15e:	b29b      	uxth	r3, r3
 800b160:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b164:	b29b      	uxth	r3, r3
 800b166:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	4b01      	ldr	r3, [pc, #4]	@ (800b174 <udp_init+0x20>)
 800b16e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b170:	bf00      	nop
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000028 	.word	0x20000028

0800b178 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	4613      	mov	r3, r2
 800b184:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d105      	bne.n	800b198 <udp_input_local_match+0x20>
 800b18c:	4b27      	ldr	r3, [pc, #156]	@ (800b22c <udp_input_local_match+0xb4>)
 800b18e:	2287      	movs	r2, #135	@ 0x87
 800b190:	4927      	ldr	r1, [pc, #156]	@ (800b230 <udp_input_local_match+0xb8>)
 800b192:	4828      	ldr	r0, [pc, #160]	@ (800b234 <udp_input_local_match+0xbc>)
 800b194:	f002 fd5e 	bl	800dc54 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d105      	bne.n	800b1aa <udp_input_local_match+0x32>
 800b19e:	4b23      	ldr	r3, [pc, #140]	@ (800b22c <udp_input_local_match+0xb4>)
 800b1a0:	2288      	movs	r2, #136	@ 0x88
 800b1a2:	4925      	ldr	r1, [pc, #148]	@ (800b238 <udp_input_local_match+0xc0>)
 800b1a4:	4823      	ldr	r0, [pc, #140]	@ (800b234 <udp_input_local_match+0xbc>)
 800b1a6:	f002 fd55 	bl	800dc54 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	7a1b      	ldrb	r3, [r3, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00b      	beq.n	800b1ca <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	7a1a      	ldrb	r2, [r3, #8]
 800b1b6:	4b21      	ldr	r3, [pc, #132]	@ (800b23c <udp_input_local_match+0xc4>)
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b1be:	3301      	adds	r3, #1
 800b1c0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d001      	beq.n	800b1ca <udp_input_local_match+0x52>
    return 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	e02b      	b.n	800b222 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d018      	beq.n	800b202 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d013      	beq.n	800b1fe <udp_input_local_match+0x86>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00f      	beq.n	800b1fe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b1de:	4b17      	ldr	r3, [pc, #92]	@ (800b23c <udp_input_local_match+0xc4>)
 800b1e0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e6:	d00a      	beq.n	800b1fe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	4b13      	ldr	r3, [pc, #76]	@ (800b23c <udp_input_local_match+0xc4>)
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	405a      	eors	r2, r3
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d110      	bne.n	800b220 <udp_input_local_match+0xa8>
          return 1;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e00f      	b.n	800b222 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d009      	beq.n	800b21c <udp_input_local_match+0xa4>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d005      	beq.n	800b21c <udp_input_local_match+0xa4>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	4b09      	ldr	r3, [pc, #36]	@ (800b23c <udp_input_local_match+0xc4>)
 800b216:	695b      	ldr	r3, [r3, #20]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d101      	bne.n	800b220 <udp_input_local_match+0xa8>
        return 1;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e000      	b.n	800b222 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	08010a34 	.word	0x08010a34
 800b230:	08010a64 	.word	0x08010a64
 800b234:	08010a88 	.word	0x08010a88
 800b238:	08010ab0 	.word	0x08010ab0
 800b23c:	20004d14 	.word	0x20004d14

0800b240 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b240:	b590      	push	{r4, r7, lr}
 800b242:	b08d      	sub	sp, #52	@ 0x34
 800b244:	af02      	add	r7, sp, #8
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b24a:	2300      	movs	r3, #0
 800b24c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d105      	bne.n	800b260 <udp_input+0x20>
 800b254:	4b7c      	ldr	r3, [pc, #496]	@ (800b448 <udp_input+0x208>)
 800b256:	22cf      	movs	r2, #207	@ 0xcf
 800b258:	497c      	ldr	r1, [pc, #496]	@ (800b44c <udp_input+0x20c>)
 800b25a:	487d      	ldr	r0, [pc, #500]	@ (800b450 <udp_input+0x210>)
 800b25c:	f002 fcfa 	bl	800dc54 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d105      	bne.n	800b272 <udp_input+0x32>
 800b266:	4b78      	ldr	r3, [pc, #480]	@ (800b448 <udp_input+0x208>)
 800b268:	22d0      	movs	r2, #208	@ 0xd0
 800b26a:	497a      	ldr	r1, [pc, #488]	@ (800b454 <udp_input+0x214>)
 800b26c:	4878      	ldr	r0, [pc, #480]	@ (800b450 <udp_input+0x210>)
 800b26e:	f002 fcf1 	bl	800dc54 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	895b      	ldrh	r3, [r3, #10]
 800b276:	2b07      	cmp	r3, #7
 800b278:	d803      	bhi.n	800b282 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7fa fa3a 	bl	80056f4 <pbuf_free>
    goto end;
 800b280:	e0de      	b.n	800b440 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b288:	4b73      	ldr	r3, [pc, #460]	@ (800b458 <udp_input+0x218>)
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	4a72      	ldr	r2, [pc, #456]	@ (800b458 <udp_input+0x218>)
 800b28e:	6812      	ldr	r2, [r2, #0]
 800b290:	4611      	mov	r1, r2
 800b292:	4618      	mov	r0, r3
 800b294:	f001 fc88 	bl	800cba8 <ip4_addr_isbroadcast_u32>
 800b298:	4603      	mov	r3, r0
 800b29a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	881b      	ldrh	r3, [r3, #0]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7f8 fec8 	bl	8004038 <lwip_htons>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	885b      	ldrh	r3, [r3, #2]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7f8 fec0 	bl	8004038 <lwip_htons>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2c8:	4b64      	ldr	r3, [pc, #400]	@ (800b45c <udp_input+0x21c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2ce:	e054      	b.n	800b37a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d2:	8a5b      	ldrh	r3, [r3, #18]
 800b2d4:	89fa      	ldrh	r2, [r7, #14]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d14a      	bne.n	800b370 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b2da:	7cfb      	ldrb	r3, [r7, #19]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b2e2:	f7ff ff49 	bl	800b178 <udp_input_local_match>
 800b2e6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d041      	beq.n	800b370 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ee:	7c1b      	ldrb	r3, [r3, #16]
 800b2f0:	f003 0304 	and.w	r3, r3, #4
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d11d      	bne.n	800b334 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d102      	bne.n	800b304 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b300:	61fb      	str	r3, [r7, #28]
 800b302:	e017      	b.n	800b334 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b304:	7cfb      	ldrb	r3, [r7, #19]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d014      	beq.n	800b334 <udp_input+0xf4>
 800b30a:	4b53      	ldr	r3, [pc, #332]	@ (800b458 <udp_input+0x218>)
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b312:	d10f      	bne.n	800b334 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	3304      	adds	r3, #4
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d008      	beq.n	800b334 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	3304      	adds	r3, #4
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d101      	bne.n	800b334 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b332:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b336:	8a9b      	ldrh	r3, [r3, #20]
 800b338:	8a3a      	ldrh	r2, [r7, #16]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d118      	bne.n	800b370 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b340:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b342:	2b00      	cmp	r3, #0
 800b344:	d005      	beq.n	800b352 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b348:	685a      	ldr	r2, [r3, #4]
 800b34a:	4b43      	ldr	r3, [pc, #268]	@ (800b458 <udp_input+0x218>)
 800b34c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b34e:	429a      	cmp	r2, r3
 800b350:	d10e      	bne.n	800b370 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d014      	beq.n	800b382 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35a:	68da      	ldr	r2, [r3, #12]
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b360:	4b3e      	ldr	r3, [pc, #248]	@ (800b45c <udp_input+0x21c>)
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b366:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b368:	4a3c      	ldr	r2, [pc, #240]	@ (800b45c <udp_input+0x21c>)
 800b36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b36e:	e008      	b.n	800b382 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	627b      	str	r3, [r7, #36]	@ 0x24
 800b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1a7      	bne.n	800b2d0 <udp_input+0x90>
 800b380:	e000      	b.n	800b384 <udp_input+0x144>
        break;
 800b382:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <udp_input+0x14e>
    pcb = uncon_pcb;
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <udp_input+0x15a>
    for_us = 1;
 800b394:	2301      	movs	r3, #1
 800b396:	76fb      	strb	r3, [r7, #27]
 800b398:	e00a      	b.n	800b3b0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	3304      	adds	r3, #4
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	4b2d      	ldr	r3, [pc, #180]	@ (800b458 <udp_input+0x218>)
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	bf0c      	ite	eq
 800b3a8:	2301      	moveq	r3, #1
 800b3aa:	2300      	movne	r3, #0
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b3b0:	7efb      	ldrb	r3, [r7, #27]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d041      	beq.n	800b43a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b3b6:	2108      	movs	r1, #8
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7fa f915 	bl	80055e8 <pbuf_remove_header>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00a      	beq.n	800b3da <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b3c4:	4b20      	ldr	r3, [pc, #128]	@ (800b448 <udp_input+0x208>)
 800b3c6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800b3ca:	4925      	ldr	r1, [pc, #148]	@ (800b460 <udp_input+0x220>)
 800b3cc:	4820      	ldr	r0, [pc, #128]	@ (800b450 <udp_input+0x210>)
 800b3ce:	f002 fc41 	bl	800dc54 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7fa f98e 	bl	80056f4 <pbuf_free>
      goto end;
 800b3d8:	e032      	b.n	800b440 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d012      	beq.n	800b406 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00a      	beq.n	800b3fe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ea:	699c      	ldr	r4, [r3, #24]
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ee:	69d8      	ldr	r0, [r3, #28]
 800b3f0:	8a3b      	ldrh	r3, [r7, #16]
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	4b1b      	ldr	r3, [pc, #108]	@ (800b464 <udp_input+0x224>)
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3fa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b3fc:	e021      	b.n	800b442 <udp_input+0x202>
        pbuf_free(p);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7fa f978 	bl	80056f4 <pbuf_free>
        goto end;
 800b404:	e01c      	b.n	800b440 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b406:	7cfb      	ldrb	r3, [r7, #19]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d112      	bne.n	800b432 <udp_input+0x1f2>
 800b40c:	4b12      	ldr	r3, [pc, #72]	@ (800b458 <udp_input+0x218>)
 800b40e:	695b      	ldr	r3, [r3, #20]
 800b410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b414:	2be0      	cmp	r3, #224	@ 0xe0
 800b416:	d00c      	beq.n	800b432 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b418:	4b0f      	ldr	r3, [pc, #60]	@ (800b458 <udp_input+0x218>)
 800b41a:	899b      	ldrh	r3, [r3, #12]
 800b41c:	3308      	adds	r3, #8
 800b41e:	b29b      	uxth	r3, r3
 800b420:	b21b      	sxth	r3, r3
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7fa f952 	bl	80056ce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b42a:	2103      	movs	r1, #3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f001 f89b 	bl	800c568 <icmp_dest_unreach>
      pbuf_free(p);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7fa f95e 	bl	80056f4 <pbuf_free>
  return;
 800b438:	e003      	b.n	800b442 <udp_input+0x202>
    pbuf_free(p);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7fa f95a 	bl	80056f4 <pbuf_free>
  return;
 800b440:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b442:	372c      	adds	r7, #44	@ 0x2c
 800b444:	46bd      	mov	sp, r7
 800b446:	bd90      	pop	{r4, r7, pc}
 800b448:	08010a34 	.word	0x08010a34
 800b44c:	08010ad8 	.word	0x08010ad8
 800b450:	08010a88 	.word	0x08010a88
 800b454:	08010af0 	.word	0x08010af0
 800b458:	20004d14 	.word	0x20004d14
 800b45c:	200082e0 	.word	0x200082e0
 800b460:	08010b0c 	.word	0x08010b0c
 800b464:	20004d24 	.word	0x20004d24

0800b468 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d01e      	beq.n	800b4b6 <udp_netif_ip_addr_changed+0x4e>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01a      	beq.n	800b4b6 <udp_netif_ip_addr_changed+0x4e>
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d017      	beq.n	800b4b6 <udp_netif_ip_addr_changed+0x4e>
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d013      	beq.n	800b4b6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b48e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c4 <udp_netif_ip_addr_changed+0x5c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	e00c      	b.n	800b4b0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d103      	bne.n	800b4aa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1ef      	bne.n	800b496 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	200082e0 	.word	0x200082e0

0800b4c8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b4d0:	4915      	ldr	r1, [pc, #84]	@ (800b528 <etharp_free_entry+0x60>)
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	4413      	add	r3, r2
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	440b      	add	r3, r1
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d013      	beq.n	800b50c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b4e4:	4910      	ldr	r1, [pc, #64]	@ (800b528 <etharp_free_entry+0x60>)
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	4413      	add	r3, r2
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	440b      	add	r3, r1
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fa f8fd 	bl	80056f4 <pbuf_free>
    arp_table[i].q = NULL;
 800b4fa:	490b      	ldr	r1, [pc, #44]	@ (800b528 <etharp_free_entry+0x60>)
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	4613      	mov	r3, r2
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	4413      	add	r3, r2
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	440b      	add	r3, r1
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b50c:	4906      	ldr	r1, [pc, #24]	@ (800b528 <etharp_free_entry+0x60>)
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	4613      	mov	r3, r2
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	4413      	add	r3, r2
 800b516:	00db      	lsls	r3, r3, #3
 800b518:	440b      	add	r3, r1
 800b51a:	3314      	adds	r3, #20
 800b51c:	2200      	movs	r2, #0
 800b51e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	200082e4 	.word	0x200082e4

0800b52c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b532:	2300      	movs	r3, #0
 800b534:	607b      	str	r3, [r7, #4]
 800b536:	e096      	b.n	800b666 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b538:	494f      	ldr	r1, [pc, #316]	@ (800b678 <etharp_tmr+0x14c>)
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	4613      	mov	r3, r2
 800b53e:	005b      	lsls	r3, r3, #1
 800b540:	4413      	add	r3, r2
 800b542:	00db      	lsls	r3, r3, #3
 800b544:	440b      	add	r3, r1
 800b546:	3314      	adds	r3, #20
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f000 8086 	beq.w	800b660 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b554:	4948      	ldr	r1, [pc, #288]	@ (800b678 <etharp_tmr+0x14c>)
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	4613      	mov	r3, r2
 800b55a:	005b      	lsls	r3, r3, #1
 800b55c:	4413      	add	r3, r2
 800b55e:	00db      	lsls	r3, r3, #3
 800b560:	440b      	add	r3, r1
 800b562:	3312      	adds	r3, #18
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	3301      	adds	r3, #1
 800b568:	b298      	uxth	r0, r3
 800b56a:	4943      	ldr	r1, [pc, #268]	@ (800b678 <etharp_tmr+0x14c>)
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	4613      	mov	r3, r2
 800b570:	005b      	lsls	r3, r3, #1
 800b572:	4413      	add	r3, r2
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	440b      	add	r3, r1
 800b578:	3312      	adds	r3, #18
 800b57a:	4602      	mov	r2, r0
 800b57c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b57e:	493e      	ldr	r1, [pc, #248]	@ (800b678 <etharp_tmr+0x14c>)
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	4613      	mov	r3, r2
 800b584:	005b      	lsls	r3, r3, #1
 800b586:	4413      	add	r3, r2
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	440b      	add	r3, r1
 800b58c:	3312      	adds	r3, #18
 800b58e:	881b      	ldrh	r3, [r3, #0]
 800b590:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b594:	d215      	bcs.n	800b5c2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b596:	4938      	ldr	r1, [pc, #224]	@ (800b678 <etharp_tmr+0x14c>)
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	4613      	mov	r3, r2
 800b59c:	005b      	lsls	r3, r3, #1
 800b59e:	4413      	add	r3, r2
 800b5a0:	00db      	lsls	r3, r3, #3
 800b5a2:	440b      	add	r3, r1
 800b5a4:	3314      	adds	r3, #20
 800b5a6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d10e      	bne.n	800b5ca <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b5ac:	4932      	ldr	r1, [pc, #200]	@ (800b678 <etharp_tmr+0x14c>)
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	4413      	add	r3, r2
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	440b      	add	r3, r1
 800b5ba:	3312      	adds	r3, #18
 800b5bc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	d903      	bls.n	800b5ca <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7ff ff80 	bl	800b4c8 <etharp_free_entry>
 800b5c8:	e04a      	b.n	800b660 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b5ca:	492b      	ldr	r1, [pc, #172]	@ (800b678 <etharp_tmr+0x14c>)
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	4413      	add	r3, r2
 800b5d4:	00db      	lsls	r3, r3, #3
 800b5d6:	440b      	add	r3, r1
 800b5d8:	3314      	adds	r3, #20
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b03      	cmp	r3, #3
 800b5de:	d10a      	bne.n	800b5f6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b5e0:	4925      	ldr	r1, [pc, #148]	@ (800b678 <etharp_tmr+0x14c>)
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	4413      	add	r3, r2
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	440b      	add	r3, r1
 800b5ee:	3314      	adds	r3, #20
 800b5f0:	2204      	movs	r2, #4
 800b5f2:	701a      	strb	r2, [r3, #0]
 800b5f4:	e034      	b.n	800b660 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b5f6:	4920      	ldr	r1, [pc, #128]	@ (800b678 <etharp_tmr+0x14c>)
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	4413      	add	r3, r2
 800b600:	00db      	lsls	r3, r3, #3
 800b602:	440b      	add	r3, r1
 800b604:	3314      	adds	r3, #20
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b04      	cmp	r3, #4
 800b60a:	d10a      	bne.n	800b622 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b60c:	491a      	ldr	r1, [pc, #104]	@ (800b678 <etharp_tmr+0x14c>)
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	4613      	mov	r3, r2
 800b612:	005b      	lsls	r3, r3, #1
 800b614:	4413      	add	r3, r2
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	440b      	add	r3, r1
 800b61a:	3314      	adds	r3, #20
 800b61c:	2202      	movs	r2, #2
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	e01e      	b.n	800b660 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b622:	4915      	ldr	r1, [pc, #84]	@ (800b678 <etharp_tmr+0x14c>)
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	4613      	mov	r3, r2
 800b628:	005b      	lsls	r3, r3, #1
 800b62a:	4413      	add	r3, r2
 800b62c:	00db      	lsls	r3, r3, #3
 800b62e:	440b      	add	r3, r1
 800b630:	3314      	adds	r3, #20
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d113      	bne.n	800b660 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b638:	490f      	ldr	r1, [pc, #60]	@ (800b678 <etharp_tmr+0x14c>)
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	4613      	mov	r3, r2
 800b63e:	005b      	lsls	r3, r3, #1
 800b640:	4413      	add	r3, r2
 800b642:	00db      	lsls	r3, r3, #3
 800b644:	440b      	add	r3, r1
 800b646:	3308      	adds	r3, #8
 800b648:	6818      	ldr	r0, [r3, #0]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	4613      	mov	r3, r2
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	4413      	add	r3, r2
 800b652:	00db      	lsls	r3, r3, #3
 800b654:	4a08      	ldr	r2, [pc, #32]	@ (800b678 <etharp_tmr+0x14c>)
 800b656:	4413      	add	r3, r2
 800b658:	3304      	adds	r3, #4
 800b65a:	4619      	mov	r1, r3
 800b65c:	f000 fe6e 	bl	800c33c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	3301      	adds	r3, #1
 800b664:	607b      	str	r3, [r7, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b09      	cmp	r3, #9
 800b66a:	f77f af65 	ble.w	800b538 <etharp_tmr+0xc>
      }
    }
  }
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	200082e4 	.word	0x200082e4

0800b67c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08a      	sub	sp, #40	@ 0x28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	460b      	mov	r3, r1
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b68a:	230a      	movs	r3, #10
 800b68c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b68e:	230a      	movs	r3, #10
 800b690:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b692:	230a      	movs	r3, #10
 800b694:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b69a:	230a      	movs	r3, #10
 800b69c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	83bb      	strh	r3, [r7, #28]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	837b      	strh	r3, [r7, #26]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	843b      	strh	r3, [r7, #32]
 800b6ae:	e0ae      	b.n	800b80e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b6b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b6b4:	49a6      	ldr	r1, [pc, #664]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	005b      	lsls	r3, r3, #1
 800b6ba:	4413      	add	r3, r2
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	440b      	add	r3, r1
 800b6c0:	3314      	adds	r3, #20
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b6c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b6ca:	2b0a      	cmp	r3, #10
 800b6cc:	d105      	bne.n	800b6da <etharp_find_entry+0x5e>
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d102      	bne.n	800b6da <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b6d4:	8c3b      	ldrh	r3, [r7, #32]
 800b6d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b6d8:	e095      	b.n	800b806 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 8092 	beq.w	800b806 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d009      	beq.n	800b6fc <etharp_find_entry+0x80>
 800b6e8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d806      	bhi.n	800b6fc <etharp_find_entry+0x80>
 800b6ee:	4b99      	ldr	r3, [pc, #612]	@ (800b954 <etharp_find_entry+0x2d8>)
 800b6f0:	f240 1223 	movw	r2, #291	@ 0x123
 800b6f4:	4998      	ldr	r1, [pc, #608]	@ (800b958 <etharp_find_entry+0x2dc>)
 800b6f6:	4899      	ldr	r0, [pc, #612]	@ (800b95c <etharp_find_entry+0x2e0>)
 800b6f8:	f002 faac 	bl	800dc54 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d020      	beq.n	800b744 <etharp_find_entry+0xc8>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6819      	ldr	r1, [r3, #0]
 800b706:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b70a:	4891      	ldr	r0, [pc, #580]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b70c:	4613      	mov	r3, r2
 800b70e:	005b      	lsls	r3, r3, #1
 800b710:	4413      	add	r3, r2
 800b712:	00db      	lsls	r3, r3, #3
 800b714:	4403      	add	r3, r0
 800b716:	3304      	adds	r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4299      	cmp	r1, r3
 800b71c:	d112      	bne.n	800b744 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00c      	beq.n	800b73e <etharp_find_entry+0xc2>
 800b724:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b728:	4989      	ldr	r1, [pc, #548]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b72a:	4613      	mov	r3, r2
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	4413      	add	r3, r2
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	440b      	add	r3, r1
 800b734:	3308      	adds	r3, #8
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d102      	bne.n	800b744 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b73e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b742:	e100      	b.n	800b946 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b744:	7dfb      	ldrb	r3, [r7, #23]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d140      	bne.n	800b7cc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b74a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b74e:	4980      	ldr	r1, [pc, #512]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b750:	4613      	mov	r3, r2
 800b752:	005b      	lsls	r3, r3, #1
 800b754:	4413      	add	r3, r2
 800b756:	00db      	lsls	r3, r3, #3
 800b758:	440b      	add	r3, r1
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01a      	beq.n	800b796 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b760:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b764:	497a      	ldr	r1, [pc, #488]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b766:	4613      	mov	r3, r2
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	4413      	add	r3, r2
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	440b      	add	r3, r1
 800b770:	3312      	adds	r3, #18
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	8bba      	ldrh	r2, [r7, #28]
 800b776:	429a      	cmp	r2, r3
 800b778:	d845      	bhi.n	800b806 <etharp_find_entry+0x18a>
            old_queue = i;
 800b77a:	8c3b      	ldrh	r3, [r7, #32]
 800b77c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b77e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b782:	4973      	ldr	r1, [pc, #460]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b784:	4613      	mov	r3, r2
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	4413      	add	r3, r2
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	440b      	add	r3, r1
 800b78e:	3312      	adds	r3, #18
 800b790:	881b      	ldrh	r3, [r3, #0]
 800b792:	83bb      	strh	r3, [r7, #28]
 800b794:	e037      	b.n	800b806 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b796:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b79a:	496d      	ldr	r1, [pc, #436]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b79c:	4613      	mov	r3, r2
 800b79e:	005b      	lsls	r3, r3, #1
 800b7a0:	4413      	add	r3, r2
 800b7a2:	00db      	lsls	r3, r3, #3
 800b7a4:	440b      	add	r3, r1
 800b7a6:	3312      	adds	r3, #18
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	8b7a      	ldrh	r2, [r7, #26]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d82a      	bhi.n	800b806 <etharp_find_entry+0x18a>
            old_pending = i;
 800b7b0:	8c3b      	ldrh	r3, [r7, #32]
 800b7b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800b7b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b7b8:	4965      	ldr	r1, [pc, #404]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	4413      	add	r3, r2
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	440b      	add	r3, r1
 800b7c4:	3312      	adds	r3, #18
 800b7c6:	881b      	ldrh	r3, [r3, #0]
 800b7c8:	837b      	strh	r3, [r7, #26]
 800b7ca:	e01c      	b.n	800b806 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d919      	bls.n	800b806 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b7d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b7d6:	495e      	ldr	r1, [pc, #376]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b7d8:	4613      	mov	r3, r2
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	4413      	add	r3, r2
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	440b      	add	r3, r1
 800b7e2:	3312      	adds	r3, #18
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	8b3a      	ldrh	r2, [r7, #24]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d80c      	bhi.n	800b806 <etharp_find_entry+0x18a>
            old_stable = i;
 800b7ec:	8c3b      	ldrh	r3, [r7, #32]
 800b7ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800b7f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b7f4:	4956      	ldr	r1, [pc, #344]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	005b      	lsls	r3, r3, #1
 800b7fa:	4413      	add	r3, r2
 800b7fc:	00db      	lsls	r3, r3, #3
 800b7fe:	440b      	add	r3, r1
 800b800:	3312      	adds	r3, #18
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b806:	8c3b      	ldrh	r3, [r7, #32]
 800b808:	3301      	adds	r3, #1
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	843b      	strh	r3, [r7, #32]
 800b80e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b812:	2b09      	cmp	r3, #9
 800b814:	f77f af4c 	ble.w	800b6b0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b818:	7afb      	ldrb	r3, [r7, #11]
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d108      	bne.n	800b834 <etharp_find_entry+0x1b8>
 800b822:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b826:	2b0a      	cmp	r3, #10
 800b828:	d107      	bne.n	800b83a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b82a:	7afb      	ldrb	r3, [r7, #11]
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	d102      	bne.n	800b83a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b834:	f04f 33ff 	mov.w	r3, #4294967295
 800b838:	e085      	b.n	800b946 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b83a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b83e:	2b09      	cmp	r3, #9
 800b840:	dc02      	bgt.n	800b848 <etharp_find_entry+0x1cc>
    i = empty;
 800b842:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b844:	843b      	strh	r3, [r7, #32]
 800b846:	e039      	b.n	800b8bc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b848:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800b84c:	2b09      	cmp	r3, #9
 800b84e:	dc14      	bgt.n	800b87a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b852:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b854:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b858:	493d      	ldr	r1, [pc, #244]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b85a:	4613      	mov	r3, r2
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	4413      	add	r3, r2
 800b860:	00db      	lsls	r3, r3, #3
 800b862:	440b      	add	r3, r1
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d018      	beq.n	800b89c <etharp_find_entry+0x220>
 800b86a:	4b3a      	ldr	r3, [pc, #232]	@ (800b954 <etharp_find_entry+0x2d8>)
 800b86c:	f240 126d 	movw	r2, #365	@ 0x16d
 800b870:	493b      	ldr	r1, [pc, #236]	@ (800b960 <etharp_find_entry+0x2e4>)
 800b872:	483a      	ldr	r0, [pc, #232]	@ (800b95c <etharp_find_entry+0x2e0>)
 800b874:	f002 f9ee 	bl	800dc54 <iprintf>
 800b878:	e010      	b.n	800b89c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b87a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800b87e:	2b09      	cmp	r3, #9
 800b880:	dc02      	bgt.n	800b888 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b882:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b884:	843b      	strh	r3, [r7, #32]
 800b886:	e009      	b.n	800b89c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b888:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b88c:	2b09      	cmp	r3, #9
 800b88e:	dc02      	bgt.n	800b896 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b890:	8bfb      	ldrh	r3, [r7, #30]
 800b892:	843b      	strh	r3, [r7, #32]
 800b894:	e002      	b.n	800b89c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b896:	f04f 33ff 	mov.w	r3, #4294967295
 800b89a:	e054      	b.n	800b946 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b89c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b8a0:	2b09      	cmp	r3, #9
 800b8a2:	dd06      	ble.n	800b8b2 <etharp_find_entry+0x236>
 800b8a4:	4b2b      	ldr	r3, [pc, #172]	@ (800b954 <etharp_find_entry+0x2d8>)
 800b8a6:	f240 127f 	movw	r2, #383	@ 0x17f
 800b8aa:	492e      	ldr	r1, [pc, #184]	@ (800b964 <etharp_find_entry+0x2e8>)
 800b8ac:	482b      	ldr	r0, [pc, #172]	@ (800b95c <etharp_find_entry+0x2e0>)
 800b8ae:	f002 f9d1 	bl	800dc54 <iprintf>
    etharp_free_entry(i);
 800b8b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7ff fe06 	bl	800b4c8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b8bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b8c0:	2b09      	cmp	r3, #9
 800b8c2:	dd06      	ble.n	800b8d2 <etharp_find_entry+0x256>
 800b8c4:	4b23      	ldr	r3, [pc, #140]	@ (800b954 <etharp_find_entry+0x2d8>)
 800b8c6:	f240 1283 	movw	r2, #387	@ 0x183
 800b8ca:	4926      	ldr	r1, [pc, #152]	@ (800b964 <etharp_find_entry+0x2e8>)
 800b8cc:	4823      	ldr	r0, [pc, #140]	@ (800b95c <etharp_find_entry+0x2e0>)
 800b8ce:	f002 f9c1 	bl	800dc54 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b8d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b8d6:	491e      	ldr	r1, [pc, #120]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b8d8:	4613      	mov	r3, r2
 800b8da:	005b      	lsls	r3, r3, #1
 800b8dc:	4413      	add	r3, r2
 800b8de:	00db      	lsls	r3, r3, #3
 800b8e0:	440b      	add	r3, r1
 800b8e2:	3314      	adds	r3, #20
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d006      	beq.n	800b8f8 <etharp_find_entry+0x27c>
 800b8ea:	4b1a      	ldr	r3, [pc, #104]	@ (800b954 <etharp_find_entry+0x2d8>)
 800b8ec:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800b8f0:	491d      	ldr	r1, [pc, #116]	@ (800b968 <etharp_find_entry+0x2ec>)
 800b8f2:	481a      	ldr	r0, [pc, #104]	@ (800b95c <etharp_find_entry+0x2e0>)
 800b8f4:	f002 f9ae 	bl	800dc54 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00b      	beq.n	800b916 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b8fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6819      	ldr	r1, [r3, #0]
 800b906:	4812      	ldr	r0, [pc, #72]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b908:	4613      	mov	r3, r2
 800b90a:	005b      	lsls	r3, r3, #1
 800b90c:	4413      	add	r3, r2
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	4403      	add	r3, r0
 800b912:	3304      	adds	r3, #4
 800b914:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b916:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b91a:	490d      	ldr	r1, [pc, #52]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b91c:	4613      	mov	r3, r2
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	4413      	add	r3, r2
 800b922:	00db      	lsls	r3, r3, #3
 800b924:	440b      	add	r3, r1
 800b926:	3312      	adds	r3, #18
 800b928:	2200      	movs	r2, #0
 800b92a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b92c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b930:	4907      	ldr	r1, [pc, #28]	@ (800b950 <etharp_find_entry+0x2d4>)
 800b932:	4613      	mov	r3, r2
 800b934:	005b      	lsls	r3, r3, #1
 800b936:	4413      	add	r3, r2
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	440b      	add	r3, r1
 800b93c:	3308      	adds	r3, #8
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b942:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3728      	adds	r7, #40	@ 0x28
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	200082e4 	.word	0x200082e4
 800b954:	08010d98 	.word	0x08010d98
 800b958:	08010dd0 	.word	0x08010dd0
 800b95c:	08010e10 	.word	0x08010e10
 800b960:	08010e38 	.word	0x08010e38
 800b964:	08010e50 	.word	0x08010e50
 800b968:	08010e64 	.word	0x08010e64

0800b96c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b088      	sub	sp, #32
 800b970:	af02      	add	r7, sp, #8
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
 800b978:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b980:	2b06      	cmp	r3, #6
 800b982:	d006      	beq.n	800b992 <etharp_update_arp_entry+0x26>
 800b984:	4b48      	ldr	r3, [pc, #288]	@ (800baa8 <etharp_update_arp_entry+0x13c>)
 800b986:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800b98a:	4948      	ldr	r1, [pc, #288]	@ (800baac <etharp_update_arp_entry+0x140>)
 800b98c:	4848      	ldr	r0, [pc, #288]	@ (800bab0 <etharp_update_arp_entry+0x144>)
 800b98e:	f002 f961 	bl	800dc54 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d012      	beq.n	800b9be <etharp_update_arp_entry+0x52>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00e      	beq.n	800b9be <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68f9      	ldr	r1, [r7, #12]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f001 f8fe 	bl	800cba8 <ip4_addr_isbroadcast_u32>
 800b9ac:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d105      	bne.n	800b9be <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b9ba:	2be0      	cmp	r3, #224	@ 0xe0
 800b9bc:	d102      	bne.n	800b9c4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b9be:	f06f 030f 	mvn.w	r3, #15
 800b9c2:	e06c      	b.n	800ba9e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	68b8      	ldr	r0, [r7, #8]
 800b9cc:	f7ff fe56 	bl	800b67c <etharp_find_entry>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b9d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	da02      	bge.n	800b9e2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b9dc:	8afb      	ldrh	r3, [r7, #22]
 800b9de:	b25b      	sxtb	r3, r3
 800b9e0:	e05d      	b.n	800ba9e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b9e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b9e6:	4933      	ldr	r1, [pc, #204]	@ (800bab4 <etharp_update_arp_entry+0x148>)
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	4413      	add	r3, r2
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	440b      	add	r3, r1
 800b9f2:	3314      	adds	r3, #20
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b9f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b9fc:	492d      	ldr	r1, [pc, #180]	@ (800bab4 <etharp_update_arp_entry+0x148>)
 800b9fe:	4613      	mov	r3, r2
 800ba00:	005b      	lsls	r3, r3, #1
 800ba02:	4413      	add	r3, r2
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	440b      	add	r3, r1
 800ba08:	3308      	adds	r3, #8
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ba0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ba12:	4613      	mov	r3, r2
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	4413      	add	r3, r2
 800ba18:	00db      	lsls	r3, r3, #3
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	4a25      	ldr	r2, [pc, #148]	@ (800bab4 <etharp_update_arp_entry+0x148>)
 800ba1e:	4413      	add	r3, r2
 800ba20:	3304      	adds	r3, #4
 800ba22:	2206      	movs	r2, #6
 800ba24:	6879      	ldr	r1, [r7, #4]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f002 f9ef 	bl	800de0a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ba2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ba30:	4920      	ldr	r1, [pc, #128]	@ (800bab4 <etharp_update_arp_entry+0x148>)
 800ba32:	4613      	mov	r3, r2
 800ba34:	005b      	lsls	r3, r3, #1
 800ba36:	4413      	add	r3, r2
 800ba38:	00db      	lsls	r3, r3, #3
 800ba3a:	440b      	add	r3, r1
 800ba3c:	3312      	adds	r3, #18
 800ba3e:	2200      	movs	r2, #0
 800ba40:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ba42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ba46:	491b      	ldr	r1, [pc, #108]	@ (800bab4 <etharp_update_arp_entry+0x148>)
 800ba48:	4613      	mov	r3, r2
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	4413      	add	r3, r2
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	440b      	add	r3, r1
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d021      	beq.n	800ba9c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ba58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ba5c:	4915      	ldr	r1, [pc, #84]	@ (800bab4 <etharp_update_arp_entry+0x148>)
 800ba5e:	4613      	mov	r3, r2
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	4413      	add	r3, r2
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	440b      	add	r3, r1
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ba6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ba70:	4910      	ldr	r1, [pc, #64]	@ (800bab4 <etharp_update_arp_entry+0x148>)
 800ba72:	4613      	mov	r3, r2
 800ba74:	005b      	lsls	r3, r3, #1
 800ba76:	4413      	add	r3, r2
 800ba78:	00db      	lsls	r3, r3, #3
 800ba7a:	440b      	add	r3, r1
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ba86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6939      	ldr	r1, [r7, #16]
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f001 ff97 	bl	800d9c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ba96:	6938      	ldr	r0, [r7, #16]
 800ba98:	f7f9 fe2c 	bl	80056f4 <pbuf_free>
  }
  return ERR_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	08010d98 	.word	0x08010d98
 800baac:	08010e90 	.word	0x08010e90
 800bab0:	08010e10 	.word	0x08010e10
 800bab4:	200082e4 	.word	0x200082e4

0800bab8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bac0:	2300      	movs	r3, #0
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	e01e      	b.n	800bb04 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800bac6:	4913      	ldr	r1, [pc, #76]	@ (800bb14 <etharp_cleanup_netif+0x5c>)
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	4613      	mov	r3, r2
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	4413      	add	r3, r2
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	440b      	add	r3, r1
 800bad4:	3314      	adds	r3, #20
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bada:	7afb      	ldrb	r3, [r7, #11]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00e      	beq.n	800bafe <etharp_cleanup_netif+0x46>
 800bae0:	490c      	ldr	r1, [pc, #48]	@ (800bb14 <etharp_cleanup_netif+0x5c>)
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	4613      	mov	r3, r2
 800bae6:	005b      	lsls	r3, r3, #1
 800bae8:	4413      	add	r3, r2
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	440b      	add	r3, r1
 800baee:	3308      	adds	r3, #8
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d102      	bne.n	800bafe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f7ff fce5 	bl	800b4c8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3301      	adds	r3, #1
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	dddd      	ble.n	800bac6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800bb0a:	bf00      	nop
 800bb0c:	bf00      	nop
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	200082e4 	.word	0x200082e4

0800bb18 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bb18:	b5b0      	push	{r4, r5, r7, lr}
 800bb1a:	b08a      	sub	sp, #40	@ 0x28
 800bb1c:	af04      	add	r7, sp, #16
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d107      	bne.n	800bb38 <etharp_input+0x20>
 800bb28:	4b3d      	ldr	r3, [pc, #244]	@ (800bc20 <etharp_input+0x108>)
 800bb2a:	f240 228a 	movw	r2, #650	@ 0x28a
 800bb2e:	493d      	ldr	r1, [pc, #244]	@ (800bc24 <etharp_input+0x10c>)
 800bb30:	483d      	ldr	r0, [pc, #244]	@ (800bc28 <etharp_input+0x110>)
 800bb32:	f002 f88f 	bl	800dc54 <iprintf>
 800bb36:	e06f      	b.n	800bc18 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	881b      	ldrh	r3, [r3, #0]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb48:	d10c      	bne.n	800bb64 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bb4e:	2b06      	cmp	r3, #6
 800bb50:	d108      	bne.n	800bb64 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	d104      	bne.n	800bb64 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	885b      	ldrh	r3, [r3, #2]
 800bb5e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bb60:	2b08      	cmp	r3, #8
 800bb62:	d003      	beq.n	800bb6c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7f9 fdc5 	bl	80056f4 <pbuf_free>
    return;
 800bb6a:	e055      	b.n	800bc18 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	330e      	adds	r3, #14
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	3318      	adds	r3, #24
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	3304      	adds	r3, #4
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d102      	bne.n	800bb8c <etharp_input+0x74>
    for_us = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	75fb      	strb	r3, [r7, #23]
 800bb8a:	e009      	b.n	800bba0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	3304      	adds	r3, #4
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	bf0c      	ite	eq
 800bb98:	2301      	moveq	r3, #1
 800bb9a:	2300      	movne	r3, #0
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	f103 0208 	add.w	r2, r3, #8
 800bba6:	7dfb      	ldrb	r3, [r7, #23]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d001      	beq.n	800bbb0 <etharp_input+0x98>
 800bbac:	2301      	movs	r3, #1
 800bbae:	e000      	b.n	800bbb2 <etharp_input+0x9a>
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	f107 010c 	add.w	r1, r7, #12
 800bbb6:	6838      	ldr	r0, [r7, #0]
 800bbb8:	f7ff fed8 	bl	800b96c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	88db      	ldrh	r3, [r3, #6]
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbc6:	d003      	beq.n	800bbd0 <etharp_input+0xb8>
 800bbc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbcc:	d01e      	beq.n	800bc0c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800bbce:	e020      	b.n	800bc12 <etharp_input+0xfa>
      if (for_us) {
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d01c      	beq.n	800bc10 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	3208      	adds	r2, #8
        etharp_raw(netif,
 800bbf0:	2102      	movs	r1, #2
 800bbf2:	9103      	str	r1, [sp, #12]
 800bbf4:	f107 010c 	add.w	r1, r7, #12
 800bbf8:	9102      	str	r1, [sp, #8]
 800bbfa:	9201      	str	r2, [sp, #4]
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	462b      	mov	r3, r5
 800bc00:	4622      	mov	r2, r4
 800bc02:	4601      	mov	r1, r0
 800bc04:	6838      	ldr	r0, [r7, #0]
 800bc06:	f000 faeb 	bl	800c1e0 <etharp_raw>
      break;
 800bc0a:	e001      	b.n	800bc10 <etharp_input+0xf8>
      break;
 800bc0c:	bf00      	nop
 800bc0e:	e000      	b.n	800bc12 <etharp_input+0xfa>
      break;
 800bc10:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7f9 fd6e 	bl	80056f4 <pbuf_free>
}
 800bc18:	3718      	adds	r7, #24
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	08010d98 	.word	0x08010d98
 800bc24:	08010ee8 	.word	0x08010ee8
 800bc28:	08010e10 	.word	0x08010e10

0800bc2c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	af02      	add	r7, sp, #8
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	4613      	mov	r3, r2
 800bc38:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bc3a:	79fa      	ldrb	r2, [r7, #7]
 800bc3c:	4944      	ldr	r1, [pc, #272]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bc3e:	4613      	mov	r3, r2
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	4413      	add	r3, r2
 800bc44:	00db      	lsls	r3, r3, #3
 800bc46:	440b      	add	r3, r1
 800bc48:	3314      	adds	r3, #20
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d806      	bhi.n	800bc5e <etharp_output_to_arp_index+0x32>
 800bc50:	4b40      	ldr	r3, [pc, #256]	@ (800bd54 <etharp_output_to_arp_index+0x128>)
 800bc52:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800bc56:	4940      	ldr	r1, [pc, #256]	@ (800bd58 <etharp_output_to_arp_index+0x12c>)
 800bc58:	4840      	ldr	r0, [pc, #256]	@ (800bd5c <etharp_output_to_arp_index+0x130>)
 800bc5a:	f001 fffb 	bl	800dc54 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bc5e:	79fa      	ldrb	r2, [r7, #7]
 800bc60:	493b      	ldr	r1, [pc, #236]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bc62:	4613      	mov	r3, r2
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	4413      	add	r3, r2
 800bc68:	00db      	lsls	r3, r3, #3
 800bc6a:	440b      	add	r3, r1
 800bc6c:	3314      	adds	r3, #20
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d153      	bne.n	800bd1c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800bc74:	79fa      	ldrb	r2, [r7, #7]
 800bc76:	4936      	ldr	r1, [pc, #216]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bc78:	4613      	mov	r3, r2
 800bc7a:	005b      	lsls	r3, r3, #1
 800bc7c:	4413      	add	r3, r2
 800bc7e:	00db      	lsls	r3, r3, #3
 800bc80:	440b      	add	r3, r1
 800bc82:	3312      	adds	r3, #18
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800bc8a:	d919      	bls.n	800bcc0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800bc8c:	79fa      	ldrb	r2, [r7, #7]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	4413      	add	r3, r2
 800bc94:	00db      	lsls	r3, r3, #3
 800bc96:	4a2e      	ldr	r2, [pc, #184]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bc98:	4413      	add	r3, r2
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f000 fb4c 	bl	800c33c <etharp_request>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d138      	bne.n	800bd1c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bcaa:	79fa      	ldrb	r2, [r7, #7]
 800bcac:	4928      	ldr	r1, [pc, #160]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bcae:	4613      	mov	r3, r2
 800bcb0:	005b      	lsls	r3, r3, #1
 800bcb2:	4413      	add	r3, r2
 800bcb4:	00db      	lsls	r3, r3, #3
 800bcb6:	440b      	add	r3, r1
 800bcb8:	3314      	adds	r3, #20
 800bcba:	2203      	movs	r2, #3
 800bcbc:	701a      	strb	r2, [r3, #0]
 800bcbe:	e02d      	b.n	800bd1c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800bcc0:	79fa      	ldrb	r2, [r7, #7]
 800bcc2:	4923      	ldr	r1, [pc, #140]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	4413      	add	r3, r2
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	440b      	add	r3, r1
 800bcce:	3312      	adds	r3, #18
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800bcd6:	d321      	bcc.n	800bd1c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800bcd8:	79fa      	ldrb	r2, [r7, #7]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	005b      	lsls	r3, r3, #1
 800bcde:	4413      	add	r3, r2
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	4a1b      	ldr	r2, [pc, #108]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bce4:	4413      	add	r3, r2
 800bce6:	1d19      	adds	r1, r3, #4
 800bce8:	79fa      	ldrb	r2, [r7, #7]
 800bcea:	4613      	mov	r3, r2
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	3308      	adds	r3, #8
 800bcf4:	4a16      	ldr	r2, [pc, #88]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f000 fafb 	bl	800c2f8 <etharp_request_dst>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d109      	bne.n	800bd1c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bd08:	79fa      	ldrb	r2, [r7, #7]
 800bd0a:	4911      	ldr	r1, [pc, #68]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	4413      	add	r3, r2
 800bd12:	00db      	lsls	r3, r3, #3
 800bd14:	440b      	add	r3, r1
 800bd16:	3314      	adds	r3, #20
 800bd18:	2203      	movs	r2, #3
 800bd1a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800bd22:	79fa      	ldrb	r2, [r7, #7]
 800bd24:	4613      	mov	r3, r2
 800bd26:	005b      	lsls	r3, r3, #1
 800bd28:	4413      	add	r3, r2
 800bd2a:	00db      	lsls	r3, r3, #3
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	4a08      	ldr	r2, [pc, #32]	@ (800bd50 <etharp_output_to_arp_index+0x124>)
 800bd30:	4413      	add	r3, r2
 800bd32:	3304      	adds	r3, #4
 800bd34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd38:	9200      	str	r2, [sp, #0]
 800bd3a:	460a      	mov	r2, r1
 800bd3c:	68b9      	ldr	r1, [r7, #8]
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f001 fe40 	bl	800d9c4 <ethernet_output>
 800bd44:	4603      	mov	r3, r0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	200082e4 	.word	0x200082e4
 800bd54:	08010d98 	.word	0x08010d98
 800bd58:	08010f08 	.word	0x08010f08
 800bd5c:	08010e10 	.word	0x08010e10

0800bd60 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08a      	sub	sp, #40	@ 0x28
 800bd64:	af02      	add	r7, sp, #8
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d106      	bne.n	800bd84 <etharp_output+0x24>
 800bd76:	4b73      	ldr	r3, [pc, #460]	@ (800bf44 <etharp_output+0x1e4>)
 800bd78:	f240 321e 	movw	r2, #798	@ 0x31e
 800bd7c:	4972      	ldr	r1, [pc, #456]	@ (800bf48 <etharp_output+0x1e8>)
 800bd7e:	4873      	ldr	r0, [pc, #460]	@ (800bf4c <etharp_output+0x1ec>)
 800bd80:	f001 ff68 	bl	800dc54 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d106      	bne.n	800bd98 <etharp_output+0x38>
 800bd8a:	4b6e      	ldr	r3, [pc, #440]	@ (800bf44 <etharp_output+0x1e4>)
 800bd8c:	f240 321f 	movw	r2, #799	@ 0x31f
 800bd90:	496f      	ldr	r1, [pc, #444]	@ (800bf50 <etharp_output+0x1f0>)
 800bd92:	486e      	ldr	r0, [pc, #440]	@ (800bf4c <etharp_output+0x1ec>)
 800bd94:	f001 ff5e 	bl	800dc54 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d106      	bne.n	800bdac <etharp_output+0x4c>
 800bd9e:	4b69      	ldr	r3, [pc, #420]	@ (800bf44 <etharp_output+0x1e4>)
 800bda0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800bda4:	496b      	ldr	r1, [pc, #428]	@ (800bf54 <etharp_output+0x1f4>)
 800bda6:	4869      	ldr	r0, [pc, #420]	@ (800bf4c <etharp_output+0x1ec>)
 800bda8:	f001 ff54 	bl	800dc54 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68f9      	ldr	r1, [r7, #12]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 fef8 	bl	800cba8 <ip4_addr_isbroadcast_u32>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800bdbe:	4b66      	ldr	r3, [pc, #408]	@ (800bf58 <etharp_output+0x1f8>)
 800bdc0:	61fb      	str	r3, [r7, #28]
 800bdc2:	e0af      	b.n	800bf24 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bdcc:	2be0      	cmp	r3, #224	@ 0xe0
 800bdce:	d118      	bne.n	800be02 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bdd8:	235e      	movs	r3, #94	@ 0x5e
 800bdda:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	3301      	adds	r3, #1
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	3302      	adds	r3, #2
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	3303      	adds	r3, #3
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800bdfa:	f107 0310 	add.w	r3, r7, #16
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	e090      	b.n	800bf24 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3304      	adds	r3, #4
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	405a      	eors	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3308      	adds	r3, #8
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4013      	ands	r3, r2
 800be16:	2b00      	cmp	r3, #0
 800be18:	d012      	beq.n	800be40 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800be20:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800be24:	4293      	cmp	r3, r2
 800be26:	d00b      	beq.n	800be40 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	330c      	adds	r3, #12
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	330c      	adds	r3, #12
 800be36:	61bb      	str	r3, [r7, #24]
 800be38:	e002      	b.n	800be40 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800be3a:	f06f 0303 	mvn.w	r3, #3
 800be3e:	e07d      	b.n	800bf3c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800be40:	4b46      	ldr	r3, [pc, #280]	@ (800bf5c <etharp_output+0x1fc>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	4619      	mov	r1, r3
 800be46:	4a46      	ldr	r2, [pc, #280]	@ (800bf60 <etharp_output+0x200>)
 800be48:	460b      	mov	r3, r1
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	440b      	add	r3, r1
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	4413      	add	r3, r2
 800be52:	3314      	adds	r3, #20
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d925      	bls.n	800bea6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800be5a:	4b40      	ldr	r3, [pc, #256]	@ (800bf5c <etharp_output+0x1fc>)
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	4619      	mov	r1, r3
 800be60:	4a3f      	ldr	r2, [pc, #252]	@ (800bf60 <etharp_output+0x200>)
 800be62:	460b      	mov	r3, r1
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	440b      	add	r3, r1
 800be68:	00db      	lsls	r3, r3, #3
 800be6a:	4413      	add	r3, r2
 800be6c:	3308      	adds	r3, #8
 800be6e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	429a      	cmp	r2, r3
 800be74:	d117      	bne.n	800bea6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	4b38      	ldr	r3, [pc, #224]	@ (800bf5c <etharp_output+0x1fc>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	4618      	mov	r0, r3
 800be80:	4937      	ldr	r1, [pc, #220]	@ (800bf60 <etharp_output+0x200>)
 800be82:	4603      	mov	r3, r0
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	4403      	add	r3, r0
 800be88:	00db      	lsls	r3, r3, #3
 800be8a:	440b      	add	r3, r1
 800be8c:	3304      	adds	r3, #4
 800be8e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800be90:	429a      	cmp	r2, r3
 800be92:	d108      	bne.n	800bea6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800be94:	4b31      	ldr	r3, [pc, #196]	@ (800bf5c <etharp_output+0x1fc>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	461a      	mov	r2, r3
 800be9a:	68b9      	ldr	r1, [r7, #8]
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f7ff fec5 	bl	800bc2c <etharp_output_to_arp_index>
 800bea2:	4603      	mov	r3, r0
 800bea4:	e04a      	b.n	800bf3c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bea6:	2300      	movs	r3, #0
 800bea8:	75fb      	strb	r3, [r7, #23]
 800beaa:	e031      	b.n	800bf10 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800beac:	7dfa      	ldrb	r2, [r7, #23]
 800beae:	492c      	ldr	r1, [pc, #176]	@ (800bf60 <etharp_output+0x200>)
 800beb0:	4613      	mov	r3, r2
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	4413      	add	r3, r2
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	440b      	add	r3, r1
 800beba:	3314      	adds	r3, #20
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d923      	bls.n	800bf0a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800bec2:	7dfa      	ldrb	r2, [r7, #23]
 800bec4:	4926      	ldr	r1, [pc, #152]	@ (800bf60 <etharp_output+0x200>)
 800bec6:	4613      	mov	r3, r2
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	4413      	add	r3, r2
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	440b      	add	r3, r1
 800bed0:	3308      	adds	r3, #8
 800bed2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d117      	bne.n	800bf0a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	6819      	ldr	r1, [r3, #0]
 800bede:	7dfa      	ldrb	r2, [r7, #23]
 800bee0:	481f      	ldr	r0, [pc, #124]	@ (800bf60 <etharp_output+0x200>)
 800bee2:	4613      	mov	r3, r2
 800bee4:	005b      	lsls	r3, r3, #1
 800bee6:	4413      	add	r3, r2
 800bee8:	00db      	lsls	r3, r3, #3
 800beea:	4403      	add	r3, r0
 800beec:	3304      	adds	r3, #4
 800beee:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800bef0:	4299      	cmp	r1, r3
 800bef2:	d10a      	bne.n	800bf0a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800bef4:	4a19      	ldr	r2, [pc, #100]	@ (800bf5c <etharp_output+0x1fc>)
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800befa:	7dfb      	ldrb	r3, [r7, #23]
 800befc:	461a      	mov	r2, r3
 800befe:	68b9      	ldr	r1, [r7, #8]
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f7ff fe93 	bl	800bc2c <etharp_output_to_arp_index>
 800bf06:	4603      	mov	r3, r0
 800bf08:	e018      	b.n	800bf3c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	75fb      	strb	r3, [r7, #23]
 800bf10:	7dfb      	ldrb	r3, [r7, #23]
 800bf12:	2b09      	cmp	r3, #9
 800bf14:	d9ca      	bls.n	800beac <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	69b9      	ldr	r1, [r7, #24]
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f000 f822 	bl	800bf64 <etharp_query>
 800bf20:	4603      	mov	r3, r0
 800bf22:	e00b      	b.n	800bf3c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bf2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f001 fd45 	bl	800d9c4 <ethernet_output>
 800bf3a:	4603      	mov	r3, r0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3720      	adds	r7, #32
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	08010d98 	.word	0x08010d98
 800bf48:	08010ee8 	.word	0x08010ee8
 800bf4c:	08010e10 	.word	0x08010e10
 800bf50:	08010f38 	.word	0x08010f38
 800bf54:	08010ed8 	.word	0x08010ed8
 800bf58:	08011554 	.word	0x08011554
 800bf5c:	200083d4 	.word	0x200083d4
 800bf60:	200082e4 	.word	0x200082e4

0800bf64 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08c      	sub	sp, #48	@ 0x30
 800bf68:	af02      	add	r7, sp, #8
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3326      	adds	r3, #38	@ 0x26
 800bf74:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bf76:	23ff      	movs	r3, #255	@ 0xff
 800bf78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68f9      	ldr	r1, [r7, #12]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f000 fe0e 	bl	800cba8 <ip4_addr_isbroadcast_u32>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10c      	bne.n	800bfac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf9a:	2be0      	cmp	r3, #224	@ 0xe0
 800bf9c:	d006      	beq.n	800bfac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d102      	bne.n	800bfb2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bfac:	f06f 030f 	mvn.w	r3, #15
 800bfb0:	e101      	b.n	800c1b6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	68b8      	ldr	r0, [r7, #8]
 800bfb8:	f7ff fb60 	bl	800b67c <etharp_find_entry>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800bfc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	da02      	bge.n	800bfce <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800bfc8:	8a7b      	ldrh	r3, [r7, #18]
 800bfca:	b25b      	sxtb	r3, r3
 800bfcc:	e0f3      	b.n	800c1b6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800bfce:	8a7b      	ldrh	r3, [r7, #18]
 800bfd0:	2b7e      	cmp	r3, #126	@ 0x7e
 800bfd2:	d906      	bls.n	800bfe2 <etharp_query+0x7e>
 800bfd4:	4b7a      	ldr	r3, [pc, #488]	@ (800c1c0 <etharp_query+0x25c>)
 800bfd6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800bfda:	497a      	ldr	r1, [pc, #488]	@ (800c1c4 <etharp_query+0x260>)
 800bfdc:	487a      	ldr	r0, [pc, #488]	@ (800c1c8 <etharp_query+0x264>)
 800bfde:	f001 fe39 	bl	800dc54 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800bfe2:	8a7b      	ldrh	r3, [r7, #18]
 800bfe4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bfe6:	7c7a      	ldrb	r2, [r7, #17]
 800bfe8:	4978      	ldr	r1, [pc, #480]	@ (800c1cc <etharp_query+0x268>)
 800bfea:	4613      	mov	r3, r2
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	4413      	add	r3, r2
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	440b      	add	r3, r1
 800bff4:	3314      	adds	r3, #20
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d115      	bne.n	800c028 <etharp_query+0xc4>
    is_new_entry = 1;
 800bffc:	2301      	movs	r3, #1
 800bffe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c000:	7c7a      	ldrb	r2, [r7, #17]
 800c002:	4972      	ldr	r1, [pc, #456]	@ (800c1cc <etharp_query+0x268>)
 800c004:	4613      	mov	r3, r2
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	4413      	add	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	440b      	add	r3, r1
 800c00e:	3314      	adds	r3, #20
 800c010:	2201      	movs	r2, #1
 800c012:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c014:	7c7a      	ldrb	r2, [r7, #17]
 800c016:	496d      	ldr	r1, [pc, #436]	@ (800c1cc <etharp_query+0x268>)
 800c018:	4613      	mov	r3, r2
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	4413      	add	r3, r2
 800c01e:	00db      	lsls	r3, r3, #3
 800c020:	440b      	add	r3, r1
 800c022:	3308      	adds	r3, #8
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c028:	7c7a      	ldrb	r2, [r7, #17]
 800c02a:	4968      	ldr	r1, [pc, #416]	@ (800c1cc <etharp_query+0x268>)
 800c02c:	4613      	mov	r3, r2
 800c02e:	005b      	lsls	r3, r3, #1
 800c030:	4413      	add	r3, r2
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	440b      	add	r3, r1
 800c036:	3314      	adds	r3, #20
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d011      	beq.n	800c062 <etharp_query+0xfe>
 800c03e:	7c7a      	ldrb	r2, [r7, #17]
 800c040:	4962      	ldr	r1, [pc, #392]	@ (800c1cc <etharp_query+0x268>)
 800c042:	4613      	mov	r3, r2
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	4413      	add	r3, r2
 800c048:	00db      	lsls	r3, r3, #3
 800c04a:	440b      	add	r3, r1
 800c04c:	3314      	adds	r3, #20
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d806      	bhi.n	800c062 <etharp_query+0xfe>
 800c054:	4b5a      	ldr	r3, [pc, #360]	@ (800c1c0 <etharp_query+0x25c>)
 800c056:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800c05a:	495d      	ldr	r1, [pc, #372]	@ (800c1d0 <etharp_query+0x26c>)
 800c05c:	485a      	ldr	r0, [pc, #360]	@ (800c1c8 <etharp_query+0x264>)
 800c05e:	f001 fdf9 	bl	800dc54 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d102      	bne.n	800c06e <etharp_query+0x10a>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10c      	bne.n	800c088 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 f963 	bl	800c33c <etharp_request>
 800c076:	4603      	mov	r3, r0
 800c078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <etharp_query+0x124>
      return result;
 800c082:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c086:	e096      	b.n	800c1b6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d106      	bne.n	800c09c <etharp_query+0x138>
 800c08e:	4b4c      	ldr	r3, [pc, #304]	@ (800c1c0 <etharp_query+0x25c>)
 800c090:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800c094:	494f      	ldr	r1, [pc, #316]	@ (800c1d4 <etharp_query+0x270>)
 800c096:	484c      	ldr	r0, [pc, #304]	@ (800c1c8 <etharp_query+0x264>)
 800c098:	f001 fddc 	bl	800dc54 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c09c:	7c7a      	ldrb	r2, [r7, #17]
 800c09e:	494b      	ldr	r1, [pc, #300]	@ (800c1cc <etharp_query+0x268>)
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	4413      	add	r3, r2
 800c0a6:	00db      	lsls	r3, r3, #3
 800c0a8:	440b      	add	r3, r1
 800c0aa:	3314      	adds	r3, #20
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d917      	bls.n	800c0e2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c0b2:	4a49      	ldr	r2, [pc, #292]	@ (800c1d8 <etharp_query+0x274>)
 800c0b4:	7c7b      	ldrb	r3, [r7, #17]
 800c0b6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c0b8:	7c7a      	ldrb	r2, [r7, #17]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	005b      	lsls	r3, r3, #1
 800c0be:	4413      	add	r3, r2
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	4a41      	ldr	r2, [pc, #260]	@ (800c1cc <etharp_query+0x268>)
 800c0c6:	4413      	add	r3, r2
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0ce:	9200      	str	r2, [sp, #0]
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f001 fc75 	bl	800d9c4 <ethernet_output>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c0e0:	e067      	b.n	800c1b2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c0e2:	7c7a      	ldrb	r2, [r7, #17]
 800c0e4:	4939      	ldr	r1, [pc, #228]	@ (800c1cc <etharp_query+0x268>)
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	4413      	add	r3, r2
 800c0ec:	00db      	lsls	r3, r3, #3
 800c0ee:	440b      	add	r3, r1
 800c0f0:	3314      	adds	r3, #20
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d15c      	bne.n	800c1b2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c100:	e01c      	b.n	800c13c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	895a      	ldrh	r2, [r3, #10]
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	891b      	ldrh	r3, [r3, #8]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d10a      	bne.n	800c124 <etharp_query+0x1c0>
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d006      	beq.n	800c124 <etharp_query+0x1c0>
 800c116:	4b2a      	ldr	r3, [pc, #168]	@ (800c1c0 <etharp_query+0x25c>)
 800c118:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800c11c:	492f      	ldr	r1, [pc, #188]	@ (800c1dc <etharp_query+0x278>)
 800c11e:	482a      	ldr	r0, [pc, #168]	@ (800c1c8 <etharp_query+0x264>)
 800c120:	f001 fd98 	bl	800dc54 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	7b1b      	ldrb	r3, [r3, #12]
 800c128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <etharp_query+0x1d2>
        copy_needed = 1;
 800c130:	2301      	movs	r3, #1
 800c132:	61bb      	str	r3, [r7, #24]
        break;
 800c134:	e005      	b.n	800c142 <etharp_query+0x1de>
      }
      p = p->next;
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1df      	bne.n	800c102 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d007      	beq.n	800c158 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800c14e:	200e      	movs	r0, #14
 800c150:	f7f9 fd2c 	bl	8005bac <pbuf_clone>
 800c154:	61f8      	str	r0, [r7, #28]
 800c156:	e004      	b.n	800c162 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c15c:	69f8      	ldr	r0, [r7, #28]
 800c15e:	f7f9 fb69 	bl	8005834 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d021      	beq.n	800c1ac <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c168:	7c7a      	ldrb	r2, [r7, #17]
 800c16a:	4918      	ldr	r1, [pc, #96]	@ (800c1cc <etharp_query+0x268>)
 800c16c:	4613      	mov	r3, r2
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	4413      	add	r3, r2
 800c172:	00db      	lsls	r3, r3, #3
 800c174:	440b      	add	r3, r1
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00a      	beq.n	800c192 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c17c:	7c7a      	ldrb	r2, [r7, #17]
 800c17e:	4913      	ldr	r1, [pc, #76]	@ (800c1cc <etharp_query+0x268>)
 800c180:	4613      	mov	r3, r2
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	4413      	add	r3, r2
 800c186:	00db      	lsls	r3, r3, #3
 800c188:	440b      	add	r3, r1
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7f9 fab1 	bl	80056f4 <pbuf_free>
      }
      arp_table[i].q = p;
 800c192:	7c7a      	ldrb	r2, [r7, #17]
 800c194:	490d      	ldr	r1, [pc, #52]	@ (800c1cc <etharp_query+0x268>)
 800c196:	4613      	mov	r3, r2
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	4413      	add	r3, r2
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	440b      	add	r3, r1
 800c1a0:	69fa      	ldr	r2, [r7, #28]
 800c1a2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c1aa:	e002      	b.n	800c1b2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c1ac:	23ff      	movs	r3, #255	@ 0xff
 800c1ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800c1b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3728      	adds	r7, #40	@ 0x28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	08010d98 	.word	0x08010d98
 800c1c4:	08010f44 	.word	0x08010f44
 800c1c8:	08010e10 	.word	0x08010e10
 800c1cc:	200082e4 	.word	0x200082e4
 800c1d0:	08010f54 	.word	0x08010f54
 800c1d4:	08010f38 	.word	0x08010f38
 800c1d8:	200083d4 	.word	0x200083d4
 800c1dc:	08010f7c 	.word	0x08010f7c

0800c1e0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08a      	sub	sp, #40	@ 0x28
 800c1e4:	af02      	add	r7, sp, #8
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
 800c1ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d106      	bne.n	800c206 <etharp_raw+0x26>
 800c1f8:	4b3a      	ldr	r3, [pc, #232]	@ (800c2e4 <etharp_raw+0x104>)
 800c1fa:	f240 4257 	movw	r2, #1111	@ 0x457
 800c1fe:	493a      	ldr	r1, [pc, #232]	@ (800c2e8 <etharp_raw+0x108>)
 800c200:	483a      	ldr	r0, [pc, #232]	@ (800c2ec <etharp_raw+0x10c>)
 800c202:	f001 fd27 	bl	800dc54 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c206:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c20a:	211c      	movs	r1, #28
 800c20c:	200e      	movs	r0, #14
 800c20e:	f7f8 ff8d 	bl	800512c <pbuf_alloc>
 800c212:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d102      	bne.n	800c220 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c21a:	f04f 33ff 	mov.w	r3, #4294967295
 800c21e:	e05d      	b.n	800c2dc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	895b      	ldrh	r3, [r3, #10]
 800c224:	2b1b      	cmp	r3, #27
 800c226:	d806      	bhi.n	800c236 <etharp_raw+0x56>
 800c228:	4b2e      	ldr	r3, [pc, #184]	@ (800c2e4 <etharp_raw+0x104>)
 800c22a:	f240 4262 	movw	r2, #1122	@ 0x462
 800c22e:	4930      	ldr	r1, [pc, #192]	@ (800c2f0 <etharp_raw+0x110>)
 800c230:	482e      	ldr	r0, [pc, #184]	@ (800c2ec <etharp_raw+0x10c>)
 800c232:	f001 fd0f 	bl	800dc54 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c23c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c23e:	4618      	mov	r0, r3
 800c240:	f7f7 fefa 	bl	8004038 <lwip_htons>
 800c244:	4603      	mov	r3, r0
 800c246:	461a      	mov	r2, r3
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c252:	2b06      	cmp	r3, #6
 800c254:	d006      	beq.n	800c264 <etharp_raw+0x84>
 800c256:	4b23      	ldr	r3, [pc, #140]	@ (800c2e4 <etharp_raw+0x104>)
 800c258:	f240 4269 	movw	r2, #1129	@ 0x469
 800c25c:	4925      	ldr	r1, [pc, #148]	@ (800c2f4 <etharp_raw+0x114>)
 800c25e:	4823      	ldr	r0, [pc, #140]	@ (800c2ec <etharp_raw+0x10c>)
 800c260:	f001 fcf8 	bl	800dc54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	3308      	adds	r3, #8
 800c268:	2206      	movs	r2, #6
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f001 fdcc 	bl	800de0a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	3312      	adds	r3, #18
 800c276:	2206      	movs	r2, #6
 800c278:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c27a:	4618      	mov	r0, r3
 800c27c:	f001 fdc5 	bl	800de0a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	330e      	adds	r3, #14
 800c284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c286:	6812      	ldr	r2, [r2, #0]
 800c288:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	3318      	adds	r3, #24
 800c28e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c290:	6812      	ldr	r2, [r2, #0]
 800c292:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	2200      	movs	r2, #0
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f042 0201 	orr.w	r2, r2, #1
 800c2a0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f042 0208 	orr.w	r2, r2, #8
 800c2aa:	709a      	strb	r2, [r3, #2]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2206      	movs	r2, #6
 800c2b4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2204      	movs	r2, #4
 800c2ba:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c2bc:	f640 0306 	movw	r3, #2054	@ 0x806
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	69b9      	ldr	r1, [r7, #24]
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f001 fb7b 	bl	800d9c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c2ce:	69b8      	ldr	r0, [r7, #24]
 800c2d0:	f7f9 fa10 	bl	80056f4 <pbuf_free>
  p = NULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c2d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3720      	adds	r7, #32
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	08010d98 	.word	0x08010d98
 800c2e8:	08010ee8 	.word	0x08010ee8
 800c2ec:	08010e10 	.word	0x08010e10
 800c2f0:	08010f98 	.word	0x08010f98
 800c2f4:	08010fcc 	.word	0x08010fcc

0800c2f8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b088      	sub	sp, #32
 800c2fc:	af04      	add	r7, sp, #16
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c314:	2201      	movs	r2, #1
 800c316:	9203      	str	r2, [sp, #12]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	9202      	str	r2, [sp, #8]
 800c31c:	4a06      	ldr	r2, [pc, #24]	@ (800c338 <etharp_request_dst+0x40>)
 800c31e:	9201      	str	r2, [sp, #4]
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	4603      	mov	r3, r0
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f7ff ff5a 	bl	800c1e0 <etharp_raw>
 800c32c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	0801155c 	.word	0x0801155c

0800c33c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c346:	4a05      	ldr	r2, [pc, #20]	@ (800c35c <etharp_request+0x20>)
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7ff ffd4 	bl	800c2f8 <etharp_request_dst>
 800c350:	4603      	mov	r3, r0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	08011554 	.word	0x08011554

0800c360 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b08e      	sub	sp, #56	@ 0x38
 800c364:	af04      	add	r7, sp, #16
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c36a:	4b79      	ldr	r3, [pc, #484]	@ (800c550 <icmp_input+0x1f0>)
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 030f 	and.w	r3, r3, #15
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c380:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c382:	2b13      	cmp	r3, #19
 800c384:	f240 80cd 	bls.w	800c522 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	895b      	ldrh	r3, [r3, #10]
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	f240 80ca 	bls.w	800c526 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c39c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f000 80b7 	beq.w	800c514 <icmp_input+0x1b4>
 800c3a6:	2b08      	cmp	r3, #8
 800c3a8:	f040 80b7 	bne.w	800c51a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c3ac:	4b69      	ldr	r3, [pc, #420]	@ (800c554 <icmp_input+0x1f4>)
 800c3ae:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c3b0:	4b67      	ldr	r3, [pc, #412]	@ (800c550 <icmp_input+0x1f0>)
 800c3b2:	695b      	ldr	r3, [r3, #20]
 800c3b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c3b8:	2be0      	cmp	r3, #224	@ 0xe0
 800c3ba:	f000 80bb 	beq.w	800c534 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c3be:	4b64      	ldr	r3, [pc, #400]	@ (800c550 <icmp_input+0x1f0>)
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	4a63      	ldr	r2, [pc, #396]	@ (800c550 <icmp_input+0x1f0>)
 800c3c4:	6812      	ldr	r2, [r2, #0]
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 fbed 	bl	800cba8 <ip4_addr_isbroadcast_u32>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f040 80b1 	bne.w	800c538 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	891b      	ldrh	r3, [r3, #8]
 800c3da:	2b07      	cmp	r3, #7
 800c3dc:	f240 80a5 	bls.w	800c52a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c3e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3e2:	330e      	adds	r3, #14
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7f9 f8ee 	bl	80055c8 <pbuf_add_header>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d04b      	beq.n	800c48a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	891a      	ldrh	r2, [r3, #8]
 800c3f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3f8:	4413      	add	r3, r2
 800c3fa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	891b      	ldrh	r3, [r3, #8]
 800c400:	8b7a      	ldrh	r2, [r7, #26]
 800c402:	429a      	cmp	r2, r3
 800c404:	f0c0 809a 	bcc.w	800c53c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c408:	8b7b      	ldrh	r3, [r7, #26]
 800c40a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c40e:	4619      	mov	r1, r3
 800c410:	200e      	movs	r0, #14
 800c412:	f7f8 fe8b 	bl	800512c <pbuf_alloc>
 800c416:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 8090 	beq.w	800c540 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	895b      	ldrh	r3, [r3, #10]
 800c424:	461a      	mov	r2, r3
 800c426:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c428:	3308      	adds	r3, #8
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d203      	bcs.n	800c436 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c42e:	6978      	ldr	r0, [r7, #20]
 800c430:	f7f9 f960 	bl	80056f4 <pbuf_free>
          goto icmperr;
 800c434:	e085      	b.n	800c542 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c43c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 fce3 	bl	800de0a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c444:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c446:	4619      	mov	r1, r3
 800c448:	6978      	ldr	r0, [r7, #20]
 800c44a:	f7f9 f8cd 	bl	80055e8 <pbuf_remove_header>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d009      	beq.n	800c468 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c454:	4b40      	ldr	r3, [pc, #256]	@ (800c558 <icmp_input+0x1f8>)
 800c456:	22b6      	movs	r2, #182	@ 0xb6
 800c458:	4940      	ldr	r1, [pc, #256]	@ (800c55c <icmp_input+0x1fc>)
 800c45a:	4841      	ldr	r0, [pc, #260]	@ (800c560 <icmp_input+0x200>)
 800c45c:	f001 fbfa 	bl	800dc54 <iprintf>
          pbuf_free(r);
 800c460:	6978      	ldr	r0, [r7, #20]
 800c462:	f7f9 f947 	bl	80056f4 <pbuf_free>
          goto icmperr;
 800c466:	e06c      	b.n	800c542 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c468:	6879      	ldr	r1, [r7, #4]
 800c46a:	6978      	ldr	r0, [r7, #20]
 800c46c:	f7f9 fa5a 	bl	8005924 <pbuf_copy>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c476:	6978      	ldr	r0, [r7, #20]
 800c478:	f7f9 f93c 	bl	80056f4 <pbuf_free>
          goto icmperr;
 800c47c:	e061      	b.n	800c542 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7f9 f938 	bl	80056f4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	607b      	str	r3, [r7, #4]
 800c488:	e00f      	b.n	800c4aa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c48a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c48c:	330e      	adds	r3, #14
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7f9 f8a9 	bl	80055e8 <pbuf_remove_header>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d006      	beq.n	800c4aa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c49c:	4b2e      	ldr	r3, [pc, #184]	@ (800c558 <icmp_input+0x1f8>)
 800c49e:	22c7      	movs	r2, #199	@ 0xc7
 800c4a0:	4930      	ldr	r1, [pc, #192]	@ (800c564 <icmp_input+0x204>)
 800c4a2:	482f      	ldr	r0, [pc, #188]	@ (800c560 <icmp_input+0x200>)
 800c4a4:	f001 fbd6 	bl	800dc54 <iprintf>
          goto icmperr;
 800c4a8:	e04b      	b.n	800c542 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c4b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7f9 f887 	bl	80055c8 <pbuf_add_header>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d12b      	bne.n	800c518 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c4ce:	4b20      	ldr	r3, [pc, #128]	@ (800c550 <icmp_input+0x1f0>)
 800c4d0:	691a      	ldr	r2, [r3, #16]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	709a      	strb	r2, [r3, #2]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	22ff      	movs	r2, #255	@ 0xff
 800c4ea:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	729a      	strb	r2, [r3, #10]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	9302      	str	r3, [sp, #8]
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	2300      	movs	r3, #0
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	23ff      	movs	r3, #255	@ 0xff
 800c504:	2200      	movs	r2, #0
 800c506:	69f9      	ldr	r1, [r7, #28]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fa75 	bl	800c9f8 <ip4_output_if>
 800c50e:	4603      	mov	r3, r0
 800c510:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c512:	e001      	b.n	800c518 <icmp_input+0x1b8>
      break;
 800c514:	bf00      	nop
 800c516:	e000      	b.n	800c51a <icmp_input+0x1ba>
      break;
 800c518:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7f9 f8ea 	bl	80056f4 <pbuf_free>
  return;
 800c520:	e013      	b.n	800c54a <icmp_input+0x1ea>
    goto lenerr;
 800c522:	bf00      	nop
 800c524:	e002      	b.n	800c52c <icmp_input+0x1cc>
    goto lenerr;
 800c526:	bf00      	nop
 800c528:	e000      	b.n	800c52c <icmp_input+0x1cc>
        goto lenerr;
 800c52a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7f9 f8e1 	bl	80056f4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c532:	e00a      	b.n	800c54a <icmp_input+0x1ea>
        goto icmperr;
 800c534:	bf00      	nop
 800c536:	e004      	b.n	800c542 <icmp_input+0x1e2>
        goto icmperr;
 800c538:	bf00      	nop
 800c53a:	e002      	b.n	800c542 <icmp_input+0x1e2>
          goto icmperr;
 800c53c:	bf00      	nop
 800c53e:	e000      	b.n	800c542 <icmp_input+0x1e2>
          goto icmperr;
 800c540:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7f9 f8d6 	bl	80056f4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c548:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c54a:	3728      	adds	r7, #40	@ 0x28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20004d14 	.word	0x20004d14
 800c554:	20004d28 	.word	0x20004d28
 800c558:	08011010 	.word	0x08011010
 800c55c:	08011048 	.word	0x08011048
 800c560:	08011080 	.word	0x08011080
 800c564:	080110a8 	.word	0x080110a8

0800c568 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	460b      	mov	r3, r1
 800c572:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c574:	78fb      	ldrb	r3, [r7, #3]
 800c576:	461a      	mov	r2, r3
 800c578:	2103      	movs	r1, #3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f814 	bl	800c5a8 <icmp_send_response>
}
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	460b      	mov	r3, r1
 800c592:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c594:	78fb      	ldrb	r3, [r7, #3]
 800c596:	461a      	mov	r2, r3
 800c598:	210b      	movs	r1, #11
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f804 	bl	800c5a8 <icmp_send_response>
}
 800c5a0:	bf00      	nop
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08c      	sub	sp, #48	@ 0x30
 800c5ac:	af04      	add	r7, sp, #16
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	70fb      	strb	r3, [r7, #3]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c5b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c5bc:	2124      	movs	r1, #36	@ 0x24
 800c5be:	2022      	movs	r0, #34	@ 0x22
 800c5c0:	f7f8 fdb4 	bl	800512c <pbuf_alloc>
 800c5c4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d04c      	beq.n	800c666 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	895b      	ldrh	r3, [r3, #10]
 800c5d0:	2b23      	cmp	r3, #35	@ 0x23
 800c5d2:	d806      	bhi.n	800c5e2 <icmp_send_response+0x3a>
 800c5d4:	4b26      	ldr	r3, [pc, #152]	@ (800c670 <icmp_send_response+0xc8>)
 800c5d6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800c5da:	4926      	ldr	r1, [pc, #152]	@ (800c674 <icmp_send_response+0xcc>)
 800c5dc:	4826      	ldr	r0, [pc, #152]	@ (800c678 <icmp_send_response+0xd0>)
 800c5de:	f001 fb39 	bl	800dc54 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	78fa      	ldrb	r2, [r7, #3]
 800c5f2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	78ba      	ldrb	r2, [r7, #2]
 800c5f8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	711a      	strb	r2, [r3, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	2200      	movs	r2, #0
 800c608:	719a      	strb	r2, [r3, #6]
 800c60a:	2200      	movs	r2, #0
 800c60c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	f103 0008 	add.w	r0, r3, #8
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	221c      	movs	r2, #28
 800c61c:	4619      	mov	r1, r3
 800c61e:	f001 fbf4 	bl	800de0a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c628:	f107 030c 	add.w	r3, r7, #12
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 f825 	bl	800c67c <ip4_route>
 800c632:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d011      	beq.n	800c65e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2200      	movs	r2, #0
 800c63e:	709a      	strb	r2, [r3, #2]
 800c640:	2200      	movs	r2, #0
 800c642:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c644:	f107 020c 	add.w	r2, r7, #12
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	9302      	str	r3, [sp, #8]
 800c64c:	2301      	movs	r3, #1
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	2300      	movs	r3, #0
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	23ff      	movs	r3, #255	@ 0xff
 800c656:	2100      	movs	r1, #0
 800c658:	69f8      	ldr	r0, [r7, #28]
 800c65a:	f000 f9cd 	bl	800c9f8 <ip4_output_if>
  }
  pbuf_free(q);
 800c65e:	69f8      	ldr	r0, [r7, #28]
 800c660:	f7f9 f848 	bl	80056f4 <pbuf_free>
 800c664:	e000      	b.n	800c668 <icmp_send_response+0xc0>
    return;
 800c666:	bf00      	nop
}
 800c668:	3720      	adds	r7, #32
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	08011010 	.word	0x08011010
 800c674:	080110dc 	.word	0x080110dc
 800c678:	08011080 	.word	0x08011080

0800c67c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c684:	4b33      	ldr	r3, [pc, #204]	@ (800c754 <ip4_route+0xd8>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	60fb      	str	r3, [r7, #12]
 800c68a:	e036      	b.n	800c6fa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c692:	f003 0301 	and.w	r3, r3, #1
 800c696:	b2db      	uxtb	r3, r3
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d02b      	beq.n	800c6f4 <ip4_route+0x78>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6a2:	089b      	lsrs	r3, r3, #2
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d022      	beq.n	800c6f4 <ip4_route+0x78>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d01d      	beq.n	800c6f4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	3304      	adds	r3, #4
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	405a      	eors	r2, r3
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	3308      	adds	r3, #8
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d101      	bne.n	800c6d4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	e038      	b.n	800c746 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d108      	bne.n	800c6f4 <ip4_route+0x78>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	330c      	adds	r3, #12
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d101      	bne.n	800c6f4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	e028      	b.n	800c746 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	60fb      	str	r3, [r7, #12]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1c5      	bne.n	800c68c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c700:	4b15      	ldr	r3, [pc, #84]	@ (800c758 <ip4_route+0xdc>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d01a      	beq.n	800c73e <ip4_route+0xc2>
 800c708:	4b13      	ldr	r3, [pc, #76]	@ (800c758 <ip4_route+0xdc>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	d012      	beq.n	800c73e <ip4_route+0xc2>
 800c718:	4b0f      	ldr	r3, [pc, #60]	@ (800c758 <ip4_route+0xdc>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c720:	f003 0304 	and.w	r3, r3, #4
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00a      	beq.n	800c73e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c728:	4b0b      	ldr	r3, [pc, #44]	@ (800c758 <ip4_route+0xdc>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3304      	adds	r3, #4
 800c72e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c730:	2b00      	cmp	r3, #0
 800c732:	d004      	beq.n	800c73e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c73c:	d101      	bne.n	800c742 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c73e:	2300      	movs	r3, #0
 800c740:	e001      	b.n	800c746 <ip4_route+0xca>
  }

  return netif_default;
 800c742:	4b05      	ldr	r3, [pc, #20]	@ (800c758 <ip4_route+0xdc>)
 800c744:	681b      	ldr	r3, [r3, #0]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	20008278 	.word	0x20008278
 800c758:	2000827c 	.word	0x2000827c

0800c75c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c76a:	f003 0301 	and.w	r3, r3, #1
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b00      	cmp	r3, #0
 800c772:	d016      	beq.n	800c7a2 <ip4_input_accept+0x46>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	3304      	adds	r3, #4
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d011      	beq.n	800c7a2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c77e:	4b0b      	ldr	r3, [pc, #44]	@ (800c7ac <ip4_input_accept+0x50>)
 800c780:	695a      	ldr	r2, [r3, #20]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	3304      	adds	r3, #4
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d008      	beq.n	800c79e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c78c:	4b07      	ldr	r3, [pc, #28]	@ (800c7ac <ip4_input_accept+0x50>)
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	6879      	ldr	r1, [r7, #4]
 800c792:	4618      	mov	r0, r3
 800c794:	f000 fa08 	bl	800cba8 <ip4_addr_isbroadcast_u32>
 800c798:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e000      	b.n	800c7a4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	20004d14 	.word	0x20004d14

0800c7b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	091b      	lsrs	r3, r3, #4
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	2b04      	cmp	r3, #4
 800c7ca:	d004      	beq.n	800c7d6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7f8 ff91 	bl	80056f4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	e107      	b.n	800c9e6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	f003 030f 	and.w	r3, r3, #15
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	885b      	ldrh	r3, [r3, #2]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7f7 fc23 	bl	8004038 <lwip_htons>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	891b      	ldrh	r3, [r3, #8]
 800c7fa:	89ba      	ldrh	r2, [r7, #12]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d204      	bcs.n	800c80a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c800:	89bb      	ldrh	r3, [r7, #12]
 800c802:	4619      	mov	r1, r3
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7f8 fdef 	bl	80053e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	895b      	ldrh	r3, [r3, #10]
 800c80e:	89fa      	ldrh	r2, [r7, #14]
 800c810:	429a      	cmp	r2, r3
 800c812:	d807      	bhi.n	800c824 <ip4_input+0x74>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	891b      	ldrh	r3, [r3, #8]
 800c818:	89ba      	ldrh	r2, [r7, #12]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d802      	bhi.n	800c824 <ip4_input+0x74>
 800c81e:	89fb      	ldrh	r3, [r7, #14]
 800c820:	2b13      	cmp	r3, #19
 800c822:	d804      	bhi.n	800c82e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7f8 ff65 	bl	80056f4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e0db      	b.n	800c9e6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	4a6f      	ldr	r2, [pc, #444]	@ (800c9f0 <ip4_input+0x240>)
 800c834:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	4a6d      	ldr	r2, [pc, #436]	@ (800c9f0 <ip4_input+0x240>)
 800c83c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c83e:	4b6c      	ldr	r3, [pc, #432]	@ (800c9f0 <ip4_input+0x240>)
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c846:	2be0      	cmp	r3, #224	@ 0xe0
 800c848:	d112      	bne.n	800c870 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c850:	f003 0301 	and.w	r3, r3, #1
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	d007      	beq.n	800c86a <ip4_input+0xba>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	3304      	adds	r3, #4
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <ip4_input+0xba>
      netif = inp;
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	613b      	str	r3, [r7, #16]
 800c868:	e02a      	b.n	800c8c0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c86a:	2300      	movs	r3, #0
 800c86c:	613b      	str	r3, [r7, #16]
 800c86e:	e027      	b.n	800c8c0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c870:	6838      	ldr	r0, [r7, #0]
 800c872:	f7ff ff73 	bl	800c75c <ip4_input_accept>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <ip4_input+0xd2>
      netif = inp;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	613b      	str	r3, [r7, #16]
 800c880:	e01e      	b.n	800c8c0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c882:	2300      	movs	r3, #0
 800c884:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c886:	4b5a      	ldr	r3, [pc, #360]	@ (800c9f0 <ip4_input+0x240>)
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c88e:	d017      	beq.n	800c8c0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c890:	4b58      	ldr	r3, [pc, #352]	@ (800c9f4 <ip4_input+0x244>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	613b      	str	r3, [r7, #16]
 800c896:	e00e      	b.n	800c8b6 <ip4_input+0x106>
          if (netif == inp) {
 800c898:	693a      	ldr	r2, [r7, #16]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d006      	beq.n	800c8ae <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c8a0:	6938      	ldr	r0, [r7, #16]
 800c8a2:	f7ff ff5b 	bl	800c75c <ip4_input_accept>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d108      	bne.n	800c8be <ip4_input+0x10e>
 800c8ac:	e000      	b.n	800c8b0 <ip4_input+0x100>
            continue;
 800c8ae:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	613b      	str	r3, [r7, #16]
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1ed      	bne.n	800c898 <ip4_input+0xe8>
 800c8bc:	e000      	b.n	800c8c0 <ip4_input+0x110>
            break;
 800c8be:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c8c0:	4b4b      	ldr	r3, [pc, #300]	@ (800c9f0 <ip4_input+0x240>)
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	6839      	ldr	r1, [r7, #0]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 f96e 	bl	800cba8 <ip4_addr_isbroadcast_u32>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d105      	bne.n	800c8de <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c8d2:	4b47      	ldr	r3, [pc, #284]	@ (800c9f0 <ip4_input+0x240>)
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c8da:	2be0      	cmp	r3, #224	@ 0xe0
 800c8dc:	d104      	bne.n	800c8e8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f7f8 ff08 	bl	80056f4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	e07e      	b.n	800c9e6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d104      	bne.n	800c8f8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7f8 ff00 	bl	80056f4 <pbuf_free>
    return ERR_OK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e076      	b.n	800c9e6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	88db      	ldrh	r3, [r3, #6]
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	461a      	mov	r2, r3
 800c900:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800c904:	4013      	ands	r3, r2
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00b      	beq.n	800c922 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fc92 	bl	800d234 <ip4_reass>
 800c910:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <ip4_input+0x16c>
      return ERR_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	e064      	b.n	800c9e6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c922:	4a33      	ldr	r2, [pc, #204]	@ (800c9f0 <ip4_input+0x240>)
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c928:	4a31      	ldr	r2, [pc, #196]	@ (800c9f0 <ip4_input+0x240>)
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c92e:	4a30      	ldr	r2, [pc, #192]	@ (800c9f0 <ip4_input+0x240>)
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	f003 030f 	and.w	r3, r3, #15
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	b2db      	uxtb	r3, r3
 800c942:	461a      	mov	r2, r3
 800c944:	4b2a      	ldr	r3, [pc, #168]	@ (800c9f0 <ip4_input+0x240>)
 800c946:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c948:	89fb      	ldrh	r3, [r7, #14]
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f7f8 fe4b 	bl	80055e8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	7a5b      	ldrb	r3, [r3, #9]
 800c956:	2b11      	cmp	r3, #17
 800c958:	d006      	beq.n	800c968 <ip4_input+0x1b8>
 800c95a:	2b11      	cmp	r3, #17
 800c95c:	dc13      	bgt.n	800c986 <ip4_input+0x1d6>
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d00c      	beq.n	800c97c <ip4_input+0x1cc>
 800c962:	2b06      	cmp	r3, #6
 800c964:	d005      	beq.n	800c972 <ip4_input+0x1c2>
 800c966:	e00e      	b.n	800c986 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c968:	6839      	ldr	r1, [r7, #0]
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7fe fc68 	bl	800b240 <udp_input>
        break;
 800c970:	e026      	b.n	800c9c0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c972:	6839      	ldr	r1, [r7, #0]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7fa fce7 	bl	8007348 <tcp_input>
        break;
 800c97a:	e021      	b.n	800c9c0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff fcee 	bl	800c360 <icmp_input>
        break;
 800c984:	e01c      	b.n	800c9c0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c986:	4b1a      	ldr	r3, [pc, #104]	@ (800c9f0 <ip4_input+0x240>)
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	6939      	ldr	r1, [r7, #16]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f90b 	bl	800cba8 <ip4_addr_isbroadcast_u32>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10f      	bne.n	800c9b8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c998:	4b15      	ldr	r3, [pc, #84]	@ (800c9f0 <ip4_input+0x240>)
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c9a0:	2be0      	cmp	r3, #224	@ 0xe0
 800c9a2:	d009      	beq.n	800c9b8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c9a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7f8 fe8f 	bl	80056ce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c9b0:	2102      	movs	r1, #2
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7ff fdd8 	bl	800c568 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7f8 fe9b 	bl	80056f4 <pbuf_free>
        break;
 800c9be:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c9c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c9f0 <ip4_input+0x240>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c9c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f0 <ip4_input+0x240>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c9cc:	4b08      	ldr	r3, [pc, #32]	@ (800c9f0 <ip4_input+0x240>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c9d2:	4b07      	ldr	r3, [pc, #28]	@ (800c9f0 <ip4_input+0x240>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c9d8:	4b05      	ldr	r3, [pc, #20]	@ (800c9f0 <ip4_input+0x240>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c9de:	4b04      	ldr	r3, [pc, #16]	@ (800c9f0 <ip4_input+0x240>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3718      	adds	r7, #24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	20004d14 	.word	0x20004d14
 800c9f4:	20008278 	.word	0x20008278

0800c9f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08a      	sub	sp, #40	@ 0x28
 800c9fc:	af04      	add	r7, sp, #16
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
 800ca04:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d009      	beq.n	800ca24 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d003      	beq.n	800ca1e <ip4_output_if+0x26>
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d102      	bne.n	800ca24 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ca1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca20:	3304      	adds	r3, #4
 800ca22:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ca24:	78fa      	ldrb	r2, [r7, #3]
 800ca26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca28:	9302      	str	r3, [sp, #8]
 800ca2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ca2e:	9301      	str	r3, [sp, #4]
 800ca30:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	4613      	mov	r3, r2
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	6979      	ldr	r1, [r7, #20]
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f000 f805 	bl	800ca4c <ip4_output_if_src>
 800ca42:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b088      	sub	sp, #32
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
 800ca58:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	7b9b      	ldrb	r3, [r3, #14]
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d006      	beq.n	800ca70 <ip4_output_if_src+0x24>
 800ca62:	4b4b      	ldr	r3, [pc, #300]	@ (800cb90 <ip4_output_if_src+0x144>)
 800ca64:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800ca68:	494a      	ldr	r1, [pc, #296]	@ (800cb94 <ip4_output_if_src+0x148>)
 800ca6a:	484b      	ldr	r0, [pc, #300]	@ (800cb98 <ip4_output_if_src+0x14c>)
 800ca6c:	f001 f8f2 	bl	800dc54 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d060      	beq.n	800cb38 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ca76:	2314      	movs	r3, #20
 800ca78:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ca7a:	2114      	movs	r1, #20
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f7f8 fda3 	bl	80055c8 <pbuf_add_header>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d002      	beq.n	800ca8e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ca88:	f06f 0301 	mvn.w	r3, #1
 800ca8c:	e07c      	b.n	800cb88 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	895b      	ldrh	r3, [r3, #10]
 800ca98:	2b13      	cmp	r3, #19
 800ca9a:	d806      	bhi.n	800caaa <ip4_output_if_src+0x5e>
 800ca9c:	4b3c      	ldr	r3, [pc, #240]	@ (800cb90 <ip4_output_if_src+0x144>)
 800ca9e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800caa2:	493e      	ldr	r1, [pc, #248]	@ (800cb9c <ip4_output_if_src+0x150>)
 800caa4:	483c      	ldr	r0, [pc, #240]	@ (800cb98 <ip4_output_if_src+0x14c>)
 800caa6:	f001 f8d5 	bl	800dc54 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	78fa      	ldrb	r2, [r7, #3]
 800caae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800cab6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cac0:	8b7b      	ldrh	r3, [r7, #26]
 800cac2:	089b      	lsrs	r3, r3, #2
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cacc:	b2da      	uxtb	r2, r3
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cad8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	891b      	ldrh	r3, [r3, #8]
 800cade:	4618      	mov	r0, r3
 800cae0:	f7f7 faaa 	bl	8004038 <lwip_htons>
 800cae4:	4603      	mov	r3, r0
 800cae6:	461a      	mov	r2, r3
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	2200      	movs	r2, #0
 800caf0:	719a      	strb	r2, [r3, #6]
 800caf2:	2200      	movs	r2, #0
 800caf4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800caf6:	4b2a      	ldr	r3, [pc, #168]	@ (800cba0 <ip4_output_if_src+0x154>)
 800caf8:	881b      	ldrh	r3, [r3, #0]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7f7 fa9c 	bl	8004038 <lwip_htons>
 800cb00:	4603      	mov	r3, r0
 800cb02:	461a      	mov	r2, r3
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cb08:	4b25      	ldr	r3, [pc, #148]	@ (800cba0 <ip4_output_if_src+0x154>)
 800cb0a:	881b      	ldrh	r3, [r3, #0]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	4b23      	ldr	r3, [pc, #140]	@ (800cba0 <ip4_output_if_src+0x154>)
 800cb12:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d104      	bne.n	800cb24 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800cb1a:	4b22      	ldr	r3, [pc, #136]	@ (800cba4 <ip4_output_if_src+0x158>)
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	60da      	str	r2, [r3, #12]
 800cb22:	e003      	b.n	800cb2c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	729a      	strb	r2, [r3, #10]
 800cb32:	2200      	movs	r2, #0
 800cb34:	72da      	strb	r2, [r3, #11]
 800cb36:	e00f      	b.n	800cb58 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	895b      	ldrh	r3, [r3, #10]
 800cb3c:	2b13      	cmp	r3, #19
 800cb3e:	d802      	bhi.n	800cb46 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cb40:	f06f 0301 	mvn.w	r3, #1
 800cb44:	e020      	b.n	800cb88 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cb52:	f107 0314 	add.w	r3, r7, #20
 800cb56:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00c      	beq.n	800cb7a <ip4_output_if_src+0x12e>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	891a      	ldrh	r2, [r3, #8]
 800cb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb66:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d906      	bls.n	800cb7a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 fd53 	bl	800d61c <ip4_frag>
 800cb76:	4603      	mov	r3, r0
 800cb78:	e006      	b.n	800cb88 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	68f9      	ldr	r1, [r7, #12]
 800cb82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cb84:	4798      	blx	r3
 800cb86:	4603      	mov	r3, r0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3720      	adds	r7, #32
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	08011108 	.word	0x08011108
 800cb94:	0801113c 	.word	0x0801113c
 800cb98:	08011148 	.word	0x08011148
 800cb9c:	08011170 	.word	0x08011170
 800cba0:	200083d6 	.word	0x200083d6
 800cba4:	08011550 	.word	0x08011550

0800cba8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbbc:	d002      	beq.n	800cbc4 <ip4_addr_isbroadcast_u32+0x1c>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e02a      	b.n	800cc1e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cbce:	f003 0302 	and.w	r3, r3, #2
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	e021      	b.n	800cc1e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	3304      	adds	r3, #4
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d101      	bne.n	800cbea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	e019      	b.n	800cc1e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	405a      	eors	r2, r3
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	3308      	adds	r3, #8
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10d      	bne.n	800cc1c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	3308      	adds	r3, #8
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	43da      	mvns	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	3308      	adds	r3, #8
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d101      	bne.n	800cc1c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e000      	b.n	800cc1e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cc1c:	2300      	movs	r3, #0
  }
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
	...

0800cc2c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cc36:	4b12      	ldr	r3, [pc, #72]	@ (800cc80 <ip_reass_tmr+0x54>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cc3c:	e018      	b.n	800cc70 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	7fdb      	ldrb	r3, [r3, #31]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00b      	beq.n	800cc5e <ip_reass_tmr+0x32>
      r->timer--;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	7fdb      	ldrb	r3, [r3, #31]
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	e008      	b.n	800cc70 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cc68:	68b9      	ldr	r1, [r7, #8]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f80a 	bl	800cc84 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1e3      	bne.n	800cc3e <ip_reass_tmr+0x12>
    }
  }
}
 800cc76:	bf00      	nop
 800cc78:	bf00      	nop
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	200083d8 	.word	0x200083d8

0800cc84 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d105      	bne.n	800cca6 <ip_reass_free_complete_datagram+0x22>
 800cc9a:	4b45      	ldr	r3, [pc, #276]	@ (800cdb0 <ip_reass_free_complete_datagram+0x12c>)
 800cc9c:	22ab      	movs	r2, #171	@ 0xab
 800cc9e:	4945      	ldr	r1, [pc, #276]	@ (800cdb4 <ip_reass_free_complete_datagram+0x130>)
 800cca0:	4845      	ldr	r0, [pc, #276]	@ (800cdb8 <ip_reass_free_complete_datagram+0x134>)
 800cca2:	f000 ffd7 	bl	800dc54 <iprintf>
  if (prev != NULL) {
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00a      	beq.n	800ccc2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d005      	beq.n	800ccc2 <ip_reass_free_complete_datagram+0x3e>
 800ccb6:	4b3e      	ldr	r3, [pc, #248]	@ (800cdb0 <ip_reass_free_complete_datagram+0x12c>)
 800ccb8:	22ad      	movs	r2, #173	@ 0xad
 800ccba:	4940      	ldr	r1, [pc, #256]	@ (800cdbc <ip_reass_free_complete_datagram+0x138>)
 800ccbc:	483e      	ldr	r0, [pc, #248]	@ (800cdb8 <ip_reass_free_complete_datagram+0x134>)
 800ccbe:	f000 ffc9 	bl	800dc54 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	889b      	ldrh	r3, [r3, #4]
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d12a      	bne.n	800cd2a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	6858      	ldr	r0, [r3, #4]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	3308      	adds	r3, #8
 800ccea:	2214      	movs	r2, #20
 800ccec:	4619      	mov	r1, r3
 800ccee:	f001 f88c 	bl	800de0a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	69b8      	ldr	r0, [r7, #24]
 800ccf6:	f7ff fc47 	bl	800c588 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ccfa:	69b8      	ldr	r0, [r7, #24]
 800ccfc:	f7f8 fd82 	bl	8005804 <pbuf_clen>
 800cd00:	4603      	mov	r3, r0
 800cd02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cd04:	8bfa      	ldrh	r2, [r7, #30]
 800cd06:	8a7b      	ldrh	r3, [r7, #18]
 800cd08:	4413      	add	r3, r2
 800cd0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd0e:	db05      	blt.n	800cd1c <ip_reass_free_complete_datagram+0x98>
 800cd10:	4b27      	ldr	r3, [pc, #156]	@ (800cdb0 <ip_reass_free_complete_datagram+0x12c>)
 800cd12:	22bc      	movs	r2, #188	@ 0xbc
 800cd14:	492a      	ldr	r1, [pc, #168]	@ (800cdc0 <ip_reass_free_complete_datagram+0x13c>)
 800cd16:	4828      	ldr	r0, [pc, #160]	@ (800cdb8 <ip_reass_free_complete_datagram+0x134>)
 800cd18:	f000 ff9c 	bl	800dc54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cd1c:	8bfa      	ldrh	r2, [r7, #30]
 800cd1e:	8a7b      	ldrh	r3, [r7, #18]
 800cd20:	4413      	add	r3, r2
 800cd22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cd24:	69b8      	ldr	r0, [r7, #24]
 800cd26:	f7f8 fce5 	bl	80056f4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cd30:	e01f      	b.n	800cd72 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f7f8 fd5e 	bl	8005804 <pbuf_clen>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cd4c:	8bfa      	ldrh	r2, [r7, #30]
 800cd4e:	8a7b      	ldrh	r3, [r7, #18]
 800cd50:	4413      	add	r3, r2
 800cd52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd56:	db05      	blt.n	800cd64 <ip_reass_free_complete_datagram+0xe0>
 800cd58:	4b15      	ldr	r3, [pc, #84]	@ (800cdb0 <ip_reass_free_complete_datagram+0x12c>)
 800cd5a:	22cc      	movs	r2, #204	@ 0xcc
 800cd5c:	4918      	ldr	r1, [pc, #96]	@ (800cdc0 <ip_reass_free_complete_datagram+0x13c>)
 800cd5e:	4816      	ldr	r0, [pc, #88]	@ (800cdb8 <ip_reass_free_complete_datagram+0x134>)
 800cd60:	f000 ff78 	bl	800dc54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cd64:	8bfa      	ldrh	r2, [r7, #30]
 800cd66:	8a7b      	ldrh	r3, [r7, #18]
 800cd68:	4413      	add	r3, r2
 800cd6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f7f8 fcc1 	bl	80056f4 <pbuf_free>
  while (p != NULL) {
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1dc      	bne.n	800cd32 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 f8c2 	bl	800cf04 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800cd80:	4b10      	ldr	r3, [pc, #64]	@ (800cdc4 <ip_reass_free_complete_datagram+0x140>)
 800cd82:	881b      	ldrh	r3, [r3, #0]
 800cd84:	8bfa      	ldrh	r2, [r7, #30]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d905      	bls.n	800cd96 <ip_reass_free_complete_datagram+0x112>
 800cd8a:	4b09      	ldr	r3, [pc, #36]	@ (800cdb0 <ip_reass_free_complete_datagram+0x12c>)
 800cd8c:	22d2      	movs	r2, #210	@ 0xd2
 800cd8e:	490e      	ldr	r1, [pc, #56]	@ (800cdc8 <ip_reass_free_complete_datagram+0x144>)
 800cd90:	4809      	ldr	r0, [pc, #36]	@ (800cdb8 <ip_reass_free_complete_datagram+0x134>)
 800cd92:	f000 ff5f 	bl	800dc54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800cd96:	4b0b      	ldr	r3, [pc, #44]	@ (800cdc4 <ip_reass_free_complete_datagram+0x140>)
 800cd98:	881a      	ldrh	r2, [r3, #0]
 800cd9a:	8bfb      	ldrh	r3, [r7, #30]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	4b08      	ldr	r3, [pc, #32]	@ (800cdc4 <ip_reass_free_complete_datagram+0x140>)
 800cda2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800cda4:	8bfb      	ldrh	r3, [r7, #30]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3720      	adds	r7, #32
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	080111a0 	.word	0x080111a0
 800cdb4:	080111dc 	.word	0x080111dc
 800cdb8:	080111e8 	.word	0x080111e8
 800cdbc:	08011210 	.word	0x08011210
 800cdc0:	08011224 	.word	0x08011224
 800cdc4:	200083dc 	.word	0x200083dc
 800cdc8:	08011244 	.word	0x08011244

0800cdcc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08a      	sub	sp, #40	@ 0x28
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800cdde:	2300      	movs	r3, #0
 800cde0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800cdea:	4b28      	ldr	r3, [pc, #160]	@ (800ce8c <ip_reass_remove_oldest_datagram+0xc0>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800cdf0:	e030      	b.n	800ce54 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf4:	695a      	ldr	r2, [r3, #20]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d10c      	bne.n	800ce18 <ip_reass_remove_oldest_datagram+0x4c>
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce00:	699a      	ldr	r2, [r3, #24]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d106      	bne.n	800ce18 <ip_reass_remove_oldest_datagram+0x4c>
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0c:	899a      	ldrh	r2, [r3, #12]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	889b      	ldrh	r3, [r3, #4]
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d014      	beq.n	800ce42 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ce1e:	6a3b      	ldr	r3, [r7, #32]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d104      	bne.n	800ce2e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce26:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	61bb      	str	r3, [r7, #24]
 800ce2c:	e009      	b.n	800ce42 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce30:	7fda      	ldrb	r2, [r3, #31]
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	7fdb      	ldrb	r3, [r3, #31]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d803      	bhi.n	800ce42 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ce42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ce54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1cb      	bne.n	800cdf2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d008      	beq.n	800ce72 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ce60:	69b9      	ldr	r1, [r7, #24]
 800ce62:	6a38      	ldr	r0, [r7, #32]
 800ce64:	f7ff ff0e 	bl	800cc84 <ip_reass_free_complete_datagram>
 800ce68:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	4413      	add	r3, r2
 800ce70:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	da02      	bge.n	800ce80 <ip_reass_remove_oldest_datagram+0xb4>
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	dcac      	bgt.n	800cdda <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ce80:	697b      	ldr	r3, [r7, #20]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3728      	adds	r7, #40	@ 0x28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	200083d8 	.word	0x200083d8

0800ce90 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ce9a:	2004      	movs	r0, #4
 800ce9c:	f7f7 fd44 	bl	8004928 <memp_malloc>
 800cea0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d110      	bne.n	800ceca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff ff8e 	bl	800cdcc <ip_reass_remove_oldest_datagram>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	dc03      	bgt.n	800cec0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ceb8:	2004      	movs	r0, #4
 800ceba:	f7f7 fd35 	bl	8004928 <memp_malloc>
 800cebe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d101      	bne.n	800ceca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	e016      	b.n	800cef8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ceca:	2220      	movs	r2, #32
 800cecc:	2100      	movs	r1, #0
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f000 ff25 	bl	800dd1e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	220f      	movs	r2, #15
 800ced8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ceda:	4b09      	ldr	r3, [pc, #36]	@ (800cf00 <ip_reass_enqueue_new_datagram+0x70>)
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cee2:	4a07      	ldr	r2, [pc, #28]	@ (800cf00 <ip_reass_enqueue_new_datagram+0x70>)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3308      	adds	r3, #8
 800ceec:	2214      	movs	r2, #20
 800ceee:	6879      	ldr	r1, [r7, #4]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 ff8a 	bl	800de0a <memcpy>
  return ipr;
 800cef6:	68fb      	ldr	r3, [r7, #12]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	200083d8 	.word	0x200083d8

0800cf04 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cf0e:	4b10      	ldr	r3, [pc, #64]	@ (800cf50 <ip_reass_dequeue_datagram+0x4c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d104      	bne.n	800cf22 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a0c      	ldr	r2, [pc, #48]	@ (800cf50 <ip_reass_dequeue_datagram+0x4c>)
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	e00d      	b.n	800cf3e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d106      	bne.n	800cf36 <ip_reass_dequeue_datagram+0x32>
 800cf28:	4b0a      	ldr	r3, [pc, #40]	@ (800cf54 <ip_reass_dequeue_datagram+0x50>)
 800cf2a:	f240 1245 	movw	r2, #325	@ 0x145
 800cf2e:	490a      	ldr	r1, [pc, #40]	@ (800cf58 <ip_reass_dequeue_datagram+0x54>)
 800cf30:	480a      	ldr	r0, [pc, #40]	@ (800cf5c <ip_reass_dequeue_datagram+0x58>)
 800cf32:	f000 fe8f 	bl	800dc54 <iprintf>
    prev->next = ipr->next;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	2004      	movs	r0, #4
 800cf42:	f7f7 fd61 	bl	8004a08 <memp_free>
}
 800cf46:	bf00      	nop
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	200083d8 	.word	0x200083d8
 800cf54:	080111a0 	.word	0x080111a0
 800cf58:	08011268 	.word	0x08011268
 800cf5c:	080111e8 	.word	0x080111e8

0800cf60 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b08c      	sub	sp, #48	@ 0x30
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cf70:	2301      	movs	r3, #1
 800cf72:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	885b      	ldrh	r3, [r3, #2]
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7f7 f859 	bl	8004038 <lwip_htons>
 800cf86:	4603      	mov	r3, r0
 800cf88:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	f003 030f 	and.w	r3, r3, #15
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800cf98:	7e7b      	ldrb	r3, [r7, #25]
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	8b7a      	ldrh	r2, [r7, #26]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d202      	bcs.n	800cfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cfa2:	f04f 33ff 	mov.w	r3, #4294967295
 800cfa6:	e135      	b.n	800d214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800cfa8:	7e7b      	ldrb	r3, [r7, #25]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	8b7a      	ldrh	r2, [r7, #26]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	88db      	ldrh	r3, [r3, #6]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7f7 f83d 	bl	8004038 <lwip_htons>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800cfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	701a      	strb	r2, [r3, #0]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	705a      	strb	r2, [r3, #1]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	709a      	strb	r2, [r3, #2]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800cfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe4:	8afa      	ldrh	r2, [r7, #22]
 800cfe6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800cfe8:	8afa      	ldrh	r2, [r7, #22]
 800cfea:	8b7b      	ldrh	r3, [r7, #26]
 800cfec:	4413      	add	r3, r2
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800cff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff6:	88db      	ldrh	r3, [r3, #6]
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	8afa      	ldrh	r2, [r7, #22]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d902      	bls.n	800d006 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d000:	f04f 33ff 	mov.w	r3, #4294967295
 800d004:	e106      	b.n	800d214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d00c:	e068      	b.n	800d0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d016:	889b      	ldrh	r3, [r3, #4]
 800d018:	b29a      	uxth	r2, r3
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	889b      	ldrh	r3, [r3, #4]
 800d01e:	b29b      	uxth	r3, r3
 800d020:	429a      	cmp	r2, r3
 800d022:	d235      	bcs.n	800d090 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d028:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d020      	beq.n	800d072 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d032:	889b      	ldrh	r3, [r3, #4]
 800d034:	b29a      	uxth	r2, r3
 800d036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d038:	88db      	ldrh	r3, [r3, #6]
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d307      	bcc.n	800d050 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d042:	88db      	ldrh	r3, [r3, #6]
 800d044:	b29a      	uxth	r2, r3
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	889b      	ldrh	r3, [r3, #4]
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d902      	bls.n	800d056 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d050:	f04f 33ff 	mov.w	r3, #4294967295
 800d054:	e0de      	b.n	800d214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d05e:	88db      	ldrh	r3, [r3, #6]
 800d060:	b29a      	uxth	r2, r3
 800d062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d064:	889b      	ldrh	r3, [r3, #4]
 800d066:	b29b      	uxth	r3, r3
 800d068:	429a      	cmp	r2, r3
 800d06a:	d03d      	beq.n	800d0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d070:	e03a      	b.n	800d0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d074:	88db      	ldrh	r3, [r3, #6]
 800d076:	b29a      	uxth	r2, r3
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	889b      	ldrh	r3, [r3, #4]
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	429a      	cmp	r2, r3
 800d080:	d902      	bls.n	800d088 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d082:	f04f 33ff 	mov.w	r3, #4294967295
 800d086:	e0c5      	b.n	800d214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	605a      	str	r2, [r3, #4]
      break;
 800d08e:	e02b      	b.n	800d0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d092:	889b      	ldrh	r3, [r3, #4]
 800d094:	b29a      	uxth	r2, r3
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	889b      	ldrh	r3, [r3, #4]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d102      	bne.n	800d0a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a4:	e0b6      	b.n	800d214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a8:	889b      	ldrh	r3, [r3, #4]
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	88db      	ldrh	r3, [r3, #6]
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d202      	bcs.n	800d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ba:	e0ab      	b.n	800d214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d009      	beq.n	800d0d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c4:	88db      	ldrh	r3, [r3, #6]
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	889b      	ldrh	r3, [r3, #4]
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d001      	beq.n	800d0d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d193      	bne.n	800d00e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d0e6:	e000      	b.n	800d0ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d0e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d12d      	bne.n	800d14c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d01c      	beq.n	800d130 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f8:	88db      	ldrh	r3, [r3, #6]
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fe:	889b      	ldrh	r3, [r3, #4]
 800d100:	b29b      	uxth	r3, r3
 800d102:	429a      	cmp	r2, r3
 800d104:	d906      	bls.n	800d114 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d106:	4b45      	ldr	r3, [pc, #276]	@ (800d21c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d108:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800d10c:	4944      	ldr	r1, [pc, #272]	@ (800d220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d10e:	4845      	ldr	r0, [pc, #276]	@ (800d224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d110:	f000 fda0 	bl	800dc54 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11c:	88db      	ldrh	r3, [r3, #6]
 800d11e:	b29a      	uxth	r2, r3
 800d120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d122:	889b      	ldrh	r3, [r3, #4]
 800d124:	b29b      	uxth	r3, r3
 800d126:	429a      	cmp	r2, r3
 800d128:	d010      	beq.n	800d14c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	623b      	str	r3, [r7, #32]
 800d12e:	e00d      	b.n	800d14c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d006      	beq.n	800d146 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d138:	4b38      	ldr	r3, [pc, #224]	@ (800d21c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d13a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800d13e:	493a      	ldr	r1, [pc, #232]	@ (800d228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d140:	4838      	ldr	r0, [pc, #224]	@ (800d224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d142:	f000 fd87 	bl	800dc54 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d105      	bne.n	800d15e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	7f9b      	ldrb	r3, [r3, #30]
 800d156:	f003 0301 	and.w	r3, r3, #1
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d059      	beq.n	800d212 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d04f      	beq.n	800d204 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d006      	beq.n	800d17a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	889b      	ldrh	r3, [r3, #4]
 800d174:	b29b      	uxth	r3, r3
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	623b      	str	r3, [r7, #32]
 800d17e:	e041      	b.n	800d204 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800d184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d18a:	e012      	b.n	800d1b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800d192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d194:	88db      	ldrh	r3, [r3, #6]
 800d196:	b29a      	uxth	r2, r3
 800d198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19a:	889b      	ldrh	r3, [r3, #4]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d002      	beq.n	800d1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	623b      	str	r3, [r7, #32]
            break;
 800d1a6:	e007      	b.n	800d1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d1e9      	bne.n	800d18c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d1b8:	6a3b      	ldr	r3, [r7, #32]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d022      	beq.n	800d204 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d106      	bne.n	800d1d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d1c6:	4b15      	ldr	r3, [pc, #84]	@ (800d21c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d1c8:	f240 12df 	movw	r2, #479	@ 0x1df
 800d1cc:	4917      	ldr	r1, [pc, #92]	@ (800d22c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d1ce:	4815      	ldr	r0, [pc, #84]	@ (800d224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d1d0:	f000 fd40 	bl	800dc54 <iprintf>
          LWIP_ASSERT("sanity check",
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d106      	bne.n	800d1ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d1e0:	4b0e      	ldr	r3, [pc, #56]	@ (800d21c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d1e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d1e6:	4911      	ldr	r1, [pc, #68]	@ (800d22c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d1e8:	480e      	ldr	r0, [pc, #56]	@ (800d224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d1ea:	f000 fd33 	bl	800dc54 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d006      	beq.n	800d204 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d1f6:	4b09      	ldr	r3, [pc, #36]	@ (800d21c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d1f8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800d1fc:	490c      	ldr	r1, [pc, #48]	@ (800d230 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d1fe:	4809      	ldr	r0, [pc, #36]	@ (800d224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d200:	f000 fd28 	bl	800dc54 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	2b00      	cmp	r3, #0
 800d208:	bf14      	ite	ne
 800d20a:	2301      	movne	r3, #1
 800d20c:	2300      	moveq	r3, #0
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	e000      	b.n	800d214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	3730      	adds	r7, #48	@ 0x30
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	080111a0 	.word	0x080111a0
 800d220:	08011284 	.word	0x08011284
 800d224:	080111e8 	.word	0x080111e8
 800d228:	080112a4 	.word	0x080112a4
 800d22c:	080112dc 	.word	0x080112dc
 800d230:	080112ec 	.word	0x080112ec

0800d234 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08e      	sub	sp, #56	@ 0x38
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	f003 030f 	and.w	r3, r3, #15
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	2b14      	cmp	r3, #20
 800d252:	f040 8171 	bne.w	800d538 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d258:	88db      	ldrh	r3, [r3, #6]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7f6 feeb 	bl	8004038 <lwip_htons>
 800d262:	4603      	mov	r3, r0
 800d264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d268:	b29b      	uxth	r3, r3
 800d26a:	00db      	lsls	r3, r3, #3
 800d26c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d270:	885b      	ldrh	r3, [r3, #2]
 800d272:	b29b      	uxth	r3, r3
 800d274:	4618      	mov	r0, r3
 800d276:	f7f6 fedf 	bl	8004038 <lwip_htons>
 800d27a:	4603      	mov	r3, r0
 800d27c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	f003 030f 	and.w	r3, r3, #15
 800d286:	b2db      	uxtb	r3, r3
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800d28e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d292:	b29b      	uxth	r3, r3
 800d294:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d296:	429a      	cmp	r2, r3
 800d298:	f0c0 8150 	bcc.w	800d53c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d29c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f7f8 faab 	bl	8005804 <pbuf_clen>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d2b2:	4b8c      	ldr	r3, [pc, #560]	@ (800d4e4 <ip4_reass+0x2b0>)
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	8c3b      	ldrh	r3, [r7, #32]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	2b0a      	cmp	r3, #10
 800d2be:	dd10      	ble.n	800d2e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d2c0:	8c3b      	ldrh	r3, [r7, #32]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2c6:	f7ff fd81 	bl	800cdcc <ip_reass_remove_oldest_datagram>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 8137 	beq.w	800d540 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d2d2:	4b84      	ldr	r3, [pc, #528]	@ (800d4e4 <ip4_reass+0x2b0>)
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	8c3b      	ldrh	r3, [r7, #32]
 800d2da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d2dc:	2b0a      	cmp	r3, #10
 800d2de:	f300 812f 	bgt.w	800d540 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d2e2:	4b81      	ldr	r3, [pc, #516]	@ (800d4e8 <ip4_reass+0x2b4>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2e8:	e015      	b.n	800d316 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ec:	695a      	ldr	r2, [r3, #20]
 800d2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d10c      	bne.n	800d310 <ip4_reass+0xdc>
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f8:	699a      	ldr	r2, [r3, #24]
 800d2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d106      	bne.n	800d310 <ip4_reass+0xdc>
 800d302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d304:	899a      	ldrh	r2, [r3, #12]
 800d306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d308:	889b      	ldrh	r3, [r3, #4]
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d006      	beq.n	800d31e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	633b      	str	r3, [r7, #48]	@ 0x30
 800d316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1e6      	bne.n	800d2ea <ip4_reass+0xb6>
 800d31c:	e000      	b.n	800d320 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d31e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d322:	2b00      	cmp	r3, #0
 800d324:	d109      	bne.n	800d33a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d326:	8c3b      	ldrh	r3, [r7, #32]
 800d328:	4619      	mov	r1, r3
 800d32a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d32c:	f7ff fdb0 	bl	800ce90 <ip_reass_enqueue_new_datagram>
 800d330:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d334:	2b00      	cmp	r3, #0
 800d336:	d11c      	bne.n	800d372 <ip4_reass+0x13e>
      goto nullreturn;
 800d338:	e105      	b.n	800d546 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33c:	88db      	ldrh	r3, [r3, #6]
 800d33e:	b29b      	uxth	r3, r3
 800d340:	4618      	mov	r0, r3
 800d342:	f7f6 fe79 	bl	8004038 <lwip_htons>
 800d346:	4603      	mov	r3, r0
 800d348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d110      	bne.n	800d372 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d352:	89db      	ldrh	r3, [r3, #14]
 800d354:	4618      	mov	r0, r3
 800d356:	f7f6 fe6f 	bl	8004038 <lwip_htons>
 800d35a:	4603      	mov	r3, r0
 800d35c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d360:	2b00      	cmp	r3, #0
 800d362:	d006      	beq.n	800d372 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d366:	3308      	adds	r3, #8
 800d368:	2214      	movs	r2, #20
 800d36a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d36c:	4618      	mov	r0, r3
 800d36e:	f000 fd4c 	bl	800de0a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d374:	88db      	ldrh	r3, [r3, #6]
 800d376:	b29b      	uxth	r3, r3
 800d378:	f003 0320 	and.w	r3, r3, #32
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	bf0c      	ite	eq
 800d380:	2301      	moveq	r3, #1
 800d382:	2300      	movne	r3, #0
 800d384:	b2db      	uxtb	r3, r3
 800d386:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00e      	beq.n	800d3ac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d38e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d392:	4413      	add	r3, r2
 800d394:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d396:	8b7a      	ldrh	r2, [r7, #26]
 800d398:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d39a:	429a      	cmp	r2, r3
 800d39c:	f0c0 80a0 	bcc.w	800d4e0 <ip4_reass+0x2ac>
 800d3a0:	8b7b      	ldrh	r3, [r7, #26]
 800d3a2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	f200 809a 	bhi.w	800d4e0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d3ac:	69fa      	ldr	r2, [r7, #28]
 800d3ae:	6879      	ldr	r1, [r7, #4]
 800d3b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3b2:	f7ff fdd5 	bl	800cf60 <ip_reass_chain_frag_into_datagram_and_validate>
 800d3b6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3be:	f000 809b 	beq.w	800d4f8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d3c2:	4b48      	ldr	r3, [pc, #288]	@ (800d4e4 <ip4_reass+0x2b0>)
 800d3c4:	881a      	ldrh	r2, [r3, #0]
 800d3c6:	8c3b      	ldrh	r3, [r7, #32]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	4b45      	ldr	r3, [pc, #276]	@ (800d4e4 <ip4_reass+0x2b0>)
 800d3ce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00d      	beq.n	800d3f2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d3d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d3d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3da:	4413      	add	r3, r2
 800d3dc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e0:	8a7a      	ldrh	r2, [r7, #18]
 800d3e2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e6:	7f9b      	ldrb	r3, [r3, #30]
 800d3e8:	f043 0301 	orr.w	r3, r3, #1
 800d3ec:	b2da      	uxtb	r2, r3
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d171      	bne.n	800d4dc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fa:	8b9b      	ldrh	r3, [r3, #28]
 800d3fc:	3314      	adds	r3, #20
 800d3fe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d414:	3308      	adds	r3, #8
 800d416:	2214      	movs	r2, #20
 800d418:	4619      	mov	r1, r3
 800d41a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d41c:	f000 fcf5 	bl	800de0a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d420:	8a3b      	ldrh	r3, [r7, #16]
 800d422:	4618      	mov	r0, r3
 800d424:	f7f6 fe08 	bl	8004038 <lwip_htons>
 800d428:	4603      	mov	r3, r0
 800d42a:	461a      	mov	r2, r3
 800d42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d42e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d432:	2200      	movs	r2, #0
 800d434:	719a      	strb	r2, [r3, #6]
 800d436:	2200      	movs	r2, #0
 800d438:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d43c:	2200      	movs	r2, #0
 800d43e:	729a      	strb	r2, [r3, #10]
 800d440:	2200      	movs	r2, #0
 800d442:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d44a:	e00d      	b.n	800d468 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d452:	2114      	movs	r1, #20
 800d454:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d456:	f7f8 f8c7 	bl	80055e8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d45a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7f8 fa0b 	bl	8005878 <pbuf_cat>
      r = iprh->next_pbuf;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1ee      	bne.n	800d44c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d46e:	4b1e      	ldr	r3, [pc, #120]	@ (800d4e8 <ip4_reass+0x2b4>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d474:	429a      	cmp	r2, r3
 800d476:	d102      	bne.n	800d47e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d478:	2300      	movs	r3, #0
 800d47a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d47c:	e010      	b.n	800d4a0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d47e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4e8 <ip4_reass+0x2b4>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d484:	e007      	b.n	800d496 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d006      	beq.n	800d49e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1f4      	bne.n	800d486 <ip4_reass+0x252>
 800d49c:	e000      	b.n	800d4a0 <ip4_reass+0x26c>
          break;
 800d49e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d4a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4a4:	f7ff fd2e 	bl	800cf04 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7f8 f9ab 	bl	8005804 <pbuf_clen>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d4e4 <ip4_reass+0x2b0>)
 800d4b4:	881b      	ldrh	r3, [r3, #0]
 800d4b6:	8c3a      	ldrh	r2, [r7, #32]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d906      	bls.n	800d4ca <ip4_reass+0x296>
 800d4bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d4ec <ip4_reass+0x2b8>)
 800d4be:	f240 229b 	movw	r2, #667	@ 0x29b
 800d4c2:	490b      	ldr	r1, [pc, #44]	@ (800d4f0 <ip4_reass+0x2bc>)
 800d4c4:	480b      	ldr	r0, [pc, #44]	@ (800d4f4 <ip4_reass+0x2c0>)
 800d4c6:	f000 fbc5 	bl	800dc54 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d4ca:	4b06      	ldr	r3, [pc, #24]	@ (800d4e4 <ip4_reass+0x2b0>)
 800d4cc:	881a      	ldrh	r2, [r3, #0]
 800d4ce:	8c3b      	ldrh	r3, [r7, #32]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	4b03      	ldr	r3, [pc, #12]	@ (800d4e4 <ip4_reass+0x2b0>)
 800d4d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	e038      	b.n	800d54e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	e036      	b.n	800d54e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800d4e0:	bf00      	nop
 800d4e2:	e00a      	b.n	800d4fa <ip4_reass+0x2c6>
 800d4e4:	200083dc 	.word	0x200083dc
 800d4e8:	200083d8 	.word	0x200083d8
 800d4ec:	080111a0 	.word	0x080111a0
 800d4f0:	08011310 	.word	0x08011310
 800d4f4:	080111e8 	.word	0x080111e8
    goto nullreturn_ipr;
 800d4f8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d106      	bne.n	800d50e <ip4_reass+0x2da>
 800d500:	4b15      	ldr	r3, [pc, #84]	@ (800d558 <ip4_reass+0x324>)
 800d502:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800d506:	4915      	ldr	r1, [pc, #84]	@ (800d55c <ip4_reass+0x328>)
 800d508:	4815      	ldr	r0, [pc, #84]	@ (800d560 <ip4_reass+0x32c>)
 800d50a:	f000 fba3 	bl	800dc54 <iprintf>
  if (ipr->p == NULL) {
 800d50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d116      	bne.n	800d544 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d516:	4b13      	ldr	r3, [pc, #76]	@ (800d564 <ip4_reass+0x330>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d006      	beq.n	800d52e <ip4_reass+0x2fa>
 800d520:	4b0d      	ldr	r3, [pc, #52]	@ (800d558 <ip4_reass+0x324>)
 800d522:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d526:	4910      	ldr	r1, [pc, #64]	@ (800d568 <ip4_reass+0x334>)
 800d528:	480d      	ldr	r0, [pc, #52]	@ (800d560 <ip4_reass+0x32c>)
 800d52a:	f000 fb93 	bl	800dc54 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d52e:	2100      	movs	r1, #0
 800d530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d532:	f7ff fce7 	bl	800cf04 <ip_reass_dequeue_datagram>
 800d536:	e006      	b.n	800d546 <ip4_reass+0x312>
    goto nullreturn;
 800d538:	bf00      	nop
 800d53a:	e004      	b.n	800d546 <ip4_reass+0x312>
    goto nullreturn;
 800d53c:	bf00      	nop
 800d53e:	e002      	b.n	800d546 <ip4_reass+0x312>
      goto nullreturn;
 800d540:	bf00      	nop
 800d542:	e000      	b.n	800d546 <ip4_reass+0x312>
  }

nullreturn:
 800d544:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7f8 f8d4 	bl	80056f4 <pbuf_free>
  return NULL;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3738      	adds	r7, #56	@ 0x38
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	080111a0 	.word	0x080111a0
 800d55c:	0801132c 	.word	0x0801132c
 800d560:	080111e8 	.word	0x080111e8
 800d564:	200083d8 	.word	0x200083d8
 800d568:	08011338 	.word	0x08011338

0800d56c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d570:	2005      	movs	r0, #5
 800d572:	f7f7 f9d9 	bl	8004928 <memp_malloc>
 800d576:	4603      	mov	r3, r0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d106      	bne.n	800d598 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d58a:	4b07      	ldr	r3, [pc, #28]	@ (800d5a8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d58c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800d590:	4906      	ldr	r1, [pc, #24]	@ (800d5ac <ip_frag_free_pbuf_custom_ref+0x30>)
 800d592:	4807      	ldr	r0, [pc, #28]	@ (800d5b0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d594:	f000 fb5e 	bl	800dc54 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	2005      	movs	r0, #5
 800d59c:	f7f7 fa34 	bl	8004a08 <memp_free>
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	080111a0 	.word	0x080111a0
 800d5ac:	08011358 	.word	0x08011358
 800d5b0:	080111e8 	.word	0x080111e8

0800d5b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d106      	bne.n	800d5d4 <ipfrag_free_pbuf_custom+0x20>
 800d5c6:	4b11      	ldr	r3, [pc, #68]	@ (800d60c <ipfrag_free_pbuf_custom+0x58>)
 800d5c8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800d5cc:	4910      	ldr	r1, [pc, #64]	@ (800d610 <ipfrag_free_pbuf_custom+0x5c>)
 800d5ce:	4811      	ldr	r0, [pc, #68]	@ (800d614 <ipfrag_free_pbuf_custom+0x60>)
 800d5d0:	f000 fb40 	bl	800dc54 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d5d4:	68fa      	ldr	r2, [r7, #12]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d006      	beq.n	800d5ea <ipfrag_free_pbuf_custom+0x36>
 800d5dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d60c <ipfrag_free_pbuf_custom+0x58>)
 800d5de:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800d5e2:	490d      	ldr	r1, [pc, #52]	@ (800d618 <ipfrag_free_pbuf_custom+0x64>)
 800d5e4:	480b      	ldr	r0, [pc, #44]	@ (800d614 <ipfrag_free_pbuf_custom+0x60>)
 800d5e6:	f000 fb35 	bl	800dc54 <iprintf>
  if (pcr->original != NULL) {
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	695b      	ldr	r3, [r3, #20]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d004      	beq.n	800d5fc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	695b      	ldr	r3, [r3, #20]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7f8 f87c 	bl	80056f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f7ff ffbd 	bl	800d57c <ip_frag_free_pbuf_custom_ref>
}
 800d602:	bf00      	nop
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	080111a0 	.word	0x080111a0
 800d610:	08011364 	.word	0x08011364
 800d614:	080111e8 	.word	0x080111e8
 800d618:	08011370 	.word	0x08011370

0800d61c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b094      	sub	sp, #80	@ 0x50
 800d620:	af02      	add	r7, sp, #8
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d632:	3b14      	subs	r3, #20
 800d634:	2b00      	cmp	r3, #0
 800d636:	da00      	bge.n	800d63a <ip4_frag+0x1e>
 800d638:	3307      	adds	r3, #7
 800d63a:	10db      	asrs	r3, r3, #3
 800d63c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d63e:	2314      	movs	r3, #20
 800d640:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800d648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d64a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	f003 030f 	and.w	r3, r3, #15
 800d654:	b2db      	uxtb	r3, r3
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	2b14      	cmp	r3, #20
 800d65c:	d002      	beq.n	800d664 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d65e:	f06f 0305 	mvn.w	r3, #5
 800d662:	e110      	b.n	800d886 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	895b      	ldrh	r3, [r3, #10]
 800d668:	2b13      	cmp	r3, #19
 800d66a:	d809      	bhi.n	800d680 <ip4_frag+0x64>
 800d66c:	4b88      	ldr	r3, [pc, #544]	@ (800d890 <ip4_frag+0x274>)
 800d66e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800d672:	4988      	ldr	r1, [pc, #544]	@ (800d894 <ip4_frag+0x278>)
 800d674:	4888      	ldr	r0, [pc, #544]	@ (800d898 <ip4_frag+0x27c>)
 800d676:	f000 faed 	bl	800dc54 <iprintf>
 800d67a:	f06f 0305 	mvn.w	r3, #5
 800d67e:	e102      	b.n	800d886 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d682:	88db      	ldrh	r3, [r3, #6]
 800d684:	b29b      	uxth	r3, r3
 800d686:	4618      	mov	r0, r3
 800d688:	f7f6 fcd6 	bl	8004038 <lwip_htons>
 800d68c:	4603      	mov	r3, r0
 800d68e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800d690:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d692:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d696:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d69a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d69c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	891b      	ldrh	r3, [r3, #8]
 800d6a6:	3b14      	subs	r3, #20
 800d6a8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800d6ac:	e0e1      	b.n	800d872 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d6ae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	bf28      	it	cs
 800d6bc:	4613      	movcs	r3, r2
 800d6be:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d6c0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d6c4:	2114      	movs	r1, #20
 800d6c6:	200e      	movs	r0, #14
 800d6c8:	f7f7 fd30 	bl	800512c <pbuf_alloc>
 800d6cc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f000 80d5 	beq.w	800d880 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d8:	895b      	ldrh	r3, [r3, #10]
 800d6da:	2b13      	cmp	r3, #19
 800d6dc:	d806      	bhi.n	800d6ec <ip4_frag+0xd0>
 800d6de:	4b6c      	ldr	r3, [pc, #432]	@ (800d890 <ip4_frag+0x274>)
 800d6e0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800d6e4:	496d      	ldr	r1, [pc, #436]	@ (800d89c <ip4_frag+0x280>)
 800d6e6:	486c      	ldr	r0, [pc, #432]	@ (800d898 <ip4_frag+0x27c>)
 800d6e8:	f000 fab4 	bl	800dc54 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	2214      	movs	r2, #20
 800d6f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f000 fb88 	bl	800de0a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800d700:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d702:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800d706:	e064      	b.n	800d7d2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	895a      	ldrh	r2, [r3, #10]
 800d70c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d70e:	1ad3      	subs	r3, r2, r3
 800d710:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	895b      	ldrh	r3, [r3, #10]
 800d716:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d718:	429a      	cmp	r2, r3
 800d71a:	d906      	bls.n	800d72a <ip4_frag+0x10e>
 800d71c:	4b5c      	ldr	r3, [pc, #368]	@ (800d890 <ip4_frag+0x274>)
 800d71e:	f240 322d 	movw	r2, #813	@ 0x32d
 800d722:	495f      	ldr	r1, [pc, #380]	@ (800d8a0 <ip4_frag+0x284>)
 800d724:	485c      	ldr	r0, [pc, #368]	@ (800d898 <ip4_frag+0x27c>)
 800d726:	f000 fa95 	bl	800dc54 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d72a:	8bfa      	ldrh	r2, [r7, #30]
 800d72c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d730:	4293      	cmp	r3, r2
 800d732:	bf28      	it	cs
 800d734:	4613      	movcs	r3, r2
 800d736:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d73a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d105      	bne.n	800d74e <ip4_frag+0x132>
        poff = 0;
 800d742:	2300      	movs	r3, #0
 800d744:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	60fb      	str	r3, [r7, #12]
        continue;
 800d74c:	e041      	b.n	800d7d2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d74e:	f7ff ff0d 	bl	800d56c <ip_frag_alloc_pbuf_custom_ref>
 800d752:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d103      	bne.n	800d762 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d75a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d75c:	f7f7 ffca 	bl	80056f4 <pbuf_free>
        goto memerr;
 800d760:	e08f      	b.n	800d882 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d762:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d768:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d76a:	4413      	add	r3, r2
 800d76c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800d770:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d774:	9201      	str	r2, [sp, #4]
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	4603      	mov	r3, r0
 800d77a:	2241      	movs	r2, #65	@ 0x41
 800d77c:	2000      	movs	r0, #0
 800d77e:	f7f7 fdff 	bl	8005380 <pbuf_alloced_custom>
 800d782:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d106      	bne.n	800d798 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d78a:	69b8      	ldr	r0, [r7, #24]
 800d78c:	f7ff fef6 	bl	800d57c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d790:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d792:	f7f7 ffaf 	bl	80056f4 <pbuf_free>
        goto memerr;
 800d796:	e074      	b.n	800d882 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f7f8 f84b 	bl	8005834 <pbuf_ref>
      pcr->original = p;
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	4a3f      	ldr	r2, [pc, #252]	@ (800d8a4 <ip4_frag+0x288>)
 800d7a8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d7aa:	6979      	ldr	r1, [r7, #20]
 800d7ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7ae:	f7f8 f863 	bl	8005878 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d7b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800d7b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800d7c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d004      	beq.n	800d7d2 <ip4_frag+0x1b6>
        poff = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d7d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d196      	bne.n	800d708 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d7da:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d7dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d7e0:	4413      	add	r3, r2
 800d7e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d7e8:	f1a3 0213 	sub.w	r2, r3, #19
 800d7ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	bfcc      	ite	gt
 800d7f4:	2301      	movgt	r3, #1
 800d7f6:	2300      	movle	r3, #0
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d7fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d804:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800d806:	6a3b      	ldr	r3, [r7, #32]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <ip4_frag+0x1f6>
 800d80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d003      	beq.n	800d81a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d812:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d814:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d818:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d81a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7f6 fc0b 	bl	8004038 <lwip_htons>
 800d822:	4603      	mov	r3, r0
 800d824:	461a      	mov	r2, r3
 800d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d828:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d82a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d82c:	3314      	adds	r3, #20
 800d82e:	b29b      	uxth	r3, r3
 800d830:	4618      	mov	r0, r3
 800d832:	f7f6 fc01 	bl	8004038 <lwip_htons>
 800d836:	4603      	mov	r3, r0
 800d838:	461a      	mov	r2, r3
 800d83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d840:	2200      	movs	r2, #0
 800d842:	729a      	strb	r2, [r3, #10]
 800d844:	2200      	movs	r2, #0
 800d846:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d850:	68b8      	ldr	r0, [r7, #8]
 800d852:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d854:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d856:	f7f7 ff4d 	bl	80056f4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d85a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d85e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800d866:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d86a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d86c:	4413      	add	r3, r2
 800d86e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800d872:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d876:	2b00      	cmp	r3, #0
 800d878:	f47f af19 	bne.w	800d6ae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e002      	b.n	800d886 <ip4_frag+0x26a>
      goto memerr;
 800d880:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d882:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d886:	4618      	mov	r0, r3
 800d888:	3748      	adds	r7, #72	@ 0x48
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	080111a0 	.word	0x080111a0
 800d894:	0801137c 	.word	0x0801137c
 800d898:	080111e8 	.word	0x080111e8
 800d89c:	08011398 	.word	0x08011398
 800d8a0:	080113b8 	.word	0x080113b8
 800d8a4:	0800d5b5 	.word	0x0800d5b5

0800d8a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b086      	sub	sp, #24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d8b2:	230e      	movs	r3, #14
 800d8b4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	895b      	ldrh	r3, [r3, #10]
 800d8ba:	2b0e      	cmp	r3, #14
 800d8bc:	d96e      	bls.n	800d99c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	7bdb      	ldrb	r3, [r3, #15]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d106      	bne.n	800d8d4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	7b1a      	ldrb	r2, [r3, #12]
 800d8de:	7b5b      	ldrb	r3, [r3, #13]
 800d8e0:	021b      	lsls	r3, r3, #8
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d023      	beq.n	800d93a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d10f      	bne.n	800d91a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	785b      	ldrb	r3, [r3, #1]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d11b      	bne.n	800d93a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d906:	2b5e      	cmp	r3, #94	@ 0x5e
 800d908:	d117      	bne.n	800d93a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	7b5b      	ldrb	r3, [r3, #13]
 800d90e:	f043 0310 	orr.w	r3, r3, #16
 800d912:	b2da      	uxtb	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	735a      	strb	r2, [r3, #13]
 800d918:	e00f      	b.n	800d93a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	2206      	movs	r2, #6
 800d91e:	4928      	ldr	r1, [pc, #160]	@ (800d9c0 <ethernet_input+0x118>)
 800d920:	4618      	mov	r0, r3
 800d922:	f000 f9ec 	bl	800dcfe <memcmp>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d106      	bne.n	800d93a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7b5b      	ldrb	r3, [r3, #13]
 800d930:	f043 0308 	orr.w	r3, r3, #8
 800d934:	b2da      	uxtb	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d93a:	89fb      	ldrh	r3, [r7, #14]
 800d93c:	2b08      	cmp	r3, #8
 800d93e:	d003      	beq.n	800d948 <ethernet_input+0xa0>
 800d940:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d944:	d014      	beq.n	800d970 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d946:	e032      	b.n	800d9ae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d94e:	f003 0308 	and.w	r3, r3, #8
 800d952:	2b00      	cmp	r3, #0
 800d954:	d024      	beq.n	800d9a0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d956:	8afb      	ldrh	r3, [r7, #22]
 800d958:	4619      	mov	r1, r3
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7f7 fe44 	bl	80055e8 <pbuf_remove_header>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d11e      	bne.n	800d9a4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7fe ff21 	bl	800c7b0 <ip4_input>
      break;
 800d96e:	e013      	b.n	800d998 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d976:	f003 0308 	and.w	r3, r3, #8
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d014      	beq.n	800d9a8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d97e:	8afb      	ldrh	r3, [r7, #22]
 800d980:	4619      	mov	r1, r3
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f7f7 fe30 	bl	80055e8 <pbuf_remove_header>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d10e      	bne.n	800d9ac <ethernet_input+0x104>
        etharp_input(p, netif);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f7fe f8c1 	bl	800bb18 <etharp_input>
      break;
 800d996:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	e00c      	b.n	800d9b6 <ethernet_input+0x10e>
    goto free_and_return;
 800d99c:	bf00      	nop
 800d99e:	e006      	b.n	800d9ae <ethernet_input+0x106>
        goto free_and_return;
 800d9a0:	bf00      	nop
 800d9a2:	e004      	b.n	800d9ae <ethernet_input+0x106>
        goto free_and_return;
 800d9a4:	bf00      	nop
 800d9a6:	e002      	b.n	800d9ae <ethernet_input+0x106>
        goto free_and_return;
 800d9a8:	bf00      	nop
 800d9aa:	e000      	b.n	800d9ae <ethernet_input+0x106>
        goto free_and_return;
 800d9ac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f7f7 fea0 	bl	80056f4 <pbuf_free>
  return ERR_OK;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3718      	adds	r7, #24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	08011554 	.word	0x08011554

0800d9c4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d9d2:	8c3b      	ldrh	r3, [r7, #32]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7f6 fb2f 	bl	8004038 <lwip_htons>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d9de:	210e      	movs	r1, #14
 800d9e0:	68b8      	ldr	r0, [r7, #8]
 800d9e2:	f7f7 fdf1 	bl	80055c8 <pbuf_add_header>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d125      	bne.n	800da38 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	8afa      	ldrh	r2, [r7, #22]
 800d9f6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	2206      	movs	r2, #6
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 fa03 	bl	800de0a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	3306      	adds	r3, #6
 800da08:	2206      	movs	r2, #6
 800da0a:	6879      	ldr	r1, [r7, #4]
 800da0c:	4618      	mov	r0, r3
 800da0e:	f000 f9fc 	bl	800de0a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800da18:	2b06      	cmp	r3, #6
 800da1a:	d006      	beq.n	800da2a <ethernet_output+0x66>
 800da1c:	4b0a      	ldr	r3, [pc, #40]	@ (800da48 <ethernet_output+0x84>)
 800da1e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800da22:	490a      	ldr	r1, [pc, #40]	@ (800da4c <ethernet_output+0x88>)
 800da24:	480a      	ldr	r0, [pc, #40]	@ (800da50 <ethernet_output+0x8c>)
 800da26:	f000 f915 	bl	800dc54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	699b      	ldr	r3, [r3, #24]
 800da2e:	68b9      	ldr	r1, [r7, #8]
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	4798      	blx	r3
 800da34:	4603      	mov	r3, r0
 800da36:	e002      	b.n	800da3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800da38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800da3a:	f06f 0301 	mvn.w	r3, #1
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3718      	adds	r7, #24
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	080113c8 	.word	0x080113c8
 800da4c:	08011400 	.word	0x08011400
 800da50:	08011434 	.word	0x08011434

0800da54 <rand>:
 800da54:	4b16      	ldr	r3, [pc, #88]	@ (800dab0 <rand+0x5c>)
 800da56:	b510      	push	{r4, lr}
 800da58:	681c      	ldr	r4, [r3, #0]
 800da5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800da5c:	b9b3      	cbnz	r3, 800da8c <rand+0x38>
 800da5e:	2018      	movs	r0, #24
 800da60:	f000 fa4a 	bl	800def8 <malloc>
 800da64:	4602      	mov	r2, r0
 800da66:	6320      	str	r0, [r4, #48]	@ 0x30
 800da68:	b920      	cbnz	r0, 800da74 <rand+0x20>
 800da6a:	4b12      	ldr	r3, [pc, #72]	@ (800dab4 <rand+0x60>)
 800da6c:	4812      	ldr	r0, [pc, #72]	@ (800dab8 <rand+0x64>)
 800da6e:	2152      	movs	r1, #82	@ 0x52
 800da70:	f000 f9da 	bl	800de28 <__assert_func>
 800da74:	4911      	ldr	r1, [pc, #68]	@ (800dabc <rand+0x68>)
 800da76:	4b12      	ldr	r3, [pc, #72]	@ (800dac0 <rand+0x6c>)
 800da78:	e9c0 1300 	strd	r1, r3, [r0]
 800da7c:	4b11      	ldr	r3, [pc, #68]	@ (800dac4 <rand+0x70>)
 800da7e:	6083      	str	r3, [r0, #8]
 800da80:	230b      	movs	r3, #11
 800da82:	8183      	strh	r3, [r0, #12]
 800da84:	2100      	movs	r1, #0
 800da86:	2001      	movs	r0, #1
 800da88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800da8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800da8e:	480e      	ldr	r0, [pc, #56]	@ (800dac8 <rand+0x74>)
 800da90:	690b      	ldr	r3, [r1, #16]
 800da92:	694c      	ldr	r4, [r1, #20]
 800da94:	4a0d      	ldr	r2, [pc, #52]	@ (800dacc <rand+0x78>)
 800da96:	4358      	muls	r0, r3
 800da98:	fb02 0004 	mla	r0, r2, r4, r0
 800da9c:	fba3 3202 	umull	r3, r2, r3, r2
 800daa0:	3301      	adds	r3, #1
 800daa2:	eb40 0002 	adc.w	r0, r0, r2
 800daa6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800daaa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800daae:	bd10      	pop	{r4, pc}
 800dab0:	20000038 	.word	0x20000038
 800dab4:	08011562 	.word	0x08011562
 800dab8:	08011579 	.word	0x08011579
 800dabc:	abcd330e 	.word	0xabcd330e
 800dac0:	e66d1234 	.word	0xe66d1234
 800dac4:	0005deec 	.word	0x0005deec
 800dac8:	5851f42d 	.word	0x5851f42d
 800dacc:	4c957f2d 	.word	0x4c957f2d

0800dad0 <std>:
 800dad0:	2300      	movs	r3, #0
 800dad2:	b510      	push	{r4, lr}
 800dad4:	4604      	mov	r4, r0
 800dad6:	e9c0 3300 	strd	r3, r3, [r0]
 800dada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dade:	6083      	str	r3, [r0, #8]
 800dae0:	8181      	strh	r1, [r0, #12]
 800dae2:	6643      	str	r3, [r0, #100]	@ 0x64
 800dae4:	81c2      	strh	r2, [r0, #14]
 800dae6:	6183      	str	r3, [r0, #24]
 800dae8:	4619      	mov	r1, r3
 800daea:	2208      	movs	r2, #8
 800daec:	305c      	adds	r0, #92	@ 0x5c
 800daee:	f000 f916 	bl	800dd1e <memset>
 800daf2:	4b0d      	ldr	r3, [pc, #52]	@ (800db28 <std+0x58>)
 800daf4:	6263      	str	r3, [r4, #36]	@ 0x24
 800daf6:	4b0d      	ldr	r3, [pc, #52]	@ (800db2c <std+0x5c>)
 800daf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dafa:	4b0d      	ldr	r3, [pc, #52]	@ (800db30 <std+0x60>)
 800dafc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dafe:	4b0d      	ldr	r3, [pc, #52]	@ (800db34 <std+0x64>)
 800db00:	6323      	str	r3, [r4, #48]	@ 0x30
 800db02:	4b0d      	ldr	r3, [pc, #52]	@ (800db38 <std+0x68>)
 800db04:	6224      	str	r4, [r4, #32]
 800db06:	429c      	cmp	r4, r3
 800db08:	d006      	beq.n	800db18 <std+0x48>
 800db0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db0e:	4294      	cmp	r4, r2
 800db10:	d002      	beq.n	800db18 <std+0x48>
 800db12:	33d0      	adds	r3, #208	@ 0xd0
 800db14:	429c      	cmp	r4, r3
 800db16:	d105      	bne.n	800db24 <std+0x54>
 800db18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db20:	f000 b970 	b.w	800de04 <__retarget_lock_init_recursive>
 800db24:	bd10      	pop	{r4, pc}
 800db26:	bf00      	nop
 800db28:	0800dc79 	.word	0x0800dc79
 800db2c:	0800dc9b 	.word	0x0800dc9b
 800db30:	0800dcd3 	.word	0x0800dcd3
 800db34:	0800dcf7 	.word	0x0800dcf7
 800db38:	200083e0 	.word	0x200083e0

0800db3c <stdio_exit_handler>:
 800db3c:	4a02      	ldr	r2, [pc, #8]	@ (800db48 <stdio_exit_handler+0xc>)
 800db3e:	4903      	ldr	r1, [pc, #12]	@ (800db4c <stdio_exit_handler+0x10>)
 800db40:	4803      	ldr	r0, [pc, #12]	@ (800db50 <stdio_exit_handler+0x14>)
 800db42:	f000 b869 	b.w	800dc18 <_fwalk_sglue>
 800db46:	bf00      	nop
 800db48:	2000002c 	.word	0x2000002c
 800db4c:	0800e709 	.word	0x0800e709
 800db50:	2000003c 	.word	0x2000003c

0800db54 <cleanup_stdio>:
 800db54:	6841      	ldr	r1, [r0, #4]
 800db56:	4b0c      	ldr	r3, [pc, #48]	@ (800db88 <cleanup_stdio+0x34>)
 800db58:	4299      	cmp	r1, r3
 800db5a:	b510      	push	{r4, lr}
 800db5c:	4604      	mov	r4, r0
 800db5e:	d001      	beq.n	800db64 <cleanup_stdio+0x10>
 800db60:	f000 fdd2 	bl	800e708 <_fflush_r>
 800db64:	68a1      	ldr	r1, [r4, #8]
 800db66:	4b09      	ldr	r3, [pc, #36]	@ (800db8c <cleanup_stdio+0x38>)
 800db68:	4299      	cmp	r1, r3
 800db6a:	d002      	beq.n	800db72 <cleanup_stdio+0x1e>
 800db6c:	4620      	mov	r0, r4
 800db6e:	f000 fdcb 	bl	800e708 <_fflush_r>
 800db72:	68e1      	ldr	r1, [r4, #12]
 800db74:	4b06      	ldr	r3, [pc, #24]	@ (800db90 <cleanup_stdio+0x3c>)
 800db76:	4299      	cmp	r1, r3
 800db78:	d004      	beq.n	800db84 <cleanup_stdio+0x30>
 800db7a:	4620      	mov	r0, r4
 800db7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db80:	f000 bdc2 	b.w	800e708 <_fflush_r>
 800db84:	bd10      	pop	{r4, pc}
 800db86:	bf00      	nop
 800db88:	200083e0 	.word	0x200083e0
 800db8c:	20008448 	.word	0x20008448
 800db90:	200084b0 	.word	0x200084b0

0800db94 <global_stdio_init.part.0>:
 800db94:	b510      	push	{r4, lr}
 800db96:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc4 <global_stdio_init.part.0+0x30>)
 800db98:	4c0b      	ldr	r4, [pc, #44]	@ (800dbc8 <global_stdio_init.part.0+0x34>)
 800db9a:	4a0c      	ldr	r2, [pc, #48]	@ (800dbcc <global_stdio_init.part.0+0x38>)
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	4620      	mov	r0, r4
 800dba0:	2200      	movs	r2, #0
 800dba2:	2104      	movs	r1, #4
 800dba4:	f7ff ff94 	bl	800dad0 <std>
 800dba8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dbac:	2201      	movs	r2, #1
 800dbae:	2109      	movs	r1, #9
 800dbb0:	f7ff ff8e 	bl	800dad0 <std>
 800dbb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dbb8:	2202      	movs	r2, #2
 800dbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbbe:	2112      	movs	r1, #18
 800dbc0:	f7ff bf86 	b.w	800dad0 <std>
 800dbc4:	20008518 	.word	0x20008518
 800dbc8:	200083e0 	.word	0x200083e0
 800dbcc:	0800db3d 	.word	0x0800db3d

0800dbd0 <__sfp_lock_acquire>:
 800dbd0:	4801      	ldr	r0, [pc, #4]	@ (800dbd8 <__sfp_lock_acquire+0x8>)
 800dbd2:	f000 b918 	b.w	800de06 <__retarget_lock_acquire_recursive>
 800dbd6:	bf00      	nop
 800dbd8:	20008521 	.word	0x20008521

0800dbdc <__sfp_lock_release>:
 800dbdc:	4801      	ldr	r0, [pc, #4]	@ (800dbe4 <__sfp_lock_release+0x8>)
 800dbde:	f000 b913 	b.w	800de08 <__retarget_lock_release_recursive>
 800dbe2:	bf00      	nop
 800dbe4:	20008521 	.word	0x20008521

0800dbe8 <__sinit>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	4604      	mov	r4, r0
 800dbec:	f7ff fff0 	bl	800dbd0 <__sfp_lock_acquire>
 800dbf0:	6a23      	ldr	r3, [r4, #32]
 800dbf2:	b11b      	cbz	r3, 800dbfc <__sinit+0x14>
 800dbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbf8:	f7ff bff0 	b.w	800dbdc <__sfp_lock_release>
 800dbfc:	4b04      	ldr	r3, [pc, #16]	@ (800dc10 <__sinit+0x28>)
 800dbfe:	6223      	str	r3, [r4, #32]
 800dc00:	4b04      	ldr	r3, [pc, #16]	@ (800dc14 <__sinit+0x2c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d1f5      	bne.n	800dbf4 <__sinit+0xc>
 800dc08:	f7ff ffc4 	bl	800db94 <global_stdio_init.part.0>
 800dc0c:	e7f2      	b.n	800dbf4 <__sinit+0xc>
 800dc0e:	bf00      	nop
 800dc10:	0800db55 	.word	0x0800db55
 800dc14:	20008518 	.word	0x20008518

0800dc18 <_fwalk_sglue>:
 800dc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	4688      	mov	r8, r1
 800dc20:	4614      	mov	r4, r2
 800dc22:	2600      	movs	r6, #0
 800dc24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc28:	f1b9 0901 	subs.w	r9, r9, #1
 800dc2c:	d505      	bpl.n	800dc3a <_fwalk_sglue+0x22>
 800dc2e:	6824      	ldr	r4, [r4, #0]
 800dc30:	2c00      	cmp	r4, #0
 800dc32:	d1f7      	bne.n	800dc24 <_fwalk_sglue+0xc>
 800dc34:	4630      	mov	r0, r6
 800dc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc3a:	89ab      	ldrh	r3, [r5, #12]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d907      	bls.n	800dc50 <_fwalk_sglue+0x38>
 800dc40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc44:	3301      	adds	r3, #1
 800dc46:	d003      	beq.n	800dc50 <_fwalk_sglue+0x38>
 800dc48:	4629      	mov	r1, r5
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	47c0      	blx	r8
 800dc4e:	4306      	orrs	r6, r0
 800dc50:	3568      	adds	r5, #104	@ 0x68
 800dc52:	e7e9      	b.n	800dc28 <_fwalk_sglue+0x10>

0800dc54 <iprintf>:
 800dc54:	b40f      	push	{r0, r1, r2, r3}
 800dc56:	b507      	push	{r0, r1, r2, lr}
 800dc58:	4906      	ldr	r1, [pc, #24]	@ (800dc74 <iprintf+0x20>)
 800dc5a:	ab04      	add	r3, sp, #16
 800dc5c:	6808      	ldr	r0, [r1, #0]
 800dc5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc62:	6881      	ldr	r1, [r0, #8]
 800dc64:	9301      	str	r3, [sp, #4]
 800dc66:	f000 fa27 	bl	800e0b8 <_vfiprintf_r>
 800dc6a:	b003      	add	sp, #12
 800dc6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc70:	b004      	add	sp, #16
 800dc72:	4770      	bx	lr
 800dc74:	20000038 	.word	0x20000038

0800dc78 <__sread>:
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	460c      	mov	r4, r1
 800dc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc80:	f000 f878 	bl	800dd74 <_read_r>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	bfab      	itete	ge
 800dc88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dc8a:	89a3      	ldrhlt	r3, [r4, #12]
 800dc8c:	181b      	addge	r3, r3, r0
 800dc8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc92:	bfac      	ite	ge
 800dc94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dc96:	81a3      	strhlt	r3, [r4, #12]
 800dc98:	bd10      	pop	{r4, pc}

0800dc9a <__swrite>:
 800dc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9e:	461f      	mov	r7, r3
 800dca0:	898b      	ldrh	r3, [r1, #12]
 800dca2:	05db      	lsls	r3, r3, #23
 800dca4:	4605      	mov	r5, r0
 800dca6:	460c      	mov	r4, r1
 800dca8:	4616      	mov	r6, r2
 800dcaa:	d505      	bpl.n	800dcb8 <__swrite+0x1e>
 800dcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f000 f84c 	bl	800dd50 <_lseek_r>
 800dcb8:	89a3      	ldrh	r3, [r4, #12]
 800dcba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dcc2:	81a3      	strh	r3, [r4, #12]
 800dcc4:	4632      	mov	r2, r6
 800dcc6:	463b      	mov	r3, r7
 800dcc8:	4628      	mov	r0, r5
 800dcca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcce:	f000 b863 	b.w	800dd98 <_write_r>

0800dcd2 <__sseek>:
 800dcd2:	b510      	push	{r4, lr}
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcda:	f000 f839 	bl	800dd50 <_lseek_r>
 800dcde:	1c43      	adds	r3, r0, #1
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	bf15      	itete	ne
 800dce4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dce6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dcea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dcee:	81a3      	strheq	r3, [r4, #12]
 800dcf0:	bf18      	it	ne
 800dcf2:	81a3      	strhne	r3, [r4, #12]
 800dcf4:	bd10      	pop	{r4, pc}

0800dcf6 <__sclose>:
 800dcf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcfa:	f000 b819 	b.w	800dd30 <_close_r>

0800dcfe <memcmp>:
 800dcfe:	b510      	push	{r4, lr}
 800dd00:	3901      	subs	r1, #1
 800dd02:	4402      	add	r2, r0
 800dd04:	4290      	cmp	r0, r2
 800dd06:	d101      	bne.n	800dd0c <memcmp+0xe>
 800dd08:	2000      	movs	r0, #0
 800dd0a:	e005      	b.n	800dd18 <memcmp+0x1a>
 800dd0c:	7803      	ldrb	r3, [r0, #0]
 800dd0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dd12:	42a3      	cmp	r3, r4
 800dd14:	d001      	beq.n	800dd1a <memcmp+0x1c>
 800dd16:	1b18      	subs	r0, r3, r4
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	3001      	adds	r0, #1
 800dd1c:	e7f2      	b.n	800dd04 <memcmp+0x6>

0800dd1e <memset>:
 800dd1e:	4402      	add	r2, r0
 800dd20:	4603      	mov	r3, r0
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d100      	bne.n	800dd28 <memset+0xa>
 800dd26:	4770      	bx	lr
 800dd28:	f803 1b01 	strb.w	r1, [r3], #1
 800dd2c:	e7f9      	b.n	800dd22 <memset+0x4>
	...

0800dd30 <_close_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4d06      	ldr	r5, [pc, #24]	@ (800dd4c <_close_r+0x1c>)
 800dd34:	2300      	movs	r3, #0
 800dd36:	4604      	mov	r4, r0
 800dd38:	4608      	mov	r0, r1
 800dd3a:	602b      	str	r3, [r5, #0]
 800dd3c:	f7f2 fec0 	bl	8000ac0 <_close>
 800dd40:	1c43      	adds	r3, r0, #1
 800dd42:	d102      	bne.n	800dd4a <_close_r+0x1a>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	b103      	cbz	r3, 800dd4a <_close_r+0x1a>
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	2000851c 	.word	0x2000851c

0800dd50 <_lseek_r>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	4d07      	ldr	r5, [pc, #28]	@ (800dd70 <_lseek_r+0x20>)
 800dd54:	4604      	mov	r4, r0
 800dd56:	4608      	mov	r0, r1
 800dd58:	4611      	mov	r1, r2
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	602a      	str	r2, [r5, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	f7f2 fed5 	bl	8000b0e <_lseek>
 800dd64:	1c43      	adds	r3, r0, #1
 800dd66:	d102      	bne.n	800dd6e <_lseek_r+0x1e>
 800dd68:	682b      	ldr	r3, [r5, #0]
 800dd6a:	b103      	cbz	r3, 800dd6e <_lseek_r+0x1e>
 800dd6c:	6023      	str	r3, [r4, #0]
 800dd6e:	bd38      	pop	{r3, r4, r5, pc}
 800dd70:	2000851c 	.word	0x2000851c

0800dd74 <_read_r>:
 800dd74:	b538      	push	{r3, r4, r5, lr}
 800dd76:	4d07      	ldr	r5, [pc, #28]	@ (800dd94 <_read_r+0x20>)
 800dd78:	4604      	mov	r4, r0
 800dd7a:	4608      	mov	r0, r1
 800dd7c:	4611      	mov	r1, r2
 800dd7e:	2200      	movs	r2, #0
 800dd80:	602a      	str	r2, [r5, #0]
 800dd82:	461a      	mov	r2, r3
 800dd84:	f7f2 fe63 	bl	8000a4e <_read>
 800dd88:	1c43      	adds	r3, r0, #1
 800dd8a:	d102      	bne.n	800dd92 <_read_r+0x1e>
 800dd8c:	682b      	ldr	r3, [r5, #0]
 800dd8e:	b103      	cbz	r3, 800dd92 <_read_r+0x1e>
 800dd90:	6023      	str	r3, [r4, #0]
 800dd92:	bd38      	pop	{r3, r4, r5, pc}
 800dd94:	2000851c 	.word	0x2000851c

0800dd98 <_write_r>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	4d07      	ldr	r5, [pc, #28]	@ (800ddb8 <_write_r+0x20>)
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	4608      	mov	r0, r1
 800dda0:	4611      	mov	r1, r2
 800dda2:	2200      	movs	r2, #0
 800dda4:	602a      	str	r2, [r5, #0]
 800dda6:	461a      	mov	r2, r3
 800dda8:	f7f2 fe6e 	bl	8000a88 <_write>
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	d102      	bne.n	800ddb6 <_write_r+0x1e>
 800ddb0:	682b      	ldr	r3, [r5, #0]
 800ddb2:	b103      	cbz	r3, 800ddb6 <_write_r+0x1e>
 800ddb4:	6023      	str	r3, [r4, #0]
 800ddb6:	bd38      	pop	{r3, r4, r5, pc}
 800ddb8:	2000851c 	.word	0x2000851c

0800ddbc <__libc_init_array>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	4d0d      	ldr	r5, [pc, #52]	@ (800ddf4 <__libc_init_array+0x38>)
 800ddc0:	4c0d      	ldr	r4, [pc, #52]	@ (800ddf8 <__libc_init_array+0x3c>)
 800ddc2:	1b64      	subs	r4, r4, r5
 800ddc4:	10a4      	asrs	r4, r4, #2
 800ddc6:	2600      	movs	r6, #0
 800ddc8:	42a6      	cmp	r6, r4
 800ddca:	d109      	bne.n	800dde0 <__libc_init_array+0x24>
 800ddcc:	4d0b      	ldr	r5, [pc, #44]	@ (800ddfc <__libc_init_array+0x40>)
 800ddce:	4c0c      	ldr	r4, [pc, #48]	@ (800de00 <__libc_init_array+0x44>)
 800ddd0:	f000 fe48 	bl	800ea64 <_init>
 800ddd4:	1b64      	subs	r4, r4, r5
 800ddd6:	10a4      	asrs	r4, r4, #2
 800ddd8:	2600      	movs	r6, #0
 800ddda:	42a6      	cmp	r6, r4
 800dddc:	d105      	bne.n	800ddea <__libc_init_array+0x2e>
 800ddde:	bd70      	pop	{r4, r5, r6, pc}
 800dde0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dde4:	4798      	blx	r3
 800dde6:	3601      	adds	r6, #1
 800dde8:	e7ee      	b.n	800ddc8 <__libc_init_array+0xc>
 800ddea:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddee:	4798      	blx	r3
 800ddf0:	3601      	adds	r6, #1
 800ddf2:	e7f2      	b.n	800ddda <__libc_init_array+0x1e>
 800ddf4:	08011648 	.word	0x08011648
 800ddf8:	08011648 	.word	0x08011648
 800ddfc:	08011648 	.word	0x08011648
 800de00:	0801164c 	.word	0x0801164c

0800de04 <__retarget_lock_init_recursive>:
 800de04:	4770      	bx	lr

0800de06 <__retarget_lock_acquire_recursive>:
 800de06:	4770      	bx	lr

0800de08 <__retarget_lock_release_recursive>:
 800de08:	4770      	bx	lr

0800de0a <memcpy>:
 800de0a:	440a      	add	r2, r1
 800de0c:	4291      	cmp	r1, r2
 800de0e:	f100 33ff 	add.w	r3, r0, #4294967295
 800de12:	d100      	bne.n	800de16 <memcpy+0xc>
 800de14:	4770      	bx	lr
 800de16:	b510      	push	{r4, lr}
 800de18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de20:	4291      	cmp	r1, r2
 800de22:	d1f9      	bne.n	800de18 <memcpy+0xe>
 800de24:	bd10      	pop	{r4, pc}
	...

0800de28 <__assert_func>:
 800de28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de2a:	4614      	mov	r4, r2
 800de2c:	461a      	mov	r2, r3
 800de2e:	4b09      	ldr	r3, [pc, #36]	@ (800de54 <__assert_func+0x2c>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4605      	mov	r5, r0
 800de34:	68d8      	ldr	r0, [r3, #12]
 800de36:	b14c      	cbz	r4, 800de4c <__assert_func+0x24>
 800de38:	4b07      	ldr	r3, [pc, #28]	@ (800de58 <__assert_func+0x30>)
 800de3a:	9100      	str	r1, [sp, #0]
 800de3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de40:	4906      	ldr	r1, [pc, #24]	@ (800de5c <__assert_func+0x34>)
 800de42:	462b      	mov	r3, r5
 800de44:	f000 fc88 	bl	800e758 <fiprintf>
 800de48:	f000 fd3c 	bl	800e8c4 <abort>
 800de4c:	4b04      	ldr	r3, [pc, #16]	@ (800de60 <__assert_func+0x38>)
 800de4e:	461c      	mov	r4, r3
 800de50:	e7f3      	b.n	800de3a <__assert_func+0x12>
 800de52:	bf00      	nop
 800de54:	20000038 	.word	0x20000038
 800de58:	080115d1 	.word	0x080115d1
 800de5c:	080115de 	.word	0x080115de
 800de60:	0801160c 	.word	0x0801160c

0800de64 <_free_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4605      	mov	r5, r0
 800de68:	2900      	cmp	r1, #0
 800de6a:	d041      	beq.n	800def0 <_free_r+0x8c>
 800de6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de70:	1f0c      	subs	r4, r1, #4
 800de72:	2b00      	cmp	r3, #0
 800de74:	bfb8      	it	lt
 800de76:	18e4      	addlt	r4, r4, r3
 800de78:	f000 f8e8 	bl	800e04c <__malloc_lock>
 800de7c:	4a1d      	ldr	r2, [pc, #116]	@ (800def4 <_free_r+0x90>)
 800de7e:	6813      	ldr	r3, [r2, #0]
 800de80:	b933      	cbnz	r3, 800de90 <_free_r+0x2c>
 800de82:	6063      	str	r3, [r4, #4]
 800de84:	6014      	str	r4, [r2, #0]
 800de86:	4628      	mov	r0, r5
 800de88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de8c:	f000 b8e4 	b.w	800e058 <__malloc_unlock>
 800de90:	42a3      	cmp	r3, r4
 800de92:	d908      	bls.n	800dea6 <_free_r+0x42>
 800de94:	6820      	ldr	r0, [r4, #0]
 800de96:	1821      	adds	r1, r4, r0
 800de98:	428b      	cmp	r3, r1
 800de9a:	bf01      	itttt	eq
 800de9c:	6819      	ldreq	r1, [r3, #0]
 800de9e:	685b      	ldreq	r3, [r3, #4]
 800dea0:	1809      	addeq	r1, r1, r0
 800dea2:	6021      	streq	r1, [r4, #0]
 800dea4:	e7ed      	b.n	800de82 <_free_r+0x1e>
 800dea6:	461a      	mov	r2, r3
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	b10b      	cbz	r3, 800deb0 <_free_r+0x4c>
 800deac:	42a3      	cmp	r3, r4
 800deae:	d9fa      	bls.n	800dea6 <_free_r+0x42>
 800deb0:	6811      	ldr	r1, [r2, #0]
 800deb2:	1850      	adds	r0, r2, r1
 800deb4:	42a0      	cmp	r0, r4
 800deb6:	d10b      	bne.n	800ded0 <_free_r+0x6c>
 800deb8:	6820      	ldr	r0, [r4, #0]
 800deba:	4401      	add	r1, r0
 800debc:	1850      	adds	r0, r2, r1
 800debe:	4283      	cmp	r3, r0
 800dec0:	6011      	str	r1, [r2, #0]
 800dec2:	d1e0      	bne.n	800de86 <_free_r+0x22>
 800dec4:	6818      	ldr	r0, [r3, #0]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	6053      	str	r3, [r2, #4]
 800deca:	4408      	add	r0, r1
 800decc:	6010      	str	r0, [r2, #0]
 800dece:	e7da      	b.n	800de86 <_free_r+0x22>
 800ded0:	d902      	bls.n	800ded8 <_free_r+0x74>
 800ded2:	230c      	movs	r3, #12
 800ded4:	602b      	str	r3, [r5, #0]
 800ded6:	e7d6      	b.n	800de86 <_free_r+0x22>
 800ded8:	6820      	ldr	r0, [r4, #0]
 800deda:	1821      	adds	r1, r4, r0
 800dedc:	428b      	cmp	r3, r1
 800dede:	bf04      	itt	eq
 800dee0:	6819      	ldreq	r1, [r3, #0]
 800dee2:	685b      	ldreq	r3, [r3, #4]
 800dee4:	6063      	str	r3, [r4, #4]
 800dee6:	bf04      	itt	eq
 800dee8:	1809      	addeq	r1, r1, r0
 800deea:	6021      	streq	r1, [r4, #0]
 800deec:	6054      	str	r4, [r2, #4]
 800deee:	e7ca      	b.n	800de86 <_free_r+0x22>
 800def0:	bd38      	pop	{r3, r4, r5, pc}
 800def2:	bf00      	nop
 800def4:	20008528 	.word	0x20008528

0800def8 <malloc>:
 800def8:	4b02      	ldr	r3, [pc, #8]	@ (800df04 <malloc+0xc>)
 800defa:	4601      	mov	r1, r0
 800defc:	6818      	ldr	r0, [r3, #0]
 800defe:	f000 b825 	b.w	800df4c <_malloc_r>
 800df02:	bf00      	nop
 800df04:	20000038 	.word	0x20000038

0800df08 <sbrk_aligned>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	4e0f      	ldr	r6, [pc, #60]	@ (800df48 <sbrk_aligned+0x40>)
 800df0c:	460c      	mov	r4, r1
 800df0e:	6831      	ldr	r1, [r6, #0]
 800df10:	4605      	mov	r5, r0
 800df12:	b911      	cbnz	r1, 800df1a <sbrk_aligned+0x12>
 800df14:	f000 fcc6 	bl	800e8a4 <_sbrk_r>
 800df18:	6030      	str	r0, [r6, #0]
 800df1a:	4621      	mov	r1, r4
 800df1c:	4628      	mov	r0, r5
 800df1e:	f000 fcc1 	bl	800e8a4 <_sbrk_r>
 800df22:	1c43      	adds	r3, r0, #1
 800df24:	d103      	bne.n	800df2e <sbrk_aligned+0x26>
 800df26:	f04f 34ff 	mov.w	r4, #4294967295
 800df2a:	4620      	mov	r0, r4
 800df2c:	bd70      	pop	{r4, r5, r6, pc}
 800df2e:	1cc4      	adds	r4, r0, #3
 800df30:	f024 0403 	bic.w	r4, r4, #3
 800df34:	42a0      	cmp	r0, r4
 800df36:	d0f8      	beq.n	800df2a <sbrk_aligned+0x22>
 800df38:	1a21      	subs	r1, r4, r0
 800df3a:	4628      	mov	r0, r5
 800df3c:	f000 fcb2 	bl	800e8a4 <_sbrk_r>
 800df40:	3001      	adds	r0, #1
 800df42:	d1f2      	bne.n	800df2a <sbrk_aligned+0x22>
 800df44:	e7ef      	b.n	800df26 <sbrk_aligned+0x1e>
 800df46:	bf00      	nop
 800df48:	20008524 	.word	0x20008524

0800df4c <_malloc_r>:
 800df4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df50:	1ccd      	adds	r5, r1, #3
 800df52:	f025 0503 	bic.w	r5, r5, #3
 800df56:	3508      	adds	r5, #8
 800df58:	2d0c      	cmp	r5, #12
 800df5a:	bf38      	it	cc
 800df5c:	250c      	movcc	r5, #12
 800df5e:	2d00      	cmp	r5, #0
 800df60:	4606      	mov	r6, r0
 800df62:	db01      	blt.n	800df68 <_malloc_r+0x1c>
 800df64:	42a9      	cmp	r1, r5
 800df66:	d904      	bls.n	800df72 <_malloc_r+0x26>
 800df68:	230c      	movs	r3, #12
 800df6a:	6033      	str	r3, [r6, #0]
 800df6c:	2000      	movs	r0, #0
 800df6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e048 <_malloc_r+0xfc>
 800df76:	f000 f869 	bl	800e04c <__malloc_lock>
 800df7a:	f8d8 3000 	ldr.w	r3, [r8]
 800df7e:	461c      	mov	r4, r3
 800df80:	bb44      	cbnz	r4, 800dfd4 <_malloc_r+0x88>
 800df82:	4629      	mov	r1, r5
 800df84:	4630      	mov	r0, r6
 800df86:	f7ff ffbf 	bl	800df08 <sbrk_aligned>
 800df8a:	1c43      	adds	r3, r0, #1
 800df8c:	4604      	mov	r4, r0
 800df8e:	d158      	bne.n	800e042 <_malloc_r+0xf6>
 800df90:	f8d8 4000 	ldr.w	r4, [r8]
 800df94:	4627      	mov	r7, r4
 800df96:	2f00      	cmp	r7, #0
 800df98:	d143      	bne.n	800e022 <_malloc_r+0xd6>
 800df9a:	2c00      	cmp	r4, #0
 800df9c:	d04b      	beq.n	800e036 <_malloc_r+0xea>
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	4639      	mov	r1, r7
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	eb04 0903 	add.w	r9, r4, r3
 800dfa8:	f000 fc7c 	bl	800e8a4 <_sbrk_r>
 800dfac:	4581      	cmp	r9, r0
 800dfae:	d142      	bne.n	800e036 <_malloc_r+0xea>
 800dfb0:	6821      	ldr	r1, [r4, #0]
 800dfb2:	1a6d      	subs	r5, r5, r1
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	f7ff ffa6 	bl	800df08 <sbrk_aligned>
 800dfbc:	3001      	adds	r0, #1
 800dfbe:	d03a      	beq.n	800e036 <_malloc_r+0xea>
 800dfc0:	6823      	ldr	r3, [r4, #0]
 800dfc2:	442b      	add	r3, r5
 800dfc4:	6023      	str	r3, [r4, #0]
 800dfc6:	f8d8 3000 	ldr.w	r3, [r8]
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	bb62      	cbnz	r2, 800e028 <_malloc_r+0xdc>
 800dfce:	f8c8 7000 	str.w	r7, [r8]
 800dfd2:	e00f      	b.n	800dff4 <_malloc_r+0xa8>
 800dfd4:	6822      	ldr	r2, [r4, #0]
 800dfd6:	1b52      	subs	r2, r2, r5
 800dfd8:	d420      	bmi.n	800e01c <_malloc_r+0xd0>
 800dfda:	2a0b      	cmp	r2, #11
 800dfdc:	d917      	bls.n	800e00e <_malloc_r+0xc2>
 800dfde:	1961      	adds	r1, r4, r5
 800dfe0:	42a3      	cmp	r3, r4
 800dfe2:	6025      	str	r5, [r4, #0]
 800dfe4:	bf18      	it	ne
 800dfe6:	6059      	strne	r1, [r3, #4]
 800dfe8:	6863      	ldr	r3, [r4, #4]
 800dfea:	bf08      	it	eq
 800dfec:	f8c8 1000 	streq.w	r1, [r8]
 800dff0:	5162      	str	r2, [r4, r5]
 800dff2:	604b      	str	r3, [r1, #4]
 800dff4:	4630      	mov	r0, r6
 800dff6:	f000 f82f 	bl	800e058 <__malloc_unlock>
 800dffa:	f104 000b 	add.w	r0, r4, #11
 800dffe:	1d23      	adds	r3, r4, #4
 800e000:	f020 0007 	bic.w	r0, r0, #7
 800e004:	1ac2      	subs	r2, r0, r3
 800e006:	bf1c      	itt	ne
 800e008:	1a1b      	subne	r3, r3, r0
 800e00a:	50a3      	strne	r3, [r4, r2]
 800e00c:	e7af      	b.n	800df6e <_malloc_r+0x22>
 800e00e:	6862      	ldr	r2, [r4, #4]
 800e010:	42a3      	cmp	r3, r4
 800e012:	bf0c      	ite	eq
 800e014:	f8c8 2000 	streq.w	r2, [r8]
 800e018:	605a      	strne	r2, [r3, #4]
 800e01a:	e7eb      	b.n	800dff4 <_malloc_r+0xa8>
 800e01c:	4623      	mov	r3, r4
 800e01e:	6864      	ldr	r4, [r4, #4]
 800e020:	e7ae      	b.n	800df80 <_malloc_r+0x34>
 800e022:	463c      	mov	r4, r7
 800e024:	687f      	ldr	r7, [r7, #4]
 800e026:	e7b6      	b.n	800df96 <_malloc_r+0x4a>
 800e028:	461a      	mov	r2, r3
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	42a3      	cmp	r3, r4
 800e02e:	d1fb      	bne.n	800e028 <_malloc_r+0xdc>
 800e030:	2300      	movs	r3, #0
 800e032:	6053      	str	r3, [r2, #4]
 800e034:	e7de      	b.n	800dff4 <_malloc_r+0xa8>
 800e036:	230c      	movs	r3, #12
 800e038:	6033      	str	r3, [r6, #0]
 800e03a:	4630      	mov	r0, r6
 800e03c:	f000 f80c 	bl	800e058 <__malloc_unlock>
 800e040:	e794      	b.n	800df6c <_malloc_r+0x20>
 800e042:	6005      	str	r5, [r0, #0]
 800e044:	e7d6      	b.n	800dff4 <_malloc_r+0xa8>
 800e046:	bf00      	nop
 800e048:	20008528 	.word	0x20008528

0800e04c <__malloc_lock>:
 800e04c:	4801      	ldr	r0, [pc, #4]	@ (800e054 <__malloc_lock+0x8>)
 800e04e:	f7ff beda 	b.w	800de06 <__retarget_lock_acquire_recursive>
 800e052:	bf00      	nop
 800e054:	20008520 	.word	0x20008520

0800e058 <__malloc_unlock>:
 800e058:	4801      	ldr	r0, [pc, #4]	@ (800e060 <__malloc_unlock+0x8>)
 800e05a:	f7ff bed5 	b.w	800de08 <__retarget_lock_release_recursive>
 800e05e:	bf00      	nop
 800e060:	20008520 	.word	0x20008520

0800e064 <__sfputc_r>:
 800e064:	6893      	ldr	r3, [r2, #8]
 800e066:	3b01      	subs	r3, #1
 800e068:	2b00      	cmp	r3, #0
 800e06a:	b410      	push	{r4}
 800e06c:	6093      	str	r3, [r2, #8]
 800e06e:	da08      	bge.n	800e082 <__sfputc_r+0x1e>
 800e070:	6994      	ldr	r4, [r2, #24]
 800e072:	42a3      	cmp	r3, r4
 800e074:	db01      	blt.n	800e07a <__sfputc_r+0x16>
 800e076:	290a      	cmp	r1, #10
 800e078:	d103      	bne.n	800e082 <__sfputc_r+0x1e>
 800e07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e07e:	f000 bb7d 	b.w	800e77c <__swbuf_r>
 800e082:	6813      	ldr	r3, [r2, #0]
 800e084:	1c58      	adds	r0, r3, #1
 800e086:	6010      	str	r0, [r2, #0]
 800e088:	7019      	strb	r1, [r3, #0]
 800e08a:	4608      	mov	r0, r1
 800e08c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <__sfputs_r>:
 800e092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e094:	4606      	mov	r6, r0
 800e096:	460f      	mov	r7, r1
 800e098:	4614      	mov	r4, r2
 800e09a:	18d5      	adds	r5, r2, r3
 800e09c:	42ac      	cmp	r4, r5
 800e09e:	d101      	bne.n	800e0a4 <__sfputs_r+0x12>
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	e007      	b.n	800e0b4 <__sfputs_r+0x22>
 800e0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a8:	463a      	mov	r2, r7
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	f7ff ffda 	bl	800e064 <__sfputc_r>
 800e0b0:	1c43      	adds	r3, r0, #1
 800e0b2:	d1f3      	bne.n	800e09c <__sfputs_r+0xa>
 800e0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0b8 <_vfiprintf_r>:
 800e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	460d      	mov	r5, r1
 800e0be:	b09d      	sub	sp, #116	@ 0x74
 800e0c0:	4614      	mov	r4, r2
 800e0c2:	4698      	mov	r8, r3
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	b118      	cbz	r0, 800e0d0 <_vfiprintf_r+0x18>
 800e0c8:	6a03      	ldr	r3, [r0, #32]
 800e0ca:	b90b      	cbnz	r3, 800e0d0 <_vfiprintf_r+0x18>
 800e0cc:	f7ff fd8c 	bl	800dbe8 <__sinit>
 800e0d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0d2:	07d9      	lsls	r1, r3, #31
 800e0d4:	d405      	bmi.n	800e0e2 <_vfiprintf_r+0x2a>
 800e0d6:	89ab      	ldrh	r3, [r5, #12]
 800e0d8:	059a      	lsls	r2, r3, #22
 800e0da:	d402      	bmi.n	800e0e2 <_vfiprintf_r+0x2a>
 800e0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0de:	f7ff fe92 	bl	800de06 <__retarget_lock_acquire_recursive>
 800e0e2:	89ab      	ldrh	r3, [r5, #12]
 800e0e4:	071b      	lsls	r3, r3, #28
 800e0e6:	d501      	bpl.n	800e0ec <_vfiprintf_r+0x34>
 800e0e8:	692b      	ldr	r3, [r5, #16]
 800e0ea:	b99b      	cbnz	r3, 800e114 <_vfiprintf_r+0x5c>
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f000 fb82 	bl	800e7f8 <__swsetup_r>
 800e0f4:	b170      	cbz	r0, 800e114 <_vfiprintf_r+0x5c>
 800e0f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0f8:	07dc      	lsls	r4, r3, #31
 800e0fa:	d504      	bpl.n	800e106 <_vfiprintf_r+0x4e>
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	b01d      	add	sp, #116	@ 0x74
 800e102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e106:	89ab      	ldrh	r3, [r5, #12]
 800e108:	0598      	lsls	r0, r3, #22
 800e10a:	d4f7      	bmi.n	800e0fc <_vfiprintf_r+0x44>
 800e10c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e10e:	f7ff fe7b 	bl	800de08 <__retarget_lock_release_recursive>
 800e112:	e7f3      	b.n	800e0fc <_vfiprintf_r+0x44>
 800e114:	2300      	movs	r3, #0
 800e116:	9309      	str	r3, [sp, #36]	@ 0x24
 800e118:	2320      	movs	r3, #32
 800e11a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e11e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e122:	2330      	movs	r3, #48	@ 0x30
 800e124:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2d4 <_vfiprintf_r+0x21c>
 800e128:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e12c:	f04f 0901 	mov.w	r9, #1
 800e130:	4623      	mov	r3, r4
 800e132:	469a      	mov	sl, r3
 800e134:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e138:	b10a      	cbz	r2, 800e13e <_vfiprintf_r+0x86>
 800e13a:	2a25      	cmp	r2, #37	@ 0x25
 800e13c:	d1f9      	bne.n	800e132 <_vfiprintf_r+0x7a>
 800e13e:	ebba 0b04 	subs.w	fp, sl, r4
 800e142:	d00b      	beq.n	800e15c <_vfiprintf_r+0xa4>
 800e144:	465b      	mov	r3, fp
 800e146:	4622      	mov	r2, r4
 800e148:	4629      	mov	r1, r5
 800e14a:	4630      	mov	r0, r6
 800e14c:	f7ff ffa1 	bl	800e092 <__sfputs_r>
 800e150:	3001      	adds	r0, #1
 800e152:	f000 80a7 	beq.w	800e2a4 <_vfiprintf_r+0x1ec>
 800e156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e158:	445a      	add	r2, fp
 800e15a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e15c:	f89a 3000 	ldrb.w	r3, [sl]
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 809f 	beq.w	800e2a4 <_vfiprintf_r+0x1ec>
 800e166:	2300      	movs	r3, #0
 800e168:	f04f 32ff 	mov.w	r2, #4294967295
 800e16c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e170:	f10a 0a01 	add.w	sl, sl, #1
 800e174:	9304      	str	r3, [sp, #16]
 800e176:	9307      	str	r3, [sp, #28]
 800e178:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e17c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e17e:	4654      	mov	r4, sl
 800e180:	2205      	movs	r2, #5
 800e182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e186:	4853      	ldr	r0, [pc, #332]	@ (800e2d4 <_vfiprintf_r+0x21c>)
 800e188:	f7f2 f832 	bl	80001f0 <memchr>
 800e18c:	9a04      	ldr	r2, [sp, #16]
 800e18e:	b9d8      	cbnz	r0, 800e1c8 <_vfiprintf_r+0x110>
 800e190:	06d1      	lsls	r1, r2, #27
 800e192:	bf44      	itt	mi
 800e194:	2320      	movmi	r3, #32
 800e196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e19a:	0713      	lsls	r3, r2, #28
 800e19c:	bf44      	itt	mi
 800e19e:	232b      	movmi	r3, #43	@ 0x2b
 800e1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1aa:	d015      	beq.n	800e1d8 <_vfiprintf_r+0x120>
 800e1ac:	9a07      	ldr	r2, [sp, #28]
 800e1ae:	4654      	mov	r4, sl
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	f04f 0c0a 	mov.w	ip, #10
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1bc:	3b30      	subs	r3, #48	@ 0x30
 800e1be:	2b09      	cmp	r3, #9
 800e1c0:	d94b      	bls.n	800e25a <_vfiprintf_r+0x1a2>
 800e1c2:	b1b0      	cbz	r0, 800e1f2 <_vfiprintf_r+0x13a>
 800e1c4:	9207      	str	r2, [sp, #28]
 800e1c6:	e014      	b.n	800e1f2 <_vfiprintf_r+0x13a>
 800e1c8:	eba0 0308 	sub.w	r3, r0, r8
 800e1cc:	fa09 f303 	lsl.w	r3, r9, r3
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	9304      	str	r3, [sp, #16]
 800e1d4:	46a2      	mov	sl, r4
 800e1d6:	e7d2      	b.n	800e17e <_vfiprintf_r+0xc6>
 800e1d8:	9b03      	ldr	r3, [sp, #12]
 800e1da:	1d19      	adds	r1, r3, #4
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	9103      	str	r1, [sp, #12]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	bfbb      	ittet	lt
 800e1e4:	425b      	neglt	r3, r3
 800e1e6:	f042 0202 	orrlt.w	r2, r2, #2
 800e1ea:	9307      	strge	r3, [sp, #28]
 800e1ec:	9307      	strlt	r3, [sp, #28]
 800e1ee:	bfb8      	it	lt
 800e1f0:	9204      	strlt	r2, [sp, #16]
 800e1f2:	7823      	ldrb	r3, [r4, #0]
 800e1f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1f6:	d10a      	bne.n	800e20e <_vfiprintf_r+0x156>
 800e1f8:	7863      	ldrb	r3, [r4, #1]
 800e1fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1fc:	d132      	bne.n	800e264 <_vfiprintf_r+0x1ac>
 800e1fe:	9b03      	ldr	r3, [sp, #12]
 800e200:	1d1a      	adds	r2, r3, #4
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	9203      	str	r2, [sp, #12]
 800e206:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e20a:	3402      	adds	r4, #2
 800e20c:	9305      	str	r3, [sp, #20]
 800e20e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2e4 <_vfiprintf_r+0x22c>
 800e212:	7821      	ldrb	r1, [r4, #0]
 800e214:	2203      	movs	r2, #3
 800e216:	4650      	mov	r0, sl
 800e218:	f7f1 ffea 	bl	80001f0 <memchr>
 800e21c:	b138      	cbz	r0, 800e22e <_vfiprintf_r+0x176>
 800e21e:	9b04      	ldr	r3, [sp, #16]
 800e220:	eba0 000a 	sub.w	r0, r0, sl
 800e224:	2240      	movs	r2, #64	@ 0x40
 800e226:	4082      	lsls	r2, r0
 800e228:	4313      	orrs	r3, r2
 800e22a:	3401      	adds	r4, #1
 800e22c:	9304      	str	r3, [sp, #16]
 800e22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e232:	4829      	ldr	r0, [pc, #164]	@ (800e2d8 <_vfiprintf_r+0x220>)
 800e234:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e238:	2206      	movs	r2, #6
 800e23a:	f7f1 ffd9 	bl	80001f0 <memchr>
 800e23e:	2800      	cmp	r0, #0
 800e240:	d03f      	beq.n	800e2c2 <_vfiprintf_r+0x20a>
 800e242:	4b26      	ldr	r3, [pc, #152]	@ (800e2dc <_vfiprintf_r+0x224>)
 800e244:	bb1b      	cbnz	r3, 800e28e <_vfiprintf_r+0x1d6>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	3307      	adds	r3, #7
 800e24a:	f023 0307 	bic.w	r3, r3, #7
 800e24e:	3308      	adds	r3, #8
 800e250:	9303      	str	r3, [sp, #12]
 800e252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e254:	443b      	add	r3, r7
 800e256:	9309      	str	r3, [sp, #36]	@ 0x24
 800e258:	e76a      	b.n	800e130 <_vfiprintf_r+0x78>
 800e25a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e25e:	460c      	mov	r4, r1
 800e260:	2001      	movs	r0, #1
 800e262:	e7a8      	b.n	800e1b6 <_vfiprintf_r+0xfe>
 800e264:	2300      	movs	r3, #0
 800e266:	3401      	adds	r4, #1
 800e268:	9305      	str	r3, [sp, #20]
 800e26a:	4619      	mov	r1, r3
 800e26c:	f04f 0c0a 	mov.w	ip, #10
 800e270:	4620      	mov	r0, r4
 800e272:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e276:	3a30      	subs	r2, #48	@ 0x30
 800e278:	2a09      	cmp	r2, #9
 800e27a:	d903      	bls.n	800e284 <_vfiprintf_r+0x1cc>
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0c6      	beq.n	800e20e <_vfiprintf_r+0x156>
 800e280:	9105      	str	r1, [sp, #20]
 800e282:	e7c4      	b.n	800e20e <_vfiprintf_r+0x156>
 800e284:	fb0c 2101 	mla	r1, ip, r1, r2
 800e288:	4604      	mov	r4, r0
 800e28a:	2301      	movs	r3, #1
 800e28c:	e7f0      	b.n	800e270 <_vfiprintf_r+0x1b8>
 800e28e:	ab03      	add	r3, sp, #12
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	462a      	mov	r2, r5
 800e294:	4b12      	ldr	r3, [pc, #72]	@ (800e2e0 <_vfiprintf_r+0x228>)
 800e296:	a904      	add	r1, sp, #16
 800e298:	4630      	mov	r0, r6
 800e29a:	f3af 8000 	nop.w
 800e29e:	4607      	mov	r7, r0
 800e2a0:	1c78      	adds	r0, r7, #1
 800e2a2:	d1d6      	bne.n	800e252 <_vfiprintf_r+0x19a>
 800e2a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2a6:	07d9      	lsls	r1, r3, #31
 800e2a8:	d405      	bmi.n	800e2b6 <_vfiprintf_r+0x1fe>
 800e2aa:	89ab      	ldrh	r3, [r5, #12]
 800e2ac:	059a      	lsls	r2, r3, #22
 800e2ae:	d402      	bmi.n	800e2b6 <_vfiprintf_r+0x1fe>
 800e2b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2b2:	f7ff fda9 	bl	800de08 <__retarget_lock_release_recursive>
 800e2b6:	89ab      	ldrh	r3, [r5, #12]
 800e2b8:	065b      	lsls	r3, r3, #25
 800e2ba:	f53f af1f 	bmi.w	800e0fc <_vfiprintf_r+0x44>
 800e2be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2c0:	e71e      	b.n	800e100 <_vfiprintf_r+0x48>
 800e2c2:	ab03      	add	r3, sp, #12
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	462a      	mov	r2, r5
 800e2c8:	4b05      	ldr	r3, [pc, #20]	@ (800e2e0 <_vfiprintf_r+0x228>)
 800e2ca:	a904      	add	r1, sp, #16
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f000 f879 	bl	800e3c4 <_printf_i>
 800e2d2:	e7e4      	b.n	800e29e <_vfiprintf_r+0x1e6>
 800e2d4:	0801160d 	.word	0x0801160d
 800e2d8:	08011617 	.word	0x08011617
 800e2dc:	00000000 	.word	0x00000000
 800e2e0:	0800e093 	.word	0x0800e093
 800e2e4:	08011613 	.word	0x08011613

0800e2e8 <_printf_common>:
 800e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	4616      	mov	r6, r2
 800e2ee:	4698      	mov	r8, r3
 800e2f0:	688a      	ldr	r2, [r1, #8]
 800e2f2:	690b      	ldr	r3, [r1, #16]
 800e2f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	bfb8      	it	lt
 800e2fc:	4613      	movlt	r3, r2
 800e2fe:	6033      	str	r3, [r6, #0]
 800e300:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e304:	4607      	mov	r7, r0
 800e306:	460c      	mov	r4, r1
 800e308:	b10a      	cbz	r2, 800e30e <_printf_common+0x26>
 800e30a:	3301      	adds	r3, #1
 800e30c:	6033      	str	r3, [r6, #0]
 800e30e:	6823      	ldr	r3, [r4, #0]
 800e310:	0699      	lsls	r1, r3, #26
 800e312:	bf42      	ittt	mi
 800e314:	6833      	ldrmi	r3, [r6, #0]
 800e316:	3302      	addmi	r3, #2
 800e318:	6033      	strmi	r3, [r6, #0]
 800e31a:	6825      	ldr	r5, [r4, #0]
 800e31c:	f015 0506 	ands.w	r5, r5, #6
 800e320:	d106      	bne.n	800e330 <_printf_common+0x48>
 800e322:	f104 0a19 	add.w	sl, r4, #25
 800e326:	68e3      	ldr	r3, [r4, #12]
 800e328:	6832      	ldr	r2, [r6, #0]
 800e32a:	1a9b      	subs	r3, r3, r2
 800e32c:	42ab      	cmp	r3, r5
 800e32e:	dc26      	bgt.n	800e37e <_printf_common+0x96>
 800e330:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e334:	6822      	ldr	r2, [r4, #0]
 800e336:	3b00      	subs	r3, #0
 800e338:	bf18      	it	ne
 800e33a:	2301      	movne	r3, #1
 800e33c:	0692      	lsls	r2, r2, #26
 800e33e:	d42b      	bmi.n	800e398 <_printf_common+0xb0>
 800e340:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e344:	4641      	mov	r1, r8
 800e346:	4638      	mov	r0, r7
 800e348:	47c8      	blx	r9
 800e34a:	3001      	adds	r0, #1
 800e34c:	d01e      	beq.n	800e38c <_printf_common+0xa4>
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	6922      	ldr	r2, [r4, #16]
 800e352:	f003 0306 	and.w	r3, r3, #6
 800e356:	2b04      	cmp	r3, #4
 800e358:	bf02      	ittt	eq
 800e35a:	68e5      	ldreq	r5, [r4, #12]
 800e35c:	6833      	ldreq	r3, [r6, #0]
 800e35e:	1aed      	subeq	r5, r5, r3
 800e360:	68a3      	ldr	r3, [r4, #8]
 800e362:	bf0c      	ite	eq
 800e364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e368:	2500      	movne	r5, #0
 800e36a:	4293      	cmp	r3, r2
 800e36c:	bfc4      	itt	gt
 800e36e:	1a9b      	subgt	r3, r3, r2
 800e370:	18ed      	addgt	r5, r5, r3
 800e372:	2600      	movs	r6, #0
 800e374:	341a      	adds	r4, #26
 800e376:	42b5      	cmp	r5, r6
 800e378:	d11a      	bne.n	800e3b0 <_printf_common+0xc8>
 800e37a:	2000      	movs	r0, #0
 800e37c:	e008      	b.n	800e390 <_printf_common+0xa8>
 800e37e:	2301      	movs	r3, #1
 800e380:	4652      	mov	r2, sl
 800e382:	4641      	mov	r1, r8
 800e384:	4638      	mov	r0, r7
 800e386:	47c8      	blx	r9
 800e388:	3001      	adds	r0, #1
 800e38a:	d103      	bne.n	800e394 <_printf_common+0xac>
 800e38c:	f04f 30ff 	mov.w	r0, #4294967295
 800e390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e394:	3501      	adds	r5, #1
 800e396:	e7c6      	b.n	800e326 <_printf_common+0x3e>
 800e398:	18e1      	adds	r1, r4, r3
 800e39a:	1c5a      	adds	r2, r3, #1
 800e39c:	2030      	movs	r0, #48	@ 0x30
 800e39e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e3a2:	4422      	add	r2, r4
 800e3a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e3a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e3ac:	3302      	adds	r3, #2
 800e3ae:	e7c7      	b.n	800e340 <_printf_common+0x58>
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	4622      	mov	r2, r4
 800e3b4:	4641      	mov	r1, r8
 800e3b6:	4638      	mov	r0, r7
 800e3b8:	47c8      	blx	r9
 800e3ba:	3001      	adds	r0, #1
 800e3bc:	d0e6      	beq.n	800e38c <_printf_common+0xa4>
 800e3be:	3601      	adds	r6, #1
 800e3c0:	e7d9      	b.n	800e376 <_printf_common+0x8e>
	...

0800e3c4 <_printf_i>:
 800e3c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c8:	7e0f      	ldrb	r7, [r1, #24]
 800e3ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e3cc:	2f78      	cmp	r7, #120	@ 0x78
 800e3ce:	4691      	mov	r9, r2
 800e3d0:	4680      	mov	r8, r0
 800e3d2:	460c      	mov	r4, r1
 800e3d4:	469a      	mov	sl, r3
 800e3d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e3da:	d807      	bhi.n	800e3ec <_printf_i+0x28>
 800e3dc:	2f62      	cmp	r7, #98	@ 0x62
 800e3de:	d80a      	bhi.n	800e3f6 <_printf_i+0x32>
 800e3e0:	2f00      	cmp	r7, #0
 800e3e2:	f000 80d1 	beq.w	800e588 <_printf_i+0x1c4>
 800e3e6:	2f58      	cmp	r7, #88	@ 0x58
 800e3e8:	f000 80b8 	beq.w	800e55c <_printf_i+0x198>
 800e3ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3f4:	e03a      	b.n	800e46c <_printf_i+0xa8>
 800e3f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3fa:	2b15      	cmp	r3, #21
 800e3fc:	d8f6      	bhi.n	800e3ec <_printf_i+0x28>
 800e3fe:	a101      	add	r1, pc, #4	@ (adr r1, 800e404 <_printf_i+0x40>)
 800e400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e404:	0800e45d 	.word	0x0800e45d
 800e408:	0800e471 	.word	0x0800e471
 800e40c:	0800e3ed 	.word	0x0800e3ed
 800e410:	0800e3ed 	.word	0x0800e3ed
 800e414:	0800e3ed 	.word	0x0800e3ed
 800e418:	0800e3ed 	.word	0x0800e3ed
 800e41c:	0800e471 	.word	0x0800e471
 800e420:	0800e3ed 	.word	0x0800e3ed
 800e424:	0800e3ed 	.word	0x0800e3ed
 800e428:	0800e3ed 	.word	0x0800e3ed
 800e42c:	0800e3ed 	.word	0x0800e3ed
 800e430:	0800e56f 	.word	0x0800e56f
 800e434:	0800e49b 	.word	0x0800e49b
 800e438:	0800e529 	.word	0x0800e529
 800e43c:	0800e3ed 	.word	0x0800e3ed
 800e440:	0800e3ed 	.word	0x0800e3ed
 800e444:	0800e591 	.word	0x0800e591
 800e448:	0800e3ed 	.word	0x0800e3ed
 800e44c:	0800e49b 	.word	0x0800e49b
 800e450:	0800e3ed 	.word	0x0800e3ed
 800e454:	0800e3ed 	.word	0x0800e3ed
 800e458:	0800e531 	.word	0x0800e531
 800e45c:	6833      	ldr	r3, [r6, #0]
 800e45e:	1d1a      	adds	r2, r3, #4
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	6032      	str	r2, [r6, #0]
 800e464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e468:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e46c:	2301      	movs	r3, #1
 800e46e:	e09c      	b.n	800e5aa <_printf_i+0x1e6>
 800e470:	6833      	ldr	r3, [r6, #0]
 800e472:	6820      	ldr	r0, [r4, #0]
 800e474:	1d19      	adds	r1, r3, #4
 800e476:	6031      	str	r1, [r6, #0]
 800e478:	0606      	lsls	r6, r0, #24
 800e47a:	d501      	bpl.n	800e480 <_printf_i+0xbc>
 800e47c:	681d      	ldr	r5, [r3, #0]
 800e47e:	e003      	b.n	800e488 <_printf_i+0xc4>
 800e480:	0645      	lsls	r5, r0, #25
 800e482:	d5fb      	bpl.n	800e47c <_printf_i+0xb8>
 800e484:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e488:	2d00      	cmp	r5, #0
 800e48a:	da03      	bge.n	800e494 <_printf_i+0xd0>
 800e48c:	232d      	movs	r3, #45	@ 0x2d
 800e48e:	426d      	negs	r5, r5
 800e490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e494:	4858      	ldr	r0, [pc, #352]	@ (800e5f8 <_printf_i+0x234>)
 800e496:	230a      	movs	r3, #10
 800e498:	e011      	b.n	800e4be <_printf_i+0xfa>
 800e49a:	6821      	ldr	r1, [r4, #0]
 800e49c:	6833      	ldr	r3, [r6, #0]
 800e49e:	0608      	lsls	r0, r1, #24
 800e4a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e4a4:	d402      	bmi.n	800e4ac <_printf_i+0xe8>
 800e4a6:	0649      	lsls	r1, r1, #25
 800e4a8:	bf48      	it	mi
 800e4aa:	b2ad      	uxthmi	r5, r5
 800e4ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800e4ae:	4852      	ldr	r0, [pc, #328]	@ (800e5f8 <_printf_i+0x234>)
 800e4b0:	6033      	str	r3, [r6, #0]
 800e4b2:	bf14      	ite	ne
 800e4b4:	230a      	movne	r3, #10
 800e4b6:	2308      	moveq	r3, #8
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e4be:	6866      	ldr	r6, [r4, #4]
 800e4c0:	60a6      	str	r6, [r4, #8]
 800e4c2:	2e00      	cmp	r6, #0
 800e4c4:	db05      	blt.n	800e4d2 <_printf_i+0x10e>
 800e4c6:	6821      	ldr	r1, [r4, #0]
 800e4c8:	432e      	orrs	r6, r5
 800e4ca:	f021 0104 	bic.w	r1, r1, #4
 800e4ce:	6021      	str	r1, [r4, #0]
 800e4d0:	d04b      	beq.n	800e56a <_printf_i+0x1a6>
 800e4d2:	4616      	mov	r6, r2
 800e4d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e4d8:	fb03 5711 	mls	r7, r3, r1, r5
 800e4dc:	5dc7      	ldrb	r7, [r0, r7]
 800e4de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4e2:	462f      	mov	r7, r5
 800e4e4:	42bb      	cmp	r3, r7
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	d9f4      	bls.n	800e4d4 <_printf_i+0x110>
 800e4ea:	2b08      	cmp	r3, #8
 800e4ec:	d10b      	bne.n	800e506 <_printf_i+0x142>
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	07df      	lsls	r7, r3, #31
 800e4f2:	d508      	bpl.n	800e506 <_printf_i+0x142>
 800e4f4:	6923      	ldr	r3, [r4, #16]
 800e4f6:	6861      	ldr	r1, [r4, #4]
 800e4f8:	4299      	cmp	r1, r3
 800e4fa:	bfde      	ittt	le
 800e4fc:	2330      	movle	r3, #48	@ 0x30
 800e4fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e502:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e506:	1b92      	subs	r2, r2, r6
 800e508:	6122      	str	r2, [r4, #16]
 800e50a:	f8cd a000 	str.w	sl, [sp]
 800e50e:	464b      	mov	r3, r9
 800e510:	aa03      	add	r2, sp, #12
 800e512:	4621      	mov	r1, r4
 800e514:	4640      	mov	r0, r8
 800e516:	f7ff fee7 	bl	800e2e8 <_printf_common>
 800e51a:	3001      	adds	r0, #1
 800e51c:	d14a      	bne.n	800e5b4 <_printf_i+0x1f0>
 800e51e:	f04f 30ff 	mov.w	r0, #4294967295
 800e522:	b004      	add	sp, #16
 800e524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e528:	6823      	ldr	r3, [r4, #0]
 800e52a:	f043 0320 	orr.w	r3, r3, #32
 800e52e:	6023      	str	r3, [r4, #0]
 800e530:	4832      	ldr	r0, [pc, #200]	@ (800e5fc <_printf_i+0x238>)
 800e532:	2778      	movs	r7, #120	@ 0x78
 800e534:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e538:	6823      	ldr	r3, [r4, #0]
 800e53a:	6831      	ldr	r1, [r6, #0]
 800e53c:	061f      	lsls	r7, r3, #24
 800e53e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e542:	d402      	bmi.n	800e54a <_printf_i+0x186>
 800e544:	065f      	lsls	r7, r3, #25
 800e546:	bf48      	it	mi
 800e548:	b2ad      	uxthmi	r5, r5
 800e54a:	6031      	str	r1, [r6, #0]
 800e54c:	07d9      	lsls	r1, r3, #31
 800e54e:	bf44      	itt	mi
 800e550:	f043 0320 	orrmi.w	r3, r3, #32
 800e554:	6023      	strmi	r3, [r4, #0]
 800e556:	b11d      	cbz	r5, 800e560 <_printf_i+0x19c>
 800e558:	2310      	movs	r3, #16
 800e55a:	e7ad      	b.n	800e4b8 <_printf_i+0xf4>
 800e55c:	4826      	ldr	r0, [pc, #152]	@ (800e5f8 <_printf_i+0x234>)
 800e55e:	e7e9      	b.n	800e534 <_printf_i+0x170>
 800e560:	6823      	ldr	r3, [r4, #0]
 800e562:	f023 0320 	bic.w	r3, r3, #32
 800e566:	6023      	str	r3, [r4, #0]
 800e568:	e7f6      	b.n	800e558 <_printf_i+0x194>
 800e56a:	4616      	mov	r6, r2
 800e56c:	e7bd      	b.n	800e4ea <_printf_i+0x126>
 800e56e:	6833      	ldr	r3, [r6, #0]
 800e570:	6825      	ldr	r5, [r4, #0]
 800e572:	6961      	ldr	r1, [r4, #20]
 800e574:	1d18      	adds	r0, r3, #4
 800e576:	6030      	str	r0, [r6, #0]
 800e578:	062e      	lsls	r6, r5, #24
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	d501      	bpl.n	800e582 <_printf_i+0x1be>
 800e57e:	6019      	str	r1, [r3, #0]
 800e580:	e002      	b.n	800e588 <_printf_i+0x1c4>
 800e582:	0668      	lsls	r0, r5, #25
 800e584:	d5fb      	bpl.n	800e57e <_printf_i+0x1ba>
 800e586:	8019      	strh	r1, [r3, #0]
 800e588:	2300      	movs	r3, #0
 800e58a:	6123      	str	r3, [r4, #16]
 800e58c:	4616      	mov	r6, r2
 800e58e:	e7bc      	b.n	800e50a <_printf_i+0x146>
 800e590:	6833      	ldr	r3, [r6, #0]
 800e592:	1d1a      	adds	r2, r3, #4
 800e594:	6032      	str	r2, [r6, #0]
 800e596:	681e      	ldr	r6, [r3, #0]
 800e598:	6862      	ldr	r2, [r4, #4]
 800e59a:	2100      	movs	r1, #0
 800e59c:	4630      	mov	r0, r6
 800e59e:	f7f1 fe27 	bl	80001f0 <memchr>
 800e5a2:	b108      	cbz	r0, 800e5a8 <_printf_i+0x1e4>
 800e5a4:	1b80      	subs	r0, r0, r6
 800e5a6:	6060      	str	r0, [r4, #4]
 800e5a8:	6863      	ldr	r3, [r4, #4]
 800e5aa:	6123      	str	r3, [r4, #16]
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5b2:	e7aa      	b.n	800e50a <_printf_i+0x146>
 800e5b4:	6923      	ldr	r3, [r4, #16]
 800e5b6:	4632      	mov	r2, r6
 800e5b8:	4649      	mov	r1, r9
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	47d0      	blx	sl
 800e5be:	3001      	adds	r0, #1
 800e5c0:	d0ad      	beq.n	800e51e <_printf_i+0x15a>
 800e5c2:	6823      	ldr	r3, [r4, #0]
 800e5c4:	079b      	lsls	r3, r3, #30
 800e5c6:	d413      	bmi.n	800e5f0 <_printf_i+0x22c>
 800e5c8:	68e0      	ldr	r0, [r4, #12]
 800e5ca:	9b03      	ldr	r3, [sp, #12]
 800e5cc:	4298      	cmp	r0, r3
 800e5ce:	bfb8      	it	lt
 800e5d0:	4618      	movlt	r0, r3
 800e5d2:	e7a6      	b.n	800e522 <_printf_i+0x15e>
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	4632      	mov	r2, r6
 800e5d8:	4649      	mov	r1, r9
 800e5da:	4640      	mov	r0, r8
 800e5dc:	47d0      	blx	sl
 800e5de:	3001      	adds	r0, #1
 800e5e0:	d09d      	beq.n	800e51e <_printf_i+0x15a>
 800e5e2:	3501      	adds	r5, #1
 800e5e4:	68e3      	ldr	r3, [r4, #12]
 800e5e6:	9903      	ldr	r1, [sp, #12]
 800e5e8:	1a5b      	subs	r3, r3, r1
 800e5ea:	42ab      	cmp	r3, r5
 800e5ec:	dcf2      	bgt.n	800e5d4 <_printf_i+0x210>
 800e5ee:	e7eb      	b.n	800e5c8 <_printf_i+0x204>
 800e5f0:	2500      	movs	r5, #0
 800e5f2:	f104 0619 	add.w	r6, r4, #25
 800e5f6:	e7f5      	b.n	800e5e4 <_printf_i+0x220>
 800e5f8:	0801161e 	.word	0x0801161e
 800e5fc:	0801162f 	.word	0x0801162f

0800e600 <__sflush_r>:
 800e600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e608:	0716      	lsls	r6, r2, #28
 800e60a:	4605      	mov	r5, r0
 800e60c:	460c      	mov	r4, r1
 800e60e:	d454      	bmi.n	800e6ba <__sflush_r+0xba>
 800e610:	684b      	ldr	r3, [r1, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	dc02      	bgt.n	800e61c <__sflush_r+0x1c>
 800e616:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e618:	2b00      	cmp	r3, #0
 800e61a:	dd48      	ble.n	800e6ae <__sflush_r+0xae>
 800e61c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e61e:	2e00      	cmp	r6, #0
 800e620:	d045      	beq.n	800e6ae <__sflush_r+0xae>
 800e622:	2300      	movs	r3, #0
 800e624:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e628:	682f      	ldr	r7, [r5, #0]
 800e62a:	6a21      	ldr	r1, [r4, #32]
 800e62c:	602b      	str	r3, [r5, #0]
 800e62e:	d030      	beq.n	800e692 <__sflush_r+0x92>
 800e630:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e632:	89a3      	ldrh	r3, [r4, #12]
 800e634:	0759      	lsls	r1, r3, #29
 800e636:	d505      	bpl.n	800e644 <__sflush_r+0x44>
 800e638:	6863      	ldr	r3, [r4, #4]
 800e63a:	1ad2      	subs	r2, r2, r3
 800e63c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e63e:	b10b      	cbz	r3, 800e644 <__sflush_r+0x44>
 800e640:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e642:	1ad2      	subs	r2, r2, r3
 800e644:	2300      	movs	r3, #0
 800e646:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e648:	6a21      	ldr	r1, [r4, #32]
 800e64a:	4628      	mov	r0, r5
 800e64c:	47b0      	blx	r6
 800e64e:	1c43      	adds	r3, r0, #1
 800e650:	89a3      	ldrh	r3, [r4, #12]
 800e652:	d106      	bne.n	800e662 <__sflush_r+0x62>
 800e654:	6829      	ldr	r1, [r5, #0]
 800e656:	291d      	cmp	r1, #29
 800e658:	d82b      	bhi.n	800e6b2 <__sflush_r+0xb2>
 800e65a:	4a2a      	ldr	r2, [pc, #168]	@ (800e704 <__sflush_r+0x104>)
 800e65c:	40ca      	lsrs	r2, r1
 800e65e:	07d6      	lsls	r6, r2, #31
 800e660:	d527      	bpl.n	800e6b2 <__sflush_r+0xb2>
 800e662:	2200      	movs	r2, #0
 800e664:	6062      	str	r2, [r4, #4]
 800e666:	04d9      	lsls	r1, r3, #19
 800e668:	6922      	ldr	r2, [r4, #16]
 800e66a:	6022      	str	r2, [r4, #0]
 800e66c:	d504      	bpl.n	800e678 <__sflush_r+0x78>
 800e66e:	1c42      	adds	r2, r0, #1
 800e670:	d101      	bne.n	800e676 <__sflush_r+0x76>
 800e672:	682b      	ldr	r3, [r5, #0]
 800e674:	b903      	cbnz	r3, 800e678 <__sflush_r+0x78>
 800e676:	6560      	str	r0, [r4, #84]	@ 0x54
 800e678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e67a:	602f      	str	r7, [r5, #0]
 800e67c:	b1b9      	cbz	r1, 800e6ae <__sflush_r+0xae>
 800e67e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e682:	4299      	cmp	r1, r3
 800e684:	d002      	beq.n	800e68c <__sflush_r+0x8c>
 800e686:	4628      	mov	r0, r5
 800e688:	f7ff fbec 	bl	800de64 <_free_r>
 800e68c:	2300      	movs	r3, #0
 800e68e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e690:	e00d      	b.n	800e6ae <__sflush_r+0xae>
 800e692:	2301      	movs	r3, #1
 800e694:	4628      	mov	r0, r5
 800e696:	47b0      	blx	r6
 800e698:	4602      	mov	r2, r0
 800e69a:	1c50      	adds	r0, r2, #1
 800e69c:	d1c9      	bne.n	800e632 <__sflush_r+0x32>
 800e69e:	682b      	ldr	r3, [r5, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d0c6      	beq.n	800e632 <__sflush_r+0x32>
 800e6a4:	2b1d      	cmp	r3, #29
 800e6a6:	d001      	beq.n	800e6ac <__sflush_r+0xac>
 800e6a8:	2b16      	cmp	r3, #22
 800e6aa:	d11e      	bne.n	800e6ea <__sflush_r+0xea>
 800e6ac:	602f      	str	r7, [r5, #0]
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	e022      	b.n	800e6f8 <__sflush_r+0xf8>
 800e6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6b6:	b21b      	sxth	r3, r3
 800e6b8:	e01b      	b.n	800e6f2 <__sflush_r+0xf2>
 800e6ba:	690f      	ldr	r7, [r1, #16]
 800e6bc:	2f00      	cmp	r7, #0
 800e6be:	d0f6      	beq.n	800e6ae <__sflush_r+0xae>
 800e6c0:	0793      	lsls	r3, r2, #30
 800e6c2:	680e      	ldr	r6, [r1, #0]
 800e6c4:	bf08      	it	eq
 800e6c6:	694b      	ldreq	r3, [r1, #20]
 800e6c8:	600f      	str	r7, [r1, #0]
 800e6ca:	bf18      	it	ne
 800e6cc:	2300      	movne	r3, #0
 800e6ce:	eba6 0807 	sub.w	r8, r6, r7
 800e6d2:	608b      	str	r3, [r1, #8]
 800e6d4:	f1b8 0f00 	cmp.w	r8, #0
 800e6d8:	dde9      	ble.n	800e6ae <__sflush_r+0xae>
 800e6da:	6a21      	ldr	r1, [r4, #32]
 800e6dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6de:	4643      	mov	r3, r8
 800e6e0:	463a      	mov	r2, r7
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	47b0      	blx	r6
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	dc08      	bgt.n	800e6fc <__sflush_r+0xfc>
 800e6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6f2:	81a3      	strh	r3, [r4, #12]
 800e6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6fc:	4407      	add	r7, r0
 800e6fe:	eba8 0800 	sub.w	r8, r8, r0
 800e702:	e7e7      	b.n	800e6d4 <__sflush_r+0xd4>
 800e704:	20400001 	.word	0x20400001

0800e708 <_fflush_r>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	690b      	ldr	r3, [r1, #16]
 800e70c:	4605      	mov	r5, r0
 800e70e:	460c      	mov	r4, r1
 800e710:	b913      	cbnz	r3, 800e718 <_fflush_r+0x10>
 800e712:	2500      	movs	r5, #0
 800e714:	4628      	mov	r0, r5
 800e716:	bd38      	pop	{r3, r4, r5, pc}
 800e718:	b118      	cbz	r0, 800e722 <_fflush_r+0x1a>
 800e71a:	6a03      	ldr	r3, [r0, #32]
 800e71c:	b90b      	cbnz	r3, 800e722 <_fflush_r+0x1a>
 800e71e:	f7ff fa63 	bl	800dbe8 <__sinit>
 800e722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d0f3      	beq.n	800e712 <_fflush_r+0xa>
 800e72a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e72c:	07d0      	lsls	r0, r2, #31
 800e72e:	d404      	bmi.n	800e73a <_fflush_r+0x32>
 800e730:	0599      	lsls	r1, r3, #22
 800e732:	d402      	bmi.n	800e73a <_fflush_r+0x32>
 800e734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e736:	f7ff fb66 	bl	800de06 <__retarget_lock_acquire_recursive>
 800e73a:	4628      	mov	r0, r5
 800e73c:	4621      	mov	r1, r4
 800e73e:	f7ff ff5f 	bl	800e600 <__sflush_r>
 800e742:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e744:	07da      	lsls	r2, r3, #31
 800e746:	4605      	mov	r5, r0
 800e748:	d4e4      	bmi.n	800e714 <_fflush_r+0xc>
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	059b      	lsls	r3, r3, #22
 800e74e:	d4e1      	bmi.n	800e714 <_fflush_r+0xc>
 800e750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e752:	f7ff fb59 	bl	800de08 <__retarget_lock_release_recursive>
 800e756:	e7dd      	b.n	800e714 <_fflush_r+0xc>

0800e758 <fiprintf>:
 800e758:	b40e      	push	{r1, r2, r3}
 800e75a:	b503      	push	{r0, r1, lr}
 800e75c:	4601      	mov	r1, r0
 800e75e:	ab03      	add	r3, sp, #12
 800e760:	4805      	ldr	r0, [pc, #20]	@ (800e778 <fiprintf+0x20>)
 800e762:	f853 2b04 	ldr.w	r2, [r3], #4
 800e766:	6800      	ldr	r0, [r0, #0]
 800e768:	9301      	str	r3, [sp, #4]
 800e76a:	f7ff fca5 	bl	800e0b8 <_vfiprintf_r>
 800e76e:	b002      	add	sp, #8
 800e770:	f85d eb04 	ldr.w	lr, [sp], #4
 800e774:	b003      	add	sp, #12
 800e776:	4770      	bx	lr
 800e778:	20000038 	.word	0x20000038

0800e77c <__swbuf_r>:
 800e77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77e:	460e      	mov	r6, r1
 800e780:	4614      	mov	r4, r2
 800e782:	4605      	mov	r5, r0
 800e784:	b118      	cbz	r0, 800e78e <__swbuf_r+0x12>
 800e786:	6a03      	ldr	r3, [r0, #32]
 800e788:	b90b      	cbnz	r3, 800e78e <__swbuf_r+0x12>
 800e78a:	f7ff fa2d 	bl	800dbe8 <__sinit>
 800e78e:	69a3      	ldr	r3, [r4, #24]
 800e790:	60a3      	str	r3, [r4, #8]
 800e792:	89a3      	ldrh	r3, [r4, #12]
 800e794:	071a      	lsls	r2, r3, #28
 800e796:	d501      	bpl.n	800e79c <__swbuf_r+0x20>
 800e798:	6923      	ldr	r3, [r4, #16]
 800e79a:	b943      	cbnz	r3, 800e7ae <__swbuf_r+0x32>
 800e79c:	4621      	mov	r1, r4
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f000 f82a 	bl	800e7f8 <__swsetup_r>
 800e7a4:	b118      	cbz	r0, 800e7ae <__swbuf_r+0x32>
 800e7a6:	f04f 37ff 	mov.w	r7, #4294967295
 800e7aa:	4638      	mov	r0, r7
 800e7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	6922      	ldr	r2, [r4, #16]
 800e7b2:	1a98      	subs	r0, r3, r2
 800e7b4:	6963      	ldr	r3, [r4, #20]
 800e7b6:	b2f6      	uxtb	r6, r6
 800e7b8:	4283      	cmp	r3, r0
 800e7ba:	4637      	mov	r7, r6
 800e7bc:	dc05      	bgt.n	800e7ca <__swbuf_r+0x4e>
 800e7be:	4621      	mov	r1, r4
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	f7ff ffa1 	bl	800e708 <_fflush_r>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d1ed      	bne.n	800e7a6 <__swbuf_r+0x2a>
 800e7ca:	68a3      	ldr	r3, [r4, #8]
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	60a3      	str	r3, [r4, #8]
 800e7d0:	6823      	ldr	r3, [r4, #0]
 800e7d2:	1c5a      	adds	r2, r3, #1
 800e7d4:	6022      	str	r2, [r4, #0]
 800e7d6:	701e      	strb	r6, [r3, #0]
 800e7d8:	6962      	ldr	r2, [r4, #20]
 800e7da:	1c43      	adds	r3, r0, #1
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d004      	beq.n	800e7ea <__swbuf_r+0x6e>
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	07db      	lsls	r3, r3, #31
 800e7e4:	d5e1      	bpl.n	800e7aa <__swbuf_r+0x2e>
 800e7e6:	2e0a      	cmp	r6, #10
 800e7e8:	d1df      	bne.n	800e7aa <__swbuf_r+0x2e>
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	f7ff ff8b 	bl	800e708 <_fflush_r>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	d0d9      	beq.n	800e7aa <__swbuf_r+0x2e>
 800e7f6:	e7d6      	b.n	800e7a6 <__swbuf_r+0x2a>

0800e7f8 <__swsetup_r>:
 800e7f8:	b538      	push	{r3, r4, r5, lr}
 800e7fa:	4b29      	ldr	r3, [pc, #164]	@ (800e8a0 <__swsetup_r+0xa8>)
 800e7fc:	4605      	mov	r5, r0
 800e7fe:	6818      	ldr	r0, [r3, #0]
 800e800:	460c      	mov	r4, r1
 800e802:	b118      	cbz	r0, 800e80c <__swsetup_r+0x14>
 800e804:	6a03      	ldr	r3, [r0, #32]
 800e806:	b90b      	cbnz	r3, 800e80c <__swsetup_r+0x14>
 800e808:	f7ff f9ee 	bl	800dbe8 <__sinit>
 800e80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e810:	0719      	lsls	r1, r3, #28
 800e812:	d422      	bmi.n	800e85a <__swsetup_r+0x62>
 800e814:	06da      	lsls	r2, r3, #27
 800e816:	d407      	bmi.n	800e828 <__swsetup_r+0x30>
 800e818:	2209      	movs	r2, #9
 800e81a:	602a      	str	r2, [r5, #0]
 800e81c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e820:	81a3      	strh	r3, [r4, #12]
 800e822:	f04f 30ff 	mov.w	r0, #4294967295
 800e826:	e033      	b.n	800e890 <__swsetup_r+0x98>
 800e828:	0758      	lsls	r0, r3, #29
 800e82a:	d512      	bpl.n	800e852 <__swsetup_r+0x5a>
 800e82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e82e:	b141      	cbz	r1, 800e842 <__swsetup_r+0x4a>
 800e830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e834:	4299      	cmp	r1, r3
 800e836:	d002      	beq.n	800e83e <__swsetup_r+0x46>
 800e838:	4628      	mov	r0, r5
 800e83a:	f7ff fb13 	bl	800de64 <_free_r>
 800e83e:	2300      	movs	r3, #0
 800e840:	6363      	str	r3, [r4, #52]	@ 0x34
 800e842:	89a3      	ldrh	r3, [r4, #12]
 800e844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e848:	81a3      	strh	r3, [r4, #12]
 800e84a:	2300      	movs	r3, #0
 800e84c:	6063      	str	r3, [r4, #4]
 800e84e:	6923      	ldr	r3, [r4, #16]
 800e850:	6023      	str	r3, [r4, #0]
 800e852:	89a3      	ldrh	r3, [r4, #12]
 800e854:	f043 0308 	orr.w	r3, r3, #8
 800e858:	81a3      	strh	r3, [r4, #12]
 800e85a:	6923      	ldr	r3, [r4, #16]
 800e85c:	b94b      	cbnz	r3, 800e872 <__swsetup_r+0x7a>
 800e85e:	89a3      	ldrh	r3, [r4, #12]
 800e860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e868:	d003      	beq.n	800e872 <__swsetup_r+0x7a>
 800e86a:	4621      	mov	r1, r4
 800e86c:	4628      	mov	r0, r5
 800e86e:	f000 f856 	bl	800e91e <__smakebuf_r>
 800e872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e876:	f013 0201 	ands.w	r2, r3, #1
 800e87a:	d00a      	beq.n	800e892 <__swsetup_r+0x9a>
 800e87c:	2200      	movs	r2, #0
 800e87e:	60a2      	str	r2, [r4, #8]
 800e880:	6962      	ldr	r2, [r4, #20]
 800e882:	4252      	negs	r2, r2
 800e884:	61a2      	str	r2, [r4, #24]
 800e886:	6922      	ldr	r2, [r4, #16]
 800e888:	b942      	cbnz	r2, 800e89c <__swsetup_r+0xa4>
 800e88a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e88e:	d1c5      	bne.n	800e81c <__swsetup_r+0x24>
 800e890:	bd38      	pop	{r3, r4, r5, pc}
 800e892:	0799      	lsls	r1, r3, #30
 800e894:	bf58      	it	pl
 800e896:	6962      	ldrpl	r2, [r4, #20]
 800e898:	60a2      	str	r2, [r4, #8]
 800e89a:	e7f4      	b.n	800e886 <__swsetup_r+0x8e>
 800e89c:	2000      	movs	r0, #0
 800e89e:	e7f7      	b.n	800e890 <__swsetup_r+0x98>
 800e8a0:	20000038 	.word	0x20000038

0800e8a4 <_sbrk_r>:
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4d06      	ldr	r5, [pc, #24]	@ (800e8c0 <_sbrk_r+0x1c>)
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	4608      	mov	r0, r1
 800e8ae:	602b      	str	r3, [r5, #0]
 800e8b0:	f7f2 f93a 	bl	8000b28 <_sbrk>
 800e8b4:	1c43      	adds	r3, r0, #1
 800e8b6:	d102      	bne.n	800e8be <_sbrk_r+0x1a>
 800e8b8:	682b      	ldr	r3, [r5, #0]
 800e8ba:	b103      	cbz	r3, 800e8be <_sbrk_r+0x1a>
 800e8bc:	6023      	str	r3, [r4, #0]
 800e8be:	bd38      	pop	{r3, r4, r5, pc}
 800e8c0:	2000851c 	.word	0x2000851c

0800e8c4 <abort>:
 800e8c4:	b508      	push	{r3, lr}
 800e8c6:	2006      	movs	r0, #6
 800e8c8:	f000 f88e 	bl	800e9e8 <raise>
 800e8cc:	2001      	movs	r0, #1
 800e8ce:	f7f2 f8b3 	bl	8000a38 <_exit>

0800e8d2 <__swhatbuf_r>:
 800e8d2:	b570      	push	{r4, r5, r6, lr}
 800e8d4:	460c      	mov	r4, r1
 800e8d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8da:	2900      	cmp	r1, #0
 800e8dc:	b096      	sub	sp, #88	@ 0x58
 800e8de:	4615      	mov	r5, r2
 800e8e0:	461e      	mov	r6, r3
 800e8e2:	da0d      	bge.n	800e900 <__swhatbuf_r+0x2e>
 800e8e4:	89a3      	ldrh	r3, [r4, #12]
 800e8e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8ea:	f04f 0100 	mov.w	r1, #0
 800e8ee:	bf14      	ite	ne
 800e8f0:	2340      	movne	r3, #64	@ 0x40
 800e8f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	6031      	str	r1, [r6, #0]
 800e8fa:	602b      	str	r3, [r5, #0]
 800e8fc:	b016      	add	sp, #88	@ 0x58
 800e8fe:	bd70      	pop	{r4, r5, r6, pc}
 800e900:	466a      	mov	r2, sp
 800e902:	f000 f879 	bl	800e9f8 <_fstat_r>
 800e906:	2800      	cmp	r0, #0
 800e908:	dbec      	blt.n	800e8e4 <__swhatbuf_r+0x12>
 800e90a:	9901      	ldr	r1, [sp, #4]
 800e90c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e910:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e914:	4259      	negs	r1, r3
 800e916:	4159      	adcs	r1, r3
 800e918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e91c:	e7eb      	b.n	800e8f6 <__swhatbuf_r+0x24>

0800e91e <__smakebuf_r>:
 800e91e:	898b      	ldrh	r3, [r1, #12]
 800e920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e922:	079d      	lsls	r5, r3, #30
 800e924:	4606      	mov	r6, r0
 800e926:	460c      	mov	r4, r1
 800e928:	d507      	bpl.n	800e93a <__smakebuf_r+0x1c>
 800e92a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e92e:	6023      	str	r3, [r4, #0]
 800e930:	6123      	str	r3, [r4, #16]
 800e932:	2301      	movs	r3, #1
 800e934:	6163      	str	r3, [r4, #20]
 800e936:	b003      	add	sp, #12
 800e938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e93a:	ab01      	add	r3, sp, #4
 800e93c:	466a      	mov	r2, sp
 800e93e:	f7ff ffc8 	bl	800e8d2 <__swhatbuf_r>
 800e942:	9f00      	ldr	r7, [sp, #0]
 800e944:	4605      	mov	r5, r0
 800e946:	4639      	mov	r1, r7
 800e948:	4630      	mov	r0, r6
 800e94a:	f7ff faff 	bl	800df4c <_malloc_r>
 800e94e:	b948      	cbnz	r0, 800e964 <__smakebuf_r+0x46>
 800e950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e954:	059a      	lsls	r2, r3, #22
 800e956:	d4ee      	bmi.n	800e936 <__smakebuf_r+0x18>
 800e958:	f023 0303 	bic.w	r3, r3, #3
 800e95c:	f043 0302 	orr.w	r3, r3, #2
 800e960:	81a3      	strh	r3, [r4, #12]
 800e962:	e7e2      	b.n	800e92a <__smakebuf_r+0xc>
 800e964:	89a3      	ldrh	r3, [r4, #12]
 800e966:	6020      	str	r0, [r4, #0]
 800e968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e96c:	81a3      	strh	r3, [r4, #12]
 800e96e:	9b01      	ldr	r3, [sp, #4]
 800e970:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e974:	b15b      	cbz	r3, 800e98e <__smakebuf_r+0x70>
 800e976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e97a:	4630      	mov	r0, r6
 800e97c:	f000 f84e 	bl	800ea1c <_isatty_r>
 800e980:	b128      	cbz	r0, 800e98e <__smakebuf_r+0x70>
 800e982:	89a3      	ldrh	r3, [r4, #12]
 800e984:	f023 0303 	bic.w	r3, r3, #3
 800e988:	f043 0301 	orr.w	r3, r3, #1
 800e98c:	81a3      	strh	r3, [r4, #12]
 800e98e:	89a3      	ldrh	r3, [r4, #12]
 800e990:	431d      	orrs	r5, r3
 800e992:	81a5      	strh	r5, [r4, #12]
 800e994:	e7cf      	b.n	800e936 <__smakebuf_r+0x18>

0800e996 <_raise_r>:
 800e996:	291f      	cmp	r1, #31
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4605      	mov	r5, r0
 800e99c:	460c      	mov	r4, r1
 800e99e:	d904      	bls.n	800e9aa <_raise_r+0x14>
 800e9a0:	2316      	movs	r3, #22
 800e9a2:	6003      	str	r3, [r0, #0]
 800e9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a8:	bd38      	pop	{r3, r4, r5, pc}
 800e9aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e9ac:	b112      	cbz	r2, 800e9b4 <_raise_r+0x1e>
 800e9ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9b2:	b94b      	cbnz	r3, 800e9c8 <_raise_r+0x32>
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	f000 f853 	bl	800ea60 <_getpid_r>
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	4601      	mov	r1, r0
 800e9be:	4628      	mov	r0, r5
 800e9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9c4:	f000 b83a 	b.w	800ea3c <_kill_r>
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d00a      	beq.n	800e9e2 <_raise_r+0x4c>
 800e9cc:	1c59      	adds	r1, r3, #1
 800e9ce:	d103      	bne.n	800e9d8 <_raise_r+0x42>
 800e9d0:	2316      	movs	r3, #22
 800e9d2:	6003      	str	r3, [r0, #0]
 800e9d4:	2001      	movs	r0, #1
 800e9d6:	e7e7      	b.n	800e9a8 <_raise_r+0x12>
 800e9d8:	2100      	movs	r1, #0
 800e9da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9de:	4620      	mov	r0, r4
 800e9e0:	4798      	blx	r3
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	e7e0      	b.n	800e9a8 <_raise_r+0x12>
	...

0800e9e8 <raise>:
 800e9e8:	4b02      	ldr	r3, [pc, #8]	@ (800e9f4 <raise+0xc>)
 800e9ea:	4601      	mov	r1, r0
 800e9ec:	6818      	ldr	r0, [r3, #0]
 800e9ee:	f7ff bfd2 	b.w	800e996 <_raise_r>
 800e9f2:	bf00      	nop
 800e9f4:	20000038 	.word	0x20000038

0800e9f8 <_fstat_r>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4d07      	ldr	r5, [pc, #28]	@ (800ea18 <_fstat_r+0x20>)
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	4604      	mov	r4, r0
 800ea00:	4608      	mov	r0, r1
 800ea02:	4611      	mov	r1, r2
 800ea04:	602b      	str	r3, [r5, #0]
 800ea06:	f7f2 f867 	bl	8000ad8 <_fstat>
 800ea0a:	1c43      	adds	r3, r0, #1
 800ea0c:	d102      	bne.n	800ea14 <_fstat_r+0x1c>
 800ea0e:	682b      	ldr	r3, [r5, #0]
 800ea10:	b103      	cbz	r3, 800ea14 <_fstat_r+0x1c>
 800ea12:	6023      	str	r3, [r4, #0]
 800ea14:	bd38      	pop	{r3, r4, r5, pc}
 800ea16:	bf00      	nop
 800ea18:	2000851c 	.word	0x2000851c

0800ea1c <_isatty_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	4d06      	ldr	r5, [pc, #24]	@ (800ea38 <_isatty_r+0x1c>)
 800ea20:	2300      	movs	r3, #0
 800ea22:	4604      	mov	r4, r0
 800ea24:	4608      	mov	r0, r1
 800ea26:	602b      	str	r3, [r5, #0]
 800ea28:	f7f2 f866 	bl	8000af8 <_isatty>
 800ea2c:	1c43      	adds	r3, r0, #1
 800ea2e:	d102      	bne.n	800ea36 <_isatty_r+0x1a>
 800ea30:	682b      	ldr	r3, [r5, #0]
 800ea32:	b103      	cbz	r3, 800ea36 <_isatty_r+0x1a>
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	bd38      	pop	{r3, r4, r5, pc}
 800ea38:	2000851c 	.word	0x2000851c

0800ea3c <_kill_r>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	4d07      	ldr	r5, [pc, #28]	@ (800ea5c <_kill_r+0x20>)
 800ea40:	2300      	movs	r3, #0
 800ea42:	4604      	mov	r4, r0
 800ea44:	4608      	mov	r0, r1
 800ea46:	4611      	mov	r1, r2
 800ea48:	602b      	str	r3, [r5, #0]
 800ea4a:	f7f1 ffe3 	bl	8000a14 <_kill>
 800ea4e:	1c43      	adds	r3, r0, #1
 800ea50:	d102      	bne.n	800ea58 <_kill_r+0x1c>
 800ea52:	682b      	ldr	r3, [r5, #0]
 800ea54:	b103      	cbz	r3, 800ea58 <_kill_r+0x1c>
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	bd38      	pop	{r3, r4, r5, pc}
 800ea5a:	bf00      	nop
 800ea5c:	2000851c 	.word	0x2000851c

0800ea60 <_getpid_r>:
 800ea60:	f7f1 bfcf 	b.w	8000a02 <_getpid>

0800ea64 <_init>:
 800ea64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea66:	bf00      	nop
 800ea68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea6a:	bc08      	pop	{r3}
 800ea6c:	469e      	mov	lr, r3
 800ea6e:	4770      	bx	lr

0800ea70 <_fini>:
 800ea70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea72:	bf00      	nop
 800ea74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea76:	bc08      	pop	{r3}
 800ea78:	469e      	mov	lr, r3
 800ea7a:	4770      	bx	lr
